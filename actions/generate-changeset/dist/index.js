import require$$0$1, { promises } from "fs";
import require$$0$3, { join } from "path";
import require$$0 from "os";
import crypto from "crypto";
import http$1 from "http";
import require$$3$1 from "https";
import "net";
import require$$1$2 from "tls";
import require$$2$2 from "events";
import require$$0$4 from "assert";
import require$$0$2 from "util";
import require$$0$5 from "string_decoder";
import require$$1$3 from "child_process";
import require$$6 from "timers";
import Stream from "stream";
import Url, { fileURLToPath } from "url";
import require$$0$6 from "punycode";
import zlib from "zlib";
import require$$0$7 from "constants";
import proc from "process";
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function getAugmentedNamespace(n) {
  if (n.__esModule)
    return n;
  var f = n.default;
  if (typeof f == "function") {
    var a = function a2() {
      if (this instanceof a2) {
        return Reflect.construct(f, arguments, this.constructor);
      }
      return f.apply(this, arguments);
    };
    a.prototype = f.prototype;
  } else
    a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var core$3 = {};
var command = {};
var utils$f = {};
Object.defineProperty(utils$f, "__esModule", { value: true });
utils$f.toCommandProperties = utils$f.toCommandValue = void 0;
function toCommandValue(input) {
  if (input === null || input === void 0) {
    return "";
  } else if (typeof input === "string" || input instanceof String) {
    return input;
  }
  return JSON.stringify(input);
}
utils$f.toCommandValue = toCommandValue;
function toCommandProperties(annotationProperties) {
  if (!Object.keys(annotationProperties).length) {
    return {};
  }
  return {
    title: annotationProperties.title,
    file: annotationProperties.file,
    line: annotationProperties.startLine,
    endLine: annotationProperties.endLine,
    col: annotationProperties.startColumn,
    endColumn: annotationProperties.endColumn
  };
}
utils$f.toCommandProperties = toCommandProperties;
var __createBinding$6 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  Object.defineProperty(o, k2, { enumerable: true, get: function() {
    return m[k];
  } });
} : function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault$6 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function(o, v) {
  o["default"] = v;
});
var __importStar$6 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.hasOwnProperty.call(mod, k))
        __createBinding$6(result, mod, k);
  }
  __setModuleDefault$6(result, mod);
  return result;
};
Object.defineProperty(command, "__esModule", { value: true });
command.issue = command.issueCommand = void 0;
const os$2 = __importStar$6(require$$0);
const utils_1$2 = utils$f;
function issueCommand(command2, properties, message) {
  const cmd = new Command(command2, properties, message);
  process.stdout.write(cmd.toString() + os$2.EOL);
}
command.issueCommand = issueCommand;
function issue(name, message = "") {
  issueCommand(name, {}, message);
}
command.issue = issue;
const CMD_STRING = "::";
class Command {
  constructor(command2, properties, message) {
    if (!command2) {
      command2 = "missing.command";
    }
    this.command = command2;
    this.properties = properties;
    this.message = message;
  }
  toString() {
    let cmdStr = CMD_STRING + this.command;
    if (this.properties && Object.keys(this.properties).length > 0) {
      cmdStr += " ";
      let first = true;
      for (const key in this.properties) {
        if (this.properties.hasOwnProperty(key)) {
          const val = this.properties[key];
          if (val) {
            if (first) {
              first = false;
            } else {
              cmdStr += ",";
            }
            cmdStr += `${key}=${escapeProperty(val)}`;
          }
        }
      }
    }
    cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
    return cmdStr;
  }
}
function escapeData(s) {
  return utils_1$2.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
}
function escapeProperty(s) {
  return utils_1$2.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
}
var fileCommand = {};
const rnds8Pool = new Uint8Array(256);
let poolPtr = rnds8Pool.length;
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    crypto.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
const REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function validate(uuid) {
  return typeof uuid === "string" && REGEX.test(uuid);
}
const byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).substr(1));
}
function stringify$6(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
let _nodeId;
let _clockseq;
let _lastMSecs = 0;
let _lastNSecs = 0;
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node2 = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node2 == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node2 == null) {
      node2 = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node2[n];
  }
  return buf || stringify$6(b);
}
function parse$9(uuid) {
  if (!validate(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
function stringToBytes(str2) {
  str2 = unescape(encodeURIComponent(str2));
  const bytes = [];
  for (let i = 0; i < str2.length; ++i) {
    bytes.push(str2.charCodeAt(i));
  }
  return bytes;
}
const DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
const URL$3 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(name, version2, hashfunc) {
  function generateUUID(value2, namespace, buf, offset) {
    if (typeof value2 === "string") {
      value2 = stringToBytes(value2);
    }
    if (typeof namespace === "string") {
      namespace = parse$9(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value2.length);
    bytes.set(namespace);
    bytes.set(value2, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify$6(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL$3;
  return generateUUID;
}
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return crypto.createHash("md5").update(bytes).digest();
}
const v3 = v35("v3", 48, md5);
const v3$1 = v3;
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify$6(rnds);
}
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return crypto.createHash("sha1").update(bytes).digest();
}
const v5 = v35("v5", 80, sha1);
const v5$1 = v5;
const nil = "00000000-0000-0000-0000-000000000000";
function version(uuid) {
  if (!validate(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
const esmNode = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  NIL: nil,
  parse: parse$9,
  stringify: stringify$6,
  v1,
  v3: v3$1,
  v4,
  v5: v5$1,
  validate,
  version
}, Symbol.toStringTag, { value: "Module" }));
const require$$2$1 = /* @__PURE__ */ getAugmentedNamespace(esmNode);
var __createBinding$5 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  Object.defineProperty(o, k2, { enumerable: true, get: function() {
    return m[k];
  } });
} : function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault$5 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function(o, v) {
  o["default"] = v;
});
var __importStar$5 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.hasOwnProperty.call(mod, k))
        __createBinding$5(result, mod, k);
  }
  __setModuleDefault$5(result, mod);
  return result;
};
Object.defineProperty(fileCommand, "__esModule", { value: true });
fileCommand.prepareKeyValueMessage = fileCommand.issueFileCommand = void 0;
const fs$9 = __importStar$5(require$$0$1);
const os$1 = __importStar$5(require$$0);
const uuid_1 = require$$2$1;
const utils_1$1 = utils$f;
function issueFileCommand(command2, message) {
  const filePath = process.env[`GITHUB_${command2}`];
  if (!filePath) {
    throw new Error(`Unable to find environment variable for file command ${command2}`);
  }
  if (!fs$9.existsSync(filePath)) {
    throw new Error(`Missing file at path: ${filePath}`);
  }
  fs$9.appendFileSync(filePath, `${utils_1$1.toCommandValue(message)}${os$1.EOL}`, {
    encoding: "utf8"
  });
}
fileCommand.issueFileCommand = issueFileCommand;
function prepareKeyValueMessage(key, value2) {
  const delimiter = `ghadelimiter_${uuid_1.v4()}`;
  const convertedValue = utils_1$1.toCommandValue(value2);
  if (key.includes(delimiter)) {
    throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
  }
  if (convertedValue.includes(delimiter)) {
    throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
  }
  return `${key}<<${delimiter}${os$1.EOL}${convertedValue}${os$1.EOL}${delimiter}`;
}
fileCommand.prepareKeyValueMessage = prepareKeyValueMessage;
var oidcUtils = {};
var lib$2 = {};
var proxy = {};
Object.defineProperty(proxy, "__esModule", { value: true });
proxy.checkBypass = proxy.getProxyUrl = void 0;
function getProxyUrl(reqUrl) {
  const usingSsl = reqUrl.protocol === "https:";
  if (checkBypass(reqUrl)) {
    return void 0;
  }
  const proxyVar = (() => {
    if (usingSsl) {
      return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
    } else {
      return process.env["http_proxy"] || process.env["HTTP_PROXY"];
    }
  })();
  if (proxyVar) {
    return new URL(proxyVar);
  } else {
    return void 0;
  }
}
proxy.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
  if (!reqUrl.hostname) {
    return false;
  }
  const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
  if (!noProxy) {
    return false;
  }
  let reqPort;
  if (reqUrl.port) {
    reqPort = Number(reqUrl.port);
  } else if (reqUrl.protocol === "http:") {
    reqPort = 80;
  } else if (reqUrl.protocol === "https:") {
    reqPort = 443;
  }
  const upperReqHosts = [reqUrl.hostname.toUpperCase()];
  if (typeof reqPort === "number") {
    upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
  }
  for (const upperNoProxyItem of noProxy.split(",").map((x) => x.trim().toUpperCase()).filter((x) => x)) {
    if (upperReqHosts.some((x) => x === upperNoProxyItem)) {
      return true;
    }
  }
  return false;
}
proxy.checkBypass = checkBypass;
var tunnel$1 = {};
var tls = require$$1$2;
var http = http$1;
var https = require$$3$1;
var events$1 = require$$2$2;
var util$3 = require$$0$2;
tunnel$1.httpOverHttp = httpOverHttp;
tunnel$1.httpsOverHttp = httpsOverHttp;
tunnel$1.httpOverHttps = httpOverHttps;
tunnel$1.httpsOverHttps = httpsOverHttps;
function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}
function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}
function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}
function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}
function TunnelingAgent(options) {
  var self2 = this;
  self2.options = options || {};
  self2.proxyOptions = self2.options.proxy || {};
  self2.maxSockets = self2.options.maxSockets || http.Agent.defaultMaxSockets;
  self2.requests = [];
  self2.sockets = [];
  self2.on("free", function onFree(socket, host, port, localAddress) {
    var options2 = toOptions(host, port, localAddress);
    for (var i = 0, len = self2.requests.length; i < len; ++i) {
      var pending = self2.requests[i];
      if (pending.host === options2.host && pending.port === options2.port) {
        self2.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self2.removeSocket(socket);
  });
}
util$3.inherits(TunnelingAgent, events$1.EventEmitter);
TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self2 = this;
  var options = mergeOptions({ request: req }, self2.options, toOptions(host, port, localAddress));
  if (self2.sockets.length >= this.maxSockets) {
    self2.requests.push(options);
    return;
  }
  self2.createSocket(options, function(socket) {
    socket.on("free", onFree);
    socket.on("close", onCloseOrRemove);
    socket.on("agentRemove", onCloseOrRemove);
    req.onSocket(socket);
    function onFree() {
      self2.emit("free", socket, options);
    }
    function onCloseOrRemove(err) {
      self2.removeSocket(socket);
      socket.removeListener("free", onFree);
      socket.removeListener("close", onCloseOrRemove);
      socket.removeListener("agentRemove", onCloseOrRemove);
    }
  });
};
TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self2 = this;
  var placeholder = {};
  self2.sockets.push(placeholder);
  var connectOptions = mergeOptions({}, self2.proxyOptions, {
    method: "CONNECT",
    path: options.host + ":" + options.port,
    agent: false,
    headers: {
      host: options.host + ":" + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
  }
  debug("making CONNECT request");
  var connectReq = self2.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false;
  connectReq.once("response", onResponse);
  connectReq.once("upgrade", onUpgrade);
  connectReq.once("connect", onConnect);
  connectReq.once("error", onError);
  connectReq.end();
  function onResponse(res) {
    res.upgrade = true;
  }
  function onUpgrade(res, socket, head) {
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }
  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();
    if (res.statusCode !== 200) {
      debug(
        "tunneling socket could not be established, statusCode=%d",
        res.statusCode
      );
      socket.destroy();
      var error2 = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
      error2.code = "ECONNRESET";
      options.request.emit("error", error2);
      self2.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug("got illegal response body from proxy");
      socket.destroy();
      var error2 = new Error("got illegal response body from proxy");
      error2.code = "ECONNRESET";
      options.request.emit("error", error2);
      self2.removeSocket(placeholder);
      return;
    }
    debug("tunneling connection has established");
    self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }
  function onError(cause) {
    connectReq.removeAllListeners();
    debug(
      "tunneling socket could not be established, cause=%s\n",
      cause.message,
      cause.stack
    );
    var error2 = new Error("tunneling socket could not be established, cause=" + cause.message);
    error2.code = "ECONNRESET";
    options.request.emit("error", error2);
    self2.removeSocket(placeholder);
  }
};
TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket);
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);
  var pending = this.requests.shift();
  if (pending) {
    this.createSocket(pending, function(socket2) {
      pending.request.onSocket(socket2);
    });
  }
};
function createSecureSocket(options, cb) {
  var self2 = this;
  TunnelingAgent.prototype.createSocket.call(self2, options, function(socket) {
    var hostHeader = options.request.getHeader("host");
    var tlsOptions = mergeOptions({}, self2.options, {
      socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
    });
    var secureSocket = tls.connect(0, tlsOptions);
    self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}
function toOptions(host, port, localAddress) {
  if (typeof host === "string") {
    return {
      host,
      port,
      localAddress
    };
  }
  return host;
}
function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === "object") {
      var keys2 = Object.keys(overrides);
      for (var j = 0, keyLen = keys2.length; j < keyLen; ++j) {
        var k = keys2[j];
        if (overrides[k] !== void 0) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}
var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === "string") {
      args[0] = "TUNNEL: " + args[0];
    } else {
      args.unshift("TUNNEL:");
    }
    console.error.apply(console, args);
  };
} else {
  debug = function() {
  };
}
tunnel$1.debug = debug;
var tunnel = tunnel$1;
(function(exports) {
  var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault2 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar2 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding2(result, mod, k);
    }
    __setModuleDefault2(result, mod);
    return result;
  };
  var __awaiter2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value2) {
      return value2 instanceof P ? value2 : new P(function(resolve) {
        resolve(value2);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value2) {
        try {
          step(generator.next(value2));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value2) {
        try {
          step(generator["throw"](value2));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
  const http2 = __importStar2(http$1);
  const https2 = __importStar2(require$$3$1);
  const pm = __importStar2(proxy);
  const tunnel$12 = __importStar2(tunnel);
  var HttpCodes;
  (function(HttpCodes2) {
    HttpCodes2[HttpCodes2["OK"] = 200] = "OK";
    HttpCodes2[HttpCodes2["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes2[HttpCodes2["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes2[HttpCodes2["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes2[HttpCodes2["SeeOther"] = 303] = "SeeOther";
    HttpCodes2[HttpCodes2["NotModified"] = 304] = "NotModified";
    HttpCodes2[HttpCodes2["UseProxy"] = 305] = "UseProxy";
    HttpCodes2[HttpCodes2["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes2[HttpCodes2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes2[HttpCodes2["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes2[HttpCodes2["BadRequest"] = 400] = "BadRequest";
    HttpCodes2[HttpCodes2["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes2[HttpCodes2["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes2[HttpCodes2["Forbidden"] = 403] = "Forbidden";
    HttpCodes2[HttpCodes2["NotFound"] = 404] = "NotFound";
    HttpCodes2[HttpCodes2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes2[HttpCodes2["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes2[HttpCodes2["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes2[HttpCodes2["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes2[HttpCodes2["Conflict"] = 409] = "Conflict";
    HttpCodes2[HttpCodes2["Gone"] = 410] = "Gone";
    HttpCodes2[HttpCodes2["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes2[HttpCodes2["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes2[HttpCodes2["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes2[HttpCodes2["BadGateway"] = 502] = "BadGateway";
    HttpCodes2[HttpCodes2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes2[HttpCodes2["GatewayTimeout"] = 504] = "GatewayTimeout";
  })(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
  var Headers2;
  (function(Headers3) {
    Headers3["Accept"] = "accept";
    Headers3["ContentType"] = "content-type";
  })(Headers2 = exports.Headers || (exports.Headers = {}));
  var MediaTypes;
  (function(MediaTypes2) {
    MediaTypes2["ApplicationJson"] = "application/json";
  })(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
  function getProxyUrl2(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : "";
  }
  exports.getProxyUrl = getProxyUrl2;
  const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
  ];
  const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
  ];
  const RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"];
  const ExponentialBackoffCeiling = 10;
  const ExponentialBackoffTimeSlice = 5;
  class HttpClientError extends Error {
    constructor(message, statusCode) {
      super(message);
      this.name = "HttpClientError";
      this.statusCode = statusCode;
      Object.setPrototypeOf(this, HttpClientError.prototype);
    }
  }
  exports.HttpClientError = HttpClientError;
  class HttpClientResponse {
    constructor(message) {
      this.message = message;
    }
    readBody() {
      return __awaiter2(this, void 0, void 0, function* () {
        return new Promise((resolve) => __awaiter2(this, void 0, void 0, function* () {
          let output2 = Buffer.alloc(0);
          this.message.on("data", (chunk) => {
            output2 = Buffer.concat([output2, chunk]);
          });
          this.message.on("end", () => {
            resolve(output2.toString());
          });
        }));
      });
    }
  }
  exports.HttpClientResponse = HttpClientResponse;
  function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === "https:";
  }
  exports.isHttps = isHttps;
  class HttpClient {
    constructor(userAgent2, handlers, requestOptions) {
      this._ignoreSslError = false;
      this._allowRedirects = true;
      this._allowRedirectDowngrade = false;
      this._maxRedirects = 50;
      this._allowRetries = false;
      this._maxRetries = 1;
      this._keepAlive = false;
      this._disposed = false;
      this.userAgent = userAgent2;
      this.handlers = handlers || [];
      this.requestOptions = requestOptions;
      if (requestOptions) {
        if (requestOptions.ignoreSslError != null) {
          this._ignoreSslError = requestOptions.ignoreSslError;
        }
        this._socketTimeout = requestOptions.socketTimeout;
        if (requestOptions.allowRedirects != null) {
          this._allowRedirects = requestOptions.allowRedirects;
        }
        if (requestOptions.allowRedirectDowngrade != null) {
          this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
        }
        if (requestOptions.maxRedirects != null) {
          this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
        }
        if (requestOptions.keepAlive != null) {
          this._keepAlive = requestOptions.keepAlive;
        }
        if (requestOptions.allowRetries != null) {
          this._allowRetries = requestOptions.allowRetries;
        }
        if (requestOptions.maxRetries != null) {
          this._maxRetries = requestOptions.maxRetries;
        }
      }
    }
    options(requestUrl, additionalHeaders) {
      return __awaiter2(this, void 0, void 0, function* () {
        return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
      });
    }
    get(requestUrl, additionalHeaders) {
      return __awaiter2(this, void 0, void 0, function* () {
        return this.request("GET", requestUrl, null, additionalHeaders || {});
      });
    }
    del(requestUrl, additionalHeaders) {
      return __awaiter2(this, void 0, void 0, function* () {
        return this.request("DELETE", requestUrl, null, additionalHeaders || {});
      });
    }
    post(requestUrl, data, additionalHeaders) {
      return __awaiter2(this, void 0, void 0, function* () {
        return this.request("POST", requestUrl, data, additionalHeaders || {});
      });
    }
    patch(requestUrl, data, additionalHeaders) {
      return __awaiter2(this, void 0, void 0, function* () {
        return this.request("PATCH", requestUrl, data, additionalHeaders || {});
      });
    }
    put(requestUrl, data, additionalHeaders) {
      return __awaiter2(this, void 0, void 0, function* () {
        return this.request("PUT", requestUrl, data, additionalHeaders || {});
      });
    }
    head(requestUrl, additionalHeaders) {
      return __awaiter2(this, void 0, void 0, function* () {
        return this.request("HEAD", requestUrl, null, additionalHeaders || {});
      });
    }
    sendStream(verb, requestUrl, stream2, additionalHeaders) {
      return __awaiter2(this, void 0, void 0, function* () {
        return this.request(verb, requestUrl, stream2, additionalHeaders);
      });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(requestUrl, additionalHeaders = {}) {
      return __awaiter2(this, void 0, void 0, function* () {
        additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
        const res = yield this.get(requestUrl, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
      return __awaiter2(this, void 0, void 0, function* () {
        const data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.ContentType, MediaTypes.ApplicationJson);
        const res = yield this.post(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
      return __awaiter2(this, void 0, void 0, function* () {
        const data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.ContentType, MediaTypes.ApplicationJson);
        const res = yield this.put(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
      return __awaiter2(this, void 0, void 0, function* () {
        const data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers2.ContentType, MediaTypes.ApplicationJson);
        const res = yield this.patch(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
      });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(verb, requestUrl, data, headers) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (this._disposed) {
          throw new Error("Client has already been disposed.");
        }
        const parsedUrl = new URL(requestUrl);
        let info = this._prepareRequest(verb, parsedUrl, headers);
        const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
        let numTries = 0;
        let response;
        do {
          response = yield this.requestRaw(info, data);
          if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
            let authenticationHandler;
            for (const handler2 of this.handlers) {
              if (handler2.canHandleAuthentication(response)) {
                authenticationHandler = handler2;
                break;
              }
            }
            if (authenticationHandler) {
              return authenticationHandler.handleAuthentication(this, info, data);
            } else {
              return response;
            }
          }
          let redirectsRemaining = this._maxRedirects;
          while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
            const redirectUrl = response.message.headers["location"];
            if (!redirectUrl) {
              break;
            }
            const parsedRedirectUrl = new URL(redirectUrl);
            if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) {
              throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
            }
            yield response.readBody();
            if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
              for (const header in headers) {
                if (header.toLowerCase() === "authorization") {
                  delete headers[header];
                }
              }
            }
            info = this._prepareRequest(verb, parsedRedirectUrl, headers);
            response = yield this.requestRaw(info, data);
            redirectsRemaining--;
          }
          if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) {
            return response;
          }
          numTries += 1;
          if (numTries < maxTries) {
            yield response.readBody();
            yield this._performExponentialBackoff(numTries);
          }
        } while (numTries < maxTries);
        return response;
      });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
      if (this._agent) {
        this._agent.destroy();
      }
      this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
      return __awaiter2(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
          function callbackForResult(err, res) {
            if (err) {
              reject(err);
            } else if (!res) {
              reject(new Error("Unknown error"));
            } else {
              resolve(res);
            }
          }
          this.requestRawWithCallback(info, data, callbackForResult);
        });
      });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
      if (typeof data === "string") {
        if (!info.options.headers) {
          info.options.headers = {};
        }
        info.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
      }
      let callbackCalled = false;
      function handleResult(err, res) {
        if (!callbackCalled) {
          callbackCalled = true;
          onResult(err, res);
        }
      }
      const req = info.httpModule.request(info.options, (msg) => {
        const res = new HttpClientResponse(msg);
        handleResult(void 0, res);
      });
      let socket;
      req.on("socket", (sock) => {
        socket = sock;
      });
      req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
        if (socket) {
          socket.end();
        }
        handleResult(new Error(`Request timeout: ${info.options.path}`));
      });
      req.on("error", function(err) {
        handleResult(err);
      });
      if (data && typeof data === "string") {
        req.write(data, "utf8");
      }
      if (data && typeof data !== "string") {
        data.on("close", function() {
          req.end();
        });
        data.pipe(req);
      } else {
        req.end();
      }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
      const parsedUrl = new URL(serverUrl);
      return this._getAgent(parsedUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
      const info = {};
      info.parsedUrl = requestUrl;
      const usingSsl = info.parsedUrl.protocol === "https:";
      info.httpModule = usingSsl ? https2 : http2;
      const defaultPort = usingSsl ? 443 : 80;
      info.options = {};
      info.options.host = info.parsedUrl.hostname;
      info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort;
      info.options.path = (info.parsedUrl.pathname || "") + (info.parsedUrl.search || "");
      info.options.method = method;
      info.options.headers = this._mergeHeaders(headers);
      if (this.userAgent != null) {
        info.options.headers["user-agent"] = this.userAgent;
      }
      info.options.agent = this._getAgent(info.parsedUrl);
      if (this.handlers) {
        for (const handler2 of this.handlers) {
          handler2.prepareRequest(info.options);
        }
      }
      return info;
    }
    _mergeHeaders(headers) {
      if (this.requestOptions && this.requestOptions.headers) {
        return Object.assign({}, lowercaseKeys2(this.requestOptions.headers), lowercaseKeys2(headers || {}));
      }
      return lowercaseKeys2(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default2) {
      let clientHeader;
      if (this.requestOptions && this.requestOptions.headers) {
        clientHeader = lowercaseKeys2(this.requestOptions.headers)[header];
      }
      return additionalHeaders[header] || clientHeader || _default2;
    }
    _getAgent(parsedUrl) {
      let agent;
      const proxyUrl = pm.getProxyUrl(parsedUrl);
      const useProxy = proxyUrl && proxyUrl.hostname;
      if (this._keepAlive && useProxy) {
        agent = this._proxyAgent;
      }
      if (this._keepAlive && !useProxy) {
        agent = this._agent;
      }
      if (agent) {
        return agent;
      }
      const usingSsl = parsedUrl.protocol === "https:";
      let maxSockets = 100;
      if (this.requestOptions) {
        maxSockets = this.requestOptions.maxSockets || http2.globalAgent.maxSockets;
      }
      if (proxyUrl && proxyUrl.hostname) {
        const agentOptions = {
          maxSockets,
          keepAlive: this._keepAlive,
          proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && {
            proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
          }), { host: proxyUrl.hostname, port: proxyUrl.port })
        };
        let tunnelAgent;
        const overHttps = proxyUrl.protocol === "https:";
        if (usingSsl) {
          tunnelAgent = overHttps ? tunnel$12.httpsOverHttps : tunnel$12.httpsOverHttp;
        } else {
          tunnelAgent = overHttps ? tunnel$12.httpOverHttps : tunnel$12.httpOverHttp;
        }
        agent = tunnelAgent(agentOptions);
        this._proxyAgent = agent;
      }
      if (this._keepAlive && !agent) {
        const options = { keepAlive: this._keepAlive, maxSockets };
        agent = usingSsl ? new https2.Agent(options) : new http2.Agent(options);
        this._agent = agent;
      }
      if (!agent) {
        agent = usingSsl ? https2.globalAgent : http2.globalAgent;
      }
      if (usingSsl && this._ignoreSslError) {
        agent.options = Object.assign(agent.options || {}, {
          rejectUnauthorized: false
        });
      }
      return agent;
    }
    _performExponentialBackoff(retryNumber) {
      return __awaiter2(this, void 0, void 0, function* () {
        retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
        const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
        return new Promise((resolve) => setTimeout(() => resolve(), ms));
      });
    }
    _processResponse(res, options) {
      return __awaiter2(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => __awaiter2(this, void 0, void 0, function* () {
          const statusCode = res.message.statusCode || 0;
          const response = {
            statusCode,
            result: null,
            headers: {}
          };
          if (statusCode === HttpCodes.NotFound) {
            resolve(response);
          }
          function dateTimeDeserializer(key, value2) {
            if (typeof value2 === "string") {
              const a = new Date(value2);
              if (!isNaN(a.valueOf())) {
                return a;
              }
            }
            return value2;
          }
          let obj;
          let contents;
          try {
            contents = yield res.readBody();
            if (contents && contents.length > 0) {
              if (options && options.deserializeDates) {
                obj = JSON.parse(contents, dateTimeDeserializer);
              } else {
                obj = JSON.parse(contents);
              }
              response.result = obj;
            }
            response.headers = res.message.headers;
          } catch (err) {
          }
          if (statusCode > 299) {
            let msg;
            if (obj && obj.message) {
              msg = obj.message;
            } else if (contents && contents.length > 0) {
              msg = contents;
            } else {
              msg = `Failed request: (${statusCode})`;
            }
            const err = new HttpClientError(msg, statusCode);
            err.result = response.result;
            reject(err);
          } else {
            resolve(response);
          }
        }));
      });
    }
  }
  exports.HttpClient = HttpClient;
  const lowercaseKeys2 = (obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});
})(lib$2);
var auth$1 = {};
var __awaiter$3 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(auth$1, "__esModule", { value: true });
auth$1.PersonalAccessTokenCredentialHandler = auth$1.BearerCredentialHandler = auth$1.BasicCredentialHandler = void 0;
class BasicCredentialHandler {
  constructor(username, password) {
    this.username = username;
    this.password = password;
  }
  prepareRequest(options) {
    if (!options.headers) {
      throw Error("The request has no headers");
    }
    options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
  }
  // This handler cannot handle 401
  canHandleAuthentication() {
    return false;
  }
  handleAuthentication() {
    return __awaiter$3(this, void 0, void 0, function* () {
      throw new Error("not implemented");
    });
  }
}
auth$1.BasicCredentialHandler = BasicCredentialHandler;
class BearerCredentialHandler {
  constructor(token) {
    this.token = token;
  }
  // currently implements pre-authorization
  // TODO: support preAuth = false where it hooks on 401
  prepareRequest(options) {
    if (!options.headers) {
      throw Error("The request has no headers");
    }
    options.headers["Authorization"] = `Bearer ${this.token}`;
  }
  // This handler cannot handle 401
  canHandleAuthentication() {
    return false;
  }
  handleAuthentication() {
    return __awaiter$3(this, void 0, void 0, function* () {
      throw new Error("not implemented");
    });
  }
}
auth$1.BearerCredentialHandler = BearerCredentialHandler;
class PersonalAccessTokenCredentialHandler {
  constructor(token) {
    this.token = token;
  }
  // currently implements pre-authorization
  // TODO: support preAuth = false where it hooks on 401
  prepareRequest(options) {
    if (!options.headers) {
      throw Error("The request has no headers");
    }
    options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
  }
  // This handler cannot handle 401
  canHandleAuthentication() {
    return false;
  }
  handleAuthentication() {
    return __awaiter$3(this, void 0, void 0, function* () {
      throw new Error("not implemented");
    });
  }
}
auth$1.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
var hasRequiredOidcUtils;
function requireOidcUtils() {
  if (hasRequiredOidcUtils)
    return oidcUtils;
  hasRequiredOidcUtils = 1;
  var __awaiter2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value2) {
      return value2 instanceof P ? value2 : new P(function(resolve) {
        resolve(value2);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value2) {
        try {
          step(generator.next(value2));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value2) {
        try {
          step(generator["throw"](value2));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(oidcUtils, "__esModule", { value: true });
  oidcUtils.OidcClient = void 0;
  const http_client_1 = lib$2;
  const auth_1 = auth$1;
  const core_1 = requireCore$1();
  class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
      const requestOptions = {
        allowRetries: allowRetry,
        maxRetries: maxRetry
      };
      return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
      const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
      if (!token) {
        throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
      }
      return token;
    }
    static getIDTokenUrl() {
      const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
      if (!runtimeUrl) {
        throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
      }
      return runtimeUrl;
    }
    static getCall(id_token_url) {
      var _a;
      return __awaiter2(this, void 0, void 0, function* () {
        const httpclient = OidcClient.createHttpClient();
        const res = yield httpclient.getJson(id_token_url).catch((error2) => {
          throw new Error(`Failed to get ID Token. 
 
        Error Code : ${error2.statusCode}
 
        Error Message: ${error2.result.message}`);
        });
        const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
        if (!id_token) {
          throw new Error("Response json body do not have ID Token field");
        }
        return id_token;
      });
    }
    static getIDToken(audience) {
      return __awaiter2(this, void 0, void 0, function* () {
        try {
          let id_token_url = OidcClient.getIDTokenUrl();
          if (audience) {
            const encodedAudience = encodeURIComponent(audience);
            id_token_url = `${id_token_url}&audience=${encodedAudience}`;
          }
          core_1.debug(`ID token url is ${id_token_url}`);
          const id_token = yield OidcClient.getCall(id_token_url);
          core_1.setSecret(id_token);
          return id_token;
        } catch (error2) {
          throw new Error(`Error message: ${error2.message}`);
        }
      });
    }
  }
  oidcUtils.OidcClient = OidcClient;
  return oidcUtils;
}
var summary = {};
var hasRequiredSummary;
function requireSummary() {
  if (hasRequiredSummary)
    return summary;
  hasRequiredSummary = 1;
  (function(exports) {
    var __awaiter2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
    const os_12 = require$$0;
    const fs_12 = require$$0$1;
    const { access, appendFile, writeFile } = fs_12.promises;
    exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
    exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
    class Summary {
      constructor() {
        this._buffer = "";
      }
      /**
       * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
       * Also checks r/w permissions.
       *
       * @returns step summary file path
       */
      filePath() {
        return __awaiter2(this, void 0, void 0, function* () {
          if (this._filePath) {
            return this._filePath;
          }
          const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
          if (!pathFromEnv) {
            throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
          }
          try {
            yield access(pathFromEnv, fs_12.constants.R_OK | fs_12.constants.W_OK);
          } catch (_a) {
            throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
          }
          this._filePath = pathFromEnv;
          return this._filePath;
        });
      }
      /**
       * Wraps content in an HTML tag, adding any HTML attributes
       *
       * @param {string} tag HTML tag to wrap
       * @param {string | null} content content within the tag
       * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
       *
       * @returns {string} content wrapped in HTML element
       */
      wrap(tag, content2, attrs = {}) {
        const htmlAttrs = Object.entries(attrs).map(([key, value2]) => ` ${key}="${value2}"`).join("");
        if (!content2) {
          return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content2}</${tag}>`;
      }
      /**
       * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
       *
       * @param {SummaryWriteOptions} [options] (optional) options for write operation
       *
       * @returns {Promise<Summary>} summary instance
       */
      write(options) {
        return __awaiter2(this, void 0, void 0, function* () {
          const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
          const filePath = yield this.filePath();
          const writeFunc = overwrite ? writeFile : appendFile;
          yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
          return this.emptyBuffer();
        });
      }
      /**
       * Clears the summary buffer and wipes the summary file
       *
       * @returns {Summary} summary instance
       */
      clear() {
        return __awaiter2(this, void 0, void 0, function* () {
          return this.emptyBuffer().write({ overwrite: true });
        });
      }
      /**
       * Returns the current summary buffer as a string
       *
       * @returns {string} string of summary buffer
       */
      stringify() {
        return this._buffer;
      }
      /**
       * If the summary buffer is empty
       *
       * @returns {boolen} true if the buffer is empty
       */
      isEmptyBuffer() {
        return this._buffer.length === 0;
      }
      /**
       * Resets the summary buffer without writing to summary file
       *
       * @returns {Summary} summary instance
       */
      emptyBuffer() {
        this._buffer = "";
        return this;
      }
      /**
       * Adds raw text to the summary buffer
       *
       * @param {string} text content to add
       * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
       *
       * @returns {Summary} summary instance
       */
      addRaw(text2, addEOL = false) {
        this._buffer += text2;
        return addEOL ? this.addEOL() : this;
      }
      /**
       * Adds the operating system-specific end-of-line marker to the buffer
       *
       * @returns {Summary} summary instance
       */
      addEOL() {
        return this.addRaw(os_12.EOL);
      }
      /**
       * Adds an HTML codeblock to the summary buffer
       *
       * @param {string} code content to render within fenced code block
       * @param {string} lang (optional) language to syntax highlight code
       *
       * @returns {Summary} summary instance
       */
      addCodeBlock(code2, lang) {
        const attrs = Object.assign({}, lang && { lang });
        const element = this.wrap("pre", this.wrap("code", code2), attrs);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML list to the summary buffer
       *
       * @param {string[]} items list of items to render
       * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
       *
       * @returns {Summary} summary instance
       */
      addList(items, ordered = false) {
        const tag = ordered ? "ol" : "ul";
        const listItems = items.map((item) => this.wrap("li", item)).join("");
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML table to the summary buffer
       *
       * @param {SummaryTableCell[]} rows table rows
       *
       * @returns {Summary} summary instance
       */
      addTable(rows) {
        const tableBody = rows.map((row) => {
          const cells = row.map((cell) => {
            if (typeof cell === "string") {
              return this.wrap("td", cell);
            }
            const { header, data, colspan, rowspan } = cell;
            const tag = header ? "th" : "td";
            const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
            return this.wrap(tag, data, attrs);
          }).join("");
          return this.wrap("tr", cells);
        }).join("");
        const element = this.wrap("table", tableBody);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds a collapsable HTML details element to the summary buffer
       *
       * @param {string} label text for the closed state
       * @param {string} content collapsable content
       *
       * @returns {Summary} summary instance
       */
      addDetails(label, content2) {
        const element = this.wrap("details", this.wrap("summary", label) + content2);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML image tag to the summary buffer
       *
       * @param {string} src path to the image you to embed
       * @param {string} alt text description of the image
       * @param {SummaryImageOptions} options (optional) addition image attributes
       *
       * @returns {Summary} summary instance
       */
      addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
        const element = this.wrap("img", null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML section heading element
       *
       * @param {string} text heading text
       * @param {number | string} [level=1] (optional) the heading level, default: 1
       *
       * @returns {Summary} summary instance
       */
      addHeading(text2, level) {
        const tag = `h${level}`;
        const allowedTag = ["h1", "h2", "h3", "h4", "h5", "h6"].includes(tag) ? tag : "h1";
        const element = this.wrap(allowedTag, text2);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML thematic break (<hr>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addSeparator() {
        const element = this.wrap("hr", null);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML line break (<br>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addBreak() {
        const element = this.wrap("br", null);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML blockquote to the summary buffer
       *
       * @param {string} text quote text
       * @param {string} cite (optional) citation url
       *
       * @returns {Summary} summary instance
       */
      addQuote(text2, cite) {
        const attrs = Object.assign({}, cite && { cite });
        const element = this.wrap("blockquote", text2, attrs);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML anchor tag to the summary buffer
       *
       * @param {string} text link text/content
       * @param {string} href hyperlink
       *
       * @returns {Summary} summary instance
       */
      addLink(text2, href) {
        const element = this.wrap("a", text2, { href });
        return this.addRaw(element).addEOL();
      }
    }
    const _summary = new Summary();
    exports.markdownSummary = _summary;
    exports.summary = _summary;
  })(summary);
  return summary;
}
var pathUtils = {};
var hasRequiredPathUtils;
function requirePathUtils() {
  if (hasRequiredPathUtils)
    return pathUtils;
  hasRequiredPathUtils = 1;
  var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault2 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar2 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding2(result, mod, k);
    }
    __setModuleDefault2(result, mod);
    return result;
  };
  Object.defineProperty(pathUtils, "__esModule", { value: true });
  pathUtils.toPlatformPath = pathUtils.toWin32Path = pathUtils.toPosixPath = void 0;
  const path2 = __importStar2(require$$0$3);
  function toPosixPath(pth) {
    return pth.replace(/[\\]/g, "/");
  }
  pathUtils.toPosixPath = toPosixPath;
  function toWin32Path(pth) {
    return pth.replace(/[/]/g, "\\");
  }
  pathUtils.toWin32Path = toWin32Path;
  function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path2.sep);
  }
  pathUtils.toPlatformPath = toPlatformPath;
  return pathUtils;
}
var hasRequiredCore$1;
function requireCore$1() {
  if (hasRequiredCore$1)
    return core$3;
  hasRequiredCore$1 = 1;
  (function(exports) {
    var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
    const command_1 = command;
    const file_command_1 = fileCommand;
    const utils_12 = utils$f;
    const os2 = __importStar2(require$$0);
    const path2 = __importStar2(require$$0$3);
    const oidc_utils_1 = requireOidcUtils();
    var ExitCode;
    (function(ExitCode2) {
      ExitCode2[ExitCode2["Success"] = 0] = "Success";
      ExitCode2[ExitCode2["Failure"] = 1] = "Failure";
    })(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
    function exportVariable(name, val) {
      const convertedVal = utils_12.toCommandValue(val);
      process.env[name] = convertedVal;
      const filePath = process.env["GITHUB_ENV"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("ENV", file_command_1.prepareKeyValueMessage(name, val));
      }
      command_1.issueCommand("set-env", { name }, convertedVal);
    }
    exports.exportVariable = exportVariable;
    function setSecret(secret) {
      command_1.issueCommand("add-mask", {}, secret);
    }
    exports.setSecret = setSecret;
    function addPath(inputPath) {
      const filePath = process.env["GITHUB_PATH"] || "";
      if (filePath) {
        file_command_1.issueFileCommand("PATH", inputPath);
      } else {
        command_1.issueCommand("add-path", {}, inputPath);
      }
      process.env["PATH"] = `${inputPath}${path2.delimiter}${process.env["PATH"]}`;
    }
    exports.addPath = addPath;
    function getInput(name, options) {
      const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
      if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
      }
      if (options && options.trimWhitespace === false) {
        return val;
      }
      return val.trim();
    }
    exports.getInput = getInput;
    function getMultilineInput(name, options) {
      const inputs = getInput(name, options).split("\n").filter((x) => x !== "");
      if (options && options.trimWhitespace === false) {
        return inputs;
      }
      return inputs.map((input) => input.trim());
    }
    exports.getMultilineInput = getMultilineInput;
    function getBooleanInput(name, options) {
      const trueValue = ["true", "True", "TRUE"];
      const falseValue = ["false", "False", "FALSE"];
      const val = getInput(name, options);
      if (trueValue.includes(val))
        return true;
      if (falseValue.includes(val))
        return false;
      throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
    }
    exports.getBooleanInput = getBooleanInput;
    function setOutput(name, value2) {
      const filePath = process.env["GITHUB_OUTPUT"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("OUTPUT", file_command_1.prepareKeyValueMessage(name, value2));
      }
      process.stdout.write(os2.EOL);
      command_1.issueCommand("set-output", { name }, utils_12.toCommandValue(value2));
    }
    exports.setOutput = setOutput;
    function setCommandEcho(enabled) {
      command_1.issue("echo", enabled ? "on" : "off");
    }
    exports.setCommandEcho = setCommandEcho;
    function setFailed(message) {
      process.exitCode = ExitCode.Failure;
      error2(message);
    }
    exports.setFailed = setFailed;
    function isDebug() {
      return process.env["RUNNER_DEBUG"] === "1";
    }
    exports.isDebug = isDebug;
    function debug2(message) {
      command_1.issueCommand("debug", {}, message);
    }
    exports.debug = debug2;
    function error2(message, properties = {}) {
      command_1.issueCommand("error", utils_12.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.error = error2;
    function warning(message, properties = {}) {
      command_1.issueCommand("warning", utils_12.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.warning = warning;
    function notice(message, properties = {}) {
      command_1.issueCommand("notice", utils_12.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.notice = notice;
    function info(message) {
      process.stdout.write(message + os2.EOL);
    }
    exports.info = info;
    function startGroup(name) {
      command_1.issue("group", name);
    }
    exports.startGroup = startGroup;
    function endGroup() {
      command_1.issue("endgroup");
    }
    exports.endGroup = endGroup;
    function group(name, fn) {
      return __awaiter2(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
          result = yield fn();
        } finally {
          endGroup();
        }
        return result;
      });
    }
    exports.group = group;
    function saveState(name, value2) {
      const filePath = process.env["GITHUB_STATE"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("STATE", file_command_1.prepareKeyValueMessage(name, value2));
      }
      command_1.issueCommand("save-state", { name }, utils_12.toCommandValue(value2));
    }
    exports.saveState = saveState;
    function getState(name) {
      return process.env[`STATE_${name}`] || "";
    }
    exports.getState = getState;
    function getIDToken(aud) {
      return __awaiter2(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
      });
    }
    exports.getIDToken = getIDToken;
    var summary_1 = requireSummary();
    Object.defineProperty(exports, "summary", { enumerable: true, get: function() {
      return summary_1.summary;
    } });
    var summary_2 = requireSummary();
    Object.defineProperty(exports, "markdownSummary", { enumerable: true, get: function() {
      return summary_2.markdownSummary;
    } });
    var path_utils_1 = requirePathUtils();
    Object.defineProperty(exports, "toPosixPath", { enumerable: true, get: function() {
      return path_utils_1.toPosixPath;
    } });
    Object.defineProperty(exports, "toWin32Path", { enumerable: true, get: function() {
      return path_utils_1.toWin32Path;
    } });
    Object.defineProperty(exports, "toPlatformPath", { enumerable: true, get: function() {
      return path_utils_1.toPlatformPath;
    } });
  })(core$3);
  return core$3;
}
var coreExports = requireCore$1();
var exec$2 = {};
var toolrunner = {};
var io$1 = {};
var ioUtil$2 = {};
(function(exports) {
  var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault2 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar2 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding2(result, mod, k);
    }
    __setModuleDefault2(result, mod);
    return result;
  };
  var __awaiter2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value2) {
      return value2 instanceof P ? value2 : new P(function(resolve) {
        resolve(value2);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value2) {
        try {
          step(generator.next(value2));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value2) {
        try {
          step(generator["throw"](value2));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var _a;
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getCmdPath = exports.tryGetExecutablePath = exports.isRooted = exports.isDirectory = exports.exists = exports.IS_WINDOWS = exports.unlink = exports.symlink = exports.stat = exports.rmdir = exports.rename = exports.readlink = exports.readdir = exports.mkdir = exports.lstat = exports.copyFile = exports.chmod = void 0;
  const fs2 = __importStar2(require$$0$1);
  const path2 = __importStar2(require$$0$3);
  _a = fs2.promises, exports.chmod = _a.chmod, exports.copyFile = _a.copyFile, exports.lstat = _a.lstat, exports.mkdir = _a.mkdir, exports.readdir = _a.readdir, exports.readlink = _a.readlink, exports.rename = _a.rename, exports.rmdir = _a.rmdir, exports.stat = _a.stat, exports.symlink = _a.symlink, exports.unlink = _a.unlink;
  exports.IS_WINDOWS = process.platform === "win32";
  function exists(fsPath) {
    return __awaiter2(this, void 0, void 0, function* () {
      try {
        yield exports.stat(fsPath);
      } catch (err) {
        if (err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return true;
    });
  }
  exports.exists = exists;
  function isDirectory(fsPath, useStat = false) {
    return __awaiter2(this, void 0, void 0, function* () {
      const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);
      return stats.isDirectory();
    });
  }
  exports.isDirectory = isDirectory;
  function isRooted(p) {
    p = normalizeSeparators(p);
    if (!p) {
      throw new Error('isRooted() parameter "p" cannot be empty');
    }
    if (exports.IS_WINDOWS) {
      return p.startsWith("\\") || /^[A-Z]:/i.test(p);
    }
    return p.startsWith("/");
  }
  exports.isRooted = isRooted;
  function tryGetExecutablePath(filePath, extensions) {
    return __awaiter2(this, void 0, void 0, function* () {
      let stats = void 0;
      try {
        stats = yield exports.stat(filePath);
      } catch (err) {
        if (err.code !== "ENOENT") {
          console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
        }
      }
      if (stats && stats.isFile()) {
        if (exports.IS_WINDOWS) {
          const upperExt = path2.extname(filePath).toUpperCase();
          if (extensions.some((validExt) => validExt.toUpperCase() === upperExt)) {
            return filePath;
          }
        } else {
          if (isUnixExecutable(stats)) {
            return filePath;
          }
        }
      }
      const originalFilePath = filePath;
      for (const extension2 of extensions) {
        filePath = originalFilePath + extension2;
        stats = void 0;
        try {
          stats = yield exports.stat(filePath);
        } catch (err) {
          if (err.code !== "ENOENT") {
            console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
          }
        }
        if (stats && stats.isFile()) {
          if (exports.IS_WINDOWS) {
            try {
              const directory = path2.dirname(filePath);
              const upperName = path2.basename(filePath).toUpperCase();
              for (const actualName of yield exports.readdir(directory)) {
                if (upperName === actualName.toUpperCase()) {
                  filePath = path2.join(directory, actualName);
                  break;
                }
              }
            } catch (err) {
              console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
            }
            return filePath;
          } else {
            if (isUnixExecutable(stats)) {
              return filePath;
            }
          }
        }
      }
      return "";
    });
  }
  exports.tryGetExecutablePath = tryGetExecutablePath;
  function normalizeSeparators(p) {
    p = p || "";
    if (exports.IS_WINDOWS) {
      p = p.replace(/\//g, "\\");
      return p.replace(/\\\\+/g, "\\");
    }
    return p.replace(/\/\/+/g, "/");
  }
  function isUnixExecutable(stats) {
    return (stats.mode & 1) > 0 || (stats.mode & 8) > 0 && stats.gid === process.getgid() || (stats.mode & 64) > 0 && stats.uid === process.getuid();
  }
  function getCmdPath() {
    var _a2;
    return (_a2 = process.env["COMSPEC"]) !== null && _a2 !== void 0 ? _a2 : `cmd.exe`;
  }
  exports.getCmdPath = getCmdPath;
})(ioUtil$2);
var __createBinding$4 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  Object.defineProperty(o, k2, { enumerable: true, get: function() {
    return m[k];
  } });
} : function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault$4 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function(o, v) {
  o["default"] = v;
});
var __importStar$4 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.hasOwnProperty.call(mod, k))
        __createBinding$4(result, mod, k);
  }
  __setModuleDefault$4(result, mod);
  return result;
};
var __awaiter$2 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(io$1, "__esModule", { value: true });
io$1.findInPath = io$1.which = io$1.mkdirP = io$1.rmRF = io$1.mv = io$1.cp = void 0;
const assert_1 = require$$0$4;
const childProcess = __importStar$4(require$$1$3);
const path$a = __importStar$4(require$$0$3);
const util_1 = require$$0$2;
const ioUtil$1 = __importStar$4(ioUtil$2);
const exec$1 = util_1.promisify(childProcess.exec);
const execFile = util_1.promisify(childProcess.execFile);
function cp$1(source, dest, options = {}) {
  return __awaiter$2(this, void 0, void 0, function* () {
    const { force, recursive, copySourceDirectory } = readCopyOptions(options);
    const destStat = (yield ioUtil$1.exists(dest)) ? yield ioUtil$1.stat(dest) : null;
    if (destStat && destStat.isFile() && !force) {
      return;
    }
    const newDest = destStat && destStat.isDirectory() && copySourceDirectory ? path$a.join(dest, path$a.basename(source)) : dest;
    if (!(yield ioUtil$1.exists(source))) {
      throw new Error(`no such file or directory: ${source}`);
    }
    const sourceStat = yield ioUtil$1.stat(source);
    if (sourceStat.isDirectory()) {
      if (!recursive) {
        throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
      } else {
        yield cpDirRecursive(source, newDest, 0, force);
      }
    } else {
      if (path$a.relative(source, newDest) === "") {
        throw new Error(`'${newDest}' and '${source}' are the same file`);
      }
      yield copyFile(source, newDest, force);
    }
  });
}
io$1.cp = cp$1;
function mv(source, dest, options = {}) {
  return __awaiter$2(this, void 0, void 0, function* () {
    if (yield ioUtil$1.exists(dest)) {
      let destExists = true;
      if (yield ioUtil$1.isDirectory(dest)) {
        dest = path$a.join(dest, path$a.basename(source));
        destExists = yield ioUtil$1.exists(dest);
      }
      if (destExists) {
        if (options.force == null || options.force) {
          yield rmRF(dest);
        } else {
          throw new Error("Destination already exists");
        }
      }
    }
    yield mkdirP(path$a.dirname(dest));
    yield ioUtil$1.rename(source, dest);
  });
}
io$1.mv = mv;
function rmRF(inputPath) {
  return __awaiter$2(this, void 0, void 0, function* () {
    if (ioUtil$1.IS_WINDOWS) {
      if (/[*"<>|]/.test(inputPath)) {
        throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows');
      }
      try {
        const cmdPath = ioUtil$1.getCmdPath();
        if (yield ioUtil$1.isDirectory(inputPath, true)) {
          yield exec$1(`${cmdPath} /s /c "rd /s /q "%inputPath%""`, {
            env: { inputPath }
          });
        } else {
          yield exec$1(`${cmdPath} /s /c "del /f /a "%inputPath%""`, {
            env: { inputPath }
          });
        }
      } catch (err) {
        if (err.code !== "ENOENT")
          throw err;
      }
      try {
        yield ioUtil$1.unlink(inputPath);
      } catch (err) {
        if (err.code !== "ENOENT")
          throw err;
      }
    } else {
      let isDir = false;
      try {
        isDir = yield ioUtil$1.isDirectory(inputPath);
      } catch (err) {
        if (err.code !== "ENOENT")
          throw err;
        return;
      }
      if (isDir) {
        yield execFile(`rm`, [`-rf`, `${inputPath}`]);
      } else {
        yield ioUtil$1.unlink(inputPath);
      }
    }
  });
}
io$1.rmRF = rmRF;
function mkdirP(fsPath) {
  return __awaiter$2(this, void 0, void 0, function* () {
    assert_1.ok(fsPath, "a path argument must be provided");
    yield ioUtil$1.mkdir(fsPath, { recursive: true });
  });
}
io$1.mkdirP = mkdirP;
function which$2(tool, check) {
  return __awaiter$2(this, void 0, void 0, function* () {
    if (!tool) {
      throw new Error("parameter 'tool' is required");
    }
    if (check) {
      const result = yield which$2(tool, false);
      if (!result) {
        if (ioUtil$1.IS_WINDOWS) {
          throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);
        } else {
          throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
        }
      }
      return result;
    }
    const matches = yield findInPath(tool);
    if (matches && matches.length > 0) {
      return matches[0];
    }
    return "";
  });
}
io$1.which = which$2;
function findInPath(tool) {
  return __awaiter$2(this, void 0, void 0, function* () {
    if (!tool) {
      throw new Error("parameter 'tool' is required");
    }
    const extensions = [];
    if (ioUtil$1.IS_WINDOWS && process.env["PATHEXT"]) {
      for (const extension2 of process.env["PATHEXT"].split(path$a.delimiter)) {
        if (extension2) {
          extensions.push(extension2);
        }
      }
    }
    if (ioUtil$1.isRooted(tool)) {
      const filePath = yield ioUtil$1.tryGetExecutablePath(tool, extensions);
      if (filePath) {
        return [filePath];
      }
      return [];
    }
    if (tool.includes(path$a.sep)) {
      return [];
    }
    const directories = [];
    if (process.env.PATH) {
      for (const p of process.env.PATH.split(path$a.delimiter)) {
        if (p) {
          directories.push(p);
        }
      }
    }
    const matches = [];
    for (const directory of directories) {
      const filePath = yield ioUtil$1.tryGetExecutablePath(path$a.join(directory, tool), extensions);
      if (filePath) {
        matches.push(filePath);
      }
    }
    return matches;
  });
}
io$1.findInPath = findInPath;
function readCopyOptions(options) {
  const force = options.force == null ? true : options.force;
  const recursive = Boolean(options.recursive);
  const copySourceDirectory = options.copySourceDirectory == null ? true : Boolean(options.copySourceDirectory);
  return { force, recursive, copySourceDirectory };
}
function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
  return __awaiter$2(this, void 0, void 0, function* () {
    if (currentDepth >= 255)
      return;
    currentDepth++;
    yield mkdirP(destDir);
    const files = yield ioUtil$1.readdir(sourceDir);
    for (const fileName of files) {
      const srcFile = `${sourceDir}/${fileName}`;
      const destFile = `${destDir}/${fileName}`;
      const srcFileStat = yield ioUtil$1.lstat(srcFile);
      if (srcFileStat.isDirectory()) {
        yield cpDirRecursive(srcFile, destFile, currentDepth, force);
      } else {
        yield copyFile(srcFile, destFile, force);
      }
    }
    yield ioUtil$1.chmod(destDir, (yield ioUtil$1.stat(sourceDir)).mode);
  });
}
function copyFile(srcFile, destFile, force) {
  return __awaiter$2(this, void 0, void 0, function* () {
    if ((yield ioUtil$1.lstat(srcFile)).isSymbolicLink()) {
      try {
        yield ioUtil$1.lstat(destFile);
        yield ioUtil$1.unlink(destFile);
      } catch (e) {
        if (e.code === "EPERM") {
          yield ioUtil$1.chmod(destFile, "0666");
          yield ioUtil$1.unlink(destFile);
        }
      }
      const symlinkFull = yield ioUtil$1.readlink(srcFile);
      yield ioUtil$1.symlink(symlinkFull, destFile, ioUtil$1.IS_WINDOWS ? "junction" : null);
    } else if (!(yield ioUtil$1.exists(destFile)) || force) {
      yield ioUtil$1.copyFile(srcFile, destFile);
    }
  });
}
var __createBinding$3 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  Object.defineProperty(o, k2, { enumerable: true, get: function() {
    return m[k];
  } });
} : function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault$3 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function(o, v) {
  o["default"] = v;
});
var __importStar$3 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.hasOwnProperty.call(mod, k))
        __createBinding$3(result, mod, k);
  }
  __setModuleDefault$3(result, mod);
  return result;
};
var __awaiter$1 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(toolrunner, "__esModule", { value: true });
toolrunner.argStringToArray = toolrunner.ToolRunner = void 0;
const os = __importStar$3(require$$0);
const events = __importStar$3(require$$2$2);
const child = __importStar$3(require$$1$3);
const path$9 = __importStar$3(require$$0$3);
const io = __importStar$3(io$1);
const ioUtil = __importStar$3(ioUtil$2);
const timers_1 = require$$6;
const IS_WINDOWS = process.platform === "win32";
class ToolRunner extends events.EventEmitter {
  constructor(toolPath, args, options) {
    super();
    if (!toolPath) {
      throw new Error("Parameter 'toolPath' cannot be null or empty.");
    }
    this.toolPath = toolPath;
    this.args = args || [];
    this.options = options || {};
  }
  _debug(message) {
    if (this.options.listeners && this.options.listeners.debug) {
      this.options.listeners.debug(message);
    }
  }
  _getCommandString(options, noPrefix) {
    const toolPath = this._getSpawnFileName();
    const args = this._getSpawnArgs(options);
    let cmd = noPrefix ? "" : "[command]";
    if (IS_WINDOWS) {
      if (this._isCmdFile()) {
        cmd += toolPath;
        for (const a of args) {
          cmd += ` ${a}`;
        }
      } else if (options.windowsVerbatimArguments) {
        cmd += `"${toolPath}"`;
        for (const a of args) {
          cmd += ` ${a}`;
        }
      } else {
        cmd += this._windowsQuoteCmdArg(toolPath);
        for (const a of args) {
          cmd += ` ${this._windowsQuoteCmdArg(a)}`;
        }
      }
    } else {
      cmd += toolPath;
      for (const a of args) {
        cmd += ` ${a}`;
      }
    }
    return cmd;
  }
  _processLineBuffer(data, strBuffer, onLine) {
    try {
      let s = strBuffer + data.toString();
      let n = s.indexOf(os.EOL);
      while (n > -1) {
        const line = s.substring(0, n);
        onLine(line);
        s = s.substring(n + os.EOL.length);
        n = s.indexOf(os.EOL);
      }
      return s;
    } catch (err) {
      this._debug(`error processing line. Failed with error ${err}`);
      return "";
    }
  }
  _getSpawnFileName() {
    if (IS_WINDOWS) {
      if (this._isCmdFile()) {
        return process.env["COMSPEC"] || "cmd.exe";
      }
    }
    return this.toolPath;
  }
  _getSpawnArgs(options) {
    if (IS_WINDOWS) {
      if (this._isCmdFile()) {
        let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
        for (const a of this.args) {
          argline += " ";
          argline += options.windowsVerbatimArguments ? a : this._windowsQuoteCmdArg(a);
        }
        argline += '"';
        return [argline];
      }
    }
    return this.args;
  }
  _endsWith(str2, end) {
    return str2.endsWith(end);
  }
  _isCmdFile() {
    const upperToolPath = this.toolPath.toUpperCase();
    return this._endsWith(upperToolPath, ".CMD") || this._endsWith(upperToolPath, ".BAT");
  }
  _windowsQuoteCmdArg(arg) {
    if (!this._isCmdFile()) {
      return this._uvQuoteCmdArg(arg);
    }
    if (!arg) {
      return '""';
    }
    const cmdSpecialChars = [
      " ",
      "	",
      "&",
      "(",
      ")",
      "[",
      "]",
      "{",
      "}",
      "^",
      "=",
      ";",
      "!",
      "'",
      "+",
      ",",
      "`",
      "~",
      "|",
      "<",
      ">",
      '"'
    ];
    let needsQuotes = false;
    for (const char of arg) {
      if (cmdSpecialChars.some((x) => x === char)) {
        needsQuotes = true;
        break;
      }
    }
    if (!needsQuotes) {
      return arg;
    }
    let reverse = '"';
    let quoteHit = true;
    for (let i = arg.length; i > 0; i--) {
      reverse += arg[i - 1];
      if (quoteHit && arg[i - 1] === "\\") {
        reverse += "\\";
      } else if (arg[i - 1] === '"') {
        quoteHit = true;
        reverse += '"';
      } else {
        quoteHit = false;
      }
    }
    reverse += '"';
    return reverse.split("").reverse().join("");
  }
  _uvQuoteCmdArg(arg) {
    if (!arg) {
      return '""';
    }
    if (!arg.includes(" ") && !arg.includes("	") && !arg.includes('"')) {
      return arg;
    }
    if (!arg.includes('"') && !arg.includes("\\")) {
      return `"${arg}"`;
    }
    let reverse = '"';
    let quoteHit = true;
    for (let i = arg.length; i > 0; i--) {
      reverse += arg[i - 1];
      if (quoteHit && arg[i - 1] === "\\") {
        reverse += "\\";
      } else if (arg[i - 1] === '"') {
        quoteHit = true;
        reverse += "\\";
      } else {
        quoteHit = false;
      }
    }
    reverse += '"';
    return reverse.split("").reverse().join("");
  }
  _cloneExecOptions(options) {
    options = options || {};
    const result = {
      cwd: options.cwd || process.cwd(),
      env: options.env || process.env,
      silent: options.silent || false,
      windowsVerbatimArguments: options.windowsVerbatimArguments || false,
      failOnStdErr: options.failOnStdErr || false,
      ignoreReturnCode: options.ignoreReturnCode || false,
      delay: options.delay || 1e4
    };
    result.outStream = options.outStream || process.stdout;
    result.errStream = options.errStream || process.stderr;
    return result;
  }
  _getSpawnOptions(options, toolPath) {
    options = options || {};
    const result = {};
    result.cwd = options.cwd;
    result.env = options.env;
    result["windowsVerbatimArguments"] = options.windowsVerbatimArguments || this._isCmdFile();
    if (options.windowsVerbatimArguments) {
      result.argv0 = `"${toolPath}"`;
    }
    return result;
  }
  /**
   * Exec a tool.
   * Output will be streamed to the live console.
   * Returns promise with return code
   *
   * @param     tool     path to tool to exec
   * @param     options  optional exec options.  See ExecOptions
   * @returns   number
   */
  exec() {
    return __awaiter$1(this, void 0, void 0, function* () {
      if (!ioUtil.isRooted(this.toolPath) && (this.toolPath.includes("/") || IS_WINDOWS && this.toolPath.includes("\\"))) {
        this.toolPath = path$9.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
      }
      this.toolPath = yield io.which(this.toolPath, true);
      return new Promise((resolve, reject) => __awaiter$1(this, void 0, void 0, function* () {
        this._debug(`exec tool: ${this.toolPath}`);
        this._debug("arguments:");
        for (const arg of this.args) {
          this._debug(`   ${arg}`);
        }
        const optionsNonNull = this._cloneExecOptions(this.options);
        if (!optionsNonNull.silent && optionsNonNull.outStream) {
          optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os.EOL);
        }
        const state = new ExecState(optionsNonNull, this.toolPath);
        state.on("debug", (message) => {
          this._debug(message);
        });
        if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) {
          return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));
        }
        const fileName = this._getSpawnFileName();
        const cp2 = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
        let stdbuffer = "";
        if (cp2.stdout) {
          cp2.stdout.on("data", (data) => {
            if (this.options.listeners && this.options.listeners.stdout) {
              this.options.listeners.stdout(data);
            }
            if (!optionsNonNull.silent && optionsNonNull.outStream) {
              optionsNonNull.outStream.write(data);
            }
            stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {
              if (this.options.listeners && this.options.listeners.stdline) {
                this.options.listeners.stdline(line);
              }
            });
          });
        }
        let errbuffer = "";
        if (cp2.stderr) {
          cp2.stderr.on("data", (data) => {
            state.processStderr = true;
            if (this.options.listeners && this.options.listeners.stderr) {
              this.options.listeners.stderr(data);
            }
            if (!optionsNonNull.silent && optionsNonNull.errStream && optionsNonNull.outStream) {
              const s = optionsNonNull.failOnStdErr ? optionsNonNull.errStream : optionsNonNull.outStream;
              s.write(data);
            }
            errbuffer = this._processLineBuffer(data, errbuffer, (line) => {
              if (this.options.listeners && this.options.listeners.errline) {
                this.options.listeners.errline(line);
              }
            });
          });
        }
        cp2.on("error", (err) => {
          state.processError = err.message;
          state.processExited = true;
          state.processClosed = true;
          state.CheckComplete();
        });
        cp2.on("exit", (code2) => {
          state.processExitCode = code2;
          state.processExited = true;
          this._debug(`Exit code ${code2} received from tool '${this.toolPath}'`);
          state.CheckComplete();
        });
        cp2.on("close", (code2) => {
          state.processExitCode = code2;
          state.processExited = true;
          state.processClosed = true;
          this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
          state.CheckComplete();
        });
        state.on("done", (error2, exitCode) => {
          if (stdbuffer.length > 0) {
            this.emit("stdline", stdbuffer);
          }
          if (errbuffer.length > 0) {
            this.emit("errline", errbuffer);
          }
          cp2.removeAllListeners();
          if (error2) {
            reject(error2);
          } else {
            resolve(exitCode);
          }
        });
        if (this.options.input) {
          if (!cp2.stdin) {
            throw new Error("child process missing stdin");
          }
          cp2.stdin.end(this.options.input);
        }
      }));
    });
  }
}
toolrunner.ToolRunner = ToolRunner;
function argStringToArray(argString) {
  const args = [];
  let inQuotes = false;
  let escaped = false;
  let arg = "";
  function append2(c) {
    if (escaped && c !== '"') {
      arg += "\\";
    }
    arg += c;
    escaped = false;
  }
  for (let i = 0; i < argString.length; i++) {
    const c = argString.charAt(i);
    if (c === '"') {
      if (!escaped) {
        inQuotes = !inQuotes;
      } else {
        append2(c);
      }
      continue;
    }
    if (c === "\\" && escaped) {
      append2(c);
      continue;
    }
    if (c === "\\" && inQuotes) {
      escaped = true;
      continue;
    }
    if (c === " " && !inQuotes) {
      if (arg.length > 0) {
        args.push(arg);
        arg = "";
      }
      continue;
    }
    append2(c);
  }
  if (arg.length > 0) {
    args.push(arg.trim());
  }
  return args;
}
toolrunner.argStringToArray = argStringToArray;
class ExecState extends events.EventEmitter {
  constructor(options, toolPath) {
    super();
    this.processClosed = false;
    this.processError = "";
    this.processExitCode = 0;
    this.processExited = false;
    this.processStderr = false;
    this.delay = 1e4;
    this.done = false;
    this.timeout = null;
    if (!toolPath) {
      throw new Error("toolPath must not be empty");
    }
    this.options = options;
    this.toolPath = toolPath;
    if (options.delay) {
      this.delay = options.delay;
    }
  }
  CheckComplete() {
    if (this.done) {
      return;
    }
    if (this.processClosed) {
      this._setResult();
    } else if (this.processExited) {
      this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this);
    }
  }
  _debug(message) {
    this.emit("debug", message);
  }
  _setResult() {
    let error2;
    if (this.processExited) {
      if (this.processError) {
        error2 = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);
      } else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) {
        error2 = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
      } else if (this.processStderr && this.options.failOnStdErr) {
        error2 = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);
      }
    }
    if (this.timeout) {
      clearTimeout(this.timeout);
      this.timeout = null;
    }
    this.done = true;
    this.emit("done", error2, this.processExitCode);
  }
  static HandleTimeout(state) {
    if (state.done) {
      return;
    }
    if (!state.processClosed && state.processExited) {
      const message = `The STDIO streams did not close within ${state.delay / 1e3} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
      state._debug(message);
    }
    state._setResult();
  }
}
var __createBinding$2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  Object.defineProperty(o, k2, { enumerable: true, get: function() {
    return m[k];
  } });
} : function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault$2 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function(o, v) {
  o["default"] = v;
});
var __importStar$2 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.hasOwnProperty.call(mod, k))
        __createBinding$2(result, mod, k);
  }
  __setModuleDefault$2(result, mod);
  return result;
};
var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(exec$2, "__esModule", { value: true });
exec$2.getExecOutput = exec_2 = exec$2.exec = void 0;
const string_decoder_1 = require$$0$5;
const tr = __importStar$2(toolrunner);
function exec(commandLine, args, options) {
  return __awaiter(this, void 0, void 0, function* () {
    const commandArgs = tr.argStringToArray(commandLine);
    if (commandArgs.length === 0) {
      throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
    }
    const toolPath = commandArgs[0];
    args = commandArgs.slice(1).concat(args || []);
    const runner = new tr.ToolRunner(toolPath, args, options);
    return runner.exec();
  });
}
var exec_2 = exec$2.exec = exec;
function getExecOutput(commandLine, args, options) {
  var _a, _b;
  return __awaiter(this, void 0, void 0, function* () {
    let stdout = "";
    let stderr = "";
    const stdoutDecoder = new string_decoder_1.StringDecoder("utf8");
    const stderrDecoder = new string_decoder_1.StringDecoder("utf8");
    const originalStdoutListener = (_a = options === null || options === void 0 ? void 0 : options.listeners) === null || _a === void 0 ? void 0 : _a.stdout;
    const originalStdErrListener = (_b = options === null || options === void 0 ? void 0 : options.listeners) === null || _b === void 0 ? void 0 : _b.stderr;
    const stdErrListener = (data) => {
      stderr += stderrDecoder.write(data);
      if (originalStdErrListener) {
        originalStdErrListener(data);
      }
    };
    const stdOutListener = (data) => {
      stdout += stdoutDecoder.write(data);
      if (originalStdoutListener) {
        originalStdoutListener(data);
      }
    };
    const listeners = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners), { stdout: stdOutListener, stderr: stdErrListener });
    const exitCode = yield exec(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));
    stdout += stdoutDecoder.end();
    stderr += stderrDecoder.end();
    return {
      exitCode,
      stdout,
      stderr
    };
  });
}
exec$2.getExecOutput = getExecOutput;
var github = {};
var context$1 = {};
Object.defineProperty(context$1, "__esModule", { value: true });
context$1.Context = void 0;
const fs_1 = require$$0$1;
const os_1 = require$$0;
let Context$1 = class Context {
  /**
   * Hydrate the context from the environment
   */
  constructor() {
    var _a, _b, _c;
    this.payload = {};
    if (process.env.GITHUB_EVENT_PATH) {
      if (fs_1.existsSync(process.env.GITHUB_EVENT_PATH)) {
        this.payload = JSON.parse(fs_1.readFileSync(process.env.GITHUB_EVENT_PATH, { encoding: "utf8" }));
      } else {
        const path2 = process.env.GITHUB_EVENT_PATH;
        process.stdout.write(`GITHUB_EVENT_PATH ${path2} does not exist${os_1.EOL}`);
      }
    }
    this.eventName = process.env.GITHUB_EVENT_NAME;
    this.sha = process.env.GITHUB_SHA;
    this.ref = process.env.GITHUB_REF;
    this.workflow = process.env.GITHUB_WORKFLOW;
    this.action = process.env.GITHUB_ACTION;
    this.actor = process.env.GITHUB_ACTOR;
    this.job = process.env.GITHUB_JOB;
    this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
    this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
    this.apiUrl = (_a = process.env.GITHUB_API_URL) !== null && _a !== void 0 ? _a : `https://api.github.com`;
    this.serverUrl = (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0 ? _b : `https://github.com`;
    this.graphqlUrl = (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0 ? _c : `https://api.github.com/graphql`;
  }
  get issue() {
    const payload = this.payload;
    return Object.assign(Object.assign({}, this.repo), { number: (payload.issue || payload.pull_request || payload).number });
  }
  get repo() {
    if (process.env.GITHUB_REPOSITORY) {
      const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
      return { owner, repo };
    }
    if (this.payload.repository) {
      return {
        owner: this.payload.repository.owner.login,
        repo: this.payload.repository.name
      };
    }
    throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
  }
};
context$1.Context = Context$1;
var utils$e = {};
var utils$d = {};
var __createBinding$1 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  Object.defineProperty(o, k2, { enumerable: true, get: function() {
    return m[k];
  } });
} : function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault$1 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function(o, v) {
  o["default"] = v;
});
var __importStar$1 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.hasOwnProperty.call(mod, k))
        __createBinding$1(result, mod, k);
  }
  __setModuleDefault$1(result, mod);
  return result;
};
Object.defineProperty(utils$d, "__esModule", { value: true });
utils$d.getApiBaseUrl = utils$d.getProxyAgent = utils$d.getAuthString = void 0;
const httpClient = __importStar$1(lib$2);
function getAuthString(token, options) {
  if (!token && !options.auth) {
    throw new Error("Parameter token or opts.auth is required");
  } else if (token && options.auth) {
    throw new Error("Parameters token and opts.auth may not both be specified");
  }
  return typeof options.auth === "string" ? options.auth : `token ${token}`;
}
utils$d.getAuthString = getAuthString;
function getProxyAgent(destinationUrl) {
  const hc = new httpClient.HttpClient();
  return hc.getAgent(destinationUrl);
}
utils$d.getProxyAgent = getProxyAgent;
function getApiBaseUrl() {
  return process.env["GITHUB_API_URL"] || "https://api.github.com";
}
utils$d.getApiBaseUrl = getApiBaseUrl;
function getUserAgent() {
  if (typeof navigator === "object" && "userAgent" in navigator) {
    return navigator.userAgent;
  }
  if (typeof process === "object" && "version" in process) {
    return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
  }
  return "<environment undetectable>";
}
var beforeAfterHook = { exports: {} };
var register_1 = register$1;
function register$1(state, name, method, options) {
  if (typeof method !== "function") {
    throw new Error("method for before hook must be a function");
  }
  if (!options) {
    options = {};
  }
  if (Array.isArray(name)) {
    return name.reverse().reduce(function(callback, name2) {
      return register$1.bind(null, state, name2, callback, options);
    }, method)();
  }
  return Promise.resolve().then(function() {
    if (!state.registry[name]) {
      return method(options);
    }
    return state.registry[name].reduce(function(method2, registered) {
      return registered.hook.bind(null, method2, options);
    }, method)();
  });
}
var add = addHook$1;
function addHook$1(state, kind, name, hook2) {
  var orig = hook2;
  if (!state.registry[name]) {
    state.registry[name] = [];
  }
  if (kind === "before") {
    hook2 = function(method, options) {
      return Promise.resolve().then(orig.bind(null, options)).then(method.bind(null, options));
    };
  }
  if (kind === "after") {
    hook2 = function(method, options) {
      var result;
      return Promise.resolve().then(method.bind(null, options)).then(function(result_) {
        result = result_;
        return orig(result, options);
      }).then(function() {
        return result;
      });
    };
  }
  if (kind === "error") {
    hook2 = function(method, options) {
      return Promise.resolve().then(method.bind(null, options)).catch(function(error2) {
        return orig(error2, options);
      });
    };
  }
  state.registry[name].push({
    hook: hook2,
    orig
  });
}
var remove$1 = removeHook$1;
function removeHook$1(state, name, method) {
  if (!state.registry[name]) {
    return;
  }
  var index2 = state.registry[name].map(function(registered) {
    return registered.orig;
  }).indexOf(method);
  if (index2 === -1) {
    return;
  }
  state.registry[name].splice(index2, 1);
}
var register = register_1;
var addHook = add;
var removeHook = remove$1;
var bind = Function.bind;
var bindable = bind.bind(bind);
function bindApi(hook2, state, name) {
  var removeHookRef = bindable(removeHook, null).apply(
    null,
    name ? [state, name] : [state]
  );
  hook2.api = { remove: removeHookRef };
  hook2.remove = removeHookRef;
  ["before", "error", "after", "wrap"].forEach(function(kind) {
    var args = name ? [state, kind, name] : [state, kind];
    hook2[kind] = hook2.api[kind] = bindable(addHook, null).apply(null, args);
  });
}
function HookSingular() {
  var singularHookName = "h";
  var singularHookState = {
    registry: {}
  };
  var singularHook = register.bind(null, singularHookState, singularHookName);
  bindApi(singularHook, singularHookState, singularHookName);
  return singularHook;
}
function HookCollection() {
  var state = {
    registry: {}
  };
  var hook2 = register.bind(null, state);
  bindApi(hook2, state);
  return hook2;
}
var collectionHookDeprecationMessageDisplayed = false;
function Hook() {
  if (!collectionHookDeprecationMessageDisplayed) {
    console.warn(
      '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'
    );
    collectionHookDeprecationMessageDisplayed = true;
  }
  return HookCollection();
}
Hook.Singular = HookSingular.bind();
Hook.Collection = HookCollection.bind();
beforeAfterHook.exports = Hook;
beforeAfterHook.exports.Hook = Hook;
beforeAfterHook.exports.Singular = Hook.Singular;
var Collection = beforeAfterHook.exports.Collection = Hook.Collection;
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
function isObject$3(o) {
  return Object.prototype.toString.call(o) === "[object Object]";
}
function isPlainObject$2(o) {
  var ctor, prot;
  if (isObject$3(o) === false)
    return false;
  ctor = o.constructor;
  if (ctor === void 0)
    return true;
  prot = ctor.prototype;
  if (isObject$3(prot) === false)
    return false;
  if (prot.hasOwnProperty("isPrototypeOf") === false) {
    return false;
  }
  return true;
}
function lowercaseKeys(object) {
  if (!object) {
    return {};
  }
  return Object.keys(object).reduce((newObj, key) => {
    newObj[key.toLowerCase()] = object[key];
    return newObj;
  }, {});
}
function mergeDeep(defaults, options) {
  const result = Object.assign({}, defaults);
  Object.keys(options).forEach((key) => {
    if (isPlainObject$2(options[key])) {
      if (!(key in defaults))
        Object.assign(result, { [key]: options[key] });
      else
        result[key] = mergeDeep(defaults[key], options[key]);
    } else {
      Object.assign(result, { [key]: options[key] });
    }
  });
  return result;
}
function removeUndefinedProperties(obj) {
  for (const key in obj) {
    if (obj[key] === void 0) {
      delete obj[key];
    }
  }
  return obj;
}
function merge$2(defaults, route, options) {
  if (typeof route === "string") {
    let [method, url] = route.split(" ");
    options = Object.assign(url ? { method, url } : { url: method }, options);
  } else {
    options = Object.assign({}, route);
  }
  options.headers = lowercaseKeys(options.headers);
  removeUndefinedProperties(options);
  removeUndefinedProperties(options.headers);
  const mergedOptions = mergeDeep(defaults || {}, options);
  if (defaults && defaults.mediaType.previews.length) {
    mergedOptions.mediaType.previews = defaults.mediaType.previews.filter((preview) => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);
  }
  mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, ""));
  return mergedOptions;
}
function addQueryParameters(url, parameters) {
  const separator = /\?/.test(url) ? "&" : "?";
  const names = Object.keys(parameters);
  if (names.length === 0) {
    return url;
  }
  return url + separator + names.map((name) => {
    if (name === "q") {
      return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
    }
    return `${name}=${encodeURIComponent(parameters[name])}`;
  }).join("&");
}
const urlVariableRegex = /\{[^}]+\}/g;
function removeNonChars(variableName) {
  return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
}
function extractUrlVariableNames(url) {
  const matches = url.match(urlVariableRegex);
  if (!matches) {
    return [];
  }
  return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
}
function omit(object, keysToOmit) {
  return Object.keys(object).filter((option) => !keysToOmit.includes(option)).reduce((obj, key) => {
    obj[key] = object[key];
    return obj;
  }, {});
}
function encodeReserved(str2) {
  return str2.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
    if (!/%[0-9A-Fa-f]/.test(part)) {
      part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
    }
    return part;
  }).join("");
}
function encodeUnreserved(str2) {
  return encodeURIComponent(str2).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
function encodeValue(operator, value2, key) {
  value2 = operator === "+" || operator === "#" ? encodeReserved(value2) : encodeUnreserved(value2);
  if (key) {
    return encodeUnreserved(key) + "=" + value2;
  } else {
    return value2;
  }
}
function isDefined(value2) {
  return value2 !== void 0 && value2 !== null;
}
function isKeyOperator(operator) {
  return operator === ";" || operator === "&" || operator === "?";
}
function getValues(context2, operator, key, modifier) {
  var value2 = context2[key], result = [];
  if (isDefined(value2) && value2 !== "") {
    if (typeof value2 === "string" || typeof value2 === "number" || typeof value2 === "boolean") {
      value2 = value2.toString();
      if (modifier && modifier !== "*") {
        value2 = value2.substring(0, parseInt(modifier, 10));
      }
      result.push(encodeValue(operator, value2, isKeyOperator(operator) ? key : ""));
    } else {
      if (modifier === "*") {
        if (Array.isArray(value2)) {
          value2.filter(isDefined).forEach(function(value3) {
            result.push(encodeValue(operator, value3, isKeyOperator(operator) ? key : ""));
          });
        } else {
          Object.keys(value2).forEach(function(k) {
            if (isDefined(value2[k])) {
              result.push(encodeValue(operator, value2[k], k));
            }
          });
        }
      } else {
        const tmp = [];
        if (Array.isArray(value2)) {
          value2.filter(isDefined).forEach(function(value3) {
            tmp.push(encodeValue(operator, value3));
          });
        } else {
          Object.keys(value2).forEach(function(k) {
            if (isDefined(value2[k])) {
              tmp.push(encodeUnreserved(k));
              tmp.push(encodeValue(operator, value2[k].toString()));
            }
          });
        }
        if (isKeyOperator(operator)) {
          result.push(encodeUnreserved(key) + "=" + tmp.join(","));
        } else if (tmp.length !== 0) {
          result.push(tmp.join(","));
        }
      }
    }
  } else {
    if (operator === ";") {
      if (isDefined(value2)) {
        result.push(encodeUnreserved(key));
      }
    } else if (value2 === "" && (operator === "&" || operator === "?")) {
      result.push(encodeUnreserved(key) + "=");
    } else if (value2 === "") {
      result.push("");
    }
  }
  return result;
}
function parseUrl(template) {
  return {
    expand: expand$2.bind(null, template)
  };
}
function expand$2(template, context2) {
  var operators = ["+", "#", ".", "/", ";", "?", "&"];
  return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function(_, expression, literal) {
    if (expression) {
      let operator = "";
      const values = [];
      if (operators.indexOf(expression.charAt(0)) !== -1) {
        operator = expression.charAt(0);
        expression = expression.substr(1);
      }
      expression.split(/,/g).forEach(function(variable) {
        var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
        values.push(getValues(context2, operator, tmp[1], tmp[2] || tmp[3]));
      });
      if (operator && operator !== "+") {
        var separator = ",";
        if (operator === "?") {
          separator = "&";
        } else if (operator !== "#") {
          separator = operator;
        }
        return (values.length !== 0 ? operator : "") + values.join(separator);
      } else {
        return values.join(",");
      }
    } else {
      return encodeReserved(literal);
    }
  });
}
function parse$8(options) {
  let method = options.method.toUpperCase();
  let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
  let headers = Object.assign({}, options.headers);
  let body;
  let parameters = omit(options, [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "mediaType"
  ]);
  const urlVariableNames = extractUrlVariableNames(url);
  url = parseUrl(url).expand(parameters);
  if (!/^http/.test(url)) {
    url = options.baseUrl + url;
  }
  const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
  const remainingParameters = omit(parameters, omittedParameters);
  const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
  if (!isBinaryRequest) {
    if (options.mediaType.format) {
      headers.accept = headers.accept.split(/,/).map((preview) => preview.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(",");
    }
    if (options.mediaType.previews.length) {
      const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
      headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
        const format2 = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
        return `application/vnd.github.${preview}-preview${format2}`;
      }).join(",");
    }
  }
  if (["GET", "HEAD"].includes(method)) {
    url = addQueryParameters(url, remainingParameters);
  } else {
    if ("data" in remainingParameters) {
      body = remainingParameters.data;
    } else {
      if (Object.keys(remainingParameters).length) {
        body = remainingParameters;
      } else {
        headers["content-length"] = 0;
      }
    }
  }
  if (!headers["content-type"] && typeof body !== "undefined") {
    headers["content-type"] = "application/json; charset=utf-8";
  }
  if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
    body = "";
  }
  return Object.assign({ method, url, headers }, typeof body !== "undefined" ? { body } : null, options.request ? { request: options.request } : null);
}
function endpointWithDefaults(defaults, route, options) {
  return parse$8(merge$2(defaults, route, options));
}
function withDefaults$2(oldDefaults, newDefaults) {
  const DEFAULTS2 = merge$2(oldDefaults, newDefaults);
  const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
  return Object.assign(endpoint2, {
    DEFAULTS: DEFAULTS2,
    defaults: withDefaults$2.bind(null, DEFAULTS2),
    merge: merge$2.bind(null, DEFAULTS2),
    parse: parse$8
  });
}
const VERSION$5 = "6.0.12";
const userAgent = `octokit-endpoint.js/${VERSION$5} ${getUserAgent()}`;
const DEFAULTS = {
  method: "GET",
  baseUrl: "https://api.github.com",
  headers: {
    accept: "application/vnd.github.v3+json",
    "user-agent": userAgent
  },
  mediaType: {
    format: "",
    previews: []
  }
};
const endpoint = withDefaults$2(null, DEFAULTS);
var publicApi = {};
var URL$2 = { exports: {} };
var conversions = {};
var lib$1 = conversions;
function sign(x) {
  return x < 0 ? -1 : 1;
}
function evenRound(x) {
  if (x % 1 === 0.5 && (x & 1) === 0) {
    return Math.floor(x);
  } else {
    return Math.round(x);
  }
}
function createNumberConversion(bitLength, typeOpts) {
  if (!typeOpts.unsigned) {
    --bitLength;
  }
  const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
  const upperBound = Math.pow(2, bitLength) - 1;
  const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
  const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
  return function(V, opts) {
    if (!opts)
      opts = {};
    let x = +V;
    if (opts.enforceRange) {
      if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite number");
      }
      x = sign(x) * Math.floor(Math.abs(x));
      if (x < lowerBound || x > upperBound) {
        throw new TypeError("Argument is not in byte range");
      }
      return x;
    }
    if (!isNaN(x) && opts.clamp) {
      x = evenRound(x);
      if (x < lowerBound)
        x = lowerBound;
      if (x > upperBound)
        x = upperBound;
      return x;
    }
    if (!Number.isFinite(x) || x === 0) {
      return 0;
    }
    x = sign(x) * Math.floor(Math.abs(x));
    x = x % moduloVal;
    if (!typeOpts.unsigned && x >= moduloBound) {
      return x - moduloVal;
    } else if (typeOpts.unsigned) {
      if (x < 0) {
        x += moduloVal;
      } else if (x === -0) {
        return 0;
      }
    }
    return x;
  };
}
conversions["void"] = function() {
  return void 0;
};
conversions["boolean"] = function(val) {
  return !!val;
};
conversions["byte"] = createNumberConversion(8, { unsigned: false });
conversions["octet"] = createNumberConversion(8, { unsigned: true });
conversions["short"] = createNumberConversion(16, { unsigned: false });
conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
conversions["long"] = createNumberConversion(32, { unsigned: false });
conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
conversions["double"] = function(V) {
  const x = +V;
  if (!Number.isFinite(x)) {
    throw new TypeError("Argument is not a finite floating-point value");
  }
  return x;
};
conversions["unrestricted double"] = function(V) {
  const x = +V;
  if (isNaN(x)) {
    throw new TypeError("Argument is NaN");
  }
  return x;
};
conversions["float"] = conversions["double"];
conversions["unrestricted float"] = conversions["unrestricted double"];
conversions["DOMString"] = function(V, opts) {
  if (!opts)
    opts = {};
  if (opts.treatNullAsEmptyString && V === null) {
    return "";
  }
  return String(V);
};
conversions["ByteString"] = function(V, opts) {
  const x = String(V);
  let c = void 0;
  for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
    if (c > 255) {
      throw new TypeError("Argument is not a valid bytestring");
    }
  }
  return x;
};
conversions["USVString"] = function(V) {
  const S = String(V);
  const n = S.length;
  const U = [];
  for (let i = 0; i < n; ++i) {
    const c = S.charCodeAt(i);
    if (c < 55296 || c > 57343) {
      U.push(String.fromCodePoint(c));
    } else if (56320 <= c && c <= 57343) {
      U.push(String.fromCodePoint(65533));
    } else {
      if (i === n - 1) {
        U.push(String.fromCodePoint(65533));
      } else {
        const d = S.charCodeAt(i + 1);
        if (56320 <= d && d <= 57343) {
          const a = c & 1023;
          const b = d & 1023;
          U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
          ++i;
        } else {
          U.push(String.fromCodePoint(65533));
        }
      }
    }
  }
  return U.join("");
};
conversions["Date"] = function(V, opts) {
  if (!(V instanceof Date)) {
    throw new TypeError("Argument is not a Date object");
  }
  if (isNaN(V)) {
    return void 0;
  }
  return V;
};
conversions["RegExp"] = function(V, opts) {
  if (!(V instanceof RegExp)) {
    V = new RegExp(V);
  }
  return V;
};
var utils$c = { exports: {} };
(function(module) {
  module.exports.mixin = function mixin(target, source) {
    const keys2 = Object.getOwnPropertyNames(source);
    for (let i = 0; i < keys2.length; ++i) {
      Object.defineProperty(target, keys2[i], Object.getOwnPropertyDescriptor(source, keys2[i]));
    }
  };
  module.exports.wrapperSymbol = Symbol("wrapper");
  module.exports.implSymbol = Symbol("impl");
  module.exports.wrapperForImpl = function(impl) {
    return impl[module.exports.wrapperSymbol];
  };
  module.exports.implForWrapper = function(wrapper) {
    return wrapper[module.exports.implSymbol];
  };
})(utils$c);
var utilsExports = utils$c.exports;
var URLImpl = {};
var urlStateMachine = { exports: {} };
var tr46 = {};
const require$$1$1 = [
  [
    [
      0,
      44
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      45,
      46
    ],
    "valid"
  ],
  [
    [
      47,
      47
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      48,
      57
    ],
    "valid"
  ],
  [
    [
      58,
      64
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      65,
      65
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      66,
      66
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      67,
      67
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      68,
      68
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      69,
      69
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      70,
      70
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      71,
      71
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      72,
      72
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      73,
      73
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      74,
      74
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      75,
      75
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      76,
      76
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      77,
      77
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      78,
      78
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      79,
      79
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      80,
      80
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      81,
      81
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      82,
      82
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      83,
      83
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      84,
      84
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      85,
      85
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      86,
      86
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      87,
      87
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      88,
      88
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      89,
      89
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      90,
      90
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      91,
      96
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      97,
      122
    ],
    "valid"
  ],
  [
    [
      123,
      127
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      128,
      159
    ],
    "disallowed"
  ],
  [
    [
      160,
      160
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      161,
      167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      168,
      168
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776
    ]
  ],
  [
    [
      169,
      169
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      170,
      170
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      171,
      172
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      173,
      173
    ],
    "ignored"
  ],
  [
    [
      174,
      174
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      175,
      175
    ],
    "disallowed_STD3_mapped",
    [
      32,
      772
    ]
  ],
  [
    [
      176,
      177
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      178,
      178
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      179,
      179
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      180,
      180
    ],
    "disallowed_STD3_mapped",
    [
      32,
      769
    ]
  ],
  [
    [
      181,
      181
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      182,
      182
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      183,
      183
    ],
    "valid"
  ],
  [
    [
      184,
      184
    ],
    "disallowed_STD3_mapped",
    [
      32,
      807
    ]
  ],
  [
    [
      185,
      185
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      186,
      186
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      187,
      187
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      188,
      188
    ],
    "mapped",
    [
      49,
      8260,
      52
    ]
  ],
  [
    [
      189,
      189
    ],
    "mapped",
    [
      49,
      8260,
      50
    ]
  ],
  [
    [
      190,
      190
    ],
    "mapped",
    [
      51,
      8260,
      52
    ]
  ],
  [
    [
      191,
      191
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      192,
      192
    ],
    "mapped",
    [
      224
    ]
  ],
  [
    [
      193,
      193
    ],
    "mapped",
    [
      225
    ]
  ],
  [
    [
      194,
      194
    ],
    "mapped",
    [
      226
    ]
  ],
  [
    [
      195,
      195
    ],
    "mapped",
    [
      227
    ]
  ],
  [
    [
      196,
      196
    ],
    "mapped",
    [
      228
    ]
  ],
  [
    [
      197,
      197
    ],
    "mapped",
    [
      229
    ]
  ],
  [
    [
      198,
      198
    ],
    "mapped",
    [
      230
    ]
  ],
  [
    [
      199,
      199
    ],
    "mapped",
    [
      231
    ]
  ],
  [
    [
      200,
      200
    ],
    "mapped",
    [
      232
    ]
  ],
  [
    [
      201,
      201
    ],
    "mapped",
    [
      233
    ]
  ],
  [
    [
      202,
      202
    ],
    "mapped",
    [
      234
    ]
  ],
  [
    [
      203,
      203
    ],
    "mapped",
    [
      235
    ]
  ],
  [
    [
      204,
      204
    ],
    "mapped",
    [
      236
    ]
  ],
  [
    [
      205,
      205
    ],
    "mapped",
    [
      237
    ]
  ],
  [
    [
      206,
      206
    ],
    "mapped",
    [
      238
    ]
  ],
  [
    [
      207,
      207
    ],
    "mapped",
    [
      239
    ]
  ],
  [
    [
      208,
      208
    ],
    "mapped",
    [
      240
    ]
  ],
  [
    [
      209,
      209
    ],
    "mapped",
    [
      241
    ]
  ],
  [
    [
      210,
      210
    ],
    "mapped",
    [
      242
    ]
  ],
  [
    [
      211,
      211
    ],
    "mapped",
    [
      243
    ]
  ],
  [
    [
      212,
      212
    ],
    "mapped",
    [
      244
    ]
  ],
  [
    [
      213,
      213
    ],
    "mapped",
    [
      245
    ]
  ],
  [
    [
      214,
      214
    ],
    "mapped",
    [
      246
    ]
  ],
  [
    [
      215,
      215
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      216,
      216
    ],
    "mapped",
    [
      248
    ]
  ],
  [
    [
      217,
      217
    ],
    "mapped",
    [
      249
    ]
  ],
  [
    [
      218,
      218
    ],
    "mapped",
    [
      250
    ]
  ],
  [
    [
      219,
      219
    ],
    "mapped",
    [
      251
    ]
  ],
  [
    [
      220,
      220
    ],
    "mapped",
    [
      252
    ]
  ],
  [
    [
      221,
      221
    ],
    "mapped",
    [
      253
    ]
  ],
  [
    [
      222,
      222
    ],
    "mapped",
    [
      254
    ]
  ],
  [
    [
      223,
      223
    ],
    "deviation",
    [
      115,
      115
    ]
  ],
  [
    [
      224,
      246
    ],
    "valid"
  ],
  [
    [
      247,
      247
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      248,
      255
    ],
    "valid"
  ],
  [
    [
      256,
      256
    ],
    "mapped",
    [
      257
    ]
  ],
  [
    [
      257,
      257
    ],
    "valid"
  ],
  [
    [
      258,
      258
    ],
    "mapped",
    [
      259
    ]
  ],
  [
    [
      259,
      259
    ],
    "valid"
  ],
  [
    [
      260,
      260
    ],
    "mapped",
    [
      261
    ]
  ],
  [
    [
      261,
      261
    ],
    "valid"
  ],
  [
    [
      262,
      262
    ],
    "mapped",
    [
      263
    ]
  ],
  [
    [
      263,
      263
    ],
    "valid"
  ],
  [
    [
      264,
      264
    ],
    "mapped",
    [
      265
    ]
  ],
  [
    [
      265,
      265
    ],
    "valid"
  ],
  [
    [
      266,
      266
    ],
    "mapped",
    [
      267
    ]
  ],
  [
    [
      267,
      267
    ],
    "valid"
  ],
  [
    [
      268,
      268
    ],
    "mapped",
    [
      269
    ]
  ],
  [
    [
      269,
      269
    ],
    "valid"
  ],
  [
    [
      270,
      270
    ],
    "mapped",
    [
      271
    ]
  ],
  [
    [
      271,
      271
    ],
    "valid"
  ],
  [
    [
      272,
      272
    ],
    "mapped",
    [
      273
    ]
  ],
  [
    [
      273,
      273
    ],
    "valid"
  ],
  [
    [
      274,
      274
    ],
    "mapped",
    [
      275
    ]
  ],
  [
    [
      275,
      275
    ],
    "valid"
  ],
  [
    [
      276,
      276
    ],
    "mapped",
    [
      277
    ]
  ],
  [
    [
      277,
      277
    ],
    "valid"
  ],
  [
    [
      278,
      278
    ],
    "mapped",
    [
      279
    ]
  ],
  [
    [
      279,
      279
    ],
    "valid"
  ],
  [
    [
      280,
      280
    ],
    "mapped",
    [
      281
    ]
  ],
  [
    [
      281,
      281
    ],
    "valid"
  ],
  [
    [
      282,
      282
    ],
    "mapped",
    [
      283
    ]
  ],
  [
    [
      283,
      283
    ],
    "valid"
  ],
  [
    [
      284,
      284
    ],
    "mapped",
    [
      285
    ]
  ],
  [
    [
      285,
      285
    ],
    "valid"
  ],
  [
    [
      286,
      286
    ],
    "mapped",
    [
      287
    ]
  ],
  [
    [
      287,
      287
    ],
    "valid"
  ],
  [
    [
      288,
      288
    ],
    "mapped",
    [
      289
    ]
  ],
  [
    [
      289,
      289
    ],
    "valid"
  ],
  [
    [
      290,
      290
    ],
    "mapped",
    [
      291
    ]
  ],
  [
    [
      291,
      291
    ],
    "valid"
  ],
  [
    [
      292,
      292
    ],
    "mapped",
    [
      293
    ]
  ],
  [
    [
      293,
      293
    ],
    "valid"
  ],
  [
    [
      294,
      294
    ],
    "mapped",
    [
      295
    ]
  ],
  [
    [
      295,
      295
    ],
    "valid"
  ],
  [
    [
      296,
      296
    ],
    "mapped",
    [
      297
    ]
  ],
  [
    [
      297,
      297
    ],
    "valid"
  ],
  [
    [
      298,
      298
    ],
    "mapped",
    [
      299
    ]
  ],
  [
    [
      299,
      299
    ],
    "valid"
  ],
  [
    [
      300,
      300
    ],
    "mapped",
    [
      301
    ]
  ],
  [
    [
      301,
      301
    ],
    "valid"
  ],
  [
    [
      302,
      302
    ],
    "mapped",
    [
      303
    ]
  ],
  [
    [
      303,
      303
    ],
    "valid"
  ],
  [
    [
      304,
      304
    ],
    "mapped",
    [
      105,
      775
    ]
  ],
  [
    [
      305,
      305
    ],
    "valid"
  ],
  [
    [
      306,
      307
    ],
    "mapped",
    [
      105,
      106
    ]
  ],
  [
    [
      308,
      308
    ],
    "mapped",
    [
      309
    ]
  ],
  [
    [
      309,
      309
    ],
    "valid"
  ],
  [
    [
      310,
      310
    ],
    "mapped",
    [
      311
    ]
  ],
  [
    [
      311,
      312
    ],
    "valid"
  ],
  [
    [
      313,
      313
    ],
    "mapped",
    [
      314
    ]
  ],
  [
    [
      314,
      314
    ],
    "valid"
  ],
  [
    [
      315,
      315
    ],
    "mapped",
    [
      316
    ]
  ],
  [
    [
      316,
      316
    ],
    "valid"
  ],
  [
    [
      317,
      317
    ],
    "mapped",
    [
      318
    ]
  ],
  [
    [
      318,
      318
    ],
    "valid"
  ],
  [
    [
      319,
      320
    ],
    "mapped",
    [
      108,
      183
    ]
  ],
  [
    [
      321,
      321
    ],
    "mapped",
    [
      322
    ]
  ],
  [
    [
      322,
      322
    ],
    "valid"
  ],
  [
    [
      323,
      323
    ],
    "mapped",
    [
      324
    ]
  ],
  [
    [
      324,
      324
    ],
    "valid"
  ],
  [
    [
      325,
      325
    ],
    "mapped",
    [
      326
    ]
  ],
  [
    [
      326,
      326
    ],
    "valid"
  ],
  [
    [
      327,
      327
    ],
    "mapped",
    [
      328
    ]
  ],
  [
    [
      328,
      328
    ],
    "valid"
  ],
  [
    [
      329,
      329
    ],
    "mapped",
    [
      700,
      110
    ]
  ],
  [
    [
      330,
      330
    ],
    "mapped",
    [
      331
    ]
  ],
  [
    [
      331,
      331
    ],
    "valid"
  ],
  [
    [
      332,
      332
    ],
    "mapped",
    [
      333
    ]
  ],
  [
    [
      333,
      333
    ],
    "valid"
  ],
  [
    [
      334,
      334
    ],
    "mapped",
    [
      335
    ]
  ],
  [
    [
      335,
      335
    ],
    "valid"
  ],
  [
    [
      336,
      336
    ],
    "mapped",
    [
      337
    ]
  ],
  [
    [
      337,
      337
    ],
    "valid"
  ],
  [
    [
      338,
      338
    ],
    "mapped",
    [
      339
    ]
  ],
  [
    [
      339,
      339
    ],
    "valid"
  ],
  [
    [
      340,
      340
    ],
    "mapped",
    [
      341
    ]
  ],
  [
    [
      341,
      341
    ],
    "valid"
  ],
  [
    [
      342,
      342
    ],
    "mapped",
    [
      343
    ]
  ],
  [
    [
      343,
      343
    ],
    "valid"
  ],
  [
    [
      344,
      344
    ],
    "mapped",
    [
      345
    ]
  ],
  [
    [
      345,
      345
    ],
    "valid"
  ],
  [
    [
      346,
      346
    ],
    "mapped",
    [
      347
    ]
  ],
  [
    [
      347,
      347
    ],
    "valid"
  ],
  [
    [
      348,
      348
    ],
    "mapped",
    [
      349
    ]
  ],
  [
    [
      349,
      349
    ],
    "valid"
  ],
  [
    [
      350,
      350
    ],
    "mapped",
    [
      351
    ]
  ],
  [
    [
      351,
      351
    ],
    "valid"
  ],
  [
    [
      352,
      352
    ],
    "mapped",
    [
      353
    ]
  ],
  [
    [
      353,
      353
    ],
    "valid"
  ],
  [
    [
      354,
      354
    ],
    "mapped",
    [
      355
    ]
  ],
  [
    [
      355,
      355
    ],
    "valid"
  ],
  [
    [
      356,
      356
    ],
    "mapped",
    [
      357
    ]
  ],
  [
    [
      357,
      357
    ],
    "valid"
  ],
  [
    [
      358,
      358
    ],
    "mapped",
    [
      359
    ]
  ],
  [
    [
      359,
      359
    ],
    "valid"
  ],
  [
    [
      360,
      360
    ],
    "mapped",
    [
      361
    ]
  ],
  [
    [
      361,
      361
    ],
    "valid"
  ],
  [
    [
      362,
      362
    ],
    "mapped",
    [
      363
    ]
  ],
  [
    [
      363,
      363
    ],
    "valid"
  ],
  [
    [
      364,
      364
    ],
    "mapped",
    [
      365
    ]
  ],
  [
    [
      365,
      365
    ],
    "valid"
  ],
  [
    [
      366,
      366
    ],
    "mapped",
    [
      367
    ]
  ],
  [
    [
      367,
      367
    ],
    "valid"
  ],
  [
    [
      368,
      368
    ],
    "mapped",
    [
      369
    ]
  ],
  [
    [
      369,
      369
    ],
    "valid"
  ],
  [
    [
      370,
      370
    ],
    "mapped",
    [
      371
    ]
  ],
  [
    [
      371,
      371
    ],
    "valid"
  ],
  [
    [
      372,
      372
    ],
    "mapped",
    [
      373
    ]
  ],
  [
    [
      373,
      373
    ],
    "valid"
  ],
  [
    [
      374,
      374
    ],
    "mapped",
    [
      375
    ]
  ],
  [
    [
      375,
      375
    ],
    "valid"
  ],
  [
    [
      376,
      376
    ],
    "mapped",
    [
      255
    ]
  ],
  [
    [
      377,
      377
    ],
    "mapped",
    [
      378
    ]
  ],
  [
    [
      378,
      378
    ],
    "valid"
  ],
  [
    [
      379,
      379
    ],
    "mapped",
    [
      380
    ]
  ],
  [
    [
      380,
      380
    ],
    "valid"
  ],
  [
    [
      381,
      381
    ],
    "mapped",
    [
      382
    ]
  ],
  [
    [
      382,
      382
    ],
    "valid"
  ],
  [
    [
      383,
      383
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      384,
      384
    ],
    "valid"
  ],
  [
    [
      385,
      385
    ],
    "mapped",
    [
      595
    ]
  ],
  [
    [
      386,
      386
    ],
    "mapped",
    [
      387
    ]
  ],
  [
    [
      387,
      387
    ],
    "valid"
  ],
  [
    [
      388,
      388
    ],
    "mapped",
    [
      389
    ]
  ],
  [
    [
      389,
      389
    ],
    "valid"
  ],
  [
    [
      390,
      390
    ],
    "mapped",
    [
      596
    ]
  ],
  [
    [
      391,
      391
    ],
    "mapped",
    [
      392
    ]
  ],
  [
    [
      392,
      392
    ],
    "valid"
  ],
  [
    [
      393,
      393
    ],
    "mapped",
    [
      598
    ]
  ],
  [
    [
      394,
      394
    ],
    "mapped",
    [
      599
    ]
  ],
  [
    [
      395,
      395
    ],
    "mapped",
    [
      396
    ]
  ],
  [
    [
      396,
      397
    ],
    "valid"
  ],
  [
    [
      398,
      398
    ],
    "mapped",
    [
      477
    ]
  ],
  [
    [
      399,
      399
    ],
    "mapped",
    [
      601
    ]
  ],
  [
    [
      400,
      400
    ],
    "mapped",
    [
      603
    ]
  ],
  [
    [
      401,
      401
    ],
    "mapped",
    [
      402
    ]
  ],
  [
    [
      402,
      402
    ],
    "valid"
  ],
  [
    [
      403,
      403
    ],
    "mapped",
    [
      608
    ]
  ],
  [
    [
      404,
      404
    ],
    "mapped",
    [
      611
    ]
  ],
  [
    [
      405,
      405
    ],
    "valid"
  ],
  [
    [
      406,
      406
    ],
    "mapped",
    [
      617
    ]
  ],
  [
    [
      407,
      407
    ],
    "mapped",
    [
      616
    ]
  ],
  [
    [
      408,
      408
    ],
    "mapped",
    [
      409
    ]
  ],
  [
    [
      409,
      411
    ],
    "valid"
  ],
  [
    [
      412,
      412
    ],
    "mapped",
    [
      623
    ]
  ],
  [
    [
      413,
      413
    ],
    "mapped",
    [
      626
    ]
  ],
  [
    [
      414,
      414
    ],
    "valid"
  ],
  [
    [
      415,
      415
    ],
    "mapped",
    [
      629
    ]
  ],
  [
    [
      416,
      416
    ],
    "mapped",
    [
      417
    ]
  ],
  [
    [
      417,
      417
    ],
    "valid"
  ],
  [
    [
      418,
      418
    ],
    "mapped",
    [
      419
    ]
  ],
  [
    [
      419,
      419
    ],
    "valid"
  ],
  [
    [
      420,
      420
    ],
    "mapped",
    [
      421
    ]
  ],
  [
    [
      421,
      421
    ],
    "valid"
  ],
  [
    [
      422,
      422
    ],
    "mapped",
    [
      640
    ]
  ],
  [
    [
      423,
      423
    ],
    "mapped",
    [
      424
    ]
  ],
  [
    [
      424,
      424
    ],
    "valid"
  ],
  [
    [
      425,
      425
    ],
    "mapped",
    [
      643
    ]
  ],
  [
    [
      426,
      427
    ],
    "valid"
  ],
  [
    [
      428,
      428
    ],
    "mapped",
    [
      429
    ]
  ],
  [
    [
      429,
      429
    ],
    "valid"
  ],
  [
    [
      430,
      430
    ],
    "mapped",
    [
      648
    ]
  ],
  [
    [
      431,
      431
    ],
    "mapped",
    [
      432
    ]
  ],
  [
    [
      432,
      432
    ],
    "valid"
  ],
  [
    [
      433,
      433
    ],
    "mapped",
    [
      650
    ]
  ],
  [
    [
      434,
      434
    ],
    "mapped",
    [
      651
    ]
  ],
  [
    [
      435,
      435
    ],
    "mapped",
    [
      436
    ]
  ],
  [
    [
      436,
      436
    ],
    "valid"
  ],
  [
    [
      437,
      437
    ],
    "mapped",
    [
      438
    ]
  ],
  [
    [
      438,
      438
    ],
    "valid"
  ],
  [
    [
      439,
      439
    ],
    "mapped",
    [
      658
    ]
  ],
  [
    [
      440,
      440
    ],
    "mapped",
    [
      441
    ]
  ],
  [
    [
      441,
      443
    ],
    "valid"
  ],
  [
    [
      444,
      444
    ],
    "mapped",
    [
      445
    ]
  ],
  [
    [
      445,
      451
    ],
    "valid"
  ],
  [
    [
      452,
      454
    ],
    "mapped",
    [
      100,
      382
    ]
  ],
  [
    [
      455,
      457
    ],
    "mapped",
    [
      108,
      106
    ]
  ],
  [
    [
      458,
      460
    ],
    "mapped",
    [
      110,
      106
    ]
  ],
  [
    [
      461,
      461
    ],
    "mapped",
    [
      462
    ]
  ],
  [
    [
      462,
      462
    ],
    "valid"
  ],
  [
    [
      463,
      463
    ],
    "mapped",
    [
      464
    ]
  ],
  [
    [
      464,
      464
    ],
    "valid"
  ],
  [
    [
      465,
      465
    ],
    "mapped",
    [
      466
    ]
  ],
  [
    [
      466,
      466
    ],
    "valid"
  ],
  [
    [
      467,
      467
    ],
    "mapped",
    [
      468
    ]
  ],
  [
    [
      468,
      468
    ],
    "valid"
  ],
  [
    [
      469,
      469
    ],
    "mapped",
    [
      470
    ]
  ],
  [
    [
      470,
      470
    ],
    "valid"
  ],
  [
    [
      471,
      471
    ],
    "mapped",
    [
      472
    ]
  ],
  [
    [
      472,
      472
    ],
    "valid"
  ],
  [
    [
      473,
      473
    ],
    "mapped",
    [
      474
    ]
  ],
  [
    [
      474,
      474
    ],
    "valid"
  ],
  [
    [
      475,
      475
    ],
    "mapped",
    [
      476
    ]
  ],
  [
    [
      476,
      477
    ],
    "valid"
  ],
  [
    [
      478,
      478
    ],
    "mapped",
    [
      479
    ]
  ],
  [
    [
      479,
      479
    ],
    "valid"
  ],
  [
    [
      480,
      480
    ],
    "mapped",
    [
      481
    ]
  ],
  [
    [
      481,
      481
    ],
    "valid"
  ],
  [
    [
      482,
      482
    ],
    "mapped",
    [
      483
    ]
  ],
  [
    [
      483,
      483
    ],
    "valid"
  ],
  [
    [
      484,
      484
    ],
    "mapped",
    [
      485
    ]
  ],
  [
    [
      485,
      485
    ],
    "valid"
  ],
  [
    [
      486,
      486
    ],
    "mapped",
    [
      487
    ]
  ],
  [
    [
      487,
      487
    ],
    "valid"
  ],
  [
    [
      488,
      488
    ],
    "mapped",
    [
      489
    ]
  ],
  [
    [
      489,
      489
    ],
    "valid"
  ],
  [
    [
      490,
      490
    ],
    "mapped",
    [
      491
    ]
  ],
  [
    [
      491,
      491
    ],
    "valid"
  ],
  [
    [
      492,
      492
    ],
    "mapped",
    [
      493
    ]
  ],
  [
    [
      493,
      493
    ],
    "valid"
  ],
  [
    [
      494,
      494
    ],
    "mapped",
    [
      495
    ]
  ],
  [
    [
      495,
      496
    ],
    "valid"
  ],
  [
    [
      497,
      499
    ],
    "mapped",
    [
      100,
      122
    ]
  ],
  [
    [
      500,
      500
    ],
    "mapped",
    [
      501
    ]
  ],
  [
    [
      501,
      501
    ],
    "valid"
  ],
  [
    [
      502,
      502
    ],
    "mapped",
    [
      405
    ]
  ],
  [
    [
      503,
      503
    ],
    "mapped",
    [
      447
    ]
  ],
  [
    [
      504,
      504
    ],
    "mapped",
    [
      505
    ]
  ],
  [
    [
      505,
      505
    ],
    "valid"
  ],
  [
    [
      506,
      506
    ],
    "mapped",
    [
      507
    ]
  ],
  [
    [
      507,
      507
    ],
    "valid"
  ],
  [
    [
      508,
      508
    ],
    "mapped",
    [
      509
    ]
  ],
  [
    [
      509,
      509
    ],
    "valid"
  ],
  [
    [
      510,
      510
    ],
    "mapped",
    [
      511
    ]
  ],
  [
    [
      511,
      511
    ],
    "valid"
  ],
  [
    [
      512,
      512
    ],
    "mapped",
    [
      513
    ]
  ],
  [
    [
      513,
      513
    ],
    "valid"
  ],
  [
    [
      514,
      514
    ],
    "mapped",
    [
      515
    ]
  ],
  [
    [
      515,
      515
    ],
    "valid"
  ],
  [
    [
      516,
      516
    ],
    "mapped",
    [
      517
    ]
  ],
  [
    [
      517,
      517
    ],
    "valid"
  ],
  [
    [
      518,
      518
    ],
    "mapped",
    [
      519
    ]
  ],
  [
    [
      519,
      519
    ],
    "valid"
  ],
  [
    [
      520,
      520
    ],
    "mapped",
    [
      521
    ]
  ],
  [
    [
      521,
      521
    ],
    "valid"
  ],
  [
    [
      522,
      522
    ],
    "mapped",
    [
      523
    ]
  ],
  [
    [
      523,
      523
    ],
    "valid"
  ],
  [
    [
      524,
      524
    ],
    "mapped",
    [
      525
    ]
  ],
  [
    [
      525,
      525
    ],
    "valid"
  ],
  [
    [
      526,
      526
    ],
    "mapped",
    [
      527
    ]
  ],
  [
    [
      527,
      527
    ],
    "valid"
  ],
  [
    [
      528,
      528
    ],
    "mapped",
    [
      529
    ]
  ],
  [
    [
      529,
      529
    ],
    "valid"
  ],
  [
    [
      530,
      530
    ],
    "mapped",
    [
      531
    ]
  ],
  [
    [
      531,
      531
    ],
    "valid"
  ],
  [
    [
      532,
      532
    ],
    "mapped",
    [
      533
    ]
  ],
  [
    [
      533,
      533
    ],
    "valid"
  ],
  [
    [
      534,
      534
    ],
    "mapped",
    [
      535
    ]
  ],
  [
    [
      535,
      535
    ],
    "valid"
  ],
  [
    [
      536,
      536
    ],
    "mapped",
    [
      537
    ]
  ],
  [
    [
      537,
      537
    ],
    "valid"
  ],
  [
    [
      538,
      538
    ],
    "mapped",
    [
      539
    ]
  ],
  [
    [
      539,
      539
    ],
    "valid"
  ],
  [
    [
      540,
      540
    ],
    "mapped",
    [
      541
    ]
  ],
  [
    [
      541,
      541
    ],
    "valid"
  ],
  [
    [
      542,
      542
    ],
    "mapped",
    [
      543
    ]
  ],
  [
    [
      543,
      543
    ],
    "valid"
  ],
  [
    [
      544,
      544
    ],
    "mapped",
    [
      414
    ]
  ],
  [
    [
      545,
      545
    ],
    "valid"
  ],
  [
    [
      546,
      546
    ],
    "mapped",
    [
      547
    ]
  ],
  [
    [
      547,
      547
    ],
    "valid"
  ],
  [
    [
      548,
      548
    ],
    "mapped",
    [
      549
    ]
  ],
  [
    [
      549,
      549
    ],
    "valid"
  ],
  [
    [
      550,
      550
    ],
    "mapped",
    [
      551
    ]
  ],
  [
    [
      551,
      551
    ],
    "valid"
  ],
  [
    [
      552,
      552
    ],
    "mapped",
    [
      553
    ]
  ],
  [
    [
      553,
      553
    ],
    "valid"
  ],
  [
    [
      554,
      554
    ],
    "mapped",
    [
      555
    ]
  ],
  [
    [
      555,
      555
    ],
    "valid"
  ],
  [
    [
      556,
      556
    ],
    "mapped",
    [
      557
    ]
  ],
  [
    [
      557,
      557
    ],
    "valid"
  ],
  [
    [
      558,
      558
    ],
    "mapped",
    [
      559
    ]
  ],
  [
    [
      559,
      559
    ],
    "valid"
  ],
  [
    [
      560,
      560
    ],
    "mapped",
    [
      561
    ]
  ],
  [
    [
      561,
      561
    ],
    "valid"
  ],
  [
    [
      562,
      562
    ],
    "mapped",
    [
      563
    ]
  ],
  [
    [
      563,
      563
    ],
    "valid"
  ],
  [
    [
      564,
      566
    ],
    "valid"
  ],
  [
    [
      567,
      569
    ],
    "valid"
  ],
  [
    [
      570,
      570
    ],
    "mapped",
    [
      11365
    ]
  ],
  [
    [
      571,
      571
    ],
    "mapped",
    [
      572
    ]
  ],
  [
    [
      572,
      572
    ],
    "valid"
  ],
  [
    [
      573,
      573
    ],
    "mapped",
    [
      410
    ]
  ],
  [
    [
      574,
      574
    ],
    "mapped",
    [
      11366
    ]
  ],
  [
    [
      575,
      576
    ],
    "valid"
  ],
  [
    [
      577,
      577
    ],
    "mapped",
    [
      578
    ]
  ],
  [
    [
      578,
      578
    ],
    "valid"
  ],
  [
    [
      579,
      579
    ],
    "mapped",
    [
      384
    ]
  ],
  [
    [
      580,
      580
    ],
    "mapped",
    [
      649
    ]
  ],
  [
    [
      581,
      581
    ],
    "mapped",
    [
      652
    ]
  ],
  [
    [
      582,
      582
    ],
    "mapped",
    [
      583
    ]
  ],
  [
    [
      583,
      583
    ],
    "valid"
  ],
  [
    [
      584,
      584
    ],
    "mapped",
    [
      585
    ]
  ],
  [
    [
      585,
      585
    ],
    "valid"
  ],
  [
    [
      586,
      586
    ],
    "mapped",
    [
      587
    ]
  ],
  [
    [
      587,
      587
    ],
    "valid"
  ],
  [
    [
      588,
      588
    ],
    "mapped",
    [
      589
    ]
  ],
  [
    [
      589,
      589
    ],
    "valid"
  ],
  [
    [
      590,
      590
    ],
    "mapped",
    [
      591
    ]
  ],
  [
    [
      591,
      591
    ],
    "valid"
  ],
  [
    [
      592,
      680
    ],
    "valid"
  ],
  [
    [
      681,
      685
    ],
    "valid"
  ],
  [
    [
      686,
      687
    ],
    "valid"
  ],
  [
    [
      688,
      688
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      689,
      689
    ],
    "mapped",
    [
      614
    ]
  ],
  [
    [
      690,
      690
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      691,
      691
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      692,
      692
    ],
    "mapped",
    [
      633
    ]
  ],
  [
    [
      693,
      693
    ],
    "mapped",
    [
      635
    ]
  ],
  [
    [
      694,
      694
    ],
    "mapped",
    [
      641
    ]
  ],
  [
    [
      695,
      695
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      696,
      696
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      697,
      705
    ],
    "valid"
  ],
  [
    [
      706,
      709
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      710,
      721
    ],
    "valid"
  ],
  [
    [
      722,
      727
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      728,
      728
    ],
    "disallowed_STD3_mapped",
    [
      32,
      774
    ]
  ],
  [
    [
      729,
      729
    ],
    "disallowed_STD3_mapped",
    [
      32,
      775
    ]
  ],
  [
    [
      730,
      730
    ],
    "disallowed_STD3_mapped",
    [
      32,
      778
    ]
  ],
  [
    [
      731,
      731
    ],
    "disallowed_STD3_mapped",
    [
      32,
      808
    ]
  ],
  [
    [
      732,
      732
    ],
    "disallowed_STD3_mapped",
    [
      32,
      771
    ]
  ],
  [
    [
      733,
      733
    ],
    "disallowed_STD3_mapped",
    [
      32,
      779
    ]
  ],
  [
    [
      734,
      734
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      735,
      735
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      736,
      736
    ],
    "mapped",
    [
      611
    ]
  ],
  [
    [
      737,
      737
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      738,
      738
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      739,
      739
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      740,
      740
    ],
    "mapped",
    [
      661
    ]
  ],
  [
    [
      741,
      745
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      746,
      747
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      748,
      748
    ],
    "valid"
  ],
  [
    [
      749,
      749
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      750,
      750
    ],
    "valid"
  ],
  [
    [
      751,
      767
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      768,
      831
    ],
    "valid"
  ],
  [
    [
      832,
      832
    ],
    "mapped",
    [
      768
    ]
  ],
  [
    [
      833,
      833
    ],
    "mapped",
    [
      769
    ]
  ],
  [
    [
      834,
      834
    ],
    "valid"
  ],
  [
    [
      835,
      835
    ],
    "mapped",
    [
      787
    ]
  ],
  [
    [
      836,
      836
    ],
    "mapped",
    [
      776,
      769
    ]
  ],
  [
    [
      837,
      837
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      838,
      846
    ],
    "valid"
  ],
  [
    [
      847,
      847
    ],
    "ignored"
  ],
  [
    [
      848,
      855
    ],
    "valid"
  ],
  [
    [
      856,
      860
    ],
    "valid"
  ],
  [
    [
      861,
      863
    ],
    "valid"
  ],
  [
    [
      864,
      865
    ],
    "valid"
  ],
  [
    [
      866,
      866
    ],
    "valid"
  ],
  [
    [
      867,
      879
    ],
    "valid"
  ],
  [
    [
      880,
      880
    ],
    "mapped",
    [
      881
    ]
  ],
  [
    [
      881,
      881
    ],
    "valid"
  ],
  [
    [
      882,
      882
    ],
    "mapped",
    [
      883
    ]
  ],
  [
    [
      883,
      883
    ],
    "valid"
  ],
  [
    [
      884,
      884
    ],
    "mapped",
    [
      697
    ]
  ],
  [
    [
      885,
      885
    ],
    "valid"
  ],
  [
    [
      886,
      886
    ],
    "mapped",
    [
      887
    ]
  ],
  [
    [
      887,
      887
    ],
    "valid"
  ],
  [
    [
      888,
      889
    ],
    "disallowed"
  ],
  [
    [
      890,
      890
    ],
    "disallowed_STD3_mapped",
    [
      32,
      953
    ]
  ],
  [
    [
      891,
      893
    ],
    "valid"
  ],
  [
    [
      894,
      894
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      895,
      895
    ],
    "mapped",
    [
      1011
    ]
  ],
  [
    [
      896,
      899
    ],
    "disallowed"
  ],
  [
    [
      900,
      900
    ],
    "disallowed_STD3_mapped",
    [
      32,
      769
    ]
  ],
  [
    [
      901,
      901
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      769
    ]
  ],
  [
    [
      902,
      902
    ],
    "mapped",
    [
      940
    ]
  ],
  [
    [
      903,
      903
    ],
    "mapped",
    [
      183
    ]
  ],
  [
    [
      904,
      904
    ],
    "mapped",
    [
      941
    ]
  ],
  [
    [
      905,
      905
    ],
    "mapped",
    [
      942
    ]
  ],
  [
    [
      906,
      906
    ],
    "mapped",
    [
      943
    ]
  ],
  [
    [
      907,
      907
    ],
    "disallowed"
  ],
  [
    [
      908,
      908
    ],
    "mapped",
    [
      972
    ]
  ],
  [
    [
      909,
      909
    ],
    "disallowed"
  ],
  [
    [
      910,
      910
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      911,
      911
    ],
    "mapped",
    [
      974
    ]
  ],
  [
    [
      912,
      912
    ],
    "valid"
  ],
  [
    [
      913,
      913
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      914,
      914
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      915,
      915
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      916,
      916
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      917,
      917
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      918,
      918
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      919,
      919
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      920,
      920
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      921,
      921
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      922,
      922
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      923,
      923
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      924,
      924
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      925,
      925
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      926,
      926
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      927,
      927
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      928,
      928
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      929,
      929
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      930,
      930
    ],
    "disallowed"
  ],
  [
    [
      931,
      931
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      932,
      932
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      933,
      933
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      934,
      934
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      935,
      935
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      936,
      936
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      937,
      937
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      938,
      938
    ],
    "mapped",
    [
      970
    ]
  ],
  [
    [
      939,
      939
    ],
    "mapped",
    [
      971
    ]
  ],
  [
    [
      940,
      961
    ],
    "valid"
  ],
  [
    [
      962,
      962
    ],
    "deviation",
    [
      963
    ]
  ],
  [
    [
      963,
      974
    ],
    "valid"
  ],
  [
    [
      975,
      975
    ],
    "mapped",
    [
      983
    ]
  ],
  [
    [
      976,
      976
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      977,
      977
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      978,
      978
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      979,
      979
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      980,
      980
    ],
    "mapped",
    [
      971
    ]
  ],
  [
    [
      981,
      981
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      982,
      982
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      983,
      983
    ],
    "valid"
  ],
  [
    [
      984,
      984
    ],
    "mapped",
    [
      985
    ]
  ],
  [
    [
      985,
      985
    ],
    "valid"
  ],
  [
    [
      986,
      986
    ],
    "mapped",
    [
      987
    ]
  ],
  [
    [
      987,
      987
    ],
    "valid"
  ],
  [
    [
      988,
      988
    ],
    "mapped",
    [
      989
    ]
  ],
  [
    [
      989,
      989
    ],
    "valid"
  ],
  [
    [
      990,
      990
    ],
    "mapped",
    [
      991
    ]
  ],
  [
    [
      991,
      991
    ],
    "valid"
  ],
  [
    [
      992,
      992
    ],
    "mapped",
    [
      993
    ]
  ],
  [
    [
      993,
      993
    ],
    "valid"
  ],
  [
    [
      994,
      994
    ],
    "mapped",
    [
      995
    ]
  ],
  [
    [
      995,
      995
    ],
    "valid"
  ],
  [
    [
      996,
      996
    ],
    "mapped",
    [
      997
    ]
  ],
  [
    [
      997,
      997
    ],
    "valid"
  ],
  [
    [
      998,
      998
    ],
    "mapped",
    [
      999
    ]
  ],
  [
    [
      999,
      999
    ],
    "valid"
  ],
  [
    [
      1e3,
      1e3
    ],
    "mapped",
    [
      1001
    ]
  ],
  [
    [
      1001,
      1001
    ],
    "valid"
  ],
  [
    [
      1002,
      1002
    ],
    "mapped",
    [
      1003
    ]
  ],
  [
    [
      1003,
      1003
    ],
    "valid"
  ],
  [
    [
      1004,
      1004
    ],
    "mapped",
    [
      1005
    ]
  ],
  [
    [
      1005,
      1005
    ],
    "valid"
  ],
  [
    [
      1006,
      1006
    ],
    "mapped",
    [
      1007
    ]
  ],
  [
    [
      1007,
      1007
    ],
    "valid"
  ],
  [
    [
      1008,
      1008
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      1009,
      1009
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      1010,
      1010
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      1011,
      1011
    ],
    "valid"
  ],
  [
    [
      1012,
      1012
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      1013,
      1013
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      1014,
      1014
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1015,
      1015
    ],
    "mapped",
    [
      1016
    ]
  ],
  [
    [
      1016,
      1016
    ],
    "valid"
  ],
  [
    [
      1017,
      1017
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      1018,
      1018
    ],
    "mapped",
    [
      1019
    ]
  ],
  [
    [
      1019,
      1019
    ],
    "valid"
  ],
  [
    [
      1020,
      1020
    ],
    "valid"
  ],
  [
    [
      1021,
      1021
    ],
    "mapped",
    [
      891
    ]
  ],
  [
    [
      1022,
      1022
    ],
    "mapped",
    [
      892
    ]
  ],
  [
    [
      1023,
      1023
    ],
    "mapped",
    [
      893
    ]
  ],
  [
    [
      1024,
      1024
    ],
    "mapped",
    [
      1104
    ]
  ],
  [
    [
      1025,
      1025
    ],
    "mapped",
    [
      1105
    ]
  ],
  [
    [
      1026,
      1026
    ],
    "mapped",
    [
      1106
    ]
  ],
  [
    [
      1027,
      1027
    ],
    "mapped",
    [
      1107
    ]
  ],
  [
    [
      1028,
      1028
    ],
    "mapped",
    [
      1108
    ]
  ],
  [
    [
      1029,
      1029
    ],
    "mapped",
    [
      1109
    ]
  ],
  [
    [
      1030,
      1030
    ],
    "mapped",
    [
      1110
    ]
  ],
  [
    [
      1031,
      1031
    ],
    "mapped",
    [
      1111
    ]
  ],
  [
    [
      1032,
      1032
    ],
    "mapped",
    [
      1112
    ]
  ],
  [
    [
      1033,
      1033
    ],
    "mapped",
    [
      1113
    ]
  ],
  [
    [
      1034,
      1034
    ],
    "mapped",
    [
      1114
    ]
  ],
  [
    [
      1035,
      1035
    ],
    "mapped",
    [
      1115
    ]
  ],
  [
    [
      1036,
      1036
    ],
    "mapped",
    [
      1116
    ]
  ],
  [
    [
      1037,
      1037
    ],
    "mapped",
    [
      1117
    ]
  ],
  [
    [
      1038,
      1038
    ],
    "mapped",
    [
      1118
    ]
  ],
  [
    [
      1039,
      1039
    ],
    "mapped",
    [
      1119
    ]
  ],
  [
    [
      1040,
      1040
    ],
    "mapped",
    [
      1072
    ]
  ],
  [
    [
      1041,
      1041
    ],
    "mapped",
    [
      1073
    ]
  ],
  [
    [
      1042,
      1042
    ],
    "mapped",
    [
      1074
    ]
  ],
  [
    [
      1043,
      1043
    ],
    "mapped",
    [
      1075
    ]
  ],
  [
    [
      1044,
      1044
    ],
    "mapped",
    [
      1076
    ]
  ],
  [
    [
      1045,
      1045
    ],
    "mapped",
    [
      1077
    ]
  ],
  [
    [
      1046,
      1046
    ],
    "mapped",
    [
      1078
    ]
  ],
  [
    [
      1047,
      1047
    ],
    "mapped",
    [
      1079
    ]
  ],
  [
    [
      1048,
      1048
    ],
    "mapped",
    [
      1080
    ]
  ],
  [
    [
      1049,
      1049
    ],
    "mapped",
    [
      1081
    ]
  ],
  [
    [
      1050,
      1050
    ],
    "mapped",
    [
      1082
    ]
  ],
  [
    [
      1051,
      1051
    ],
    "mapped",
    [
      1083
    ]
  ],
  [
    [
      1052,
      1052
    ],
    "mapped",
    [
      1084
    ]
  ],
  [
    [
      1053,
      1053
    ],
    "mapped",
    [
      1085
    ]
  ],
  [
    [
      1054,
      1054
    ],
    "mapped",
    [
      1086
    ]
  ],
  [
    [
      1055,
      1055
    ],
    "mapped",
    [
      1087
    ]
  ],
  [
    [
      1056,
      1056
    ],
    "mapped",
    [
      1088
    ]
  ],
  [
    [
      1057,
      1057
    ],
    "mapped",
    [
      1089
    ]
  ],
  [
    [
      1058,
      1058
    ],
    "mapped",
    [
      1090
    ]
  ],
  [
    [
      1059,
      1059
    ],
    "mapped",
    [
      1091
    ]
  ],
  [
    [
      1060,
      1060
    ],
    "mapped",
    [
      1092
    ]
  ],
  [
    [
      1061,
      1061
    ],
    "mapped",
    [
      1093
    ]
  ],
  [
    [
      1062,
      1062
    ],
    "mapped",
    [
      1094
    ]
  ],
  [
    [
      1063,
      1063
    ],
    "mapped",
    [
      1095
    ]
  ],
  [
    [
      1064,
      1064
    ],
    "mapped",
    [
      1096
    ]
  ],
  [
    [
      1065,
      1065
    ],
    "mapped",
    [
      1097
    ]
  ],
  [
    [
      1066,
      1066
    ],
    "mapped",
    [
      1098
    ]
  ],
  [
    [
      1067,
      1067
    ],
    "mapped",
    [
      1099
    ]
  ],
  [
    [
      1068,
      1068
    ],
    "mapped",
    [
      1100
    ]
  ],
  [
    [
      1069,
      1069
    ],
    "mapped",
    [
      1101
    ]
  ],
  [
    [
      1070,
      1070
    ],
    "mapped",
    [
      1102
    ]
  ],
  [
    [
      1071,
      1071
    ],
    "mapped",
    [
      1103
    ]
  ],
  [
    [
      1072,
      1103
    ],
    "valid"
  ],
  [
    [
      1104,
      1104
    ],
    "valid"
  ],
  [
    [
      1105,
      1116
    ],
    "valid"
  ],
  [
    [
      1117,
      1117
    ],
    "valid"
  ],
  [
    [
      1118,
      1119
    ],
    "valid"
  ],
  [
    [
      1120,
      1120
    ],
    "mapped",
    [
      1121
    ]
  ],
  [
    [
      1121,
      1121
    ],
    "valid"
  ],
  [
    [
      1122,
      1122
    ],
    "mapped",
    [
      1123
    ]
  ],
  [
    [
      1123,
      1123
    ],
    "valid"
  ],
  [
    [
      1124,
      1124
    ],
    "mapped",
    [
      1125
    ]
  ],
  [
    [
      1125,
      1125
    ],
    "valid"
  ],
  [
    [
      1126,
      1126
    ],
    "mapped",
    [
      1127
    ]
  ],
  [
    [
      1127,
      1127
    ],
    "valid"
  ],
  [
    [
      1128,
      1128
    ],
    "mapped",
    [
      1129
    ]
  ],
  [
    [
      1129,
      1129
    ],
    "valid"
  ],
  [
    [
      1130,
      1130
    ],
    "mapped",
    [
      1131
    ]
  ],
  [
    [
      1131,
      1131
    ],
    "valid"
  ],
  [
    [
      1132,
      1132
    ],
    "mapped",
    [
      1133
    ]
  ],
  [
    [
      1133,
      1133
    ],
    "valid"
  ],
  [
    [
      1134,
      1134
    ],
    "mapped",
    [
      1135
    ]
  ],
  [
    [
      1135,
      1135
    ],
    "valid"
  ],
  [
    [
      1136,
      1136
    ],
    "mapped",
    [
      1137
    ]
  ],
  [
    [
      1137,
      1137
    ],
    "valid"
  ],
  [
    [
      1138,
      1138
    ],
    "mapped",
    [
      1139
    ]
  ],
  [
    [
      1139,
      1139
    ],
    "valid"
  ],
  [
    [
      1140,
      1140
    ],
    "mapped",
    [
      1141
    ]
  ],
  [
    [
      1141,
      1141
    ],
    "valid"
  ],
  [
    [
      1142,
      1142
    ],
    "mapped",
    [
      1143
    ]
  ],
  [
    [
      1143,
      1143
    ],
    "valid"
  ],
  [
    [
      1144,
      1144
    ],
    "mapped",
    [
      1145
    ]
  ],
  [
    [
      1145,
      1145
    ],
    "valid"
  ],
  [
    [
      1146,
      1146
    ],
    "mapped",
    [
      1147
    ]
  ],
  [
    [
      1147,
      1147
    ],
    "valid"
  ],
  [
    [
      1148,
      1148
    ],
    "mapped",
    [
      1149
    ]
  ],
  [
    [
      1149,
      1149
    ],
    "valid"
  ],
  [
    [
      1150,
      1150
    ],
    "mapped",
    [
      1151
    ]
  ],
  [
    [
      1151,
      1151
    ],
    "valid"
  ],
  [
    [
      1152,
      1152
    ],
    "mapped",
    [
      1153
    ]
  ],
  [
    [
      1153,
      1153
    ],
    "valid"
  ],
  [
    [
      1154,
      1154
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1155,
      1158
    ],
    "valid"
  ],
  [
    [
      1159,
      1159
    ],
    "valid"
  ],
  [
    [
      1160,
      1161
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1162,
      1162
    ],
    "mapped",
    [
      1163
    ]
  ],
  [
    [
      1163,
      1163
    ],
    "valid"
  ],
  [
    [
      1164,
      1164
    ],
    "mapped",
    [
      1165
    ]
  ],
  [
    [
      1165,
      1165
    ],
    "valid"
  ],
  [
    [
      1166,
      1166
    ],
    "mapped",
    [
      1167
    ]
  ],
  [
    [
      1167,
      1167
    ],
    "valid"
  ],
  [
    [
      1168,
      1168
    ],
    "mapped",
    [
      1169
    ]
  ],
  [
    [
      1169,
      1169
    ],
    "valid"
  ],
  [
    [
      1170,
      1170
    ],
    "mapped",
    [
      1171
    ]
  ],
  [
    [
      1171,
      1171
    ],
    "valid"
  ],
  [
    [
      1172,
      1172
    ],
    "mapped",
    [
      1173
    ]
  ],
  [
    [
      1173,
      1173
    ],
    "valid"
  ],
  [
    [
      1174,
      1174
    ],
    "mapped",
    [
      1175
    ]
  ],
  [
    [
      1175,
      1175
    ],
    "valid"
  ],
  [
    [
      1176,
      1176
    ],
    "mapped",
    [
      1177
    ]
  ],
  [
    [
      1177,
      1177
    ],
    "valid"
  ],
  [
    [
      1178,
      1178
    ],
    "mapped",
    [
      1179
    ]
  ],
  [
    [
      1179,
      1179
    ],
    "valid"
  ],
  [
    [
      1180,
      1180
    ],
    "mapped",
    [
      1181
    ]
  ],
  [
    [
      1181,
      1181
    ],
    "valid"
  ],
  [
    [
      1182,
      1182
    ],
    "mapped",
    [
      1183
    ]
  ],
  [
    [
      1183,
      1183
    ],
    "valid"
  ],
  [
    [
      1184,
      1184
    ],
    "mapped",
    [
      1185
    ]
  ],
  [
    [
      1185,
      1185
    ],
    "valid"
  ],
  [
    [
      1186,
      1186
    ],
    "mapped",
    [
      1187
    ]
  ],
  [
    [
      1187,
      1187
    ],
    "valid"
  ],
  [
    [
      1188,
      1188
    ],
    "mapped",
    [
      1189
    ]
  ],
  [
    [
      1189,
      1189
    ],
    "valid"
  ],
  [
    [
      1190,
      1190
    ],
    "mapped",
    [
      1191
    ]
  ],
  [
    [
      1191,
      1191
    ],
    "valid"
  ],
  [
    [
      1192,
      1192
    ],
    "mapped",
    [
      1193
    ]
  ],
  [
    [
      1193,
      1193
    ],
    "valid"
  ],
  [
    [
      1194,
      1194
    ],
    "mapped",
    [
      1195
    ]
  ],
  [
    [
      1195,
      1195
    ],
    "valid"
  ],
  [
    [
      1196,
      1196
    ],
    "mapped",
    [
      1197
    ]
  ],
  [
    [
      1197,
      1197
    ],
    "valid"
  ],
  [
    [
      1198,
      1198
    ],
    "mapped",
    [
      1199
    ]
  ],
  [
    [
      1199,
      1199
    ],
    "valid"
  ],
  [
    [
      1200,
      1200
    ],
    "mapped",
    [
      1201
    ]
  ],
  [
    [
      1201,
      1201
    ],
    "valid"
  ],
  [
    [
      1202,
      1202
    ],
    "mapped",
    [
      1203
    ]
  ],
  [
    [
      1203,
      1203
    ],
    "valid"
  ],
  [
    [
      1204,
      1204
    ],
    "mapped",
    [
      1205
    ]
  ],
  [
    [
      1205,
      1205
    ],
    "valid"
  ],
  [
    [
      1206,
      1206
    ],
    "mapped",
    [
      1207
    ]
  ],
  [
    [
      1207,
      1207
    ],
    "valid"
  ],
  [
    [
      1208,
      1208
    ],
    "mapped",
    [
      1209
    ]
  ],
  [
    [
      1209,
      1209
    ],
    "valid"
  ],
  [
    [
      1210,
      1210
    ],
    "mapped",
    [
      1211
    ]
  ],
  [
    [
      1211,
      1211
    ],
    "valid"
  ],
  [
    [
      1212,
      1212
    ],
    "mapped",
    [
      1213
    ]
  ],
  [
    [
      1213,
      1213
    ],
    "valid"
  ],
  [
    [
      1214,
      1214
    ],
    "mapped",
    [
      1215
    ]
  ],
  [
    [
      1215,
      1215
    ],
    "valid"
  ],
  [
    [
      1216,
      1216
    ],
    "disallowed"
  ],
  [
    [
      1217,
      1217
    ],
    "mapped",
    [
      1218
    ]
  ],
  [
    [
      1218,
      1218
    ],
    "valid"
  ],
  [
    [
      1219,
      1219
    ],
    "mapped",
    [
      1220
    ]
  ],
  [
    [
      1220,
      1220
    ],
    "valid"
  ],
  [
    [
      1221,
      1221
    ],
    "mapped",
    [
      1222
    ]
  ],
  [
    [
      1222,
      1222
    ],
    "valid"
  ],
  [
    [
      1223,
      1223
    ],
    "mapped",
    [
      1224
    ]
  ],
  [
    [
      1224,
      1224
    ],
    "valid"
  ],
  [
    [
      1225,
      1225
    ],
    "mapped",
    [
      1226
    ]
  ],
  [
    [
      1226,
      1226
    ],
    "valid"
  ],
  [
    [
      1227,
      1227
    ],
    "mapped",
    [
      1228
    ]
  ],
  [
    [
      1228,
      1228
    ],
    "valid"
  ],
  [
    [
      1229,
      1229
    ],
    "mapped",
    [
      1230
    ]
  ],
  [
    [
      1230,
      1230
    ],
    "valid"
  ],
  [
    [
      1231,
      1231
    ],
    "valid"
  ],
  [
    [
      1232,
      1232
    ],
    "mapped",
    [
      1233
    ]
  ],
  [
    [
      1233,
      1233
    ],
    "valid"
  ],
  [
    [
      1234,
      1234
    ],
    "mapped",
    [
      1235
    ]
  ],
  [
    [
      1235,
      1235
    ],
    "valid"
  ],
  [
    [
      1236,
      1236
    ],
    "mapped",
    [
      1237
    ]
  ],
  [
    [
      1237,
      1237
    ],
    "valid"
  ],
  [
    [
      1238,
      1238
    ],
    "mapped",
    [
      1239
    ]
  ],
  [
    [
      1239,
      1239
    ],
    "valid"
  ],
  [
    [
      1240,
      1240
    ],
    "mapped",
    [
      1241
    ]
  ],
  [
    [
      1241,
      1241
    ],
    "valid"
  ],
  [
    [
      1242,
      1242
    ],
    "mapped",
    [
      1243
    ]
  ],
  [
    [
      1243,
      1243
    ],
    "valid"
  ],
  [
    [
      1244,
      1244
    ],
    "mapped",
    [
      1245
    ]
  ],
  [
    [
      1245,
      1245
    ],
    "valid"
  ],
  [
    [
      1246,
      1246
    ],
    "mapped",
    [
      1247
    ]
  ],
  [
    [
      1247,
      1247
    ],
    "valid"
  ],
  [
    [
      1248,
      1248
    ],
    "mapped",
    [
      1249
    ]
  ],
  [
    [
      1249,
      1249
    ],
    "valid"
  ],
  [
    [
      1250,
      1250
    ],
    "mapped",
    [
      1251
    ]
  ],
  [
    [
      1251,
      1251
    ],
    "valid"
  ],
  [
    [
      1252,
      1252
    ],
    "mapped",
    [
      1253
    ]
  ],
  [
    [
      1253,
      1253
    ],
    "valid"
  ],
  [
    [
      1254,
      1254
    ],
    "mapped",
    [
      1255
    ]
  ],
  [
    [
      1255,
      1255
    ],
    "valid"
  ],
  [
    [
      1256,
      1256
    ],
    "mapped",
    [
      1257
    ]
  ],
  [
    [
      1257,
      1257
    ],
    "valid"
  ],
  [
    [
      1258,
      1258
    ],
    "mapped",
    [
      1259
    ]
  ],
  [
    [
      1259,
      1259
    ],
    "valid"
  ],
  [
    [
      1260,
      1260
    ],
    "mapped",
    [
      1261
    ]
  ],
  [
    [
      1261,
      1261
    ],
    "valid"
  ],
  [
    [
      1262,
      1262
    ],
    "mapped",
    [
      1263
    ]
  ],
  [
    [
      1263,
      1263
    ],
    "valid"
  ],
  [
    [
      1264,
      1264
    ],
    "mapped",
    [
      1265
    ]
  ],
  [
    [
      1265,
      1265
    ],
    "valid"
  ],
  [
    [
      1266,
      1266
    ],
    "mapped",
    [
      1267
    ]
  ],
  [
    [
      1267,
      1267
    ],
    "valid"
  ],
  [
    [
      1268,
      1268
    ],
    "mapped",
    [
      1269
    ]
  ],
  [
    [
      1269,
      1269
    ],
    "valid"
  ],
  [
    [
      1270,
      1270
    ],
    "mapped",
    [
      1271
    ]
  ],
  [
    [
      1271,
      1271
    ],
    "valid"
  ],
  [
    [
      1272,
      1272
    ],
    "mapped",
    [
      1273
    ]
  ],
  [
    [
      1273,
      1273
    ],
    "valid"
  ],
  [
    [
      1274,
      1274
    ],
    "mapped",
    [
      1275
    ]
  ],
  [
    [
      1275,
      1275
    ],
    "valid"
  ],
  [
    [
      1276,
      1276
    ],
    "mapped",
    [
      1277
    ]
  ],
  [
    [
      1277,
      1277
    ],
    "valid"
  ],
  [
    [
      1278,
      1278
    ],
    "mapped",
    [
      1279
    ]
  ],
  [
    [
      1279,
      1279
    ],
    "valid"
  ],
  [
    [
      1280,
      1280
    ],
    "mapped",
    [
      1281
    ]
  ],
  [
    [
      1281,
      1281
    ],
    "valid"
  ],
  [
    [
      1282,
      1282
    ],
    "mapped",
    [
      1283
    ]
  ],
  [
    [
      1283,
      1283
    ],
    "valid"
  ],
  [
    [
      1284,
      1284
    ],
    "mapped",
    [
      1285
    ]
  ],
  [
    [
      1285,
      1285
    ],
    "valid"
  ],
  [
    [
      1286,
      1286
    ],
    "mapped",
    [
      1287
    ]
  ],
  [
    [
      1287,
      1287
    ],
    "valid"
  ],
  [
    [
      1288,
      1288
    ],
    "mapped",
    [
      1289
    ]
  ],
  [
    [
      1289,
      1289
    ],
    "valid"
  ],
  [
    [
      1290,
      1290
    ],
    "mapped",
    [
      1291
    ]
  ],
  [
    [
      1291,
      1291
    ],
    "valid"
  ],
  [
    [
      1292,
      1292
    ],
    "mapped",
    [
      1293
    ]
  ],
  [
    [
      1293,
      1293
    ],
    "valid"
  ],
  [
    [
      1294,
      1294
    ],
    "mapped",
    [
      1295
    ]
  ],
  [
    [
      1295,
      1295
    ],
    "valid"
  ],
  [
    [
      1296,
      1296
    ],
    "mapped",
    [
      1297
    ]
  ],
  [
    [
      1297,
      1297
    ],
    "valid"
  ],
  [
    [
      1298,
      1298
    ],
    "mapped",
    [
      1299
    ]
  ],
  [
    [
      1299,
      1299
    ],
    "valid"
  ],
  [
    [
      1300,
      1300
    ],
    "mapped",
    [
      1301
    ]
  ],
  [
    [
      1301,
      1301
    ],
    "valid"
  ],
  [
    [
      1302,
      1302
    ],
    "mapped",
    [
      1303
    ]
  ],
  [
    [
      1303,
      1303
    ],
    "valid"
  ],
  [
    [
      1304,
      1304
    ],
    "mapped",
    [
      1305
    ]
  ],
  [
    [
      1305,
      1305
    ],
    "valid"
  ],
  [
    [
      1306,
      1306
    ],
    "mapped",
    [
      1307
    ]
  ],
  [
    [
      1307,
      1307
    ],
    "valid"
  ],
  [
    [
      1308,
      1308
    ],
    "mapped",
    [
      1309
    ]
  ],
  [
    [
      1309,
      1309
    ],
    "valid"
  ],
  [
    [
      1310,
      1310
    ],
    "mapped",
    [
      1311
    ]
  ],
  [
    [
      1311,
      1311
    ],
    "valid"
  ],
  [
    [
      1312,
      1312
    ],
    "mapped",
    [
      1313
    ]
  ],
  [
    [
      1313,
      1313
    ],
    "valid"
  ],
  [
    [
      1314,
      1314
    ],
    "mapped",
    [
      1315
    ]
  ],
  [
    [
      1315,
      1315
    ],
    "valid"
  ],
  [
    [
      1316,
      1316
    ],
    "mapped",
    [
      1317
    ]
  ],
  [
    [
      1317,
      1317
    ],
    "valid"
  ],
  [
    [
      1318,
      1318
    ],
    "mapped",
    [
      1319
    ]
  ],
  [
    [
      1319,
      1319
    ],
    "valid"
  ],
  [
    [
      1320,
      1320
    ],
    "mapped",
    [
      1321
    ]
  ],
  [
    [
      1321,
      1321
    ],
    "valid"
  ],
  [
    [
      1322,
      1322
    ],
    "mapped",
    [
      1323
    ]
  ],
  [
    [
      1323,
      1323
    ],
    "valid"
  ],
  [
    [
      1324,
      1324
    ],
    "mapped",
    [
      1325
    ]
  ],
  [
    [
      1325,
      1325
    ],
    "valid"
  ],
  [
    [
      1326,
      1326
    ],
    "mapped",
    [
      1327
    ]
  ],
  [
    [
      1327,
      1327
    ],
    "valid"
  ],
  [
    [
      1328,
      1328
    ],
    "disallowed"
  ],
  [
    [
      1329,
      1329
    ],
    "mapped",
    [
      1377
    ]
  ],
  [
    [
      1330,
      1330
    ],
    "mapped",
    [
      1378
    ]
  ],
  [
    [
      1331,
      1331
    ],
    "mapped",
    [
      1379
    ]
  ],
  [
    [
      1332,
      1332
    ],
    "mapped",
    [
      1380
    ]
  ],
  [
    [
      1333,
      1333
    ],
    "mapped",
    [
      1381
    ]
  ],
  [
    [
      1334,
      1334
    ],
    "mapped",
    [
      1382
    ]
  ],
  [
    [
      1335,
      1335
    ],
    "mapped",
    [
      1383
    ]
  ],
  [
    [
      1336,
      1336
    ],
    "mapped",
    [
      1384
    ]
  ],
  [
    [
      1337,
      1337
    ],
    "mapped",
    [
      1385
    ]
  ],
  [
    [
      1338,
      1338
    ],
    "mapped",
    [
      1386
    ]
  ],
  [
    [
      1339,
      1339
    ],
    "mapped",
    [
      1387
    ]
  ],
  [
    [
      1340,
      1340
    ],
    "mapped",
    [
      1388
    ]
  ],
  [
    [
      1341,
      1341
    ],
    "mapped",
    [
      1389
    ]
  ],
  [
    [
      1342,
      1342
    ],
    "mapped",
    [
      1390
    ]
  ],
  [
    [
      1343,
      1343
    ],
    "mapped",
    [
      1391
    ]
  ],
  [
    [
      1344,
      1344
    ],
    "mapped",
    [
      1392
    ]
  ],
  [
    [
      1345,
      1345
    ],
    "mapped",
    [
      1393
    ]
  ],
  [
    [
      1346,
      1346
    ],
    "mapped",
    [
      1394
    ]
  ],
  [
    [
      1347,
      1347
    ],
    "mapped",
    [
      1395
    ]
  ],
  [
    [
      1348,
      1348
    ],
    "mapped",
    [
      1396
    ]
  ],
  [
    [
      1349,
      1349
    ],
    "mapped",
    [
      1397
    ]
  ],
  [
    [
      1350,
      1350
    ],
    "mapped",
    [
      1398
    ]
  ],
  [
    [
      1351,
      1351
    ],
    "mapped",
    [
      1399
    ]
  ],
  [
    [
      1352,
      1352
    ],
    "mapped",
    [
      1400
    ]
  ],
  [
    [
      1353,
      1353
    ],
    "mapped",
    [
      1401
    ]
  ],
  [
    [
      1354,
      1354
    ],
    "mapped",
    [
      1402
    ]
  ],
  [
    [
      1355,
      1355
    ],
    "mapped",
    [
      1403
    ]
  ],
  [
    [
      1356,
      1356
    ],
    "mapped",
    [
      1404
    ]
  ],
  [
    [
      1357,
      1357
    ],
    "mapped",
    [
      1405
    ]
  ],
  [
    [
      1358,
      1358
    ],
    "mapped",
    [
      1406
    ]
  ],
  [
    [
      1359,
      1359
    ],
    "mapped",
    [
      1407
    ]
  ],
  [
    [
      1360,
      1360
    ],
    "mapped",
    [
      1408
    ]
  ],
  [
    [
      1361,
      1361
    ],
    "mapped",
    [
      1409
    ]
  ],
  [
    [
      1362,
      1362
    ],
    "mapped",
    [
      1410
    ]
  ],
  [
    [
      1363,
      1363
    ],
    "mapped",
    [
      1411
    ]
  ],
  [
    [
      1364,
      1364
    ],
    "mapped",
    [
      1412
    ]
  ],
  [
    [
      1365,
      1365
    ],
    "mapped",
    [
      1413
    ]
  ],
  [
    [
      1366,
      1366
    ],
    "mapped",
    [
      1414
    ]
  ],
  [
    [
      1367,
      1368
    ],
    "disallowed"
  ],
  [
    [
      1369,
      1369
    ],
    "valid"
  ],
  [
    [
      1370,
      1375
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1376,
      1376
    ],
    "disallowed"
  ],
  [
    [
      1377,
      1414
    ],
    "valid"
  ],
  [
    [
      1415,
      1415
    ],
    "mapped",
    [
      1381,
      1410
    ]
  ],
  [
    [
      1416,
      1416
    ],
    "disallowed"
  ],
  [
    [
      1417,
      1417
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1418,
      1418
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1419,
      1420
    ],
    "disallowed"
  ],
  [
    [
      1421,
      1422
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1423,
      1423
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1424,
      1424
    ],
    "disallowed"
  ],
  [
    [
      1425,
      1441
    ],
    "valid"
  ],
  [
    [
      1442,
      1442
    ],
    "valid"
  ],
  [
    [
      1443,
      1455
    ],
    "valid"
  ],
  [
    [
      1456,
      1465
    ],
    "valid"
  ],
  [
    [
      1466,
      1466
    ],
    "valid"
  ],
  [
    [
      1467,
      1469
    ],
    "valid"
  ],
  [
    [
      1470,
      1470
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1471,
      1471
    ],
    "valid"
  ],
  [
    [
      1472,
      1472
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1473,
      1474
    ],
    "valid"
  ],
  [
    [
      1475,
      1475
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1476,
      1476
    ],
    "valid"
  ],
  [
    [
      1477,
      1477
    ],
    "valid"
  ],
  [
    [
      1478,
      1478
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1479,
      1479
    ],
    "valid"
  ],
  [
    [
      1480,
      1487
    ],
    "disallowed"
  ],
  [
    [
      1488,
      1514
    ],
    "valid"
  ],
  [
    [
      1515,
      1519
    ],
    "disallowed"
  ],
  [
    [
      1520,
      1524
    ],
    "valid"
  ],
  [
    [
      1525,
      1535
    ],
    "disallowed"
  ],
  [
    [
      1536,
      1539
    ],
    "disallowed"
  ],
  [
    [
      1540,
      1540
    ],
    "disallowed"
  ],
  [
    [
      1541,
      1541
    ],
    "disallowed"
  ],
  [
    [
      1542,
      1546
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1547,
      1547
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1548,
      1548
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1549,
      1551
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1552,
      1557
    ],
    "valid"
  ],
  [
    [
      1558,
      1562
    ],
    "valid"
  ],
  [
    [
      1563,
      1563
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1564,
      1564
    ],
    "disallowed"
  ],
  [
    [
      1565,
      1565
    ],
    "disallowed"
  ],
  [
    [
      1566,
      1566
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1567,
      1567
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1568,
      1568
    ],
    "valid"
  ],
  [
    [
      1569,
      1594
    ],
    "valid"
  ],
  [
    [
      1595,
      1599
    ],
    "valid"
  ],
  [
    [
      1600,
      1600
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1601,
      1618
    ],
    "valid"
  ],
  [
    [
      1619,
      1621
    ],
    "valid"
  ],
  [
    [
      1622,
      1624
    ],
    "valid"
  ],
  [
    [
      1625,
      1630
    ],
    "valid"
  ],
  [
    [
      1631,
      1631
    ],
    "valid"
  ],
  [
    [
      1632,
      1641
    ],
    "valid"
  ],
  [
    [
      1642,
      1645
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1646,
      1647
    ],
    "valid"
  ],
  [
    [
      1648,
      1652
    ],
    "valid"
  ],
  [
    [
      1653,
      1653
    ],
    "mapped",
    [
      1575,
      1652
    ]
  ],
  [
    [
      1654,
      1654
    ],
    "mapped",
    [
      1608,
      1652
    ]
  ],
  [
    [
      1655,
      1655
    ],
    "mapped",
    [
      1735,
      1652
    ]
  ],
  [
    [
      1656,
      1656
    ],
    "mapped",
    [
      1610,
      1652
    ]
  ],
  [
    [
      1657,
      1719
    ],
    "valid"
  ],
  [
    [
      1720,
      1721
    ],
    "valid"
  ],
  [
    [
      1722,
      1726
    ],
    "valid"
  ],
  [
    [
      1727,
      1727
    ],
    "valid"
  ],
  [
    [
      1728,
      1742
    ],
    "valid"
  ],
  [
    [
      1743,
      1743
    ],
    "valid"
  ],
  [
    [
      1744,
      1747
    ],
    "valid"
  ],
  [
    [
      1748,
      1748
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1749,
      1756
    ],
    "valid"
  ],
  [
    [
      1757,
      1757
    ],
    "disallowed"
  ],
  [
    [
      1758,
      1758
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1759,
      1768
    ],
    "valid"
  ],
  [
    [
      1769,
      1769
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1770,
      1773
    ],
    "valid"
  ],
  [
    [
      1774,
      1775
    ],
    "valid"
  ],
  [
    [
      1776,
      1785
    ],
    "valid"
  ],
  [
    [
      1786,
      1790
    ],
    "valid"
  ],
  [
    [
      1791,
      1791
    ],
    "valid"
  ],
  [
    [
      1792,
      1805
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1806,
      1806
    ],
    "disallowed"
  ],
  [
    [
      1807,
      1807
    ],
    "disallowed"
  ],
  [
    [
      1808,
      1836
    ],
    "valid"
  ],
  [
    [
      1837,
      1839
    ],
    "valid"
  ],
  [
    [
      1840,
      1866
    ],
    "valid"
  ],
  [
    [
      1867,
      1868
    ],
    "disallowed"
  ],
  [
    [
      1869,
      1871
    ],
    "valid"
  ],
  [
    [
      1872,
      1901
    ],
    "valid"
  ],
  [
    [
      1902,
      1919
    ],
    "valid"
  ],
  [
    [
      1920,
      1968
    ],
    "valid"
  ],
  [
    [
      1969,
      1969
    ],
    "valid"
  ],
  [
    [
      1970,
      1983
    ],
    "disallowed"
  ],
  [
    [
      1984,
      2037
    ],
    "valid"
  ],
  [
    [
      2038,
      2042
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2043,
      2047
    ],
    "disallowed"
  ],
  [
    [
      2048,
      2093
    ],
    "valid"
  ],
  [
    [
      2094,
      2095
    ],
    "disallowed"
  ],
  [
    [
      2096,
      2110
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2111,
      2111
    ],
    "disallowed"
  ],
  [
    [
      2112,
      2139
    ],
    "valid"
  ],
  [
    [
      2140,
      2141
    ],
    "disallowed"
  ],
  [
    [
      2142,
      2142
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2143,
      2207
    ],
    "disallowed"
  ],
  [
    [
      2208,
      2208
    ],
    "valid"
  ],
  [
    [
      2209,
      2209
    ],
    "valid"
  ],
  [
    [
      2210,
      2220
    ],
    "valid"
  ],
  [
    [
      2221,
      2226
    ],
    "valid"
  ],
  [
    [
      2227,
      2228
    ],
    "valid"
  ],
  [
    [
      2229,
      2274
    ],
    "disallowed"
  ],
  [
    [
      2275,
      2275
    ],
    "valid"
  ],
  [
    [
      2276,
      2302
    ],
    "valid"
  ],
  [
    [
      2303,
      2303
    ],
    "valid"
  ],
  [
    [
      2304,
      2304
    ],
    "valid"
  ],
  [
    [
      2305,
      2307
    ],
    "valid"
  ],
  [
    [
      2308,
      2308
    ],
    "valid"
  ],
  [
    [
      2309,
      2361
    ],
    "valid"
  ],
  [
    [
      2362,
      2363
    ],
    "valid"
  ],
  [
    [
      2364,
      2381
    ],
    "valid"
  ],
  [
    [
      2382,
      2382
    ],
    "valid"
  ],
  [
    [
      2383,
      2383
    ],
    "valid"
  ],
  [
    [
      2384,
      2388
    ],
    "valid"
  ],
  [
    [
      2389,
      2389
    ],
    "valid"
  ],
  [
    [
      2390,
      2391
    ],
    "valid"
  ],
  [
    [
      2392,
      2392
    ],
    "mapped",
    [
      2325,
      2364
    ]
  ],
  [
    [
      2393,
      2393
    ],
    "mapped",
    [
      2326,
      2364
    ]
  ],
  [
    [
      2394,
      2394
    ],
    "mapped",
    [
      2327,
      2364
    ]
  ],
  [
    [
      2395,
      2395
    ],
    "mapped",
    [
      2332,
      2364
    ]
  ],
  [
    [
      2396,
      2396
    ],
    "mapped",
    [
      2337,
      2364
    ]
  ],
  [
    [
      2397,
      2397
    ],
    "mapped",
    [
      2338,
      2364
    ]
  ],
  [
    [
      2398,
      2398
    ],
    "mapped",
    [
      2347,
      2364
    ]
  ],
  [
    [
      2399,
      2399
    ],
    "mapped",
    [
      2351,
      2364
    ]
  ],
  [
    [
      2400,
      2403
    ],
    "valid"
  ],
  [
    [
      2404,
      2405
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2406,
      2415
    ],
    "valid"
  ],
  [
    [
      2416,
      2416
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2417,
      2418
    ],
    "valid"
  ],
  [
    [
      2419,
      2423
    ],
    "valid"
  ],
  [
    [
      2424,
      2424
    ],
    "valid"
  ],
  [
    [
      2425,
      2426
    ],
    "valid"
  ],
  [
    [
      2427,
      2428
    ],
    "valid"
  ],
  [
    [
      2429,
      2429
    ],
    "valid"
  ],
  [
    [
      2430,
      2431
    ],
    "valid"
  ],
  [
    [
      2432,
      2432
    ],
    "valid"
  ],
  [
    [
      2433,
      2435
    ],
    "valid"
  ],
  [
    [
      2436,
      2436
    ],
    "disallowed"
  ],
  [
    [
      2437,
      2444
    ],
    "valid"
  ],
  [
    [
      2445,
      2446
    ],
    "disallowed"
  ],
  [
    [
      2447,
      2448
    ],
    "valid"
  ],
  [
    [
      2449,
      2450
    ],
    "disallowed"
  ],
  [
    [
      2451,
      2472
    ],
    "valid"
  ],
  [
    [
      2473,
      2473
    ],
    "disallowed"
  ],
  [
    [
      2474,
      2480
    ],
    "valid"
  ],
  [
    [
      2481,
      2481
    ],
    "disallowed"
  ],
  [
    [
      2482,
      2482
    ],
    "valid"
  ],
  [
    [
      2483,
      2485
    ],
    "disallowed"
  ],
  [
    [
      2486,
      2489
    ],
    "valid"
  ],
  [
    [
      2490,
      2491
    ],
    "disallowed"
  ],
  [
    [
      2492,
      2492
    ],
    "valid"
  ],
  [
    [
      2493,
      2493
    ],
    "valid"
  ],
  [
    [
      2494,
      2500
    ],
    "valid"
  ],
  [
    [
      2501,
      2502
    ],
    "disallowed"
  ],
  [
    [
      2503,
      2504
    ],
    "valid"
  ],
  [
    [
      2505,
      2506
    ],
    "disallowed"
  ],
  [
    [
      2507,
      2509
    ],
    "valid"
  ],
  [
    [
      2510,
      2510
    ],
    "valid"
  ],
  [
    [
      2511,
      2518
    ],
    "disallowed"
  ],
  [
    [
      2519,
      2519
    ],
    "valid"
  ],
  [
    [
      2520,
      2523
    ],
    "disallowed"
  ],
  [
    [
      2524,
      2524
    ],
    "mapped",
    [
      2465,
      2492
    ]
  ],
  [
    [
      2525,
      2525
    ],
    "mapped",
    [
      2466,
      2492
    ]
  ],
  [
    [
      2526,
      2526
    ],
    "disallowed"
  ],
  [
    [
      2527,
      2527
    ],
    "mapped",
    [
      2479,
      2492
    ]
  ],
  [
    [
      2528,
      2531
    ],
    "valid"
  ],
  [
    [
      2532,
      2533
    ],
    "disallowed"
  ],
  [
    [
      2534,
      2545
    ],
    "valid"
  ],
  [
    [
      2546,
      2554
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2555,
      2555
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2556,
      2560
    ],
    "disallowed"
  ],
  [
    [
      2561,
      2561
    ],
    "valid"
  ],
  [
    [
      2562,
      2562
    ],
    "valid"
  ],
  [
    [
      2563,
      2563
    ],
    "valid"
  ],
  [
    [
      2564,
      2564
    ],
    "disallowed"
  ],
  [
    [
      2565,
      2570
    ],
    "valid"
  ],
  [
    [
      2571,
      2574
    ],
    "disallowed"
  ],
  [
    [
      2575,
      2576
    ],
    "valid"
  ],
  [
    [
      2577,
      2578
    ],
    "disallowed"
  ],
  [
    [
      2579,
      2600
    ],
    "valid"
  ],
  [
    [
      2601,
      2601
    ],
    "disallowed"
  ],
  [
    [
      2602,
      2608
    ],
    "valid"
  ],
  [
    [
      2609,
      2609
    ],
    "disallowed"
  ],
  [
    [
      2610,
      2610
    ],
    "valid"
  ],
  [
    [
      2611,
      2611
    ],
    "mapped",
    [
      2610,
      2620
    ]
  ],
  [
    [
      2612,
      2612
    ],
    "disallowed"
  ],
  [
    [
      2613,
      2613
    ],
    "valid"
  ],
  [
    [
      2614,
      2614
    ],
    "mapped",
    [
      2616,
      2620
    ]
  ],
  [
    [
      2615,
      2615
    ],
    "disallowed"
  ],
  [
    [
      2616,
      2617
    ],
    "valid"
  ],
  [
    [
      2618,
      2619
    ],
    "disallowed"
  ],
  [
    [
      2620,
      2620
    ],
    "valid"
  ],
  [
    [
      2621,
      2621
    ],
    "disallowed"
  ],
  [
    [
      2622,
      2626
    ],
    "valid"
  ],
  [
    [
      2627,
      2630
    ],
    "disallowed"
  ],
  [
    [
      2631,
      2632
    ],
    "valid"
  ],
  [
    [
      2633,
      2634
    ],
    "disallowed"
  ],
  [
    [
      2635,
      2637
    ],
    "valid"
  ],
  [
    [
      2638,
      2640
    ],
    "disallowed"
  ],
  [
    [
      2641,
      2641
    ],
    "valid"
  ],
  [
    [
      2642,
      2648
    ],
    "disallowed"
  ],
  [
    [
      2649,
      2649
    ],
    "mapped",
    [
      2582,
      2620
    ]
  ],
  [
    [
      2650,
      2650
    ],
    "mapped",
    [
      2583,
      2620
    ]
  ],
  [
    [
      2651,
      2651
    ],
    "mapped",
    [
      2588,
      2620
    ]
  ],
  [
    [
      2652,
      2652
    ],
    "valid"
  ],
  [
    [
      2653,
      2653
    ],
    "disallowed"
  ],
  [
    [
      2654,
      2654
    ],
    "mapped",
    [
      2603,
      2620
    ]
  ],
  [
    [
      2655,
      2661
    ],
    "disallowed"
  ],
  [
    [
      2662,
      2676
    ],
    "valid"
  ],
  [
    [
      2677,
      2677
    ],
    "valid"
  ],
  [
    [
      2678,
      2688
    ],
    "disallowed"
  ],
  [
    [
      2689,
      2691
    ],
    "valid"
  ],
  [
    [
      2692,
      2692
    ],
    "disallowed"
  ],
  [
    [
      2693,
      2699
    ],
    "valid"
  ],
  [
    [
      2700,
      2700
    ],
    "valid"
  ],
  [
    [
      2701,
      2701
    ],
    "valid"
  ],
  [
    [
      2702,
      2702
    ],
    "disallowed"
  ],
  [
    [
      2703,
      2705
    ],
    "valid"
  ],
  [
    [
      2706,
      2706
    ],
    "disallowed"
  ],
  [
    [
      2707,
      2728
    ],
    "valid"
  ],
  [
    [
      2729,
      2729
    ],
    "disallowed"
  ],
  [
    [
      2730,
      2736
    ],
    "valid"
  ],
  [
    [
      2737,
      2737
    ],
    "disallowed"
  ],
  [
    [
      2738,
      2739
    ],
    "valid"
  ],
  [
    [
      2740,
      2740
    ],
    "disallowed"
  ],
  [
    [
      2741,
      2745
    ],
    "valid"
  ],
  [
    [
      2746,
      2747
    ],
    "disallowed"
  ],
  [
    [
      2748,
      2757
    ],
    "valid"
  ],
  [
    [
      2758,
      2758
    ],
    "disallowed"
  ],
  [
    [
      2759,
      2761
    ],
    "valid"
  ],
  [
    [
      2762,
      2762
    ],
    "disallowed"
  ],
  [
    [
      2763,
      2765
    ],
    "valid"
  ],
  [
    [
      2766,
      2767
    ],
    "disallowed"
  ],
  [
    [
      2768,
      2768
    ],
    "valid"
  ],
  [
    [
      2769,
      2783
    ],
    "disallowed"
  ],
  [
    [
      2784,
      2784
    ],
    "valid"
  ],
  [
    [
      2785,
      2787
    ],
    "valid"
  ],
  [
    [
      2788,
      2789
    ],
    "disallowed"
  ],
  [
    [
      2790,
      2799
    ],
    "valid"
  ],
  [
    [
      2800,
      2800
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2801,
      2801
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2802,
      2808
    ],
    "disallowed"
  ],
  [
    [
      2809,
      2809
    ],
    "valid"
  ],
  [
    [
      2810,
      2816
    ],
    "disallowed"
  ],
  [
    [
      2817,
      2819
    ],
    "valid"
  ],
  [
    [
      2820,
      2820
    ],
    "disallowed"
  ],
  [
    [
      2821,
      2828
    ],
    "valid"
  ],
  [
    [
      2829,
      2830
    ],
    "disallowed"
  ],
  [
    [
      2831,
      2832
    ],
    "valid"
  ],
  [
    [
      2833,
      2834
    ],
    "disallowed"
  ],
  [
    [
      2835,
      2856
    ],
    "valid"
  ],
  [
    [
      2857,
      2857
    ],
    "disallowed"
  ],
  [
    [
      2858,
      2864
    ],
    "valid"
  ],
  [
    [
      2865,
      2865
    ],
    "disallowed"
  ],
  [
    [
      2866,
      2867
    ],
    "valid"
  ],
  [
    [
      2868,
      2868
    ],
    "disallowed"
  ],
  [
    [
      2869,
      2869
    ],
    "valid"
  ],
  [
    [
      2870,
      2873
    ],
    "valid"
  ],
  [
    [
      2874,
      2875
    ],
    "disallowed"
  ],
  [
    [
      2876,
      2883
    ],
    "valid"
  ],
  [
    [
      2884,
      2884
    ],
    "valid"
  ],
  [
    [
      2885,
      2886
    ],
    "disallowed"
  ],
  [
    [
      2887,
      2888
    ],
    "valid"
  ],
  [
    [
      2889,
      2890
    ],
    "disallowed"
  ],
  [
    [
      2891,
      2893
    ],
    "valid"
  ],
  [
    [
      2894,
      2901
    ],
    "disallowed"
  ],
  [
    [
      2902,
      2903
    ],
    "valid"
  ],
  [
    [
      2904,
      2907
    ],
    "disallowed"
  ],
  [
    [
      2908,
      2908
    ],
    "mapped",
    [
      2849,
      2876
    ]
  ],
  [
    [
      2909,
      2909
    ],
    "mapped",
    [
      2850,
      2876
    ]
  ],
  [
    [
      2910,
      2910
    ],
    "disallowed"
  ],
  [
    [
      2911,
      2913
    ],
    "valid"
  ],
  [
    [
      2914,
      2915
    ],
    "valid"
  ],
  [
    [
      2916,
      2917
    ],
    "disallowed"
  ],
  [
    [
      2918,
      2927
    ],
    "valid"
  ],
  [
    [
      2928,
      2928
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2929,
      2929
    ],
    "valid"
  ],
  [
    [
      2930,
      2935
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2936,
      2945
    ],
    "disallowed"
  ],
  [
    [
      2946,
      2947
    ],
    "valid"
  ],
  [
    [
      2948,
      2948
    ],
    "disallowed"
  ],
  [
    [
      2949,
      2954
    ],
    "valid"
  ],
  [
    [
      2955,
      2957
    ],
    "disallowed"
  ],
  [
    [
      2958,
      2960
    ],
    "valid"
  ],
  [
    [
      2961,
      2961
    ],
    "disallowed"
  ],
  [
    [
      2962,
      2965
    ],
    "valid"
  ],
  [
    [
      2966,
      2968
    ],
    "disallowed"
  ],
  [
    [
      2969,
      2970
    ],
    "valid"
  ],
  [
    [
      2971,
      2971
    ],
    "disallowed"
  ],
  [
    [
      2972,
      2972
    ],
    "valid"
  ],
  [
    [
      2973,
      2973
    ],
    "disallowed"
  ],
  [
    [
      2974,
      2975
    ],
    "valid"
  ],
  [
    [
      2976,
      2978
    ],
    "disallowed"
  ],
  [
    [
      2979,
      2980
    ],
    "valid"
  ],
  [
    [
      2981,
      2983
    ],
    "disallowed"
  ],
  [
    [
      2984,
      2986
    ],
    "valid"
  ],
  [
    [
      2987,
      2989
    ],
    "disallowed"
  ],
  [
    [
      2990,
      2997
    ],
    "valid"
  ],
  [
    [
      2998,
      2998
    ],
    "valid"
  ],
  [
    [
      2999,
      3001
    ],
    "valid"
  ],
  [
    [
      3002,
      3005
    ],
    "disallowed"
  ],
  [
    [
      3006,
      3010
    ],
    "valid"
  ],
  [
    [
      3011,
      3013
    ],
    "disallowed"
  ],
  [
    [
      3014,
      3016
    ],
    "valid"
  ],
  [
    [
      3017,
      3017
    ],
    "disallowed"
  ],
  [
    [
      3018,
      3021
    ],
    "valid"
  ],
  [
    [
      3022,
      3023
    ],
    "disallowed"
  ],
  [
    [
      3024,
      3024
    ],
    "valid"
  ],
  [
    [
      3025,
      3030
    ],
    "disallowed"
  ],
  [
    [
      3031,
      3031
    ],
    "valid"
  ],
  [
    [
      3032,
      3045
    ],
    "disallowed"
  ],
  [
    [
      3046,
      3046
    ],
    "valid"
  ],
  [
    [
      3047,
      3055
    ],
    "valid"
  ],
  [
    [
      3056,
      3058
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3059,
      3066
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3067,
      3071
    ],
    "disallowed"
  ],
  [
    [
      3072,
      3072
    ],
    "valid"
  ],
  [
    [
      3073,
      3075
    ],
    "valid"
  ],
  [
    [
      3076,
      3076
    ],
    "disallowed"
  ],
  [
    [
      3077,
      3084
    ],
    "valid"
  ],
  [
    [
      3085,
      3085
    ],
    "disallowed"
  ],
  [
    [
      3086,
      3088
    ],
    "valid"
  ],
  [
    [
      3089,
      3089
    ],
    "disallowed"
  ],
  [
    [
      3090,
      3112
    ],
    "valid"
  ],
  [
    [
      3113,
      3113
    ],
    "disallowed"
  ],
  [
    [
      3114,
      3123
    ],
    "valid"
  ],
  [
    [
      3124,
      3124
    ],
    "valid"
  ],
  [
    [
      3125,
      3129
    ],
    "valid"
  ],
  [
    [
      3130,
      3132
    ],
    "disallowed"
  ],
  [
    [
      3133,
      3133
    ],
    "valid"
  ],
  [
    [
      3134,
      3140
    ],
    "valid"
  ],
  [
    [
      3141,
      3141
    ],
    "disallowed"
  ],
  [
    [
      3142,
      3144
    ],
    "valid"
  ],
  [
    [
      3145,
      3145
    ],
    "disallowed"
  ],
  [
    [
      3146,
      3149
    ],
    "valid"
  ],
  [
    [
      3150,
      3156
    ],
    "disallowed"
  ],
  [
    [
      3157,
      3158
    ],
    "valid"
  ],
  [
    [
      3159,
      3159
    ],
    "disallowed"
  ],
  [
    [
      3160,
      3161
    ],
    "valid"
  ],
  [
    [
      3162,
      3162
    ],
    "valid"
  ],
  [
    [
      3163,
      3167
    ],
    "disallowed"
  ],
  [
    [
      3168,
      3169
    ],
    "valid"
  ],
  [
    [
      3170,
      3171
    ],
    "valid"
  ],
  [
    [
      3172,
      3173
    ],
    "disallowed"
  ],
  [
    [
      3174,
      3183
    ],
    "valid"
  ],
  [
    [
      3184,
      3191
    ],
    "disallowed"
  ],
  [
    [
      3192,
      3199
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3200,
      3200
    ],
    "disallowed"
  ],
  [
    [
      3201,
      3201
    ],
    "valid"
  ],
  [
    [
      3202,
      3203
    ],
    "valid"
  ],
  [
    [
      3204,
      3204
    ],
    "disallowed"
  ],
  [
    [
      3205,
      3212
    ],
    "valid"
  ],
  [
    [
      3213,
      3213
    ],
    "disallowed"
  ],
  [
    [
      3214,
      3216
    ],
    "valid"
  ],
  [
    [
      3217,
      3217
    ],
    "disallowed"
  ],
  [
    [
      3218,
      3240
    ],
    "valid"
  ],
  [
    [
      3241,
      3241
    ],
    "disallowed"
  ],
  [
    [
      3242,
      3251
    ],
    "valid"
  ],
  [
    [
      3252,
      3252
    ],
    "disallowed"
  ],
  [
    [
      3253,
      3257
    ],
    "valid"
  ],
  [
    [
      3258,
      3259
    ],
    "disallowed"
  ],
  [
    [
      3260,
      3261
    ],
    "valid"
  ],
  [
    [
      3262,
      3268
    ],
    "valid"
  ],
  [
    [
      3269,
      3269
    ],
    "disallowed"
  ],
  [
    [
      3270,
      3272
    ],
    "valid"
  ],
  [
    [
      3273,
      3273
    ],
    "disallowed"
  ],
  [
    [
      3274,
      3277
    ],
    "valid"
  ],
  [
    [
      3278,
      3284
    ],
    "disallowed"
  ],
  [
    [
      3285,
      3286
    ],
    "valid"
  ],
  [
    [
      3287,
      3293
    ],
    "disallowed"
  ],
  [
    [
      3294,
      3294
    ],
    "valid"
  ],
  [
    [
      3295,
      3295
    ],
    "disallowed"
  ],
  [
    [
      3296,
      3297
    ],
    "valid"
  ],
  [
    [
      3298,
      3299
    ],
    "valid"
  ],
  [
    [
      3300,
      3301
    ],
    "disallowed"
  ],
  [
    [
      3302,
      3311
    ],
    "valid"
  ],
  [
    [
      3312,
      3312
    ],
    "disallowed"
  ],
  [
    [
      3313,
      3314
    ],
    "valid"
  ],
  [
    [
      3315,
      3328
    ],
    "disallowed"
  ],
  [
    [
      3329,
      3329
    ],
    "valid"
  ],
  [
    [
      3330,
      3331
    ],
    "valid"
  ],
  [
    [
      3332,
      3332
    ],
    "disallowed"
  ],
  [
    [
      3333,
      3340
    ],
    "valid"
  ],
  [
    [
      3341,
      3341
    ],
    "disallowed"
  ],
  [
    [
      3342,
      3344
    ],
    "valid"
  ],
  [
    [
      3345,
      3345
    ],
    "disallowed"
  ],
  [
    [
      3346,
      3368
    ],
    "valid"
  ],
  [
    [
      3369,
      3369
    ],
    "valid"
  ],
  [
    [
      3370,
      3385
    ],
    "valid"
  ],
  [
    [
      3386,
      3386
    ],
    "valid"
  ],
  [
    [
      3387,
      3388
    ],
    "disallowed"
  ],
  [
    [
      3389,
      3389
    ],
    "valid"
  ],
  [
    [
      3390,
      3395
    ],
    "valid"
  ],
  [
    [
      3396,
      3396
    ],
    "valid"
  ],
  [
    [
      3397,
      3397
    ],
    "disallowed"
  ],
  [
    [
      3398,
      3400
    ],
    "valid"
  ],
  [
    [
      3401,
      3401
    ],
    "disallowed"
  ],
  [
    [
      3402,
      3405
    ],
    "valid"
  ],
  [
    [
      3406,
      3406
    ],
    "valid"
  ],
  [
    [
      3407,
      3414
    ],
    "disallowed"
  ],
  [
    [
      3415,
      3415
    ],
    "valid"
  ],
  [
    [
      3416,
      3422
    ],
    "disallowed"
  ],
  [
    [
      3423,
      3423
    ],
    "valid"
  ],
  [
    [
      3424,
      3425
    ],
    "valid"
  ],
  [
    [
      3426,
      3427
    ],
    "valid"
  ],
  [
    [
      3428,
      3429
    ],
    "disallowed"
  ],
  [
    [
      3430,
      3439
    ],
    "valid"
  ],
  [
    [
      3440,
      3445
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3446,
      3448
    ],
    "disallowed"
  ],
  [
    [
      3449,
      3449
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3450,
      3455
    ],
    "valid"
  ],
  [
    [
      3456,
      3457
    ],
    "disallowed"
  ],
  [
    [
      3458,
      3459
    ],
    "valid"
  ],
  [
    [
      3460,
      3460
    ],
    "disallowed"
  ],
  [
    [
      3461,
      3478
    ],
    "valid"
  ],
  [
    [
      3479,
      3481
    ],
    "disallowed"
  ],
  [
    [
      3482,
      3505
    ],
    "valid"
  ],
  [
    [
      3506,
      3506
    ],
    "disallowed"
  ],
  [
    [
      3507,
      3515
    ],
    "valid"
  ],
  [
    [
      3516,
      3516
    ],
    "disallowed"
  ],
  [
    [
      3517,
      3517
    ],
    "valid"
  ],
  [
    [
      3518,
      3519
    ],
    "disallowed"
  ],
  [
    [
      3520,
      3526
    ],
    "valid"
  ],
  [
    [
      3527,
      3529
    ],
    "disallowed"
  ],
  [
    [
      3530,
      3530
    ],
    "valid"
  ],
  [
    [
      3531,
      3534
    ],
    "disallowed"
  ],
  [
    [
      3535,
      3540
    ],
    "valid"
  ],
  [
    [
      3541,
      3541
    ],
    "disallowed"
  ],
  [
    [
      3542,
      3542
    ],
    "valid"
  ],
  [
    [
      3543,
      3543
    ],
    "disallowed"
  ],
  [
    [
      3544,
      3551
    ],
    "valid"
  ],
  [
    [
      3552,
      3557
    ],
    "disallowed"
  ],
  [
    [
      3558,
      3567
    ],
    "valid"
  ],
  [
    [
      3568,
      3569
    ],
    "disallowed"
  ],
  [
    [
      3570,
      3571
    ],
    "valid"
  ],
  [
    [
      3572,
      3572
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3573,
      3584
    ],
    "disallowed"
  ],
  [
    [
      3585,
      3634
    ],
    "valid"
  ],
  [
    [
      3635,
      3635
    ],
    "mapped",
    [
      3661,
      3634
    ]
  ],
  [
    [
      3636,
      3642
    ],
    "valid"
  ],
  [
    [
      3643,
      3646
    ],
    "disallowed"
  ],
  [
    [
      3647,
      3647
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3648,
      3662
    ],
    "valid"
  ],
  [
    [
      3663,
      3663
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3664,
      3673
    ],
    "valid"
  ],
  [
    [
      3674,
      3675
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3676,
      3712
    ],
    "disallowed"
  ],
  [
    [
      3713,
      3714
    ],
    "valid"
  ],
  [
    [
      3715,
      3715
    ],
    "disallowed"
  ],
  [
    [
      3716,
      3716
    ],
    "valid"
  ],
  [
    [
      3717,
      3718
    ],
    "disallowed"
  ],
  [
    [
      3719,
      3720
    ],
    "valid"
  ],
  [
    [
      3721,
      3721
    ],
    "disallowed"
  ],
  [
    [
      3722,
      3722
    ],
    "valid"
  ],
  [
    [
      3723,
      3724
    ],
    "disallowed"
  ],
  [
    [
      3725,
      3725
    ],
    "valid"
  ],
  [
    [
      3726,
      3731
    ],
    "disallowed"
  ],
  [
    [
      3732,
      3735
    ],
    "valid"
  ],
  [
    [
      3736,
      3736
    ],
    "disallowed"
  ],
  [
    [
      3737,
      3743
    ],
    "valid"
  ],
  [
    [
      3744,
      3744
    ],
    "disallowed"
  ],
  [
    [
      3745,
      3747
    ],
    "valid"
  ],
  [
    [
      3748,
      3748
    ],
    "disallowed"
  ],
  [
    [
      3749,
      3749
    ],
    "valid"
  ],
  [
    [
      3750,
      3750
    ],
    "disallowed"
  ],
  [
    [
      3751,
      3751
    ],
    "valid"
  ],
  [
    [
      3752,
      3753
    ],
    "disallowed"
  ],
  [
    [
      3754,
      3755
    ],
    "valid"
  ],
  [
    [
      3756,
      3756
    ],
    "disallowed"
  ],
  [
    [
      3757,
      3762
    ],
    "valid"
  ],
  [
    [
      3763,
      3763
    ],
    "mapped",
    [
      3789,
      3762
    ]
  ],
  [
    [
      3764,
      3769
    ],
    "valid"
  ],
  [
    [
      3770,
      3770
    ],
    "disallowed"
  ],
  [
    [
      3771,
      3773
    ],
    "valid"
  ],
  [
    [
      3774,
      3775
    ],
    "disallowed"
  ],
  [
    [
      3776,
      3780
    ],
    "valid"
  ],
  [
    [
      3781,
      3781
    ],
    "disallowed"
  ],
  [
    [
      3782,
      3782
    ],
    "valid"
  ],
  [
    [
      3783,
      3783
    ],
    "disallowed"
  ],
  [
    [
      3784,
      3789
    ],
    "valid"
  ],
  [
    [
      3790,
      3791
    ],
    "disallowed"
  ],
  [
    [
      3792,
      3801
    ],
    "valid"
  ],
  [
    [
      3802,
      3803
    ],
    "disallowed"
  ],
  [
    [
      3804,
      3804
    ],
    "mapped",
    [
      3755,
      3737
    ]
  ],
  [
    [
      3805,
      3805
    ],
    "mapped",
    [
      3755,
      3745
    ]
  ],
  [
    [
      3806,
      3807
    ],
    "valid"
  ],
  [
    [
      3808,
      3839
    ],
    "disallowed"
  ],
  [
    [
      3840,
      3840
    ],
    "valid"
  ],
  [
    [
      3841,
      3850
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3851,
      3851
    ],
    "valid"
  ],
  [
    [
      3852,
      3852
    ],
    "mapped",
    [
      3851
    ]
  ],
  [
    [
      3853,
      3863
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3864,
      3865
    ],
    "valid"
  ],
  [
    [
      3866,
      3871
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3872,
      3881
    ],
    "valid"
  ],
  [
    [
      3882,
      3892
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3893,
      3893
    ],
    "valid"
  ],
  [
    [
      3894,
      3894
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3895,
      3895
    ],
    "valid"
  ],
  [
    [
      3896,
      3896
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3897,
      3897
    ],
    "valid"
  ],
  [
    [
      3898,
      3901
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3902,
      3906
    ],
    "valid"
  ],
  [
    [
      3907,
      3907
    ],
    "mapped",
    [
      3906,
      4023
    ]
  ],
  [
    [
      3908,
      3911
    ],
    "valid"
  ],
  [
    [
      3912,
      3912
    ],
    "disallowed"
  ],
  [
    [
      3913,
      3916
    ],
    "valid"
  ],
  [
    [
      3917,
      3917
    ],
    "mapped",
    [
      3916,
      4023
    ]
  ],
  [
    [
      3918,
      3921
    ],
    "valid"
  ],
  [
    [
      3922,
      3922
    ],
    "mapped",
    [
      3921,
      4023
    ]
  ],
  [
    [
      3923,
      3926
    ],
    "valid"
  ],
  [
    [
      3927,
      3927
    ],
    "mapped",
    [
      3926,
      4023
    ]
  ],
  [
    [
      3928,
      3931
    ],
    "valid"
  ],
  [
    [
      3932,
      3932
    ],
    "mapped",
    [
      3931,
      4023
    ]
  ],
  [
    [
      3933,
      3944
    ],
    "valid"
  ],
  [
    [
      3945,
      3945
    ],
    "mapped",
    [
      3904,
      4021
    ]
  ],
  [
    [
      3946,
      3946
    ],
    "valid"
  ],
  [
    [
      3947,
      3948
    ],
    "valid"
  ],
  [
    [
      3949,
      3952
    ],
    "disallowed"
  ],
  [
    [
      3953,
      3954
    ],
    "valid"
  ],
  [
    [
      3955,
      3955
    ],
    "mapped",
    [
      3953,
      3954
    ]
  ],
  [
    [
      3956,
      3956
    ],
    "valid"
  ],
  [
    [
      3957,
      3957
    ],
    "mapped",
    [
      3953,
      3956
    ]
  ],
  [
    [
      3958,
      3958
    ],
    "mapped",
    [
      4018,
      3968
    ]
  ],
  [
    [
      3959,
      3959
    ],
    "mapped",
    [
      4018,
      3953,
      3968
    ]
  ],
  [
    [
      3960,
      3960
    ],
    "mapped",
    [
      4019,
      3968
    ]
  ],
  [
    [
      3961,
      3961
    ],
    "mapped",
    [
      4019,
      3953,
      3968
    ]
  ],
  [
    [
      3962,
      3968
    ],
    "valid"
  ],
  [
    [
      3969,
      3969
    ],
    "mapped",
    [
      3953,
      3968
    ]
  ],
  [
    [
      3970,
      3972
    ],
    "valid"
  ],
  [
    [
      3973,
      3973
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3974,
      3979
    ],
    "valid"
  ],
  [
    [
      3980,
      3983
    ],
    "valid"
  ],
  [
    [
      3984,
      3986
    ],
    "valid"
  ],
  [
    [
      3987,
      3987
    ],
    "mapped",
    [
      3986,
      4023
    ]
  ],
  [
    [
      3988,
      3989
    ],
    "valid"
  ],
  [
    [
      3990,
      3990
    ],
    "valid"
  ],
  [
    [
      3991,
      3991
    ],
    "valid"
  ],
  [
    [
      3992,
      3992
    ],
    "disallowed"
  ],
  [
    [
      3993,
      3996
    ],
    "valid"
  ],
  [
    [
      3997,
      3997
    ],
    "mapped",
    [
      3996,
      4023
    ]
  ],
  [
    [
      3998,
      4001
    ],
    "valid"
  ],
  [
    [
      4002,
      4002
    ],
    "mapped",
    [
      4001,
      4023
    ]
  ],
  [
    [
      4003,
      4006
    ],
    "valid"
  ],
  [
    [
      4007,
      4007
    ],
    "mapped",
    [
      4006,
      4023
    ]
  ],
  [
    [
      4008,
      4011
    ],
    "valid"
  ],
  [
    [
      4012,
      4012
    ],
    "mapped",
    [
      4011,
      4023
    ]
  ],
  [
    [
      4013,
      4013
    ],
    "valid"
  ],
  [
    [
      4014,
      4016
    ],
    "valid"
  ],
  [
    [
      4017,
      4023
    ],
    "valid"
  ],
  [
    [
      4024,
      4024
    ],
    "valid"
  ],
  [
    [
      4025,
      4025
    ],
    "mapped",
    [
      3984,
      4021
    ]
  ],
  [
    [
      4026,
      4028
    ],
    "valid"
  ],
  [
    [
      4029,
      4029
    ],
    "disallowed"
  ],
  [
    [
      4030,
      4037
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4038,
      4038
    ],
    "valid"
  ],
  [
    [
      4039,
      4044
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4045,
      4045
    ],
    "disallowed"
  ],
  [
    [
      4046,
      4046
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4047,
      4047
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4048,
      4049
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4050,
      4052
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4053,
      4056
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4057,
      4058
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4059,
      4095
    ],
    "disallowed"
  ],
  [
    [
      4096,
      4129
    ],
    "valid"
  ],
  [
    [
      4130,
      4130
    ],
    "valid"
  ],
  [
    [
      4131,
      4135
    ],
    "valid"
  ],
  [
    [
      4136,
      4136
    ],
    "valid"
  ],
  [
    [
      4137,
      4138
    ],
    "valid"
  ],
  [
    [
      4139,
      4139
    ],
    "valid"
  ],
  [
    [
      4140,
      4146
    ],
    "valid"
  ],
  [
    [
      4147,
      4149
    ],
    "valid"
  ],
  [
    [
      4150,
      4153
    ],
    "valid"
  ],
  [
    [
      4154,
      4159
    ],
    "valid"
  ],
  [
    [
      4160,
      4169
    ],
    "valid"
  ],
  [
    [
      4170,
      4175
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4176,
      4185
    ],
    "valid"
  ],
  [
    [
      4186,
      4249
    ],
    "valid"
  ],
  [
    [
      4250,
      4253
    ],
    "valid"
  ],
  [
    [
      4254,
      4255
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4256,
      4293
    ],
    "disallowed"
  ],
  [
    [
      4294,
      4294
    ],
    "disallowed"
  ],
  [
    [
      4295,
      4295
    ],
    "mapped",
    [
      11559
    ]
  ],
  [
    [
      4296,
      4300
    ],
    "disallowed"
  ],
  [
    [
      4301,
      4301
    ],
    "mapped",
    [
      11565
    ]
  ],
  [
    [
      4302,
      4303
    ],
    "disallowed"
  ],
  [
    [
      4304,
      4342
    ],
    "valid"
  ],
  [
    [
      4343,
      4344
    ],
    "valid"
  ],
  [
    [
      4345,
      4346
    ],
    "valid"
  ],
  [
    [
      4347,
      4347
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4348,
      4348
    ],
    "mapped",
    [
      4316
    ]
  ],
  [
    [
      4349,
      4351
    ],
    "valid"
  ],
  [
    [
      4352,
      4441
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4442,
      4446
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4447,
      4448
    ],
    "disallowed"
  ],
  [
    [
      4449,
      4514
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4515,
      4519
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4520,
      4601
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4602,
      4607
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4608,
      4614
    ],
    "valid"
  ],
  [
    [
      4615,
      4615
    ],
    "valid"
  ],
  [
    [
      4616,
      4678
    ],
    "valid"
  ],
  [
    [
      4679,
      4679
    ],
    "valid"
  ],
  [
    [
      4680,
      4680
    ],
    "valid"
  ],
  [
    [
      4681,
      4681
    ],
    "disallowed"
  ],
  [
    [
      4682,
      4685
    ],
    "valid"
  ],
  [
    [
      4686,
      4687
    ],
    "disallowed"
  ],
  [
    [
      4688,
      4694
    ],
    "valid"
  ],
  [
    [
      4695,
      4695
    ],
    "disallowed"
  ],
  [
    [
      4696,
      4696
    ],
    "valid"
  ],
  [
    [
      4697,
      4697
    ],
    "disallowed"
  ],
  [
    [
      4698,
      4701
    ],
    "valid"
  ],
  [
    [
      4702,
      4703
    ],
    "disallowed"
  ],
  [
    [
      4704,
      4742
    ],
    "valid"
  ],
  [
    [
      4743,
      4743
    ],
    "valid"
  ],
  [
    [
      4744,
      4744
    ],
    "valid"
  ],
  [
    [
      4745,
      4745
    ],
    "disallowed"
  ],
  [
    [
      4746,
      4749
    ],
    "valid"
  ],
  [
    [
      4750,
      4751
    ],
    "disallowed"
  ],
  [
    [
      4752,
      4782
    ],
    "valid"
  ],
  [
    [
      4783,
      4783
    ],
    "valid"
  ],
  [
    [
      4784,
      4784
    ],
    "valid"
  ],
  [
    [
      4785,
      4785
    ],
    "disallowed"
  ],
  [
    [
      4786,
      4789
    ],
    "valid"
  ],
  [
    [
      4790,
      4791
    ],
    "disallowed"
  ],
  [
    [
      4792,
      4798
    ],
    "valid"
  ],
  [
    [
      4799,
      4799
    ],
    "disallowed"
  ],
  [
    [
      4800,
      4800
    ],
    "valid"
  ],
  [
    [
      4801,
      4801
    ],
    "disallowed"
  ],
  [
    [
      4802,
      4805
    ],
    "valid"
  ],
  [
    [
      4806,
      4807
    ],
    "disallowed"
  ],
  [
    [
      4808,
      4814
    ],
    "valid"
  ],
  [
    [
      4815,
      4815
    ],
    "valid"
  ],
  [
    [
      4816,
      4822
    ],
    "valid"
  ],
  [
    [
      4823,
      4823
    ],
    "disallowed"
  ],
  [
    [
      4824,
      4846
    ],
    "valid"
  ],
  [
    [
      4847,
      4847
    ],
    "valid"
  ],
  [
    [
      4848,
      4878
    ],
    "valid"
  ],
  [
    [
      4879,
      4879
    ],
    "valid"
  ],
  [
    [
      4880,
      4880
    ],
    "valid"
  ],
  [
    [
      4881,
      4881
    ],
    "disallowed"
  ],
  [
    [
      4882,
      4885
    ],
    "valid"
  ],
  [
    [
      4886,
      4887
    ],
    "disallowed"
  ],
  [
    [
      4888,
      4894
    ],
    "valid"
  ],
  [
    [
      4895,
      4895
    ],
    "valid"
  ],
  [
    [
      4896,
      4934
    ],
    "valid"
  ],
  [
    [
      4935,
      4935
    ],
    "valid"
  ],
  [
    [
      4936,
      4954
    ],
    "valid"
  ],
  [
    [
      4955,
      4956
    ],
    "disallowed"
  ],
  [
    [
      4957,
      4958
    ],
    "valid"
  ],
  [
    [
      4959,
      4959
    ],
    "valid"
  ],
  [
    [
      4960,
      4960
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4961,
      4988
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4989,
      4991
    ],
    "disallowed"
  ],
  [
    [
      4992,
      5007
    ],
    "valid"
  ],
  [
    [
      5008,
      5017
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5018,
      5023
    ],
    "disallowed"
  ],
  [
    [
      5024,
      5108
    ],
    "valid"
  ],
  [
    [
      5109,
      5109
    ],
    "valid"
  ],
  [
    [
      5110,
      5111
    ],
    "disallowed"
  ],
  [
    [
      5112,
      5112
    ],
    "mapped",
    [
      5104
    ]
  ],
  [
    [
      5113,
      5113
    ],
    "mapped",
    [
      5105
    ]
  ],
  [
    [
      5114,
      5114
    ],
    "mapped",
    [
      5106
    ]
  ],
  [
    [
      5115,
      5115
    ],
    "mapped",
    [
      5107
    ]
  ],
  [
    [
      5116,
      5116
    ],
    "mapped",
    [
      5108
    ]
  ],
  [
    [
      5117,
      5117
    ],
    "mapped",
    [
      5109
    ]
  ],
  [
    [
      5118,
      5119
    ],
    "disallowed"
  ],
  [
    [
      5120,
      5120
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5121,
      5740
    ],
    "valid"
  ],
  [
    [
      5741,
      5742
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5743,
      5750
    ],
    "valid"
  ],
  [
    [
      5751,
      5759
    ],
    "valid"
  ],
  [
    [
      5760,
      5760
    ],
    "disallowed"
  ],
  [
    [
      5761,
      5786
    ],
    "valid"
  ],
  [
    [
      5787,
      5788
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5789,
      5791
    ],
    "disallowed"
  ],
  [
    [
      5792,
      5866
    ],
    "valid"
  ],
  [
    [
      5867,
      5872
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5873,
      5880
    ],
    "valid"
  ],
  [
    [
      5881,
      5887
    ],
    "disallowed"
  ],
  [
    [
      5888,
      5900
    ],
    "valid"
  ],
  [
    [
      5901,
      5901
    ],
    "disallowed"
  ],
  [
    [
      5902,
      5908
    ],
    "valid"
  ],
  [
    [
      5909,
      5919
    ],
    "disallowed"
  ],
  [
    [
      5920,
      5940
    ],
    "valid"
  ],
  [
    [
      5941,
      5942
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5943,
      5951
    ],
    "disallowed"
  ],
  [
    [
      5952,
      5971
    ],
    "valid"
  ],
  [
    [
      5972,
      5983
    ],
    "disallowed"
  ],
  [
    [
      5984,
      5996
    ],
    "valid"
  ],
  [
    [
      5997,
      5997
    ],
    "disallowed"
  ],
  [
    [
      5998,
      6e3
    ],
    "valid"
  ],
  [
    [
      6001,
      6001
    ],
    "disallowed"
  ],
  [
    [
      6002,
      6003
    ],
    "valid"
  ],
  [
    [
      6004,
      6015
    ],
    "disallowed"
  ],
  [
    [
      6016,
      6067
    ],
    "valid"
  ],
  [
    [
      6068,
      6069
    ],
    "disallowed"
  ],
  [
    [
      6070,
      6099
    ],
    "valid"
  ],
  [
    [
      6100,
      6102
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6103,
      6103
    ],
    "valid"
  ],
  [
    [
      6104,
      6107
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6108,
      6108
    ],
    "valid"
  ],
  [
    [
      6109,
      6109
    ],
    "valid"
  ],
  [
    [
      6110,
      6111
    ],
    "disallowed"
  ],
  [
    [
      6112,
      6121
    ],
    "valid"
  ],
  [
    [
      6122,
      6127
    ],
    "disallowed"
  ],
  [
    [
      6128,
      6137
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6138,
      6143
    ],
    "disallowed"
  ],
  [
    [
      6144,
      6149
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6150,
      6150
    ],
    "disallowed"
  ],
  [
    [
      6151,
      6154
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6155,
      6157
    ],
    "ignored"
  ],
  [
    [
      6158,
      6158
    ],
    "disallowed"
  ],
  [
    [
      6159,
      6159
    ],
    "disallowed"
  ],
  [
    [
      6160,
      6169
    ],
    "valid"
  ],
  [
    [
      6170,
      6175
    ],
    "disallowed"
  ],
  [
    [
      6176,
      6263
    ],
    "valid"
  ],
  [
    [
      6264,
      6271
    ],
    "disallowed"
  ],
  [
    [
      6272,
      6313
    ],
    "valid"
  ],
  [
    [
      6314,
      6314
    ],
    "valid"
  ],
  [
    [
      6315,
      6319
    ],
    "disallowed"
  ],
  [
    [
      6320,
      6389
    ],
    "valid"
  ],
  [
    [
      6390,
      6399
    ],
    "disallowed"
  ],
  [
    [
      6400,
      6428
    ],
    "valid"
  ],
  [
    [
      6429,
      6430
    ],
    "valid"
  ],
  [
    [
      6431,
      6431
    ],
    "disallowed"
  ],
  [
    [
      6432,
      6443
    ],
    "valid"
  ],
  [
    [
      6444,
      6447
    ],
    "disallowed"
  ],
  [
    [
      6448,
      6459
    ],
    "valid"
  ],
  [
    [
      6460,
      6463
    ],
    "disallowed"
  ],
  [
    [
      6464,
      6464
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6465,
      6467
    ],
    "disallowed"
  ],
  [
    [
      6468,
      6469
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6470,
      6509
    ],
    "valid"
  ],
  [
    [
      6510,
      6511
    ],
    "disallowed"
  ],
  [
    [
      6512,
      6516
    ],
    "valid"
  ],
  [
    [
      6517,
      6527
    ],
    "disallowed"
  ],
  [
    [
      6528,
      6569
    ],
    "valid"
  ],
  [
    [
      6570,
      6571
    ],
    "valid"
  ],
  [
    [
      6572,
      6575
    ],
    "disallowed"
  ],
  [
    [
      6576,
      6601
    ],
    "valid"
  ],
  [
    [
      6602,
      6607
    ],
    "disallowed"
  ],
  [
    [
      6608,
      6617
    ],
    "valid"
  ],
  [
    [
      6618,
      6618
    ],
    "valid",
    [],
    "XV8"
  ],
  [
    [
      6619,
      6621
    ],
    "disallowed"
  ],
  [
    [
      6622,
      6623
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6624,
      6655
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6656,
      6683
    ],
    "valid"
  ],
  [
    [
      6684,
      6685
    ],
    "disallowed"
  ],
  [
    [
      6686,
      6687
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6688,
      6750
    ],
    "valid"
  ],
  [
    [
      6751,
      6751
    ],
    "disallowed"
  ],
  [
    [
      6752,
      6780
    ],
    "valid"
  ],
  [
    [
      6781,
      6782
    ],
    "disallowed"
  ],
  [
    [
      6783,
      6793
    ],
    "valid"
  ],
  [
    [
      6794,
      6799
    ],
    "disallowed"
  ],
  [
    [
      6800,
      6809
    ],
    "valid"
  ],
  [
    [
      6810,
      6815
    ],
    "disallowed"
  ],
  [
    [
      6816,
      6822
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6823,
      6823
    ],
    "valid"
  ],
  [
    [
      6824,
      6829
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6830,
      6831
    ],
    "disallowed"
  ],
  [
    [
      6832,
      6845
    ],
    "valid"
  ],
  [
    [
      6846,
      6846
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6847,
      6911
    ],
    "disallowed"
  ],
  [
    [
      6912,
      6987
    ],
    "valid"
  ],
  [
    [
      6988,
      6991
    ],
    "disallowed"
  ],
  [
    [
      6992,
      7001
    ],
    "valid"
  ],
  [
    [
      7002,
      7018
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7019,
      7027
    ],
    "valid"
  ],
  [
    [
      7028,
      7036
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7037,
      7039
    ],
    "disallowed"
  ],
  [
    [
      7040,
      7082
    ],
    "valid"
  ],
  [
    [
      7083,
      7085
    ],
    "valid"
  ],
  [
    [
      7086,
      7097
    ],
    "valid"
  ],
  [
    [
      7098,
      7103
    ],
    "valid"
  ],
  [
    [
      7104,
      7155
    ],
    "valid"
  ],
  [
    [
      7156,
      7163
    ],
    "disallowed"
  ],
  [
    [
      7164,
      7167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7168,
      7223
    ],
    "valid"
  ],
  [
    [
      7224,
      7226
    ],
    "disallowed"
  ],
  [
    [
      7227,
      7231
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7232,
      7241
    ],
    "valid"
  ],
  [
    [
      7242,
      7244
    ],
    "disallowed"
  ],
  [
    [
      7245,
      7293
    ],
    "valid"
  ],
  [
    [
      7294,
      7295
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7296,
      7359
    ],
    "disallowed"
  ],
  [
    [
      7360,
      7367
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7368,
      7375
    ],
    "disallowed"
  ],
  [
    [
      7376,
      7378
    ],
    "valid"
  ],
  [
    [
      7379,
      7379
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7380,
      7410
    ],
    "valid"
  ],
  [
    [
      7411,
      7414
    ],
    "valid"
  ],
  [
    [
      7415,
      7415
    ],
    "disallowed"
  ],
  [
    [
      7416,
      7417
    ],
    "valid"
  ],
  [
    [
      7418,
      7423
    ],
    "disallowed"
  ],
  [
    [
      7424,
      7467
    ],
    "valid"
  ],
  [
    [
      7468,
      7468
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      7469,
      7469
    ],
    "mapped",
    [
      230
    ]
  ],
  [
    [
      7470,
      7470
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      7471,
      7471
    ],
    "valid"
  ],
  [
    [
      7472,
      7472
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      7473,
      7473
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      7474,
      7474
    ],
    "mapped",
    [
      477
    ]
  ],
  [
    [
      7475,
      7475
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      7476,
      7476
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      7477,
      7477
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      7478,
      7478
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      7479,
      7479
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      7480,
      7480
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      7481,
      7481
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      7482,
      7482
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      7483,
      7483
    ],
    "valid"
  ],
  [
    [
      7484,
      7484
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      7485,
      7485
    ],
    "mapped",
    [
      547
    ]
  ],
  [
    [
      7486,
      7486
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      7487,
      7487
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      7488,
      7488
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      7489,
      7489
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      7490,
      7490
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      7491,
      7491
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      7492,
      7492
    ],
    "mapped",
    [
      592
    ]
  ],
  [
    [
      7493,
      7493
    ],
    "mapped",
    [
      593
    ]
  ],
  [
    [
      7494,
      7494
    ],
    "mapped",
    [
      7426
    ]
  ],
  [
    [
      7495,
      7495
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      7496,
      7496
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      7497,
      7497
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      7498,
      7498
    ],
    "mapped",
    [
      601
    ]
  ],
  [
    [
      7499,
      7499
    ],
    "mapped",
    [
      603
    ]
  ],
  [
    [
      7500,
      7500
    ],
    "mapped",
    [
      604
    ]
  ],
  [
    [
      7501,
      7501
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      7502,
      7502
    ],
    "valid"
  ],
  [
    [
      7503,
      7503
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      7504,
      7504
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      7505,
      7505
    ],
    "mapped",
    [
      331
    ]
  ],
  [
    [
      7506,
      7506
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      7507,
      7507
    ],
    "mapped",
    [
      596
    ]
  ],
  [
    [
      7508,
      7508
    ],
    "mapped",
    [
      7446
    ]
  ],
  [
    [
      7509,
      7509
    ],
    "mapped",
    [
      7447
    ]
  ],
  [
    [
      7510,
      7510
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      7511,
      7511
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      7512,
      7512
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      7513,
      7513
    ],
    "mapped",
    [
      7453
    ]
  ],
  [
    [
      7514,
      7514
    ],
    "mapped",
    [
      623
    ]
  ],
  [
    [
      7515,
      7515
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      7516,
      7516
    ],
    "mapped",
    [
      7461
    ]
  ],
  [
    [
      7517,
      7517
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      7518,
      7518
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      7519,
      7519
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      7520,
      7520
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      7521,
      7521
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      7522,
      7522
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      7523,
      7523
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      7524,
      7524
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      7525,
      7525
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      7526,
      7526
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      7527,
      7527
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      7528,
      7528
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      7529,
      7529
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      7530,
      7530
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      7531,
      7531
    ],
    "valid"
  ],
  [
    [
      7532,
      7543
    ],
    "valid"
  ],
  [
    [
      7544,
      7544
    ],
    "mapped",
    [
      1085
    ]
  ],
  [
    [
      7545,
      7578
    ],
    "valid"
  ],
  [
    [
      7579,
      7579
    ],
    "mapped",
    [
      594
    ]
  ],
  [
    [
      7580,
      7580
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      7581,
      7581
    ],
    "mapped",
    [
      597
    ]
  ],
  [
    [
      7582,
      7582
    ],
    "mapped",
    [
      240
    ]
  ],
  [
    [
      7583,
      7583
    ],
    "mapped",
    [
      604
    ]
  ],
  [
    [
      7584,
      7584
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      7585,
      7585
    ],
    "mapped",
    [
      607
    ]
  ],
  [
    [
      7586,
      7586
    ],
    "mapped",
    [
      609
    ]
  ],
  [
    [
      7587,
      7587
    ],
    "mapped",
    [
      613
    ]
  ],
  [
    [
      7588,
      7588
    ],
    "mapped",
    [
      616
    ]
  ],
  [
    [
      7589,
      7589
    ],
    "mapped",
    [
      617
    ]
  ],
  [
    [
      7590,
      7590
    ],
    "mapped",
    [
      618
    ]
  ],
  [
    [
      7591,
      7591
    ],
    "mapped",
    [
      7547
    ]
  ],
  [
    [
      7592,
      7592
    ],
    "mapped",
    [
      669
    ]
  ],
  [
    [
      7593,
      7593
    ],
    "mapped",
    [
      621
    ]
  ],
  [
    [
      7594,
      7594
    ],
    "mapped",
    [
      7557
    ]
  ],
  [
    [
      7595,
      7595
    ],
    "mapped",
    [
      671
    ]
  ],
  [
    [
      7596,
      7596
    ],
    "mapped",
    [
      625
    ]
  ],
  [
    [
      7597,
      7597
    ],
    "mapped",
    [
      624
    ]
  ],
  [
    [
      7598,
      7598
    ],
    "mapped",
    [
      626
    ]
  ],
  [
    [
      7599,
      7599
    ],
    "mapped",
    [
      627
    ]
  ],
  [
    [
      7600,
      7600
    ],
    "mapped",
    [
      628
    ]
  ],
  [
    [
      7601,
      7601
    ],
    "mapped",
    [
      629
    ]
  ],
  [
    [
      7602,
      7602
    ],
    "mapped",
    [
      632
    ]
  ],
  [
    [
      7603,
      7603
    ],
    "mapped",
    [
      642
    ]
  ],
  [
    [
      7604,
      7604
    ],
    "mapped",
    [
      643
    ]
  ],
  [
    [
      7605,
      7605
    ],
    "mapped",
    [
      427
    ]
  ],
  [
    [
      7606,
      7606
    ],
    "mapped",
    [
      649
    ]
  ],
  [
    [
      7607,
      7607
    ],
    "mapped",
    [
      650
    ]
  ],
  [
    [
      7608,
      7608
    ],
    "mapped",
    [
      7452
    ]
  ],
  [
    [
      7609,
      7609
    ],
    "mapped",
    [
      651
    ]
  ],
  [
    [
      7610,
      7610
    ],
    "mapped",
    [
      652
    ]
  ],
  [
    [
      7611,
      7611
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      7612,
      7612
    ],
    "mapped",
    [
      656
    ]
  ],
  [
    [
      7613,
      7613
    ],
    "mapped",
    [
      657
    ]
  ],
  [
    [
      7614,
      7614
    ],
    "mapped",
    [
      658
    ]
  ],
  [
    [
      7615,
      7615
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      7616,
      7619
    ],
    "valid"
  ],
  [
    [
      7620,
      7626
    ],
    "valid"
  ],
  [
    [
      7627,
      7654
    ],
    "valid"
  ],
  [
    [
      7655,
      7669
    ],
    "valid"
  ],
  [
    [
      7670,
      7675
    ],
    "disallowed"
  ],
  [
    [
      7676,
      7676
    ],
    "valid"
  ],
  [
    [
      7677,
      7677
    ],
    "valid"
  ],
  [
    [
      7678,
      7679
    ],
    "valid"
  ],
  [
    [
      7680,
      7680
    ],
    "mapped",
    [
      7681
    ]
  ],
  [
    [
      7681,
      7681
    ],
    "valid"
  ],
  [
    [
      7682,
      7682
    ],
    "mapped",
    [
      7683
    ]
  ],
  [
    [
      7683,
      7683
    ],
    "valid"
  ],
  [
    [
      7684,
      7684
    ],
    "mapped",
    [
      7685
    ]
  ],
  [
    [
      7685,
      7685
    ],
    "valid"
  ],
  [
    [
      7686,
      7686
    ],
    "mapped",
    [
      7687
    ]
  ],
  [
    [
      7687,
      7687
    ],
    "valid"
  ],
  [
    [
      7688,
      7688
    ],
    "mapped",
    [
      7689
    ]
  ],
  [
    [
      7689,
      7689
    ],
    "valid"
  ],
  [
    [
      7690,
      7690
    ],
    "mapped",
    [
      7691
    ]
  ],
  [
    [
      7691,
      7691
    ],
    "valid"
  ],
  [
    [
      7692,
      7692
    ],
    "mapped",
    [
      7693
    ]
  ],
  [
    [
      7693,
      7693
    ],
    "valid"
  ],
  [
    [
      7694,
      7694
    ],
    "mapped",
    [
      7695
    ]
  ],
  [
    [
      7695,
      7695
    ],
    "valid"
  ],
  [
    [
      7696,
      7696
    ],
    "mapped",
    [
      7697
    ]
  ],
  [
    [
      7697,
      7697
    ],
    "valid"
  ],
  [
    [
      7698,
      7698
    ],
    "mapped",
    [
      7699
    ]
  ],
  [
    [
      7699,
      7699
    ],
    "valid"
  ],
  [
    [
      7700,
      7700
    ],
    "mapped",
    [
      7701
    ]
  ],
  [
    [
      7701,
      7701
    ],
    "valid"
  ],
  [
    [
      7702,
      7702
    ],
    "mapped",
    [
      7703
    ]
  ],
  [
    [
      7703,
      7703
    ],
    "valid"
  ],
  [
    [
      7704,
      7704
    ],
    "mapped",
    [
      7705
    ]
  ],
  [
    [
      7705,
      7705
    ],
    "valid"
  ],
  [
    [
      7706,
      7706
    ],
    "mapped",
    [
      7707
    ]
  ],
  [
    [
      7707,
      7707
    ],
    "valid"
  ],
  [
    [
      7708,
      7708
    ],
    "mapped",
    [
      7709
    ]
  ],
  [
    [
      7709,
      7709
    ],
    "valid"
  ],
  [
    [
      7710,
      7710
    ],
    "mapped",
    [
      7711
    ]
  ],
  [
    [
      7711,
      7711
    ],
    "valid"
  ],
  [
    [
      7712,
      7712
    ],
    "mapped",
    [
      7713
    ]
  ],
  [
    [
      7713,
      7713
    ],
    "valid"
  ],
  [
    [
      7714,
      7714
    ],
    "mapped",
    [
      7715
    ]
  ],
  [
    [
      7715,
      7715
    ],
    "valid"
  ],
  [
    [
      7716,
      7716
    ],
    "mapped",
    [
      7717
    ]
  ],
  [
    [
      7717,
      7717
    ],
    "valid"
  ],
  [
    [
      7718,
      7718
    ],
    "mapped",
    [
      7719
    ]
  ],
  [
    [
      7719,
      7719
    ],
    "valid"
  ],
  [
    [
      7720,
      7720
    ],
    "mapped",
    [
      7721
    ]
  ],
  [
    [
      7721,
      7721
    ],
    "valid"
  ],
  [
    [
      7722,
      7722
    ],
    "mapped",
    [
      7723
    ]
  ],
  [
    [
      7723,
      7723
    ],
    "valid"
  ],
  [
    [
      7724,
      7724
    ],
    "mapped",
    [
      7725
    ]
  ],
  [
    [
      7725,
      7725
    ],
    "valid"
  ],
  [
    [
      7726,
      7726
    ],
    "mapped",
    [
      7727
    ]
  ],
  [
    [
      7727,
      7727
    ],
    "valid"
  ],
  [
    [
      7728,
      7728
    ],
    "mapped",
    [
      7729
    ]
  ],
  [
    [
      7729,
      7729
    ],
    "valid"
  ],
  [
    [
      7730,
      7730
    ],
    "mapped",
    [
      7731
    ]
  ],
  [
    [
      7731,
      7731
    ],
    "valid"
  ],
  [
    [
      7732,
      7732
    ],
    "mapped",
    [
      7733
    ]
  ],
  [
    [
      7733,
      7733
    ],
    "valid"
  ],
  [
    [
      7734,
      7734
    ],
    "mapped",
    [
      7735
    ]
  ],
  [
    [
      7735,
      7735
    ],
    "valid"
  ],
  [
    [
      7736,
      7736
    ],
    "mapped",
    [
      7737
    ]
  ],
  [
    [
      7737,
      7737
    ],
    "valid"
  ],
  [
    [
      7738,
      7738
    ],
    "mapped",
    [
      7739
    ]
  ],
  [
    [
      7739,
      7739
    ],
    "valid"
  ],
  [
    [
      7740,
      7740
    ],
    "mapped",
    [
      7741
    ]
  ],
  [
    [
      7741,
      7741
    ],
    "valid"
  ],
  [
    [
      7742,
      7742
    ],
    "mapped",
    [
      7743
    ]
  ],
  [
    [
      7743,
      7743
    ],
    "valid"
  ],
  [
    [
      7744,
      7744
    ],
    "mapped",
    [
      7745
    ]
  ],
  [
    [
      7745,
      7745
    ],
    "valid"
  ],
  [
    [
      7746,
      7746
    ],
    "mapped",
    [
      7747
    ]
  ],
  [
    [
      7747,
      7747
    ],
    "valid"
  ],
  [
    [
      7748,
      7748
    ],
    "mapped",
    [
      7749
    ]
  ],
  [
    [
      7749,
      7749
    ],
    "valid"
  ],
  [
    [
      7750,
      7750
    ],
    "mapped",
    [
      7751
    ]
  ],
  [
    [
      7751,
      7751
    ],
    "valid"
  ],
  [
    [
      7752,
      7752
    ],
    "mapped",
    [
      7753
    ]
  ],
  [
    [
      7753,
      7753
    ],
    "valid"
  ],
  [
    [
      7754,
      7754
    ],
    "mapped",
    [
      7755
    ]
  ],
  [
    [
      7755,
      7755
    ],
    "valid"
  ],
  [
    [
      7756,
      7756
    ],
    "mapped",
    [
      7757
    ]
  ],
  [
    [
      7757,
      7757
    ],
    "valid"
  ],
  [
    [
      7758,
      7758
    ],
    "mapped",
    [
      7759
    ]
  ],
  [
    [
      7759,
      7759
    ],
    "valid"
  ],
  [
    [
      7760,
      7760
    ],
    "mapped",
    [
      7761
    ]
  ],
  [
    [
      7761,
      7761
    ],
    "valid"
  ],
  [
    [
      7762,
      7762
    ],
    "mapped",
    [
      7763
    ]
  ],
  [
    [
      7763,
      7763
    ],
    "valid"
  ],
  [
    [
      7764,
      7764
    ],
    "mapped",
    [
      7765
    ]
  ],
  [
    [
      7765,
      7765
    ],
    "valid"
  ],
  [
    [
      7766,
      7766
    ],
    "mapped",
    [
      7767
    ]
  ],
  [
    [
      7767,
      7767
    ],
    "valid"
  ],
  [
    [
      7768,
      7768
    ],
    "mapped",
    [
      7769
    ]
  ],
  [
    [
      7769,
      7769
    ],
    "valid"
  ],
  [
    [
      7770,
      7770
    ],
    "mapped",
    [
      7771
    ]
  ],
  [
    [
      7771,
      7771
    ],
    "valid"
  ],
  [
    [
      7772,
      7772
    ],
    "mapped",
    [
      7773
    ]
  ],
  [
    [
      7773,
      7773
    ],
    "valid"
  ],
  [
    [
      7774,
      7774
    ],
    "mapped",
    [
      7775
    ]
  ],
  [
    [
      7775,
      7775
    ],
    "valid"
  ],
  [
    [
      7776,
      7776
    ],
    "mapped",
    [
      7777
    ]
  ],
  [
    [
      7777,
      7777
    ],
    "valid"
  ],
  [
    [
      7778,
      7778
    ],
    "mapped",
    [
      7779
    ]
  ],
  [
    [
      7779,
      7779
    ],
    "valid"
  ],
  [
    [
      7780,
      7780
    ],
    "mapped",
    [
      7781
    ]
  ],
  [
    [
      7781,
      7781
    ],
    "valid"
  ],
  [
    [
      7782,
      7782
    ],
    "mapped",
    [
      7783
    ]
  ],
  [
    [
      7783,
      7783
    ],
    "valid"
  ],
  [
    [
      7784,
      7784
    ],
    "mapped",
    [
      7785
    ]
  ],
  [
    [
      7785,
      7785
    ],
    "valid"
  ],
  [
    [
      7786,
      7786
    ],
    "mapped",
    [
      7787
    ]
  ],
  [
    [
      7787,
      7787
    ],
    "valid"
  ],
  [
    [
      7788,
      7788
    ],
    "mapped",
    [
      7789
    ]
  ],
  [
    [
      7789,
      7789
    ],
    "valid"
  ],
  [
    [
      7790,
      7790
    ],
    "mapped",
    [
      7791
    ]
  ],
  [
    [
      7791,
      7791
    ],
    "valid"
  ],
  [
    [
      7792,
      7792
    ],
    "mapped",
    [
      7793
    ]
  ],
  [
    [
      7793,
      7793
    ],
    "valid"
  ],
  [
    [
      7794,
      7794
    ],
    "mapped",
    [
      7795
    ]
  ],
  [
    [
      7795,
      7795
    ],
    "valid"
  ],
  [
    [
      7796,
      7796
    ],
    "mapped",
    [
      7797
    ]
  ],
  [
    [
      7797,
      7797
    ],
    "valid"
  ],
  [
    [
      7798,
      7798
    ],
    "mapped",
    [
      7799
    ]
  ],
  [
    [
      7799,
      7799
    ],
    "valid"
  ],
  [
    [
      7800,
      7800
    ],
    "mapped",
    [
      7801
    ]
  ],
  [
    [
      7801,
      7801
    ],
    "valid"
  ],
  [
    [
      7802,
      7802
    ],
    "mapped",
    [
      7803
    ]
  ],
  [
    [
      7803,
      7803
    ],
    "valid"
  ],
  [
    [
      7804,
      7804
    ],
    "mapped",
    [
      7805
    ]
  ],
  [
    [
      7805,
      7805
    ],
    "valid"
  ],
  [
    [
      7806,
      7806
    ],
    "mapped",
    [
      7807
    ]
  ],
  [
    [
      7807,
      7807
    ],
    "valid"
  ],
  [
    [
      7808,
      7808
    ],
    "mapped",
    [
      7809
    ]
  ],
  [
    [
      7809,
      7809
    ],
    "valid"
  ],
  [
    [
      7810,
      7810
    ],
    "mapped",
    [
      7811
    ]
  ],
  [
    [
      7811,
      7811
    ],
    "valid"
  ],
  [
    [
      7812,
      7812
    ],
    "mapped",
    [
      7813
    ]
  ],
  [
    [
      7813,
      7813
    ],
    "valid"
  ],
  [
    [
      7814,
      7814
    ],
    "mapped",
    [
      7815
    ]
  ],
  [
    [
      7815,
      7815
    ],
    "valid"
  ],
  [
    [
      7816,
      7816
    ],
    "mapped",
    [
      7817
    ]
  ],
  [
    [
      7817,
      7817
    ],
    "valid"
  ],
  [
    [
      7818,
      7818
    ],
    "mapped",
    [
      7819
    ]
  ],
  [
    [
      7819,
      7819
    ],
    "valid"
  ],
  [
    [
      7820,
      7820
    ],
    "mapped",
    [
      7821
    ]
  ],
  [
    [
      7821,
      7821
    ],
    "valid"
  ],
  [
    [
      7822,
      7822
    ],
    "mapped",
    [
      7823
    ]
  ],
  [
    [
      7823,
      7823
    ],
    "valid"
  ],
  [
    [
      7824,
      7824
    ],
    "mapped",
    [
      7825
    ]
  ],
  [
    [
      7825,
      7825
    ],
    "valid"
  ],
  [
    [
      7826,
      7826
    ],
    "mapped",
    [
      7827
    ]
  ],
  [
    [
      7827,
      7827
    ],
    "valid"
  ],
  [
    [
      7828,
      7828
    ],
    "mapped",
    [
      7829
    ]
  ],
  [
    [
      7829,
      7833
    ],
    "valid"
  ],
  [
    [
      7834,
      7834
    ],
    "mapped",
    [
      97,
      702
    ]
  ],
  [
    [
      7835,
      7835
    ],
    "mapped",
    [
      7777
    ]
  ],
  [
    [
      7836,
      7837
    ],
    "valid"
  ],
  [
    [
      7838,
      7838
    ],
    "mapped",
    [
      115,
      115
    ]
  ],
  [
    [
      7839,
      7839
    ],
    "valid"
  ],
  [
    [
      7840,
      7840
    ],
    "mapped",
    [
      7841
    ]
  ],
  [
    [
      7841,
      7841
    ],
    "valid"
  ],
  [
    [
      7842,
      7842
    ],
    "mapped",
    [
      7843
    ]
  ],
  [
    [
      7843,
      7843
    ],
    "valid"
  ],
  [
    [
      7844,
      7844
    ],
    "mapped",
    [
      7845
    ]
  ],
  [
    [
      7845,
      7845
    ],
    "valid"
  ],
  [
    [
      7846,
      7846
    ],
    "mapped",
    [
      7847
    ]
  ],
  [
    [
      7847,
      7847
    ],
    "valid"
  ],
  [
    [
      7848,
      7848
    ],
    "mapped",
    [
      7849
    ]
  ],
  [
    [
      7849,
      7849
    ],
    "valid"
  ],
  [
    [
      7850,
      7850
    ],
    "mapped",
    [
      7851
    ]
  ],
  [
    [
      7851,
      7851
    ],
    "valid"
  ],
  [
    [
      7852,
      7852
    ],
    "mapped",
    [
      7853
    ]
  ],
  [
    [
      7853,
      7853
    ],
    "valid"
  ],
  [
    [
      7854,
      7854
    ],
    "mapped",
    [
      7855
    ]
  ],
  [
    [
      7855,
      7855
    ],
    "valid"
  ],
  [
    [
      7856,
      7856
    ],
    "mapped",
    [
      7857
    ]
  ],
  [
    [
      7857,
      7857
    ],
    "valid"
  ],
  [
    [
      7858,
      7858
    ],
    "mapped",
    [
      7859
    ]
  ],
  [
    [
      7859,
      7859
    ],
    "valid"
  ],
  [
    [
      7860,
      7860
    ],
    "mapped",
    [
      7861
    ]
  ],
  [
    [
      7861,
      7861
    ],
    "valid"
  ],
  [
    [
      7862,
      7862
    ],
    "mapped",
    [
      7863
    ]
  ],
  [
    [
      7863,
      7863
    ],
    "valid"
  ],
  [
    [
      7864,
      7864
    ],
    "mapped",
    [
      7865
    ]
  ],
  [
    [
      7865,
      7865
    ],
    "valid"
  ],
  [
    [
      7866,
      7866
    ],
    "mapped",
    [
      7867
    ]
  ],
  [
    [
      7867,
      7867
    ],
    "valid"
  ],
  [
    [
      7868,
      7868
    ],
    "mapped",
    [
      7869
    ]
  ],
  [
    [
      7869,
      7869
    ],
    "valid"
  ],
  [
    [
      7870,
      7870
    ],
    "mapped",
    [
      7871
    ]
  ],
  [
    [
      7871,
      7871
    ],
    "valid"
  ],
  [
    [
      7872,
      7872
    ],
    "mapped",
    [
      7873
    ]
  ],
  [
    [
      7873,
      7873
    ],
    "valid"
  ],
  [
    [
      7874,
      7874
    ],
    "mapped",
    [
      7875
    ]
  ],
  [
    [
      7875,
      7875
    ],
    "valid"
  ],
  [
    [
      7876,
      7876
    ],
    "mapped",
    [
      7877
    ]
  ],
  [
    [
      7877,
      7877
    ],
    "valid"
  ],
  [
    [
      7878,
      7878
    ],
    "mapped",
    [
      7879
    ]
  ],
  [
    [
      7879,
      7879
    ],
    "valid"
  ],
  [
    [
      7880,
      7880
    ],
    "mapped",
    [
      7881
    ]
  ],
  [
    [
      7881,
      7881
    ],
    "valid"
  ],
  [
    [
      7882,
      7882
    ],
    "mapped",
    [
      7883
    ]
  ],
  [
    [
      7883,
      7883
    ],
    "valid"
  ],
  [
    [
      7884,
      7884
    ],
    "mapped",
    [
      7885
    ]
  ],
  [
    [
      7885,
      7885
    ],
    "valid"
  ],
  [
    [
      7886,
      7886
    ],
    "mapped",
    [
      7887
    ]
  ],
  [
    [
      7887,
      7887
    ],
    "valid"
  ],
  [
    [
      7888,
      7888
    ],
    "mapped",
    [
      7889
    ]
  ],
  [
    [
      7889,
      7889
    ],
    "valid"
  ],
  [
    [
      7890,
      7890
    ],
    "mapped",
    [
      7891
    ]
  ],
  [
    [
      7891,
      7891
    ],
    "valid"
  ],
  [
    [
      7892,
      7892
    ],
    "mapped",
    [
      7893
    ]
  ],
  [
    [
      7893,
      7893
    ],
    "valid"
  ],
  [
    [
      7894,
      7894
    ],
    "mapped",
    [
      7895
    ]
  ],
  [
    [
      7895,
      7895
    ],
    "valid"
  ],
  [
    [
      7896,
      7896
    ],
    "mapped",
    [
      7897
    ]
  ],
  [
    [
      7897,
      7897
    ],
    "valid"
  ],
  [
    [
      7898,
      7898
    ],
    "mapped",
    [
      7899
    ]
  ],
  [
    [
      7899,
      7899
    ],
    "valid"
  ],
  [
    [
      7900,
      7900
    ],
    "mapped",
    [
      7901
    ]
  ],
  [
    [
      7901,
      7901
    ],
    "valid"
  ],
  [
    [
      7902,
      7902
    ],
    "mapped",
    [
      7903
    ]
  ],
  [
    [
      7903,
      7903
    ],
    "valid"
  ],
  [
    [
      7904,
      7904
    ],
    "mapped",
    [
      7905
    ]
  ],
  [
    [
      7905,
      7905
    ],
    "valid"
  ],
  [
    [
      7906,
      7906
    ],
    "mapped",
    [
      7907
    ]
  ],
  [
    [
      7907,
      7907
    ],
    "valid"
  ],
  [
    [
      7908,
      7908
    ],
    "mapped",
    [
      7909
    ]
  ],
  [
    [
      7909,
      7909
    ],
    "valid"
  ],
  [
    [
      7910,
      7910
    ],
    "mapped",
    [
      7911
    ]
  ],
  [
    [
      7911,
      7911
    ],
    "valid"
  ],
  [
    [
      7912,
      7912
    ],
    "mapped",
    [
      7913
    ]
  ],
  [
    [
      7913,
      7913
    ],
    "valid"
  ],
  [
    [
      7914,
      7914
    ],
    "mapped",
    [
      7915
    ]
  ],
  [
    [
      7915,
      7915
    ],
    "valid"
  ],
  [
    [
      7916,
      7916
    ],
    "mapped",
    [
      7917
    ]
  ],
  [
    [
      7917,
      7917
    ],
    "valid"
  ],
  [
    [
      7918,
      7918
    ],
    "mapped",
    [
      7919
    ]
  ],
  [
    [
      7919,
      7919
    ],
    "valid"
  ],
  [
    [
      7920,
      7920
    ],
    "mapped",
    [
      7921
    ]
  ],
  [
    [
      7921,
      7921
    ],
    "valid"
  ],
  [
    [
      7922,
      7922
    ],
    "mapped",
    [
      7923
    ]
  ],
  [
    [
      7923,
      7923
    ],
    "valid"
  ],
  [
    [
      7924,
      7924
    ],
    "mapped",
    [
      7925
    ]
  ],
  [
    [
      7925,
      7925
    ],
    "valid"
  ],
  [
    [
      7926,
      7926
    ],
    "mapped",
    [
      7927
    ]
  ],
  [
    [
      7927,
      7927
    ],
    "valid"
  ],
  [
    [
      7928,
      7928
    ],
    "mapped",
    [
      7929
    ]
  ],
  [
    [
      7929,
      7929
    ],
    "valid"
  ],
  [
    [
      7930,
      7930
    ],
    "mapped",
    [
      7931
    ]
  ],
  [
    [
      7931,
      7931
    ],
    "valid"
  ],
  [
    [
      7932,
      7932
    ],
    "mapped",
    [
      7933
    ]
  ],
  [
    [
      7933,
      7933
    ],
    "valid"
  ],
  [
    [
      7934,
      7934
    ],
    "mapped",
    [
      7935
    ]
  ],
  [
    [
      7935,
      7935
    ],
    "valid"
  ],
  [
    [
      7936,
      7943
    ],
    "valid"
  ],
  [
    [
      7944,
      7944
    ],
    "mapped",
    [
      7936
    ]
  ],
  [
    [
      7945,
      7945
    ],
    "mapped",
    [
      7937
    ]
  ],
  [
    [
      7946,
      7946
    ],
    "mapped",
    [
      7938
    ]
  ],
  [
    [
      7947,
      7947
    ],
    "mapped",
    [
      7939
    ]
  ],
  [
    [
      7948,
      7948
    ],
    "mapped",
    [
      7940
    ]
  ],
  [
    [
      7949,
      7949
    ],
    "mapped",
    [
      7941
    ]
  ],
  [
    [
      7950,
      7950
    ],
    "mapped",
    [
      7942
    ]
  ],
  [
    [
      7951,
      7951
    ],
    "mapped",
    [
      7943
    ]
  ],
  [
    [
      7952,
      7957
    ],
    "valid"
  ],
  [
    [
      7958,
      7959
    ],
    "disallowed"
  ],
  [
    [
      7960,
      7960
    ],
    "mapped",
    [
      7952
    ]
  ],
  [
    [
      7961,
      7961
    ],
    "mapped",
    [
      7953
    ]
  ],
  [
    [
      7962,
      7962
    ],
    "mapped",
    [
      7954
    ]
  ],
  [
    [
      7963,
      7963
    ],
    "mapped",
    [
      7955
    ]
  ],
  [
    [
      7964,
      7964
    ],
    "mapped",
    [
      7956
    ]
  ],
  [
    [
      7965,
      7965
    ],
    "mapped",
    [
      7957
    ]
  ],
  [
    [
      7966,
      7967
    ],
    "disallowed"
  ],
  [
    [
      7968,
      7975
    ],
    "valid"
  ],
  [
    [
      7976,
      7976
    ],
    "mapped",
    [
      7968
    ]
  ],
  [
    [
      7977,
      7977
    ],
    "mapped",
    [
      7969
    ]
  ],
  [
    [
      7978,
      7978
    ],
    "mapped",
    [
      7970
    ]
  ],
  [
    [
      7979,
      7979
    ],
    "mapped",
    [
      7971
    ]
  ],
  [
    [
      7980,
      7980
    ],
    "mapped",
    [
      7972
    ]
  ],
  [
    [
      7981,
      7981
    ],
    "mapped",
    [
      7973
    ]
  ],
  [
    [
      7982,
      7982
    ],
    "mapped",
    [
      7974
    ]
  ],
  [
    [
      7983,
      7983
    ],
    "mapped",
    [
      7975
    ]
  ],
  [
    [
      7984,
      7991
    ],
    "valid"
  ],
  [
    [
      7992,
      7992
    ],
    "mapped",
    [
      7984
    ]
  ],
  [
    [
      7993,
      7993
    ],
    "mapped",
    [
      7985
    ]
  ],
  [
    [
      7994,
      7994
    ],
    "mapped",
    [
      7986
    ]
  ],
  [
    [
      7995,
      7995
    ],
    "mapped",
    [
      7987
    ]
  ],
  [
    [
      7996,
      7996
    ],
    "mapped",
    [
      7988
    ]
  ],
  [
    [
      7997,
      7997
    ],
    "mapped",
    [
      7989
    ]
  ],
  [
    [
      7998,
      7998
    ],
    "mapped",
    [
      7990
    ]
  ],
  [
    [
      7999,
      7999
    ],
    "mapped",
    [
      7991
    ]
  ],
  [
    [
      8e3,
      8005
    ],
    "valid"
  ],
  [
    [
      8006,
      8007
    ],
    "disallowed"
  ],
  [
    [
      8008,
      8008
    ],
    "mapped",
    [
      8e3
    ]
  ],
  [
    [
      8009,
      8009
    ],
    "mapped",
    [
      8001
    ]
  ],
  [
    [
      8010,
      8010
    ],
    "mapped",
    [
      8002
    ]
  ],
  [
    [
      8011,
      8011
    ],
    "mapped",
    [
      8003
    ]
  ],
  [
    [
      8012,
      8012
    ],
    "mapped",
    [
      8004
    ]
  ],
  [
    [
      8013,
      8013
    ],
    "mapped",
    [
      8005
    ]
  ],
  [
    [
      8014,
      8015
    ],
    "disallowed"
  ],
  [
    [
      8016,
      8023
    ],
    "valid"
  ],
  [
    [
      8024,
      8024
    ],
    "disallowed"
  ],
  [
    [
      8025,
      8025
    ],
    "mapped",
    [
      8017
    ]
  ],
  [
    [
      8026,
      8026
    ],
    "disallowed"
  ],
  [
    [
      8027,
      8027
    ],
    "mapped",
    [
      8019
    ]
  ],
  [
    [
      8028,
      8028
    ],
    "disallowed"
  ],
  [
    [
      8029,
      8029
    ],
    "mapped",
    [
      8021
    ]
  ],
  [
    [
      8030,
      8030
    ],
    "disallowed"
  ],
  [
    [
      8031,
      8031
    ],
    "mapped",
    [
      8023
    ]
  ],
  [
    [
      8032,
      8039
    ],
    "valid"
  ],
  [
    [
      8040,
      8040
    ],
    "mapped",
    [
      8032
    ]
  ],
  [
    [
      8041,
      8041
    ],
    "mapped",
    [
      8033
    ]
  ],
  [
    [
      8042,
      8042
    ],
    "mapped",
    [
      8034
    ]
  ],
  [
    [
      8043,
      8043
    ],
    "mapped",
    [
      8035
    ]
  ],
  [
    [
      8044,
      8044
    ],
    "mapped",
    [
      8036
    ]
  ],
  [
    [
      8045,
      8045
    ],
    "mapped",
    [
      8037
    ]
  ],
  [
    [
      8046,
      8046
    ],
    "mapped",
    [
      8038
    ]
  ],
  [
    [
      8047,
      8047
    ],
    "mapped",
    [
      8039
    ]
  ],
  [
    [
      8048,
      8048
    ],
    "valid"
  ],
  [
    [
      8049,
      8049
    ],
    "mapped",
    [
      940
    ]
  ],
  [
    [
      8050,
      8050
    ],
    "valid"
  ],
  [
    [
      8051,
      8051
    ],
    "mapped",
    [
      941
    ]
  ],
  [
    [
      8052,
      8052
    ],
    "valid"
  ],
  [
    [
      8053,
      8053
    ],
    "mapped",
    [
      942
    ]
  ],
  [
    [
      8054,
      8054
    ],
    "valid"
  ],
  [
    [
      8055,
      8055
    ],
    "mapped",
    [
      943
    ]
  ],
  [
    [
      8056,
      8056
    ],
    "valid"
  ],
  [
    [
      8057,
      8057
    ],
    "mapped",
    [
      972
    ]
  ],
  [
    [
      8058,
      8058
    ],
    "valid"
  ],
  [
    [
      8059,
      8059
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      8060,
      8060
    ],
    "valid"
  ],
  [
    [
      8061,
      8061
    ],
    "mapped",
    [
      974
    ]
  ],
  [
    [
      8062,
      8063
    ],
    "disallowed"
  ],
  [
    [
      8064,
      8064
    ],
    "mapped",
    [
      7936,
      953
    ]
  ],
  [
    [
      8065,
      8065
    ],
    "mapped",
    [
      7937,
      953
    ]
  ],
  [
    [
      8066,
      8066
    ],
    "mapped",
    [
      7938,
      953
    ]
  ],
  [
    [
      8067,
      8067
    ],
    "mapped",
    [
      7939,
      953
    ]
  ],
  [
    [
      8068,
      8068
    ],
    "mapped",
    [
      7940,
      953
    ]
  ],
  [
    [
      8069,
      8069
    ],
    "mapped",
    [
      7941,
      953
    ]
  ],
  [
    [
      8070,
      8070
    ],
    "mapped",
    [
      7942,
      953
    ]
  ],
  [
    [
      8071,
      8071
    ],
    "mapped",
    [
      7943,
      953
    ]
  ],
  [
    [
      8072,
      8072
    ],
    "mapped",
    [
      7936,
      953
    ]
  ],
  [
    [
      8073,
      8073
    ],
    "mapped",
    [
      7937,
      953
    ]
  ],
  [
    [
      8074,
      8074
    ],
    "mapped",
    [
      7938,
      953
    ]
  ],
  [
    [
      8075,
      8075
    ],
    "mapped",
    [
      7939,
      953
    ]
  ],
  [
    [
      8076,
      8076
    ],
    "mapped",
    [
      7940,
      953
    ]
  ],
  [
    [
      8077,
      8077
    ],
    "mapped",
    [
      7941,
      953
    ]
  ],
  [
    [
      8078,
      8078
    ],
    "mapped",
    [
      7942,
      953
    ]
  ],
  [
    [
      8079,
      8079
    ],
    "mapped",
    [
      7943,
      953
    ]
  ],
  [
    [
      8080,
      8080
    ],
    "mapped",
    [
      7968,
      953
    ]
  ],
  [
    [
      8081,
      8081
    ],
    "mapped",
    [
      7969,
      953
    ]
  ],
  [
    [
      8082,
      8082
    ],
    "mapped",
    [
      7970,
      953
    ]
  ],
  [
    [
      8083,
      8083
    ],
    "mapped",
    [
      7971,
      953
    ]
  ],
  [
    [
      8084,
      8084
    ],
    "mapped",
    [
      7972,
      953
    ]
  ],
  [
    [
      8085,
      8085
    ],
    "mapped",
    [
      7973,
      953
    ]
  ],
  [
    [
      8086,
      8086
    ],
    "mapped",
    [
      7974,
      953
    ]
  ],
  [
    [
      8087,
      8087
    ],
    "mapped",
    [
      7975,
      953
    ]
  ],
  [
    [
      8088,
      8088
    ],
    "mapped",
    [
      7968,
      953
    ]
  ],
  [
    [
      8089,
      8089
    ],
    "mapped",
    [
      7969,
      953
    ]
  ],
  [
    [
      8090,
      8090
    ],
    "mapped",
    [
      7970,
      953
    ]
  ],
  [
    [
      8091,
      8091
    ],
    "mapped",
    [
      7971,
      953
    ]
  ],
  [
    [
      8092,
      8092
    ],
    "mapped",
    [
      7972,
      953
    ]
  ],
  [
    [
      8093,
      8093
    ],
    "mapped",
    [
      7973,
      953
    ]
  ],
  [
    [
      8094,
      8094
    ],
    "mapped",
    [
      7974,
      953
    ]
  ],
  [
    [
      8095,
      8095
    ],
    "mapped",
    [
      7975,
      953
    ]
  ],
  [
    [
      8096,
      8096
    ],
    "mapped",
    [
      8032,
      953
    ]
  ],
  [
    [
      8097,
      8097
    ],
    "mapped",
    [
      8033,
      953
    ]
  ],
  [
    [
      8098,
      8098
    ],
    "mapped",
    [
      8034,
      953
    ]
  ],
  [
    [
      8099,
      8099
    ],
    "mapped",
    [
      8035,
      953
    ]
  ],
  [
    [
      8100,
      8100
    ],
    "mapped",
    [
      8036,
      953
    ]
  ],
  [
    [
      8101,
      8101
    ],
    "mapped",
    [
      8037,
      953
    ]
  ],
  [
    [
      8102,
      8102
    ],
    "mapped",
    [
      8038,
      953
    ]
  ],
  [
    [
      8103,
      8103
    ],
    "mapped",
    [
      8039,
      953
    ]
  ],
  [
    [
      8104,
      8104
    ],
    "mapped",
    [
      8032,
      953
    ]
  ],
  [
    [
      8105,
      8105
    ],
    "mapped",
    [
      8033,
      953
    ]
  ],
  [
    [
      8106,
      8106
    ],
    "mapped",
    [
      8034,
      953
    ]
  ],
  [
    [
      8107,
      8107
    ],
    "mapped",
    [
      8035,
      953
    ]
  ],
  [
    [
      8108,
      8108
    ],
    "mapped",
    [
      8036,
      953
    ]
  ],
  [
    [
      8109,
      8109
    ],
    "mapped",
    [
      8037,
      953
    ]
  ],
  [
    [
      8110,
      8110
    ],
    "mapped",
    [
      8038,
      953
    ]
  ],
  [
    [
      8111,
      8111
    ],
    "mapped",
    [
      8039,
      953
    ]
  ],
  [
    [
      8112,
      8113
    ],
    "valid"
  ],
  [
    [
      8114,
      8114
    ],
    "mapped",
    [
      8048,
      953
    ]
  ],
  [
    [
      8115,
      8115
    ],
    "mapped",
    [
      945,
      953
    ]
  ],
  [
    [
      8116,
      8116
    ],
    "mapped",
    [
      940,
      953
    ]
  ],
  [
    [
      8117,
      8117
    ],
    "disallowed"
  ],
  [
    [
      8118,
      8118
    ],
    "valid"
  ],
  [
    [
      8119,
      8119
    ],
    "mapped",
    [
      8118,
      953
    ]
  ],
  [
    [
      8120,
      8120
    ],
    "mapped",
    [
      8112
    ]
  ],
  [
    [
      8121,
      8121
    ],
    "mapped",
    [
      8113
    ]
  ],
  [
    [
      8122,
      8122
    ],
    "mapped",
    [
      8048
    ]
  ],
  [
    [
      8123,
      8123
    ],
    "mapped",
    [
      940
    ]
  ],
  [
    [
      8124,
      8124
    ],
    "mapped",
    [
      945,
      953
    ]
  ],
  [
    [
      8125,
      8125
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787
    ]
  ],
  [
    [
      8126,
      8126
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      8127,
      8127
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787
    ]
  ],
  [
    [
      8128,
      8128
    ],
    "disallowed_STD3_mapped",
    [
      32,
      834
    ]
  ],
  [
    [
      8129,
      8129
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      834
    ]
  ],
  [
    [
      8130,
      8130
    ],
    "mapped",
    [
      8052,
      953
    ]
  ],
  [
    [
      8131,
      8131
    ],
    "mapped",
    [
      951,
      953
    ]
  ],
  [
    [
      8132,
      8132
    ],
    "mapped",
    [
      942,
      953
    ]
  ],
  [
    [
      8133,
      8133
    ],
    "disallowed"
  ],
  [
    [
      8134,
      8134
    ],
    "valid"
  ],
  [
    [
      8135,
      8135
    ],
    "mapped",
    [
      8134,
      953
    ]
  ],
  [
    [
      8136,
      8136
    ],
    "mapped",
    [
      8050
    ]
  ],
  [
    [
      8137,
      8137
    ],
    "mapped",
    [
      941
    ]
  ],
  [
    [
      8138,
      8138
    ],
    "mapped",
    [
      8052
    ]
  ],
  [
    [
      8139,
      8139
    ],
    "mapped",
    [
      942
    ]
  ],
  [
    [
      8140,
      8140
    ],
    "mapped",
    [
      951,
      953
    ]
  ],
  [
    [
      8141,
      8141
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787,
      768
    ]
  ],
  [
    [
      8142,
      8142
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787,
      769
    ]
  ],
  [
    [
      8143,
      8143
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787,
      834
    ]
  ],
  [
    [
      8144,
      8146
    ],
    "valid"
  ],
  [
    [
      8147,
      8147
    ],
    "mapped",
    [
      912
    ]
  ],
  [
    [
      8148,
      8149
    ],
    "disallowed"
  ],
  [
    [
      8150,
      8151
    ],
    "valid"
  ],
  [
    [
      8152,
      8152
    ],
    "mapped",
    [
      8144
    ]
  ],
  [
    [
      8153,
      8153
    ],
    "mapped",
    [
      8145
    ]
  ],
  [
    [
      8154,
      8154
    ],
    "mapped",
    [
      8054
    ]
  ],
  [
    [
      8155,
      8155
    ],
    "mapped",
    [
      943
    ]
  ],
  [
    [
      8156,
      8156
    ],
    "disallowed"
  ],
  [
    [
      8157,
      8157
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788,
      768
    ]
  ],
  [
    [
      8158,
      8158
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788,
      769
    ]
  ],
  [
    [
      8159,
      8159
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788,
      834
    ]
  ],
  [
    [
      8160,
      8162
    ],
    "valid"
  ],
  [
    [
      8163,
      8163
    ],
    "mapped",
    [
      944
    ]
  ],
  [
    [
      8164,
      8167
    ],
    "valid"
  ],
  [
    [
      8168,
      8168
    ],
    "mapped",
    [
      8160
    ]
  ],
  [
    [
      8169,
      8169
    ],
    "mapped",
    [
      8161
    ]
  ],
  [
    [
      8170,
      8170
    ],
    "mapped",
    [
      8058
    ]
  ],
  [
    [
      8171,
      8171
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      8172,
      8172
    ],
    "mapped",
    [
      8165
    ]
  ],
  [
    [
      8173,
      8173
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      768
    ]
  ],
  [
    [
      8174,
      8174
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      769
    ]
  ],
  [
    [
      8175,
      8175
    ],
    "disallowed_STD3_mapped",
    [
      96
    ]
  ],
  [
    [
      8176,
      8177
    ],
    "disallowed"
  ],
  [
    [
      8178,
      8178
    ],
    "mapped",
    [
      8060,
      953
    ]
  ],
  [
    [
      8179,
      8179
    ],
    "mapped",
    [
      969,
      953
    ]
  ],
  [
    [
      8180,
      8180
    ],
    "mapped",
    [
      974,
      953
    ]
  ],
  [
    [
      8181,
      8181
    ],
    "disallowed"
  ],
  [
    [
      8182,
      8182
    ],
    "valid"
  ],
  [
    [
      8183,
      8183
    ],
    "mapped",
    [
      8182,
      953
    ]
  ],
  [
    [
      8184,
      8184
    ],
    "mapped",
    [
      8056
    ]
  ],
  [
    [
      8185,
      8185
    ],
    "mapped",
    [
      972
    ]
  ],
  [
    [
      8186,
      8186
    ],
    "mapped",
    [
      8060
    ]
  ],
  [
    [
      8187,
      8187
    ],
    "mapped",
    [
      974
    ]
  ],
  [
    [
      8188,
      8188
    ],
    "mapped",
    [
      969,
      953
    ]
  ],
  [
    [
      8189,
      8189
    ],
    "disallowed_STD3_mapped",
    [
      32,
      769
    ]
  ],
  [
    [
      8190,
      8190
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788
    ]
  ],
  [
    [
      8191,
      8191
    ],
    "disallowed"
  ],
  [
    [
      8192,
      8202
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      8203,
      8203
    ],
    "ignored"
  ],
  [
    [
      8204,
      8205
    ],
    "deviation",
    []
  ],
  [
    [
      8206,
      8207
    ],
    "disallowed"
  ],
  [
    [
      8208,
      8208
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8209,
      8209
    ],
    "mapped",
    [
      8208
    ]
  ],
  [
    [
      8210,
      8214
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8215,
      8215
    ],
    "disallowed_STD3_mapped",
    [
      32,
      819
    ]
  ],
  [
    [
      8216,
      8227
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8228,
      8230
    ],
    "disallowed"
  ],
  [
    [
      8231,
      8231
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8232,
      8238
    ],
    "disallowed"
  ],
  [
    [
      8239,
      8239
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      8240,
      8242
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8243,
      8243
    ],
    "mapped",
    [
      8242,
      8242
    ]
  ],
  [
    [
      8244,
      8244
    ],
    "mapped",
    [
      8242,
      8242,
      8242
    ]
  ],
  [
    [
      8245,
      8245
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8246,
      8246
    ],
    "mapped",
    [
      8245,
      8245
    ]
  ],
  [
    [
      8247,
      8247
    ],
    "mapped",
    [
      8245,
      8245,
      8245
    ]
  ],
  [
    [
      8248,
      8251
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8252,
      8252
    ],
    "disallowed_STD3_mapped",
    [
      33,
      33
    ]
  ],
  [
    [
      8253,
      8253
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8254,
      8254
    ],
    "disallowed_STD3_mapped",
    [
      32,
      773
    ]
  ],
  [
    [
      8255,
      8262
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8263,
      8263
    ],
    "disallowed_STD3_mapped",
    [
      63,
      63
    ]
  ],
  [
    [
      8264,
      8264
    ],
    "disallowed_STD3_mapped",
    [
      63,
      33
    ]
  ],
  [
    [
      8265,
      8265
    ],
    "disallowed_STD3_mapped",
    [
      33,
      63
    ]
  ],
  [
    [
      8266,
      8269
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8270,
      8274
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8275,
      8276
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8277,
      8278
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8279,
      8279
    ],
    "mapped",
    [
      8242,
      8242,
      8242,
      8242
    ]
  ],
  [
    [
      8280,
      8286
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8287,
      8287
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      8288,
      8288
    ],
    "ignored"
  ],
  [
    [
      8289,
      8291
    ],
    "disallowed"
  ],
  [
    [
      8292,
      8292
    ],
    "ignored"
  ],
  [
    [
      8293,
      8293
    ],
    "disallowed"
  ],
  [
    [
      8294,
      8297
    ],
    "disallowed"
  ],
  [
    [
      8298,
      8303
    ],
    "disallowed"
  ],
  [
    [
      8304,
      8304
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      8305,
      8305
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8306,
      8307
    ],
    "disallowed"
  ],
  [
    [
      8308,
      8308
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      8309,
      8309
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      8310,
      8310
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      8311,
      8311
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      8312,
      8312
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      8313,
      8313
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      8314,
      8314
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      8315,
      8315
    ],
    "mapped",
    [
      8722
    ]
  ],
  [
    [
      8316,
      8316
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      8317,
      8317
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      8318,
      8318
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      8319,
      8319
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      8320,
      8320
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      8321,
      8321
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      8322,
      8322
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      8323,
      8323
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      8324,
      8324
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      8325,
      8325
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      8326,
      8326
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      8327,
      8327
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      8328,
      8328
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      8329,
      8329
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      8330,
      8330
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      8331,
      8331
    ],
    "mapped",
    [
      8722
    ]
  ],
  [
    [
      8332,
      8332
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      8333,
      8333
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      8334,
      8334
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      8335,
      8335
    ],
    "disallowed"
  ],
  [
    [
      8336,
      8336
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      8337,
      8337
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      8338,
      8338
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      8339,
      8339
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      8340,
      8340
    ],
    "mapped",
    [
      601
    ]
  ],
  [
    [
      8341,
      8341
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      8342,
      8342
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      8343,
      8343
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8344,
      8344
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8345,
      8345
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      8346,
      8346
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      8347,
      8347
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      8348,
      8348
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      8349,
      8351
    ],
    "disallowed"
  ],
  [
    [
      8352,
      8359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8360,
      8360
    ],
    "mapped",
    [
      114,
      115
    ]
  ],
  [
    [
      8361,
      8362
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8363,
      8363
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8364,
      8364
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8365,
      8367
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8368,
      8369
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8370,
      8373
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8374,
      8376
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8377,
      8377
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8378,
      8378
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8379,
      8381
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8382,
      8382
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8383,
      8399
    ],
    "disallowed"
  ],
  [
    [
      8400,
      8417
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8418,
      8419
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8420,
      8426
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8427,
      8427
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8428,
      8431
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8432,
      8432
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8433,
      8447
    ],
    "disallowed"
  ],
  [
    [
      8448,
      8448
    ],
    "disallowed_STD3_mapped",
    [
      97,
      47,
      99
    ]
  ],
  [
    [
      8449,
      8449
    ],
    "disallowed_STD3_mapped",
    [
      97,
      47,
      115
    ]
  ],
  [
    [
      8450,
      8450
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8451,
      8451
    ],
    "mapped",
    [
      176,
      99
    ]
  ],
  [
    [
      8452,
      8452
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8453,
      8453
    ],
    "disallowed_STD3_mapped",
    [
      99,
      47,
      111
    ]
  ],
  [
    [
      8454,
      8454
    ],
    "disallowed_STD3_mapped",
    [
      99,
      47,
      117
    ]
  ],
  [
    [
      8455,
      8455
    ],
    "mapped",
    [
      603
    ]
  ],
  [
    [
      8456,
      8456
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8457,
      8457
    ],
    "mapped",
    [
      176,
      102
    ]
  ],
  [
    [
      8458,
      8458
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      8459,
      8462
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      8463,
      8463
    ],
    "mapped",
    [
      295
    ]
  ],
  [
    [
      8464,
      8465
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8466,
      8467
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8468,
      8468
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8469,
      8469
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      8470,
      8470
    ],
    "mapped",
    [
      110,
      111
    ]
  ],
  [
    [
      8471,
      8472
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8473,
      8473
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      8474,
      8474
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      8475,
      8477
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      8478,
      8479
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8480,
      8480
    ],
    "mapped",
    [
      115,
      109
    ]
  ],
  [
    [
      8481,
      8481
    ],
    "mapped",
    [
      116,
      101,
      108
    ]
  ],
  [
    [
      8482,
      8482
    ],
    "mapped",
    [
      116,
      109
    ]
  ],
  [
    [
      8483,
      8483
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8484,
      8484
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      8485,
      8485
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8486,
      8486
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      8487,
      8487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8488,
      8488
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      8489,
      8489
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8490,
      8490
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      8491,
      8491
    ],
    "mapped",
    [
      229
    ]
  ],
  [
    [
      8492,
      8492
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      8493,
      8493
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8494,
      8494
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8495,
      8496
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      8497,
      8497
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      8498,
      8498
    ],
    "disallowed"
  ],
  [
    [
      8499,
      8499
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8500,
      8500
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      8501,
      8501
    ],
    "mapped",
    [
      1488
    ]
  ],
  [
    [
      8502,
      8502
    ],
    "mapped",
    [
      1489
    ]
  ],
  [
    [
      8503,
      8503
    ],
    "mapped",
    [
      1490
    ]
  ],
  [
    [
      8504,
      8504
    ],
    "mapped",
    [
      1491
    ]
  ],
  [
    [
      8505,
      8505
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8506,
      8506
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8507,
      8507
    ],
    "mapped",
    [
      102,
      97,
      120
    ]
  ],
  [
    [
      8508,
      8508
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      8509,
      8510
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      8511,
      8511
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      8512,
      8512
    ],
    "mapped",
    [
      8721
    ]
  ],
  [
    [
      8513,
      8516
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8517,
      8518
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      8519,
      8519
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      8520,
      8520
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8521,
      8521
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      8522,
      8523
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8524,
      8524
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8525,
      8525
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8526,
      8526
    ],
    "valid"
  ],
  [
    [
      8527,
      8527
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8528,
      8528
    ],
    "mapped",
    [
      49,
      8260,
      55
    ]
  ],
  [
    [
      8529,
      8529
    ],
    "mapped",
    [
      49,
      8260,
      57
    ]
  ],
  [
    [
      8530,
      8530
    ],
    "mapped",
    [
      49,
      8260,
      49,
      48
    ]
  ],
  [
    [
      8531,
      8531
    ],
    "mapped",
    [
      49,
      8260,
      51
    ]
  ],
  [
    [
      8532,
      8532
    ],
    "mapped",
    [
      50,
      8260,
      51
    ]
  ],
  [
    [
      8533,
      8533
    ],
    "mapped",
    [
      49,
      8260,
      53
    ]
  ],
  [
    [
      8534,
      8534
    ],
    "mapped",
    [
      50,
      8260,
      53
    ]
  ],
  [
    [
      8535,
      8535
    ],
    "mapped",
    [
      51,
      8260,
      53
    ]
  ],
  [
    [
      8536,
      8536
    ],
    "mapped",
    [
      52,
      8260,
      53
    ]
  ],
  [
    [
      8537,
      8537
    ],
    "mapped",
    [
      49,
      8260,
      54
    ]
  ],
  [
    [
      8538,
      8538
    ],
    "mapped",
    [
      53,
      8260,
      54
    ]
  ],
  [
    [
      8539,
      8539
    ],
    "mapped",
    [
      49,
      8260,
      56
    ]
  ],
  [
    [
      8540,
      8540
    ],
    "mapped",
    [
      51,
      8260,
      56
    ]
  ],
  [
    [
      8541,
      8541
    ],
    "mapped",
    [
      53,
      8260,
      56
    ]
  ],
  [
    [
      8542,
      8542
    ],
    "mapped",
    [
      55,
      8260,
      56
    ]
  ],
  [
    [
      8543,
      8543
    ],
    "mapped",
    [
      49,
      8260
    ]
  ],
  [
    [
      8544,
      8544
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8545,
      8545
    ],
    "mapped",
    [
      105,
      105
    ]
  ],
  [
    [
      8546,
      8546
    ],
    "mapped",
    [
      105,
      105,
      105
    ]
  ],
  [
    [
      8547,
      8547
    ],
    "mapped",
    [
      105,
      118
    ]
  ],
  [
    [
      8548,
      8548
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      8549,
      8549
    ],
    "mapped",
    [
      118,
      105
    ]
  ],
  [
    [
      8550,
      8550
    ],
    "mapped",
    [
      118,
      105,
      105
    ]
  ],
  [
    [
      8551,
      8551
    ],
    "mapped",
    [
      118,
      105,
      105,
      105
    ]
  ],
  [
    [
      8552,
      8552
    ],
    "mapped",
    [
      105,
      120
    ]
  ],
  [
    [
      8553,
      8553
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      8554,
      8554
    ],
    "mapped",
    [
      120,
      105
    ]
  ],
  [
    [
      8555,
      8555
    ],
    "mapped",
    [
      120,
      105,
      105
    ]
  ],
  [
    [
      8556,
      8556
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8557,
      8557
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8558,
      8558
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      8559,
      8559
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8560,
      8560
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8561,
      8561
    ],
    "mapped",
    [
      105,
      105
    ]
  ],
  [
    [
      8562,
      8562
    ],
    "mapped",
    [
      105,
      105,
      105
    ]
  ],
  [
    [
      8563,
      8563
    ],
    "mapped",
    [
      105,
      118
    ]
  ],
  [
    [
      8564,
      8564
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      8565,
      8565
    ],
    "mapped",
    [
      118,
      105
    ]
  ],
  [
    [
      8566,
      8566
    ],
    "mapped",
    [
      118,
      105,
      105
    ]
  ],
  [
    [
      8567,
      8567
    ],
    "mapped",
    [
      118,
      105,
      105,
      105
    ]
  ],
  [
    [
      8568,
      8568
    ],
    "mapped",
    [
      105,
      120
    ]
  ],
  [
    [
      8569,
      8569
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      8570,
      8570
    ],
    "mapped",
    [
      120,
      105
    ]
  ],
  [
    [
      8571,
      8571
    ],
    "mapped",
    [
      120,
      105,
      105
    ]
  ],
  [
    [
      8572,
      8572
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8573,
      8573
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8574,
      8574
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      8575,
      8575
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8576,
      8578
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8579,
      8579
    ],
    "disallowed"
  ],
  [
    [
      8580,
      8580
    ],
    "valid"
  ],
  [
    [
      8581,
      8584
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8585,
      8585
    ],
    "mapped",
    [
      48,
      8260,
      51
    ]
  ],
  [
    [
      8586,
      8587
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8588,
      8591
    ],
    "disallowed"
  ],
  [
    [
      8592,
      8682
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8683,
      8691
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8692,
      8703
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8704,
      8747
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8748,
      8748
    ],
    "mapped",
    [
      8747,
      8747
    ]
  ],
  [
    [
      8749,
      8749
    ],
    "mapped",
    [
      8747,
      8747,
      8747
    ]
  ],
  [
    [
      8750,
      8750
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8751,
      8751
    ],
    "mapped",
    [
      8750,
      8750
    ]
  ],
  [
    [
      8752,
      8752
    ],
    "mapped",
    [
      8750,
      8750,
      8750
    ]
  ],
  [
    [
      8753,
      8799
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8800,
      8800
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      8801,
      8813
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8814,
      8815
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      8816,
      8945
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8946,
      8959
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8960,
      8960
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8961,
      8961
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8962,
      9e3
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9001,
      9001
    ],
    "mapped",
    [
      12296
    ]
  ],
  [
    [
      9002,
      9002
    ],
    "mapped",
    [
      12297
    ]
  ],
  [
    [
      9003,
      9082
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9083,
      9083
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9084,
      9084
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9085,
      9114
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9115,
      9166
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9167,
      9168
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9169,
      9179
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9180,
      9191
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9192,
      9192
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9193,
      9203
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9204,
      9210
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9211,
      9215
    ],
    "disallowed"
  ],
  [
    [
      9216,
      9252
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9253,
      9254
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9255,
      9279
    ],
    "disallowed"
  ],
  [
    [
      9280,
      9290
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9291,
      9311
    ],
    "disallowed"
  ],
  [
    [
      9312,
      9312
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      9313,
      9313
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      9314,
      9314
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      9315,
      9315
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      9316,
      9316
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      9317,
      9317
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      9318,
      9318
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      9319,
      9319
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      9320,
      9320
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      9321,
      9321
    ],
    "mapped",
    [
      49,
      48
    ]
  ],
  [
    [
      9322,
      9322
    ],
    "mapped",
    [
      49,
      49
    ]
  ],
  [
    [
      9323,
      9323
    ],
    "mapped",
    [
      49,
      50
    ]
  ],
  [
    [
      9324,
      9324
    ],
    "mapped",
    [
      49,
      51
    ]
  ],
  [
    [
      9325,
      9325
    ],
    "mapped",
    [
      49,
      52
    ]
  ],
  [
    [
      9326,
      9326
    ],
    "mapped",
    [
      49,
      53
    ]
  ],
  [
    [
      9327,
      9327
    ],
    "mapped",
    [
      49,
      54
    ]
  ],
  [
    [
      9328,
      9328
    ],
    "mapped",
    [
      49,
      55
    ]
  ],
  [
    [
      9329,
      9329
    ],
    "mapped",
    [
      49,
      56
    ]
  ],
  [
    [
      9330,
      9330
    ],
    "mapped",
    [
      49,
      57
    ]
  ],
  [
    [
      9331,
      9331
    ],
    "mapped",
    [
      50,
      48
    ]
  ],
  [
    [
      9332,
      9332
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      41
    ]
  ],
  [
    [
      9333,
      9333
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50,
      41
    ]
  ],
  [
    [
      9334,
      9334
    ],
    "disallowed_STD3_mapped",
    [
      40,
      51,
      41
    ]
  ],
  [
    [
      9335,
      9335
    ],
    "disallowed_STD3_mapped",
    [
      40,
      52,
      41
    ]
  ],
  [
    [
      9336,
      9336
    ],
    "disallowed_STD3_mapped",
    [
      40,
      53,
      41
    ]
  ],
  [
    [
      9337,
      9337
    ],
    "disallowed_STD3_mapped",
    [
      40,
      54,
      41
    ]
  ],
  [
    [
      9338,
      9338
    ],
    "disallowed_STD3_mapped",
    [
      40,
      55,
      41
    ]
  ],
  [
    [
      9339,
      9339
    ],
    "disallowed_STD3_mapped",
    [
      40,
      56,
      41
    ]
  ],
  [
    [
      9340,
      9340
    ],
    "disallowed_STD3_mapped",
    [
      40,
      57,
      41
    ]
  ],
  [
    [
      9341,
      9341
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      48,
      41
    ]
  ],
  [
    [
      9342,
      9342
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      49,
      41
    ]
  ],
  [
    [
      9343,
      9343
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      50,
      41
    ]
  ],
  [
    [
      9344,
      9344
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      51,
      41
    ]
  ],
  [
    [
      9345,
      9345
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      52,
      41
    ]
  ],
  [
    [
      9346,
      9346
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      53,
      41
    ]
  ],
  [
    [
      9347,
      9347
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      54,
      41
    ]
  ],
  [
    [
      9348,
      9348
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      55,
      41
    ]
  ],
  [
    [
      9349,
      9349
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      56,
      41
    ]
  ],
  [
    [
      9350,
      9350
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      57,
      41
    ]
  ],
  [
    [
      9351,
      9351
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50,
      48,
      41
    ]
  ],
  [
    [
      9352,
      9371
    ],
    "disallowed"
  ],
  [
    [
      9372,
      9372
    ],
    "disallowed_STD3_mapped",
    [
      40,
      97,
      41
    ]
  ],
  [
    [
      9373,
      9373
    ],
    "disallowed_STD3_mapped",
    [
      40,
      98,
      41
    ]
  ],
  [
    [
      9374,
      9374
    ],
    "disallowed_STD3_mapped",
    [
      40,
      99,
      41
    ]
  ],
  [
    [
      9375,
      9375
    ],
    "disallowed_STD3_mapped",
    [
      40,
      100,
      41
    ]
  ],
  [
    [
      9376,
      9376
    ],
    "disallowed_STD3_mapped",
    [
      40,
      101,
      41
    ]
  ],
  [
    [
      9377,
      9377
    ],
    "disallowed_STD3_mapped",
    [
      40,
      102,
      41
    ]
  ],
  [
    [
      9378,
      9378
    ],
    "disallowed_STD3_mapped",
    [
      40,
      103,
      41
    ]
  ],
  [
    [
      9379,
      9379
    ],
    "disallowed_STD3_mapped",
    [
      40,
      104,
      41
    ]
  ],
  [
    [
      9380,
      9380
    ],
    "disallowed_STD3_mapped",
    [
      40,
      105,
      41
    ]
  ],
  [
    [
      9381,
      9381
    ],
    "disallowed_STD3_mapped",
    [
      40,
      106,
      41
    ]
  ],
  [
    [
      9382,
      9382
    ],
    "disallowed_STD3_mapped",
    [
      40,
      107,
      41
    ]
  ],
  [
    [
      9383,
      9383
    ],
    "disallowed_STD3_mapped",
    [
      40,
      108,
      41
    ]
  ],
  [
    [
      9384,
      9384
    ],
    "disallowed_STD3_mapped",
    [
      40,
      109,
      41
    ]
  ],
  [
    [
      9385,
      9385
    ],
    "disallowed_STD3_mapped",
    [
      40,
      110,
      41
    ]
  ],
  [
    [
      9386,
      9386
    ],
    "disallowed_STD3_mapped",
    [
      40,
      111,
      41
    ]
  ],
  [
    [
      9387,
      9387
    ],
    "disallowed_STD3_mapped",
    [
      40,
      112,
      41
    ]
  ],
  [
    [
      9388,
      9388
    ],
    "disallowed_STD3_mapped",
    [
      40,
      113,
      41
    ]
  ],
  [
    [
      9389,
      9389
    ],
    "disallowed_STD3_mapped",
    [
      40,
      114,
      41
    ]
  ],
  [
    [
      9390,
      9390
    ],
    "disallowed_STD3_mapped",
    [
      40,
      115,
      41
    ]
  ],
  [
    [
      9391,
      9391
    ],
    "disallowed_STD3_mapped",
    [
      40,
      116,
      41
    ]
  ],
  [
    [
      9392,
      9392
    ],
    "disallowed_STD3_mapped",
    [
      40,
      117,
      41
    ]
  ],
  [
    [
      9393,
      9393
    ],
    "disallowed_STD3_mapped",
    [
      40,
      118,
      41
    ]
  ],
  [
    [
      9394,
      9394
    ],
    "disallowed_STD3_mapped",
    [
      40,
      119,
      41
    ]
  ],
  [
    [
      9395,
      9395
    ],
    "disallowed_STD3_mapped",
    [
      40,
      120,
      41
    ]
  ],
  [
    [
      9396,
      9396
    ],
    "disallowed_STD3_mapped",
    [
      40,
      121,
      41
    ]
  ],
  [
    [
      9397,
      9397
    ],
    "disallowed_STD3_mapped",
    [
      40,
      122,
      41
    ]
  ],
  [
    [
      9398,
      9398
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      9399,
      9399
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      9400,
      9400
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      9401,
      9401
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      9402,
      9402
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      9403,
      9403
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      9404,
      9404
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      9405,
      9405
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      9406,
      9406
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      9407,
      9407
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      9408,
      9408
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      9409,
      9409
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      9410,
      9410
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      9411,
      9411
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      9412,
      9412
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      9413,
      9413
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      9414,
      9414
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      9415,
      9415
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      9416,
      9416
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      9417,
      9417
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      9418,
      9418
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      9419,
      9419
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      9420,
      9420
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      9421,
      9421
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      9422,
      9422
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      9423,
      9423
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      9424,
      9424
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      9425,
      9425
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      9426,
      9426
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      9427,
      9427
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      9428,
      9428
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      9429,
      9429
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      9430,
      9430
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      9431,
      9431
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      9432,
      9432
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      9433,
      9433
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      9434,
      9434
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      9435,
      9435
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      9436,
      9436
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      9437,
      9437
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      9438,
      9438
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      9439,
      9439
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      9440,
      9440
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      9441,
      9441
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      9442,
      9442
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      9443,
      9443
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      9444,
      9444
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      9445,
      9445
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      9446,
      9446
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      9447,
      9447
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      9448,
      9448
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      9449,
      9449
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      9450,
      9450
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      9451,
      9470
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9471,
      9471
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9472,
      9621
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9622,
      9631
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9632,
      9711
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9712,
      9719
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9720,
      9727
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9728,
      9747
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9748,
      9749
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9750,
      9751
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9752,
      9752
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9753,
      9753
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9754,
      9839
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9840,
      9841
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9842,
      9853
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9854,
      9855
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9856,
      9865
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9866,
      9873
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9874,
      9884
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9885,
      9885
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9886,
      9887
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9888,
      9889
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9890,
      9905
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9906,
      9906
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9907,
      9916
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9917,
      9919
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9920,
      9923
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9924,
      9933
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9934,
      9934
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9935,
      9953
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9954,
      9954
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9955,
      9955
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9956,
      9959
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9960,
      9983
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9984,
      9984
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9985,
      9988
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9989,
      9989
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9990,
      9993
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9994,
      9995
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9996,
      10023
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10024,
      10024
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10025,
      10059
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10060,
      10060
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10061,
      10061
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10062,
      10062
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10063,
      10066
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10067,
      10069
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10070,
      10070
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10071,
      10071
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10072,
      10078
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10079,
      10080
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10081,
      10087
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10088,
      10101
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10102,
      10132
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10133,
      10135
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10136,
      10159
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10160,
      10160
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10161,
      10174
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10175,
      10175
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10176,
      10182
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10183,
      10186
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10187,
      10187
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10188,
      10188
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10189,
      10189
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10190,
      10191
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10192,
      10219
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10220,
      10223
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10224,
      10239
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10240,
      10495
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10496,
      10763
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10764,
      10764
    ],
    "mapped",
    [
      8747,
      8747,
      8747,
      8747
    ]
  ],
  [
    [
      10765,
      10867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10868,
      10868
    ],
    "disallowed_STD3_mapped",
    [
      58,
      58,
      61
    ]
  ],
  [
    [
      10869,
      10869
    ],
    "disallowed_STD3_mapped",
    [
      61,
      61
    ]
  ],
  [
    [
      10870,
      10870
    ],
    "disallowed_STD3_mapped",
    [
      61,
      61,
      61
    ]
  ],
  [
    [
      10871,
      10971
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10972,
      10972
    ],
    "mapped",
    [
      10973,
      824
    ]
  ],
  [
    [
      10973,
      11007
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11008,
      11021
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11022,
      11027
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11028,
      11034
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11035,
      11039
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11040,
      11043
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11044,
      11084
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11085,
      11087
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11088,
      11092
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11093,
      11097
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11098,
      11123
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11124,
      11125
    ],
    "disallowed"
  ],
  [
    [
      11126,
      11157
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11158,
      11159
    ],
    "disallowed"
  ],
  [
    [
      11160,
      11193
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11194,
      11196
    ],
    "disallowed"
  ],
  [
    [
      11197,
      11208
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11209,
      11209
    ],
    "disallowed"
  ],
  [
    [
      11210,
      11217
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11218,
      11243
    ],
    "disallowed"
  ],
  [
    [
      11244,
      11247
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11248,
      11263
    ],
    "disallowed"
  ],
  [
    [
      11264,
      11264
    ],
    "mapped",
    [
      11312
    ]
  ],
  [
    [
      11265,
      11265
    ],
    "mapped",
    [
      11313
    ]
  ],
  [
    [
      11266,
      11266
    ],
    "mapped",
    [
      11314
    ]
  ],
  [
    [
      11267,
      11267
    ],
    "mapped",
    [
      11315
    ]
  ],
  [
    [
      11268,
      11268
    ],
    "mapped",
    [
      11316
    ]
  ],
  [
    [
      11269,
      11269
    ],
    "mapped",
    [
      11317
    ]
  ],
  [
    [
      11270,
      11270
    ],
    "mapped",
    [
      11318
    ]
  ],
  [
    [
      11271,
      11271
    ],
    "mapped",
    [
      11319
    ]
  ],
  [
    [
      11272,
      11272
    ],
    "mapped",
    [
      11320
    ]
  ],
  [
    [
      11273,
      11273
    ],
    "mapped",
    [
      11321
    ]
  ],
  [
    [
      11274,
      11274
    ],
    "mapped",
    [
      11322
    ]
  ],
  [
    [
      11275,
      11275
    ],
    "mapped",
    [
      11323
    ]
  ],
  [
    [
      11276,
      11276
    ],
    "mapped",
    [
      11324
    ]
  ],
  [
    [
      11277,
      11277
    ],
    "mapped",
    [
      11325
    ]
  ],
  [
    [
      11278,
      11278
    ],
    "mapped",
    [
      11326
    ]
  ],
  [
    [
      11279,
      11279
    ],
    "mapped",
    [
      11327
    ]
  ],
  [
    [
      11280,
      11280
    ],
    "mapped",
    [
      11328
    ]
  ],
  [
    [
      11281,
      11281
    ],
    "mapped",
    [
      11329
    ]
  ],
  [
    [
      11282,
      11282
    ],
    "mapped",
    [
      11330
    ]
  ],
  [
    [
      11283,
      11283
    ],
    "mapped",
    [
      11331
    ]
  ],
  [
    [
      11284,
      11284
    ],
    "mapped",
    [
      11332
    ]
  ],
  [
    [
      11285,
      11285
    ],
    "mapped",
    [
      11333
    ]
  ],
  [
    [
      11286,
      11286
    ],
    "mapped",
    [
      11334
    ]
  ],
  [
    [
      11287,
      11287
    ],
    "mapped",
    [
      11335
    ]
  ],
  [
    [
      11288,
      11288
    ],
    "mapped",
    [
      11336
    ]
  ],
  [
    [
      11289,
      11289
    ],
    "mapped",
    [
      11337
    ]
  ],
  [
    [
      11290,
      11290
    ],
    "mapped",
    [
      11338
    ]
  ],
  [
    [
      11291,
      11291
    ],
    "mapped",
    [
      11339
    ]
  ],
  [
    [
      11292,
      11292
    ],
    "mapped",
    [
      11340
    ]
  ],
  [
    [
      11293,
      11293
    ],
    "mapped",
    [
      11341
    ]
  ],
  [
    [
      11294,
      11294
    ],
    "mapped",
    [
      11342
    ]
  ],
  [
    [
      11295,
      11295
    ],
    "mapped",
    [
      11343
    ]
  ],
  [
    [
      11296,
      11296
    ],
    "mapped",
    [
      11344
    ]
  ],
  [
    [
      11297,
      11297
    ],
    "mapped",
    [
      11345
    ]
  ],
  [
    [
      11298,
      11298
    ],
    "mapped",
    [
      11346
    ]
  ],
  [
    [
      11299,
      11299
    ],
    "mapped",
    [
      11347
    ]
  ],
  [
    [
      11300,
      11300
    ],
    "mapped",
    [
      11348
    ]
  ],
  [
    [
      11301,
      11301
    ],
    "mapped",
    [
      11349
    ]
  ],
  [
    [
      11302,
      11302
    ],
    "mapped",
    [
      11350
    ]
  ],
  [
    [
      11303,
      11303
    ],
    "mapped",
    [
      11351
    ]
  ],
  [
    [
      11304,
      11304
    ],
    "mapped",
    [
      11352
    ]
  ],
  [
    [
      11305,
      11305
    ],
    "mapped",
    [
      11353
    ]
  ],
  [
    [
      11306,
      11306
    ],
    "mapped",
    [
      11354
    ]
  ],
  [
    [
      11307,
      11307
    ],
    "mapped",
    [
      11355
    ]
  ],
  [
    [
      11308,
      11308
    ],
    "mapped",
    [
      11356
    ]
  ],
  [
    [
      11309,
      11309
    ],
    "mapped",
    [
      11357
    ]
  ],
  [
    [
      11310,
      11310
    ],
    "mapped",
    [
      11358
    ]
  ],
  [
    [
      11311,
      11311
    ],
    "disallowed"
  ],
  [
    [
      11312,
      11358
    ],
    "valid"
  ],
  [
    [
      11359,
      11359
    ],
    "disallowed"
  ],
  [
    [
      11360,
      11360
    ],
    "mapped",
    [
      11361
    ]
  ],
  [
    [
      11361,
      11361
    ],
    "valid"
  ],
  [
    [
      11362,
      11362
    ],
    "mapped",
    [
      619
    ]
  ],
  [
    [
      11363,
      11363
    ],
    "mapped",
    [
      7549
    ]
  ],
  [
    [
      11364,
      11364
    ],
    "mapped",
    [
      637
    ]
  ],
  [
    [
      11365,
      11366
    ],
    "valid"
  ],
  [
    [
      11367,
      11367
    ],
    "mapped",
    [
      11368
    ]
  ],
  [
    [
      11368,
      11368
    ],
    "valid"
  ],
  [
    [
      11369,
      11369
    ],
    "mapped",
    [
      11370
    ]
  ],
  [
    [
      11370,
      11370
    ],
    "valid"
  ],
  [
    [
      11371,
      11371
    ],
    "mapped",
    [
      11372
    ]
  ],
  [
    [
      11372,
      11372
    ],
    "valid"
  ],
  [
    [
      11373,
      11373
    ],
    "mapped",
    [
      593
    ]
  ],
  [
    [
      11374,
      11374
    ],
    "mapped",
    [
      625
    ]
  ],
  [
    [
      11375,
      11375
    ],
    "mapped",
    [
      592
    ]
  ],
  [
    [
      11376,
      11376
    ],
    "mapped",
    [
      594
    ]
  ],
  [
    [
      11377,
      11377
    ],
    "valid"
  ],
  [
    [
      11378,
      11378
    ],
    "mapped",
    [
      11379
    ]
  ],
  [
    [
      11379,
      11379
    ],
    "valid"
  ],
  [
    [
      11380,
      11380
    ],
    "valid"
  ],
  [
    [
      11381,
      11381
    ],
    "mapped",
    [
      11382
    ]
  ],
  [
    [
      11382,
      11383
    ],
    "valid"
  ],
  [
    [
      11384,
      11387
    ],
    "valid"
  ],
  [
    [
      11388,
      11388
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      11389,
      11389
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      11390,
      11390
    ],
    "mapped",
    [
      575
    ]
  ],
  [
    [
      11391,
      11391
    ],
    "mapped",
    [
      576
    ]
  ],
  [
    [
      11392,
      11392
    ],
    "mapped",
    [
      11393
    ]
  ],
  [
    [
      11393,
      11393
    ],
    "valid"
  ],
  [
    [
      11394,
      11394
    ],
    "mapped",
    [
      11395
    ]
  ],
  [
    [
      11395,
      11395
    ],
    "valid"
  ],
  [
    [
      11396,
      11396
    ],
    "mapped",
    [
      11397
    ]
  ],
  [
    [
      11397,
      11397
    ],
    "valid"
  ],
  [
    [
      11398,
      11398
    ],
    "mapped",
    [
      11399
    ]
  ],
  [
    [
      11399,
      11399
    ],
    "valid"
  ],
  [
    [
      11400,
      11400
    ],
    "mapped",
    [
      11401
    ]
  ],
  [
    [
      11401,
      11401
    ],
    "valid"
  ],
  [
    [
      11402,
      11402
    ],
    "mapped",
    [
      11403
    ]
  ],
  [
    [
      11403,
      11403
    ],
    "valid"
  ],
  [
    [
      11404,
      11404
    ],
    "mapped",
    [
      11405
    ]
  ],
  [
    [
      11405,
      11405
    ],
    "valid"
  ],
  [
    [
      11406,
      11406
    ],
    "mapped",
    [
      11407
    ]
  ],
  [
    [
      11407,
      11407
    ],
    "valid"
  ],
  [
    [
      11408,
      11408
    ],
    "mapped",
    [
      11409
    ]
  ],
  [
    [
      11409,
      11409
    ],
    "valid"
  ],
  [
    [
      11410,
      11410
    ],
    "mapped",
    [
      11411
    ]
  ],
  [
    [
      11411,
      11411
    ],
    "valid"
  ],
  [
    [
      11412,
      11412
    ],
    "mapped",
    [
      11413
    ]
  ],
  [
    [
      11413,
      11413
    ],
    "valid"
  ],
  [
    [
      11414,
      11414
    ],
    "mapped",
    [
      11415
    ]
  ],
  [
    [
      11415,
      11415
    ],
    "valid"
  ],
  [
    [
      11416,
      11416
    ],
    "mapped",
    [
      11417
    ]
  ],
  [
    [
      11417,
      11417
    ],
    "valid"
  ],
  [
    [
      11418,
      11418
    ],
    "mapped",
    [
      11419
    ]
  ],
  [
    [
      11419,
      11419
    ],
    "valid"
  ],
  [
    [
      11420,
      11420
    ],
    "mapped",
    [
      11421
    ]
  ],
  [
    [
      11421,
      11421
    ],
    "valid"
  ],
  [
    [
      11422,
      11422
    ],
    "mapped",
    [
      11423
    ]
  ],
  [
    [
      11423,
      11423
    ],
    "valid"
  ],
  [
    [
      11424,
      11424
    ],
    "mapped",
    [
      11425
    ]
  ],
  [
    [
      11425,
      11425
    ],
    "valid"
  ],
  [
    [
      11426,
      11426
    ],
    "mapped",
    [
      11427
    ]
  ],
  [
    [
      11427,
      11427
    ],
    "valid"
  ],
  [
    [
      11428,
      11428
    ],
    "mapped",
    [
      11429
    ]
  ],
  [
    [
      11429,
      11429
    ],
    "valid"
  ],
  [
    [
      11430,
      11430
    ],
    "mapped",
    [
      11431
    ]
  ],
  [
    [
      11431,
      11431
    ],
    "valid"
  ],
  [
    [
      11432,
      11432
    ],
    "mapped",
    [
      11433
    ]
  ],
  [
    [
      11433,
      11433
    ],
    "valid"
  ],
  [
    [
      11434,
      11434
    ],
    "mapped",
    [
      11435
    ]
  ],
  [
    [
      11435,
      11435
    ],
    "valid"
  ],
  [
    [
      11436,
      11436
    ],
    "mapped",
    [
      11437
    ]
  ],
  [
    [
      11437,
      11437
    ],
    "valid"
  ],
  [
    [
      11438,
      11438
    ],
    "mapped",
    [
      11439
    ]
  ],
  [
    [
      11439,
      11439
    ],
    "valid"
  ],
  [
    [
      11440,
      11440
    ],
    "mapped",
    [
      11441
    ]
  ],
  [
    [
      11441,
      11441
    ],
    "valid"
  ],
  [
    [
      11442,
      11442
    ],
    "mapped",
    [
      11443
    ]
  ],
  [
    [
      11443,
      11443
    ],
    "valid"
  ],
  [
    [
      11444,
      11444
    ],
    "mapped",
    [
      11445
    ]
  ],
  [
    [
      11445,
      11445
    ],
    "valid"
  ],
  [
    [
      11446,
      11446
    ],
    "mapped",
    [
      11447
    ]
  ],
  [
    [
      11447,
      11447
    ],
    "valid"
  ],
  [
    [
      11448,
      11448
    ],
    "mapped",
    [
      11449
    ]
  ],
  [
    [
      11449,
      11449
    ],
    "valid"
  ],
  [
    [
      11450,
      11450
    ],
    "mapped",
    [
      11451
    ]
  ],
  [
    [
      11451,
      11451
    ],
    "valid"
  ],
  [
    [
      11452,
      11452
    ],
    "mapped",
    [
      11453
    ]
  ],
  [
    [
      11453,
      11453
    ],
    "valid"
  ],
  [
    [
      11454,
      11454
    ],
    "mapped",
    [
      11455
    ]
  ],
  [
    [
      11455,
      11455
    ],
    "valid"
  ],
  [
    [
      11456,
      11456
    ],
    "mapped",
    [
      11457
    ]
  ],
  [
    [
      11457,
      11457
    ],
    "valid"
  ],
  [
    [
      11458,
      11458
    ],
    "mapped",
    [
      11459
    ]
  ],
  [
    [
      11459,
      11459
    ],
    "valid"
  ],
  [
    [
      11460,
      11460
    ],
    "mapped",
    [
      11461
    ]
  ],
  [
    [
      11461,
      11461
    ],
    "valid"
  ],
  [
    [
      11462,
      11462
    ],
    "mapped",
    [
      11463
    ]
  ],
  [
    [
      11463,
      11463
    ],
    "valid"
  ],
  [
    [
      11464,
      11464
    ],
    "mapped",
    [
      11465
    ]
  ],
  [
    [
      11465,
      11465
    ],
    "valid"
  ],
  [
    [
      11466,
      11466
    ],
    "mapped",
    [
      11467
    ]
  ],
  [
    [
      11467,
      11467
    ],
    "valid"
  ],
  [
    [
      11468,
      11468
    ],
    "mapped",
    [
      11469
    ]
  ],
  [
    [
      11469,
      11469
    ],
    "valid"
  ],
  [
    [
      11470,
      11470
    ],
    "mapped",
    [
      11471
    ]
  ],
  [
    [
      11471,
      11471
    ],
    "valid"
  ],
  [
    [
      11472,
      11472
    ],
    "mapped",
    [
      11473
    ]
  ],
  [
    [
      11473,
      11473
    ],
    "valid"
  ],
  [
    [
      11474,
      11474
    ],
    "mapped",
    [
      11475
    ]
  ],
  [
    [
      11475,
      11475
    ],
    "valid"
  ],
  [
    [
      11476,
      11476
    ],
    "mapped",
    [
      11477
    ]
  ],
  [
    [
      11477,
      11477
    ],
    "valid"
  ],
  [
    [
      11478,
      11478
    ],
    "mapped",
    [
      11479
    ]
  ],
  [
    [
      11479,
      11479
    ],
    "valid"
  ],
  [
    [
      11480,
      11480
    ],
    "mapped",
    [
      11481
    ]
  ],
  [
    [
      11481,
      11481
    ],
    "valid"
  ],
  [
    [
      11482,
      11482
    ],
    "mapped",
    [
      11483
    ]
  ],
  [
    [
      11483,
      11483
    ],
    "valid"
  ],
  [
    [
      11484,
      11484
    ],
    "mapped",
    [
      11485
    ]
  ],
  [
    [
      11485,
      11485
    ],
    "valid"
  ],
  [
    [
      11486,
      11486
    ],
    "mapped",
    [
      11487
    ]
  ],
  [
    [
      11487,
      11487
    ],
    "valid"
  ],
  [
    [
      11488,
      11488
    ],
    "mapped",
    [
      11489
    ]
  ],
  [
    [
      11489,
      11489
    ],
    "valid"
  ],
  [
    [
      11490,
      11490
    ],
    "mapped",
    [
      11491
    ]
  ],
  [
    [
      11491,
      11492
    ],
    "valid"
  ],
  [
    [
      11493,
      11498
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11499,
      11499
    ],
    "mapped",
    [
      11500
    ]
  ],
  [
    [
      11500,
      11500
    ],
    "valid"
  ],
  [
    [
      11501,
      11501
    ],
    "mapped",
    [
      11502
    ]
  ],
  [
    [
      11502,
      11505
    ],
    "valid"
  ],
  [
    [
      11506,
      11506
    ],
    "mapped",
    [
      11507
    ]
  ],
  [
    [
      11507,
      11507
    ],
    "valid"
  ],
  [
    [
      11508,
      11512
    ],
    "disallowed"
  ],
  [
    [
      11513,
      11519
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11520,
      11557
    ],
    "valid"
  ],
  [
    [
      11558,
      11558
    ],
    "disallowed"
  ],
  [
    [
      11559,
      11559
    ],
    "valid"
  ],
  [
    [
      11560,
      11564
    ],
    "disallowed"
  ],
  [
    [
      11565,
      11565
    ],
    "valid"
  ],
  [
    [
      11566,
      11567
    ],
    "disallowed"
  ],
  [
    [
      11568,
      11621
    ],
    "valid"
  ],
  [
    [
      11622,
      11623
    ],
    "valid"
  ],
  [
    [
      11624,
      11630
    ],
    "disallowed"
  ],
  [
    [
      11631,
      11631
    ],
    "mapped",
    [
      11617
    ]
  ],
  [
    [
      11632,
      11632
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11633,
      11646
    ],
    "disallowed"
  ],
  [
    [
      11647,
      11647
    ],
    "valid"
  ],
  [
    [
      11648,
      11670
    ],
    "valid"
  ],
  [
    [
      11671,
      11679
    ],
    "disallowed"
  ],
  [
    [
      11680,
      11686
    ],
    "valid"
  ],
  [
    [
      11687,
      11687
    ],
    "disallowed"
  ],
  [
    [
      11688,
      11694
    ],
    "valid"
  ],
  [
    [
      11695,
      11695
    ],
    "disallowed"
  ],
  [
    [
      11696,
      11702
    ],
    "valid"
  ],
  [
    [
      11703,
      11703
    ],
    "disallowed"
  ],
  [
    [
      11704,
      11710
    ],
    "valid"
  ],
  [
    [
      11711,
      11711
    ],
    "disallowed"
  ],
  [
    [
      11712,
      11718
    ],
    "valid"
  ],
  [
    [
      11719,
      11719
    ],
    "disallowed"
  ],
  [
    [
      11720,
      11726
    ],
    "valid"
  ],
  [
    [
      11727,
      11727
    ],
    "disallowed"
  ],
  [
    [
      11728,
      11734
    ],
    "valid"
  ],
  [
    [
      11735,
      11735
    ],
    "disallowed"
  ],
  [
    [
      11736,
      11742
    ],
    "valid"
  ],
  [
    [
      11743,
      11743
    ],
    "disallowed"
  ],
  [
    [
      11744,
      11775
    ],
    "valid"
  ],
  [
    [
      11776,
      11799
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11800,
      11803
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11804,
      11805
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11806,
      11822
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11823,
      11823
    ],
    "valid"
  ],
  [
    [
      11824,
      11824
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11825,
      11825
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11826,
      11835
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11836,
      11842
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11843,
      11903
    ],
    "disallowed"
  ],
  [
    [
      11904,
      11929
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11930,
      11930
    ],
    "disallowed"
  ],
  [
    [
      11931,
      11934
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11935,
      11935
    ],
    "mapped",
    [
      27597
    ]
  ],
  [
    [
      11936,
      12018
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12019,
      12019
    ],
    "mapped",
    [
      40863
    ]
  ],
  [
    [
      12020,
      12031
    ],
    "disallowed"
  ],
  [
    [
      12032,
      12032
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      12033,
      12033
    ],
    "mapped",
    [
      20008
    ]
  ],
  [
    [
      12034,
      12034
    ],
    "mapped",
    [
      20022
    ]
  ],
  [
    [
      12035,
      12035
    ],
    "mapped",
    [
      20031
    ]
  ],
  [
    [
      12036,
      12036
    ],
    "mapped",
    [
      20057
    ]
  ],
  [
    [
      12037,
      12037
    ],
    "mapped",
    [
      20101
    ]
  ],
  [
    [
      12038,
      12038
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      12039,
      12039
    ],
    "mapped",
    [
      20128
    ]
  ],
  [
    [
      12040,
      12040
    ],
    "mapped",
    [
      20154
    ]
  ],
  [
    [
      12041,
      12041
    ],
    "mapped",
    [
      20799
    ]
  ],
  [
    [
      12042,
      12042
    ],
    "mapped",
    [
      20837
    ]
  ],
  [
    [
      12043,
      12043
    ],
    "mapped",
    [
      20843
    ]
  ],
  [
    [
      12044,
      12044
    ],
    "mapped",
    [
      20866
    ]
  ],
  [
    [
      12045,
      12045
    ],
    "mapped",
    [
      20886
    ]
  ],
  [
    [
      12046,
      12046
    ],
    "mapped",
    [
      20907
    ]
  ],
  [
    [
      12047,
      12047
    ],
    "mapped",
    [
      20960
    ]
  ],
  [
    [
      12048,
      12048
    ],
    "mapped",
    [
      20981
    ]
  ],
  [
    [
      12049,
      12049
    ],
    "mapped",
    [
      20992
    ]
  ],
  [
    [
      12050,
      12050
    ],
    "mapped",
    [
      21147
    ]
  ],
  [
    [
      12051,
      12051
    ],
    "mapped",
    [
      21241
    ]
  ],
  [
    [
      12052,
      12052
    ],
    "mapped",
    [
      21269
    ]
  ],
  [
    [
      12053,
      12053
    ],
    "mapped",
    [
      21274
    ]
  ],
  [
    [
      12054,
      12054
    ],
    "mapped",
    [
      21304
    ]
  ],
  [
    [
      12055,
      12055
    ],
    "mapped",
    [
      21313
    ]
  ],
  [
    [
      12056,
      12056
    ],
    "mapped",
    [
      21340
    ]
  ],
  [
    [
      12057,
      12057
    ],
    "mapped",
    [
      21353
    ]
  ],
  [
    [
      12058,
      12058
    ],
    "mapped",
    [
      21378
    ]
  ],
  [
    [
      12059,
      12059
    ],
    "mapped",
    [
      21430
    ]
  ],
  [
    [
      12060,
      12060
    ],
    "mapped",
    [
      21448
    ]
  ],
  [
    [
      12061,
      12061
    ],
    "mapped",
    [
      21475
    ]
  ],
  [
    [
      12062,
      12062
    ],
    "mapped",
    [
      22231
    ]
  ],
  [
    [
      12063,
      12063
    ],
    "mapped",
    [
      22303
    ]
  ],
  [
    [
      12064,
      12064
    ],
    "mapped",
    [
      22763
    ]
  ],
  [
    [
      12065,
      12065
    ],
    "mapped",
    [
      22786
    ]
  ],
  [
    [
      12066,
      12066
    ],
    "mapped",
    [
      22794
    ]
  ],
  [
    [
      12067,
      12067
    ],
    "mapped",
    [
      22805
    ]
  ],
  [
    [
      12068,
      12068
    ],
    "mapped",
    [
      22823
    ]
  ],
  [
    [
      12069,
      12069
    ],
    "mapped",
    [
      22899
    ]
  ],
  [
    [
      12070,
      12070
    ],
    "mapped",
    [
      23376
    ]
  ],
  [
    [
      12071,
      12071
    ],
    "mapped",
    [
      23424
    ]
  ],
  [
    [
      12072,
      12072
    ],
    "mapped",
    [
      23544
    ]
  ],
  [
    [
      12073,
      12073
    ],
    "mapped",
    [
      23567
    ]
  ],
  [
    [
      12074,
      12074
    ],
    "mapped",
    [
      23586
    ]
  ],
  [
    [
      12075,
      12075
    ],
    "mapped",
    [
      23608
    ]
  ],
  [
    [
      12076,
      12076
    ],
    "mapped",
    [
      23662
    ]
  ],
  [
    [
      12077,
      12077
    ],
    "mapped",
    [
      23665
    ]
  ],
  [
    [
      12078,
      12078
    ],
    "mapped",
    [
      24027
    ]
  ],
  [
    [
      12079,
      12079
    ],
    "mapped",
    [
      24037
    ]
  ],
  [
    [
      12080,
      12080
    ],
    "mapped",
    [
      24049
    ]
  ],
  [
    [
      12081,
      12081
    ],
    "mapped",
    [
      24062
    ]
  ],
  [
    [
      12082,
      12082
    ],
    "mapped",
    [
      24178
    ]
  ],
  [
    [
      12083,
      12083
    ],
    "mapped",
    [
      24186
    ]
  ],
  [
    [
      12084,
      12084
    ],
    "mapped",
    [
      24191
    ]
  ],
  [
    [
      12085,
      12085
    ],
    "mapped",
    [
      24308
    ]
  ],
  [
    [
      12086,
      12086
    ],
    "mapped",
    [
      24318
    ]
  ],
  [
    [
      12087,
      12087
    ],
    "mapped",
    [
      24331
    ]
  ],
  [
    [
      12088,
      12088
    ],
    "mapped",
    [
      24339
    ]
  ],
  [
    [
      12089,
      12089
    ],
    "mapped",
    [
      24400
    ]
  ],
  [
    [
      12090,
      12090
    ],
    "mapped",
    [
      24417
    ]
  ],
  [
    [
      12091,
      12091
    ],
    "mapped",
    [
      24435
    ]
  ],
  [
    [
      12092,
      12092
    ],
    "mapped",
    [
      24515
    ]
  ],
  [
    [
      12093,
      12093
    ],
    "mapped",
    [
      25096
    ]
  ],
  [
    [
      12094,
      12094
    ],
    "mapped",
    [
      25142
    ]
  ],
  [
    [
      12095,
      12095
    ],
    "mapped",
    [
      25163
    ]
  ],
  [
    [
      12096,
      12096
    ],
    "mapped",
    [
      25903
    ]
  ],
  [
    [
      12097,
      12097
    ],
    "mapped",
    [
      25908
    ]
  ],
  [
    [
      12098,
      12098
    ],
    "mapped",
    [
      25991
    ]
  ],
  [
    [
      12099,
      12099
    ],
    "mapped",
    [
      26007
    ]
  ],
  [
    [
      12100,
      12100
    ],
    "mapped",
    [
      26020
    ]
  ],
  [
    [
      12101,
      12101
    ],
    "mapped",
    [
      26041
    ]
  ],
  [
    [
      12102,
      12102
    ],
    "mapped",
    [
      26080
    ]
  ],
  [
    [
      12103,
      12103
    ],
    "mapped",
    [
      26085
    ]
  ],
  [
    [
      12104,
      12104
    ],
    "mapped",
    [
      26352
    ]
  ],
  [
    [
      12105,
      12105
    ],
    "mapped",
    [
      26376
    ]
  ],
  [
    [
      12106,
      12106
    ],
    "mapped",
    [
      26408
    ]
  ],
  [
    [
      12107,
      12107
    ],
    "mapped",
    [
      27424
    ]
  ],
  [
    [
      12108,
      12108
    ],
    "mapped",
    [
      27490
    ]
  ],
  [
    [
      12109,
      12109
    ],
    "mapped",
    [
      27513
    ]
  ],
  [
    [
      12110,
      12110
    ],
    "mapped",
    [
      27571
    ]
  ],
  [
    [
      12111,
      12111
    ],
    "mapped",
    [
      27595
    ]
  ],
  [
    [
      12112,
      12112
    ],
    "mapped",
    [
      27604
    ]
  ],
  [
    [
      12113,
      12113
    ],
    "mapped",
    [
      27611
    ]
  ],
  [
    [
      12114,
      12114
    ],
    "mapped",
    [
      27663
    ]
  ],
  [
    [
      12115,
      12115
    ],
    "mapped",
    [
      27668
    ]
  ],
  [
    [
      12116,
      12116
    ],
    "mapped",
    [
      27700
    ]
  ],
  [
    [
      12117,
      12117
    ],
    "mapped",
    [
      28779
    ]
  ],
  [
    [
      12118,
      12118
    ],
    "mapped",
    [
      29226
    ]
  ],
  [
    [
      12119,
      12119
    ],
    "mapped",
    [
      29238
    ]
  ],
  [
    [
      12120,
      12120
    ],
    "mapped",
    [
      29243
    ]
  ],
  [
    [
      12121,
      12121
    ],
    "mapped",
    [
      29247
    ]
  ],
  [
    [
      12122,
      12122
    ],
    "mapped",
    [
      29255
    ]
  ],
  [
    [
      12123,
      12123
    ],
    "mapped",
    [
      29273
    ]
  ],
  [
    [
      12124,
      12124
    ],
    "mapped",
    [
      29275
    ]
  ],
  [
    [
      12125,
      12125
    ],
    "mapped",
    [
      29356
    ]
  ],
  [
    [
      12126,
      12126
    ],
    "mapped",
    [
      29572
    ]
  ],
  [
    [
      12127,
      12127
    ],
    "mapped",
    [
      29577
    ]
  ],
  [
    [
      12128,
      12128
    ],
    "mapped",
    [
      29916
    ]
  ],
  [
    [
      12129,
      12129
    ],
    "mapped",
    [
      29926
    ]
  ],
  [
    [
      12130,
      12130
    ],
    "mapped",
    [
      29976
    ]
  ],
  [
    [
      12131,
      12131
    ],
    "mapped",
    [
      29983
    ]
  ],
  [
    [
      12132,
      12132
    ],
    "mapped",
    [
      29992
    ]
  ],
  [
    [
      12133,
      12133
    ],
    "mapped",
    [
      3e4
    ]
  ],
  [
    [
      12134,
      12134
    ],
    "mapped",
    [
      30091
    ]
  ],
  [
    [
      12135,
      12135
    ],
    "mapped",
    [
      30098
    ]
  ],
  [
    [
      12136,
      12136
    ],
    "mapped",
    [
      30326
    ]
  ],
  [
    [
      12137,
      12137
    ],
    "mapped",
    [
      30333
    ]
  ],
  [
    [
      12138,
      12138
    ],
    "mapped",
    [
      30382
    ]
  ],
  [
    [
      12139,
      12139
    ],
    "mapped",
    [
      30399
    ]
  ],
  [
    [
      12140,
      12140
    ],
    "mapped",
    [
      30446
    ]
  ],
  [
    [
      12141,
      12141
    ],
    "mapped",
    [
      30683
    ]
  ],
  [
    [
      12142,
      12142
    ],
    "mapped",
    [
      30690
    ]
  ],
  [
    [
      12143,
      12143
    ],
    "mapped",
    [
      30707
    ]
  ],
  [
    [
      12144,
      12144
    ],
    "mapped",
    [
      31034
    ]
  ],
  [
    [
      12145,
      12145
    ],
    "mapped",
    [
      31160
    ]
  ],
  [
    [
      12146,
      12146
    ],
    "mapped",
    [
      31166
    ]
  ],
  [
    [
      12147,
      12147
    ],
    "mapped",
    [
      31348
    ]
  ],
  [
    [
      12148,
      12148
    ],
    "mapped",
    [
      31435
    ]
  ],
  [
    [
      12149,
      12149
    ],
    "mapped",
    [
      31481
    ]
  ],
  [
    [
      12150,
      12150
    ],
    "mapped",
    [
      31859
    ]
  ],
  [
    [
      12151,
      12151
    ],
    "mapped",
    [
      31992
    ]
  ],
  [
    [
      12152,
      12152
    ],
    "mapped",
    [
      32566
    ]
  ],
  [
    [
      12153,
      12153
    ],
    "mapped",
    [
      32593
    ]
  ],
  [
    [
      12154,
      12154
    ],
    "mapped",
    [
      32650
    ]
  ],
  [
    [
      12155,
      12155
    ],
    "mapped",
    [
      32701
    ]
  ],
  [
    [
      12156,
      12156
    ],
    "mapped",
    [
      32769
    ]
  ],
  [
    [
      12157,
      12157
    ],
    "mapped",
    [
      32780
    ]
  ],
  [
    [
      12158,
      12158
    ],
    "mapped",
    [
      32786
    ]
  ],
  [
    [
      12159,
      12159
    ],
    "mapped",
    [
      32819
    ]
  ],
  [
    [
      12160,
      12160
    ],
    "mapped",
    [
      32895
    ]
  ],
  [
    [
      12161,
      12161
    ],
    "mapped",
    [
      32905
    ]
  ],
  [
    [
      12162,
      12162
    ],
    "mapped",
    [
      33251
    ]
  ],
  [
    [
      12163,
      12163
    ],
    "mapped",
    [
      33258
    ]
  ],
  [
    [
      12164,
      12164
    ],
    "mapped",
    [
      33267
    ]
  ],
  [
    [
      12165,
      12165
    ],
    "mapped",
    [
      33276
    ]
  ],
  [
    [
      12166,
      12166
    ],
    "mapped",
    [
      33292
    ]
  ],
  [
    [
      12167,
      12167
    ],
    "mapped",
    [
      33307
    ]
  ],
  [
    [
      12168,
      12168
    ],
    "mapped",
    [
      33311
    ]
  ],
  [
    [
      12169,
      12169
    ],
    "mapped",
    [
      33390
    ]
  ],
  [
    [
      12170,
      12170
    ],
    "mapped",
    [
      33394
    ]
  ],
  [
    [
      12171,
      12171
    ],
    "mapped",
    [
      33400
    ]
  ],
  [
    [
      12172,
      12172
    ],
    "mapped",
    [
      34381
    ]
  ],
  [
    [
      12173,
      12173
    ],
    "mapped",
    [
      34411
    ]
  ],
  [
    [
      12174,
      12174
    ],
    "mapped",
    [
      34880
    ]
  ],
  [
    [
      12175,
      12175
    ],
    "mapped",
    [
      34892
    ]
  ],
  [
    [
      12176,
      12176
    ],
    "mapped",
    [
      34915
    ]
  ],
  [
    [
      12177,
      12177
    ],
    "mapped",
    [
      35198
    ]
  ],
  [
    [
      12178,
      12178
    ],
    "mapped",
    [
      35211
    ]
  ],
  [
    [
      12179,
      12179
    ],
    "mapped",
    [
      35282
    ]
  ],
  [
    [
      12180,
      12180
    ],
    "mapped",
    [
      35328
    ]
  ],
  [
    [
      12181,
      12181
    ],
    "mapped",
    [
      35895
    ]
  ],
  [
    [
      12182,
      12182
    ],
    "mapped",
    [
      35910
    ]
  ],
  [
    [
      12183,
      12183
    ],
    "mapped",
    [
      35925
    ]
  ],
  [
    [
      12184,
      12184
    ],
    "mapped",
    [
      35960
    ]
  ],
  [
    [
      12185,
      12185
    ],
    "mapped",
    [
      35997
    ]
  ],
  [
    [
      12186,
      12186
    ],
    "mapped",
    [
      36196
    ]
  ],
  [
    [
      12187,
      12187
    ],
    "mapped",
    [
      36208
    ]
  ],
  [
    [
      12188,
      12188
    ],
    "mapped",
    [
      36275
    ]
  ],
  [
    [
      12189,
      12189
    ],
    "mapped",
    [
      36523
    ]
  ],
  [
    [
      12190,
      12190
    ],
    "mapped",
    [
      36554
    ]
  ],
  [
    [
      12191,
      12191
    ],
    "mapped",
    [
      36763
    ]
  ],
  [
    [
      12192,
      12192
    ],
    "mapped",
    [
      36784
    ]
  ],
  [
    [
      12193,
      12193
    ],
    "mapped",
    [
      36789
    ]
  ],
  [
    [
      12194,
      12194
    ],
    "mapped",
    [
      37009
    ]
  ],
  [
    [
      12195,
      12195
    ],
    "mapped",
    [
      37193
    ]
  ],
  [
    [
      12196,
      12196
    ],
    "mapped",
    [
      37318
    ]
  ],
  [
    [
      12197,
      12197
    ],
    "mapped",
    [
      37324
    ]
  ],
  [
    [
      12198,
      12198
    ],
    "mapped",
    [
      37329
    ]
  ],
  [
    [
      12199,
      12199
    ],
    "mapped",
    [
      38263
    ]
  ],
  [
    [
      12200,
      12200
    ],
    "mapped",
    [
      38272
    ]
  ],
  [
    [
      12201,
      12201
    ],
    "mapped",
    [
      38428
    ]
  ],
  [
    [
      12202,
      12202
    ],
    "mapped",
    [
      38582
    ]
  ],
  [
    [
      12203,
      12203
    ],
    "mapped",
    [
      38585
    ]
  ],
  [
    [
      12204,
      12204
    ],
    "mapped",
    [
      38632
    ]
  ],
  [
    [
      12205,
      12205
    ],
    "mapped",
    [
      38737
    ]
  ],
  [
    [
      12206,
      12206
    ],
    "mapped",
    [
      38750
    ]
  ],
  [
    [
      12207,
      12207
    ],
    "mapped",
    [
      38754
    ]
  ],
  [
    [
      12208,
      12208
    ],
    "mapped",
    [
      38761
    ]
  ],
  [
    [
      12209,
      12209
    ],
    "mapped",
    [
      38859
    ]
  ],
  [
    [
      12210,
      12210
    ],
    "mapped",
    [
      38893
    ]
  ],
  [
    [
      12211,
      12211
    ],
    "mapped",
    [
      38899
    ]
  ],
  [
    [
      12212,
      12212
    ],
    "mapped",
    [
      38913
    ]
  ],
  [
    [
      12213,
      12213
    ],
    "mapped",
    [
      39080
    ]
  ],
  [
    [
      12214,
      12214
    ],
    "mapped",
    [
      39131
    ]
  ],
  [
    [
      12215,
      12215
    ],
    "mapped",
    [
      39135
    ]
  ],
  [
    [
      12216,
      12216
    ],
    "mapped",
    [
      39318
    ]
  ],
  [
    [
      12217,
      12217
    ],
    "mapped",
    [
      39321
    ]
  ],
  [
    [
      12218,
      12218
    ],
    "mapped",
    [
      39340
    ]
  ],
  [
    [
      12219,
      12219
    ],
    "mapped",
    [
      39592
    ]
  ],
  [
    [
      12220,
      12220
    ],
    "mapped",
    [
      39640
    ]
  ],
  [
    [
      12221,
      12221
    ],
    "mapped",
    [
      39647
    ]
  ],
  [
    [
      12222,
      12222
    ],
    "mapped",
    [
      39717
    ]
  ],
  [
    [
      12223,
      12223
    ],
    "mapped",
    [
      39727
    ]
  ],
  [
    [
      12224,
      12224
    ],
    "mapped",
    [
      39730
    ]
  ],
  [
    [
      12225,
      12225
    ],
    "mapped",
    [
      39740
    ]
  ],
  [
    [
      12226,
      12226
    ],
    "mapped",
    [
      39770
    ]
  ],
  [
    [
      12227,
      12227
    ],
    "mapped",
    [
      40165
    ]
  ],
  [
    [
      12228,
      12228
    ],
    "mapped",
    [
      40565
    ]
  ],
  [
    [
      12229,
      12229
    ],
    "mapped",
    [
      40575
    ]
  ],
  [
    [
      12230,
      12230
    ],
    "mapped",
    [
      40613
    ]
  ],
  [
    [
      12231,
      12231
    ],
    "mapped",
    [
      40635
    ]
  ],
  [
    [
      12232,
      12232
    ],
    "mapped",
    [
      40643
    ]
  ],
  [
    [
      12233,
      12233
    ],
    "mapped",
    [
      40653
    ]
  ],
  [
    [
      12234,
      12234
    ],
    "mapped",
    [
      40657
    ]
  ],
  [
    [
      12235,
      12235
    ],
    "mapped",
    [
      40697
    ]
  ],
  [
    [
      12236,
      12236
    ],
    "mapped",
    [
      40701
    ]
  ],
  [
    [
      12237,
      12237
    ],
    "mapped",
    [
      40718
    ]
  ],
  [
    [
      12238,
      12238
    ],
    "mapped",
    [
      40723
    ]
  ],
  [
    [
      12239,
      12239
    ],
    "mapped",
    [
      40736
    ]
  ],
  [
    [
      12240,
      12240
    ],
    "mapped",
    [
      40763
    ]
  ],
  [
    [
      12241,
      12241
    ],
    "mapped",
    [
      40778
    ]
  ],
  [
    [
      12242,
      12242
    ],
    "mapped",
    [
      40786
    ]
  ],
  [
    [
      12243,
      12243
    ],
    "mapped",
    [
      40845
    ]
  ],
  [
    [
      12244,
      12244
    ],
    "mapped",
    [
      40860
    ]
  ],
  [
    [
      12245,
      12245
    ],
    "mapped",
    [
      40864
    ]
  ],
  [
    [
      12246,
      12271
    ],
    "disallowed"
  ],
  [
    [
      12272,
      12283
    ],
    "disallowed"
  ],
  [
    [
      12284,
      12287
    ],
    "disallowed"
  ],
  [
    [
      12288,
      12288
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      12289,
      12289
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12290,
      12290
    ],
    "mapped",
    [
      46
    ]
  ],
  [
    [
      12291,
      12292
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12293,
      12295
    ],
    "valid"
  ],
  [
    [
      12296,
      12329
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12330,
      12333
    ],
    "valid"
  ],
  [
    [
      12334,
      12341
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12342,
      12342
    ],
    "mapped",
    [
      12306
    ]
  ],
  [
    [
      12343,
      12343
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12344,
      12344
    ],
    "mapped",
    [
      21313
    ]
  ],
  [
    [
      12345,
      12345
    ],
    "mapped",
    [
      21316
    ]
  ],
  [
    [
      12346,
      12346
    ],
    "mapped",
    [
      21317
    ]
  ],
  [
    [
      12347,
      12347
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12348,
      12348
    ],
    "valid"
  ],
  [
    [
      12349,
      12349
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12350,
      12350
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12351,
      12351
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12352,
      12352
    ],
    "disallowed"
  ],
  [
    [
      12353,
      12436
    ],
    "valid"
  ],
  [
    [
      12437,
      12438
    ],
    "valid"
  ],
  [
    [
      12439,
      12440
    ],
    "disallowed"
  ],
  [
    [
      12441,
      12442
    ],
    "valid"
  ],
  [
    [
      12443,
      12443
    ],
    "disallowed_STD3_mapped",
    [
      32,
      12441
    ]
  ],
  [
    [
      12444,
      12444
    ],
    "disallowed_STD3_mapped",
    [
      32,
      12442
    ]
  ],
  [
    [
      12445,
      12446
    ],
    "valid"
  ],
  [
    [
      12447,
      12447
    ],
    "mapped",
    [
      12424,
      12426
    ]
  ],
  [
    [
      12448,
      12448
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12449,
      12542
    ],
    "valid"
  ],
  [
    [
      12543,
      12543
    ],
    "mapped",
    [
      12467,
      12488
    ]
  ],
  [
    [
      12544,
      12548
    ],
    "disallowed"
  ],
  [
    [
      12549,
      12588
    ],
    "valid"
  ],
  [
    [
      12589,
      12589
    ],
    "valid"
  ],
  [
    [
      12590,
      12592
    ],
    "disallowed"
  ],
  [
    [
      12593,
      12593
    ],
    "mapped",
    [
      4352
    ]
  ],
  [
    [
      12594,
      12594
    ],
    "mapped",
    [
      4353
    ]
  ],
  [
    [
      12595,
      12595
    ],
    "mapped",
    [
      4522
    ]
  ],
  [
    [
      12596,
      12596
    ],
    "mapped",
    [
      4354
    ]
  ],
  [
    [
      12597,
      12597
    ],
    "mapped",
    [
      4524
    ]
  ],
  [
    [
      12598,
      12598
    ],
    "mapped",
    [
      4525
    ]
  ],
  [
    [
      12599,
      12599
    ],
    "mapped",
    [
      4355
    ]
  ],
  [
    [
      12600,
      12600
    ],
    "mapped",
    [
      4356
    ]
  ],
  [
    [
      12601,
      12601
    ],
    "mapped",
    [
      4357
    ]
  ],
  [
    [
      12602,
      12602
    ],
    "mapped",
    [
      4528
    ]
  ],
  [
    [
      12603,
      12603
    ],
    "mapped",
    [
      4529
    ]
  ],
  [
    [
      12604,
      12604
    ],
    "mapped",
    [
      4530
    ]
  ],
  [
    [
      12605,
      12605
    ],
    "mapped",
    [
      4531
    ]
  ],
  [
    [
      12606,
      12606
    ],
    "mapped",
    [
      4532
    ]
  ],
  [
    [
      12607,
      12607
    ],
    "mapped",
    [
      4533
    ]
  ],
  [
    [
      12608,
      12608
    ],
    "mapped",
    [
      4378
    ]
  ],
  [
    [
      12609,
      12609
    ],
    "mapped",
    [
      4358
    ]
  ],
  [
    [
      12610,
      12610
    ],
    "mapped",
    [
      4359
    ]
  ],
  [
    [
      12611,
      12611
    ],
    "mapped",
    [
      4360
    ]
  ],
  [
    [
      12612,
      12612
    ],
    "mapped",
    [
      4385
    ]
  ],
  [
    [
      12613,
      12613
    ],
    "mapped",
    [
      4361
    ]
  ],
  [
    [
      12614,
      12614
    ],
    "mapped",
    [
      4362
    ]
  ],
  [
    [
      12615,
      12615
    ],
    "mapped",
    [
      4363
    ]
  ],
  [
    [
      12616,
      12616
    ],
    "mapped",
    [
      4364
    ]
  ],
  [
    [
      12617,
      12617
    ],
    "mapped",
    [
      4365
    ]
  ],
  [
    [
      12618,
      12618
    ],
    "mapped",
    [
      4366
    ]
  ],
  [
    [
      12619,
      12619
    ],
    "mapped",
    [
      4367
    ]
  ],
  [
    [
      12620,
      12620
    ],
    "mapped",
    [
      4368
    ]
  ],
  [
    [
      12621,
      12621
    ],
    "mapped",
    [
      4369
    ]
  ],
  [
    [
      12622,
      12622
    ],
    "mapped",
    [
      4370
    ]
  ],
  [
    [
      12623,
      12623
    ],
    "mapped",
    [
      4449
    ]
  ],
  [
    [
      12624,
      12624
    ],
    "mapped",
    [
      4450
    ]
  ],
  [
    [
      12625,
      12625
    ],
    "mapped",
    [
      4451
    ]
  ],
  [
    [
      12626,
      12626
    ],
    "mapped",
    [
      4452
    ]
  ],
  [
    [
      12627,
      12627
    ],
    "mapped",
    [
      4453
    ]
  ],
  [
    [
      12628,
      12628
    ],
    "mapped",
    [
      4454
    ]
  ],
  [
    [
      12629,
      12629
    ],
    "mapped",
    [
      4455
    ]
  ],
  [
    [
      12630,
      12630
    ],
    "mapped",
    [
      4456
    ]
  ],
  [
    [
      12631,
      12631
    ],
    "mapped",
    [
      4457
    ]
  ],
  [
    [
      12632,
      12632
    ],
    "mapped",
    [
      4458
    ]
  ],
  [
    [
      12633,
      12633
    ],
    "mapped",
    [
      4459
    ]
  ],
  [
    [
      12634,
      12634
    ],
    "mapped",
    [
      4460
    ]
  ],
  [
    [
      12635,
      12635
    ],
    "mapped",
    [
      4461
    ]
  ],
  [
    [
      12636,
      12636
    ],
    "mapped",
    [
      4462
    ]
  ],
  [
    [
      12637,
      12637
    ],
    "mapped",
    [
      4463
    ]
  ],
  [
    [
      12638,
      12638
    ],
    "mapped",
    [
      4464
    ]
  ],
  [
    [
      12639,
      12639
    ],
    "mapped",
    [
      4465
    ]
  ],
  [
    [
      12640,
      12640
    ],
    "mapped",
    [
      4466
    ]
  ],
  [
    [
      12641,
      12641
    ],
    "mapped",
    [
      4467
    ]
  ],
  [
    [
      12642,
      12642
    ],
    "mapped",
    [
      4468
    ]
  ],
  [
    [
      12643,
      12643
    ],
    "mapped",
    [
      4469
    ]
  ],
  [
    [
      12644,
      12644
    ],
    "disallowed"
  ],
  [
    [
      12645,
      12645
    ],
    "mapped",
    [
      4372
    ]
  ],
  [
    [
      12646,
      12646
    ],
    "mapped",
    [
      4373
    ]
  ],
  [
    [
      12647,
      12647
    ],
    "mapped",
    [
      4551
    ]
  ],
  [
    [
      12648,
      12648
    ],
    "mapped",
    [
      4552
    ]
  ],
  [
    [
      12649,
      12649
    ],
    "mapped",
    [
      4556
    ]
  ],
  [
    [
      12650,
      12650
    ],
    "mapped",
    [
      4558
    ]
  ],
  [
    [
      12651,
      12651
    ],
    "mapped",
    [
      4563
    ]
  ],
  [
    [
      12652,
      12652
    ],
    "mapped",
    [
      4567
    ]
  ],
  [
    [
      12653,
      12653
    ],
    "mapped",
    [
      4569
    ]
  ],
  [
    [
      12654,
      12654
    ],
    "mapped",
    [
      4380
    ]
  ],
  [
    [
      12655,
      12655
    ],
    "mapped",
    [
      4573
    ]
  ],
  [
    [
      12656,
      12656
    ],
    "mapped",
    [
      4575
    ]
  ],
  [
    [
      12657,
      12657
    ],
    "mapped",
    [
      4381
    ]
  ],
  [
    [
      12658,
      12658
    ],
    "mapped",
    [
      4382
    ]
  ],
  [
    [
      12659,
      12659
    ],
    "mapped",
    [
      4384
    ]
  ],
  [
    [
      12660,
      12660
    ],
    "mapped",
    [
      4386
    ]
  ],
  [
    [
      12661,
      12661
    ],
    "mapped",
    [
      4387
    ]
  ],
  [
    [
      12662,
      12662
    ],
    "mapped",
    [
      4391
    ]
  ],
  [
    [
      12663,
      12663
    ],
    "mapped",
    [
      4393
    ]
  ],
  [
    [
      12664,
      12664
    ],
    "mapped",
    [
      4395
    ]
  ],
  [
    [
      12665,
      12665
    ],
    "mapped",
    [
      4396
    ]
  ],
  [
    [
      12666,
      12666
    ],
    "mapped",
    [
      4397
    ]
  ],
  [
    [
      12667,
      12667
    ],
    "mapped",
    [
      4398
    ]
  ],
  [
    [
      12668,
      12668
    ],
    "mapped",
    [
      4399
    ]
  ],
  [
    [
      12669,
      12669
    ],
    "mapped",
    [
      4402
    ]
  ],
  [
    [
      12670,
      12670
    ],
    "mapped",
    [
      4406
    ]
  ],
  [
    [
      12671,
      12671
    ],
    "mapped",
    [
      4416
    ]
  ],
  [
    [
      12672,
      12672
    ],
    "mapped",
    [
      4423
    ]
  ],
  [
    [
      12673,
      12673
    ],
    "mapped",
    [
      4428
    ]
  ],
  [
    [
      12674,
      12674
    ],
    "mapped",
    [
      4593
    ]
  ],
  [
    [
      12675,
      12675
    ],
    "mapped",
    [
      4594
    ]
  ],
  [
    [
      12676,
      12676
    ],
    "mapped",
    [
      4439
    ]
  ],
  [
    [
      12677,
      12677
    ],
    "mapped",
    [
      4440
    ]
  ],
  [
    [
      12678,
      12678
    ],
    "mapped",
    [
      4441
    ]
  ],
  [
    [
      12679,
      12679
    ],
    "mapped",
    [
      4484
    ]
  ],
  [
    [
      12680,
      12680
    ],
    "mapped",
    [
      4485
    ]
  ],
  [
    [
      12681,
      12681
    ],
    "mapped",
    [
      4488
    ]
  ],
  [
    [
      12682,
      12682
    ],
    "mapped",
    [
      4497
    ]
  ],
  [
    [
      12683,
      12683
    ],
    "mapped",
    [
      4498
    ]
  ],
  [
    [
      12684,
      12684
    ],
    "mapped",
    [
      4500
    ]
  ],
  [
    [
      12685,
      12685
    ],
    "mapped",
    [
      4510
    ]
  ],
  [
    [
      12686,
      12686
    ],
    "mapped",
    [
      4513
    ]
  ],
  [
    [
      12687,
      12687
    ],
    "disallowed"
  ],
  [
    [
      12688,
      12689
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12690,
      12690
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      12691,
      12691
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      12692,
      12692
    ],
    "mapped",
    [
      19977
    ]
  ],
  [
    [
      12693,
      12693
    ],
    "mapped",
    [
      22235
    ]
  ],
  [
    [
      12694,
      12694
    ],
    "mapped",
    [
      19978
    ]
  ],
  [
    [
      12695,
      12695
    ],
    "mapped",
    [
      20013
    ]
  ],
  [
    [
      12696,
      12696
    ],
    "mapped",
    [
      19979
    ]
  ],
  [
    [
      12697,
      12697
    ],
    "mapped",
    [
      30002
    ]
  ],
  [
    [
      12698,
      12698
    ],
    "mapped",
    [
      20057
    ]
  ],
  [
    [
      12699,
      12699
    ],
    "mapped",
    [
      19993
    ]
  ],
  [
    [
      12700,
      12700
    ],
    "mapped",
    [
      19969
    ]
  ],
  [
    [
      12701,
      12701
    ],
    "mapped",
    [
      22825
    ]
  ],
  [
    [
      12702,
      12702
    ],
    "mapped",
    [
      22320
    ]
  ],
  [
    [
      12703,
      12703
    ],
    "mapped",
    [
      20154
    ]
  ],
  [
    [
      12704,
      12727
    ],
    "valid"
  ],
  [
    [
      12728,
      12730
    ],
    "valid"
  ],
  [
    [
      12731,
      12735
    ],
    "disallowed"
  ],
  [
    [
      12736,
      12751
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12752,
      12771
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12772,
      12783
    ],
    "disallowed"
  ],
  [
    [
      12784,
      12799
    ],
    "valid"
  ],
  [
    [
      12800,
      12800
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4352,
      41
    ]
  ],
  [
    [
      12801,
      12801
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4354,
      41
    ]
  ],
  [
    [
      12802,
      12802
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4355,
      41
    ]
  ],
  [
    [
      12803,
      12803
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4357,
      41
    ]
  ],
  [
    [
      12804,
      12804
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4358,
      41
    ]
  ],
  [
    [
      12805,
      12805
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4359,
      41
    ]
  ],
  [
    [
      12806,
      12806
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4361,
      41
    ]
  ],
  [
    [
      12807,
      12807
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4363,
      41
    ]
  ],
  [
    [
      12808,
      12808
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4364,
      41
    ]
  ],
  [
    [
      12809,
      12809
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4366,
      41
    ]
  ],
  [
    [
      12810,
      12810
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4367,
      41
    ]
  ],
  [
    [
      12811,
      12811
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4368,
      41
    ]
  ],
  [
    [
      12812,
      12812
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4369,
      41
    ]
  ],
  [
    [
      12813,
      12813
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4370,
      41
    ]
  ],
  [
    [
      12814,
      12814
    ],
    "disallowed_STD3_mapped",
    [
      40,
      44032,
      41
    ]
  ],
  [
    [
      12815,
      12815
    ],
    "disallowed_STD3_mapped",
    [
      40,
      45208,
      41
    ]
  ],
  [
    [
      12816,
      12816
    ],
    "disallowed_STD3_mapped",
    [
      40,
      45796,
      41
    ]
  ],
  [
    [
      12817,
      12817
    ],
    "disallowed_STD3_mapped",
    [
      40,
      46972,
      41
    ]
  ],
  [
    [
      12818,
      12818
    ],
    "disallowed_STD3_mapped",
    [
      40,
      47560,
      41
    ]
  ],
  [
    [
      12819,
      12819
    ],
    "disallowed_STD3_mapped",
    [
      40,
      48148,
      41
    ]
  ],
  [
    [
      12820,
      12820
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49324,
      41
    ]
  ],
  [
    [
      12821,
      12821
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50500,
      41
    ]
  ],
  [
    [
      12822,
      12822
    ],
    "disallowed_STD3_mapped",
    [
      40,
      51088,
      41
    ]
  ],
  [
    [
      12823,
      12823
    ],
    "disallowed_STD3_mapped",
    [
      40,
      52264,
      41
    ]
  ],
  [
    [
      12824,
      12824
    ],
    "disallowed_STD3_mapped",
    [
      40,
      52852,
      41
    ]
  ],
  [
    [
      12825,
      12825
    ],
    "disallowed_STD3_mapped",
    [
      40,
      53440,
      41
    ]
  ],
  [
    [
      12826,
      12826
    ],
    "disallowed_STD3_mapped",
    [
      40,
      54028,
      41
    ]
  ],
  [
    [
      12827,
      12827
    ],
    "disallowed_STD3_mapped",
    [
      40,
      54616,
      41
    ]
  ],
  [
    [
      12828,
      12828
    ],
    "disallowed_STD3_mapped",
    [
      40,
      51452,
      41
    ]
  ],
  [
    [
      12829,
      12829
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50724,
      51204,
      41
    ]
  ],
  [
    [
      12830,
      12830
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50724,
      54980,
      41
    ]
  ],
  [
    [
      12831,
      12831
    ],
    "disallowed"
  ],
  [
    [
      12832,
      12832
    ],
    "disallowed_STD3_mapped",
    [
      40,
      19968,
      41
    ]
  ],
  [
    [
      12833,
      12833
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20108,
      41
    ]
  ],
  [
    [
      12834,
      12834
    ],
    "disallowed_STD3_mapped",
    [
      40,
      19977,
      41
    ]
  ],
  [
    [
      12835,
      12835
    ],
    "disallowed_STD3_mapped",
    [
      40,
      22235,
      41
    ]
  ],
  [
    [
      12836,
      12836
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20116,
      41
    ]
  ],
  [
    [
      12837,
      12837
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20845,
      41
    ]
  ],
  [
    [
      12838,
      12838
    ],
    "disallowed_STD3_mapped",
    [
      40,
      19971,
      41
    ]
  ],
  [
    [
      12839,
      12839
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20843,
      41
    ]
  ],
  [
    [
      12840,
      12840
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20061,
      41
    ]
  ],
  [
    [
      12841,
      12841
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21313,
      41
    ]
  ],
  [
    [
      12842,
      12842
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26376,
      41
    ]
  ],
  [
    [
      12843,
      12843
    ],
    "disallowed_STD3_mapped",
    [
      40,
      28779,
      41
    ]
  ],
  [
    [
      12844,
      12844
    ],
    "disallowed_STD3_mapped",
    [
      40,
      27700,
      41
    ]
  ],
  [
    [
      12845,
      12845
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26408,
      41
    ]
  ],
  [
    [
      12846,
      12846
    ],
    "disallowed_STD3_mapped",
    [
      40,
      37329,
      41
    ]
  ],
  [
    [
      12847,
      12847
    ],
    "disallowed_STD3_mapped",
    [
      40,
      22303,
      41
    ]
  ],
  [
    [
      12848,
      12848
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26085,
      41
    ]
  ],
  [
    [
      12849,
      12849
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26666,
      41
    ]
  ],
  [
    [
      12850,
      12850
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26377,
      41
    ]
  ],
  [
    [
      12851,
      12851
    ],
    "disallowed_STD3_mapped",
    [
      40,
      31038,
      41
    ]
  ],
  [
    [
      12852,
      12852
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21517,
      41
    ]
  ],
  [
    [
      12853,
      12853
    ],
    "disallowed_STD3_mapped",
    [
      40,
      29305,
      41
    ]
  ],
  [
    [
      12854,
      12854
    ],
    "disallowed_STD3_mapped",
    [
      40,
      36001,
      41
    ]
  ],
  [
    [
      12855,
      12855
    ],
    "disallowed_STD3_mapped",
    [
      40,
      31069,
      41
    ]
  ],
  [
    [
      12856,
      12856
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21172,
      41
    ]
  ],
  [
    [
      12857,
      12857
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20195,
      41
    ]
  ],
  [
    [
      12858,
      12858
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21628,
      41
    ]
  ],
  [
    [
      12859,
      12859
    ],
    "disallowed_STD3_mapped",
    [
      40,
      23398,
      41
    ]
  ],
  [
    [
      12860,
      12860
    ],
    "disallowed_STD3_mapped",
    [
      40,
      30435,
      41
    ]
  ],
  [
    [
      12861,
      12861
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20225,
      41
    ]
  ],
  [
    [
      12862,
      12862
    ],
    "disallowed_STD3_mapped",
    [
      40,
      36039,
      41
    ]
  ],
  [
    [
      12863,
      12863
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21332,
      41
    ]
  ],
  [
    [
      12864,
      12864
    ],
    "disallowed_STD3_mapped",
    [
      40,
      31085,
      41
    ]
  ],
  [
    [
      12865,
      12865
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20241,
      41
    ]
  ],
  [
    [
      12866,
      12866
    ],
    "disallowed_STD3_mapped",
    [
      40,
      33258,
      41
    ]
  ],
  [
    [
      12867,
      12867
    ],
    "disallowed_STD3_mapped",
    [
      40,
      33267,
      41
    ]
  ],
  [
    [
      12868,
      12868
    ],
    "mapped",
    [
      21839
    ]
  ],
  [
    [
      12869,
      12869
    ],
    "mapped",
    [
      24188
    ]
  ],
  [
    [
      12870,
      12870
    ],
    "mapped",
    [
      25991
    ]
  ],
  [
    [
      12871,
      12871
    ],
    "mapped",
    [
      31631
    ]
  ],
  [
    [
      12872,
      12879
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12880,
      12880
    ],
    "mapped",
    [
      112,
      116,
      101
    ]
  ],
  [
    [
      12881,
      12881
    ],
    "mapped",
    [
      50,
      49
    ]
  ],
  [
    [
      12882,
      12882
    ],
    "mapped",
    [
      50,
      50
    ]
  ],
  [
    [
      12883,
      12883
    ],
    "mapped",
    [
      50,
      51
    ]
  ],
  [
    [
      12884,
      12884
    ],
    "mapped",
    [
      50,
      52
    ]
  ],
  [
    [
      12885,
      12885
    ],
    "mapped",
    [
      50,
      53
    ]
  ],
  [
    [
      12886,
      12886
    ],
    "mapped",
    [
      50,
      54
    ]
  ],
  [
    [
      12887,
      12887
    ],
    "mapped",
    [
      50,
      55
    ]
  ],
  [
    [
      12888,
      12888
    ],
    "mapped",
    [
      50,
      56
    ]
  ],
  [
    [
      12889,
      12889
    ],
    "mapped",
    [
      50,
      57
    ]
  ],
  [
    [
      12890,
      12890
    ],
    "mapped",
    [
      51,
      48
    ]
  ],
  [
    [
      12891,
      12891
    ],
    "mapped",
    [
      51,
      49
    ]
  ],
  [
    [
      12892,
      12892
    ],
    "mapped",
    [
      51,
      50
    ]
  ],
  [
    [
      12893,
      12893
    ],
    "mapped",
    [
      51,
      51
    ]
  ],
  [
    [
      12894,
      12894
    ],
    "mapped",
    [
      51,
      52
    ]
  ],
  [
    [
      12895,
      12895
    ],
    "mapped",
    [
      51,
      53
    ]
  ],
  [
    [
      12896,
      12896
    ],
    "mapped",
    [
      4352
    ]
  ],
  [
    [
      12897,
      12897
    ],
    "mapped",
    [
      4354
    ]
  ],
  [
    [
      12898,
      12898
    ],
    "mapped",
    [
      4355
    ]
  ],
  [
    [
      12899,
      12899
    ],
    "mapped",
    [
      4357
    ]
  ],
  [
    [
      12900,
      12900
    ],
    "mapped",
    [
      4358
    ]
  ],
  [
    [
      12901,
      12901
    ],
    "mapped",
    [
      4359
    ]
  ],
  [
    [
      12902,
      12902
    ],
    "mapped",
    [
      4361
    ]
  ],
  [
    [
      12903,
      12903
    ],
    "mapped",
    [
      4363
    ]
  ],
  [
    [
      12904,
      12904
    ],
    "mapped",
    [
      4364
    ]
  ],
  [
    [
      12905,
      12905
    ],
    "mapped",
    [
      4366
    ]
  ],
  [
    [
      12906,
      12906
    ],
    "mapped",
    [
      4367
    ]
  ],
  [
    [
      12907,
      12907
    ],
    "mapped",
    [
      4368
    ]
  ],
  [
    [
      12908,
      12908
    ],
    "mapped",
    [
      4369
    ]
  ],
  [
    [
      12909,
      12909
    ],
    "mapped",
    [
      4370
    ]
  ],
  [
    [
      12910,
      12910
    ],
    "mapped",
    [
      44032
    ]
  ],
  [
    [
      12911,
      12911
    ],
    "mapped",
    [
      45208
    ]
  ],
  [
    [
      12912,
      12912
    ],
    "mapped",
    [
      45796
    ]
  ],
  [
    [
      12913,
      12913
    ],
    "mapped",
    [
      46972
    ]
  ],
  [
    [
      12914,
      12914
    ],
    "mapped",
    [
      47560
    ]
  ],
  [
    [
      12915,
      12915
    ],
    "mapped",
    [
      48148
    ]
  ],
  [
    [
      12916,
      12916
    ],
    "mapped",
    [
      49324
    ]
  ],
  [
    [
      12917,
      12917
    ],
    "mapped",
    [
      50500
    ]
  ],
  [
    [
      12918,
      12918
    ],
    "mapped",
    [
      51088
    ]
  ],
  [
    [
      12919,
      12919
    ],
    "mapped",
    [
      52264
    ]
  ],
  [
    [
      12920,
      12920
    ],
    "mapped",
    [
      52852
    ]
  ],
  [
    [
      12921,
      12921
    ],
    "mapped",
    [
      53440
    ]
  ],
  [
    [
      12922,
      12922
    ],
    "mapped",
    [
      54028
    ]
  ],
  [
    [
      12923,
      12923
    ],
    "mapped",
    [
      54616
    ]
  ],
  [
    [
      12924,
      12924
    ],
    "mapped",
    [
      52280,
      44256
    ]
  ],
  [
    [
      12925,
      12925
    ],
    "mapped",
    [
      51452,
      51032
    ]
  ],
  [
    [
      12926,
      12926
    ],
    "mapped",
    [
      50864
    ]
  ],
  [
    [
      12927,
      12927
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12928,
      12928
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      12929,
      12929
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      12930,
      12930
    ],
    "mapped",
    [
      19977
    ]
  ],
  [
    [
      12931,
      12931
    ],
    "mapped",
    [
      22235
    ]
  ],
  [
    [
      12932,
      12932
    ],
    "mapped",
    [
      20116
    ]
  ],
  [
    [
      12933,
      12933
    ],
    "mapped",
    [
      20845
    ]
  ],
  [
    [
      12934,
      12934
    ],
    "mapped",
    [
      19971
    ]
  ],
  [
    [
      12935,
      12935
    ],
    "mapped",
    [
      20843
    ]
  ],
  [
    [
      12936,
      12936
    ],
    "mapped",
    [
      20061
    ]
  ],
  [
    [
      12937,
      12937
    ],
    "mapped",
    [
      21313
    ]
  ],
  [
    [
      12938,
      12938
    ],
    "mapped",
    [
      26376
    ]
  ],
  [
    [
      12939,
      12939
    ],
    "mapped",
    [
      28779
    ]
  ],
  [
    [
      12940,
      12940
    ],
    "mapped",
    [
      27700
    ]
  ],
  [
    [
      12941,
      12941
    ],
    "mapped",
    [
      26408
    ]
  ],
  [
    [
      12942,
      12942
    ],
    "mapped",
    [
      37329
    ]
  ],
  [
    [
      12943,
      12943
    ],
    "mapped",
    [
      22303
    ]
  ],
  [
    [
      12944,
      12944
    ],
    "mapped",
    [
      26085
    ]
  ],
  [
    [
      12945,
      12945
    ],
    "mapped",
    [
      26666
    ]
  ],
  [
    [
      12946,
      12946
    ],
    "mapped",
    [
      26377
    ]
  ],
  [
    [
      12947,
      12947
    ],
    "mapped",
    [
      31038
    ]
  ],
  [
    [
      12948,
      12948
    ],
    "mapped",
    [
      21517
    ]
  ],
  [
    [
      12949,
      12949
    ],
    "mapped",
    [
      29305
    ]
  ],
  [
    [
      12950,
      12950
    ],
    "mapped",
    [
      36001
    ]
  ],
  [
    [
      12951,
      12951
    ],
    "mapped",
    [
      31069
    ]
  ],
  [
    [
      12952,
      12952
    ],
    "mapped",
    [
      21172
    ]
  ],
  [
    [
      12953,
      12953
    ],
    "mapped",
    [
      31192
    ]
  ],
  [
    [
      12954,
      12954
    ],
    "mapped",
    [
      30007
    ]
  ],
  [
    [
      12955,
      12955
    ],
    "mapped",
    [
      22899
    ]
  ],
  [
    [
      12956,
      12956
    ],
    "mapped",
    [
      36969
    ]
  ],
  [
    [
      12957,
      12957
    ],
    "mapped",
    [
      20778
    ]
  ],
  [
    [
      12958,
      12958
    ],
    "mapped",
    [
      21360
    ]
  ],
  [
    [
      12959,
      12959
    ],
    "mapped",
    [
      27880
    ]
  ],
  [
    [
      12960,
      12960
    ],
    "mapped",
    [
      38917
    ]
  ],
  [
    [
      12961,
      12961
    ],
    "mapped",
    [
      20241
    ]
  ],
  [
    [
      12962,
      12962
    ],
    "mapped",
    [
      20889
    ]
  ],
  [
    [
      12963,
      12963
    ],
    "mapped",
    [
      27491
    ]
  ],
  [
    [
      12964,
      12964
    ],
    "mapped",
    [
      19978
    ]
  ],
  [
    [
      12965,
      12965
    ],
    "mapped",
    [
      20013
    ]
  ],
  [
    [
      12966,
      12966
    ],
    "mapped",
    [
      19979
    ]
  ],
  [
    [
      12967,
      12967
    ],
    "mapped",
    [
      24038
    ]
  ],
  [
    [
      12968,
      12968
    ],
    "mapped",
    [
      21491
    ]
  ],
  [
    [
      12969,
      12969
    ],
    "mapped",
    [
      21307
    ]
  ],
  [
    [
      12970,
      12970
    ],
    "mapped",
    [
      23447
    ]
  ],
  [
    [
      12971,
      12971
    ],
    "mapped",
    [
      23398
    ]
  ],
  [
    [
      12972,
      12972
    ],
    "mapped",
    [
      30435
    ]
  ],
  [
    [
      12973,
      12973
    ],
    "mapped",
    [
      20225
    ]
  ],
  [
    [
      12974,
      12974
    ],
    "mapped",
    [
      36039
    ]
  ],
  [
    [
      12975,
      12975
    ],
    "mapped",
    [
      21332
    ]
  ],
  [
    [
      12976,
      12976
    ],
    "mapped",
    [
      22812
    ]
  ],
  [
    [
      12977,
      12977
    ],
    "mapped",
    [
      51,
      54
    ]
  ],
  [
    [
      12978,
      12978
    ],
    "mapped",
    [
      51,
      55
    ]
  ],
  [
    [
      12979,
      12979
    ],
    "mapped",
    [
      51,
      56
    ]
  ],
  [
    [
      12980,
      12980
    ],
    "mapped",
    [
      51,
      57
    ]
  ],
  [
    [
      12981,
      12981
    ],
    "mapped",
    [
      52,
      48
    ]
  ],
  [
    [
      12982,
      12982
    ],
    "mapped",
    [
      52,
      49
    ]
  ],
  [
    [
      12983,
      12983
    ],
    "mapped",
    [
      52,
      50
    ]
  ],
  [
    [
      12984,
      12984
    ],
    "mapped",
    [
      52,
      51
    ]
  ],
  [
    [
      12985,
      12985
    ],
    "mapped",
    [
      52,
      52
    ]
  ],
  [
    [
      12986,
      12986
    ],
    "mapped",
    [
      52,
      53
    ]
  ],
  [
    [
      12987,
      12987
    ],
    "mapped",
    [
      52,
      54
    ]
  ],
  [
    [
      12988,
      12988
    ],
    "mapped",
    [
      52,
      55
    ]
  ],
  [
    [
      12989,
      12989
    ],
    "mapped",
    [
      52,
      56
    ]
  ],
  [
    [
      12990,
      12990
    ],
    "mapped",
    [
      52,
      57
    ]
  ],
  [
    [
      12991,
      12991
    ],
    "mapped",
    [
      53,
      48
    ]
  ],
  [
    [
      12992,
      12992
    ],
    "mapped",
    [
      49,
      26376
    ]
  ],
  [
    [
      12993,
      12993
    ],
    "mapped",
    [
      50,
      26376
    ]
  ],
  [
    [
      12994,
      12994
    ],
    "mapped",
    [
      51,
      26376
    ]
  ],
  [
    [
      12995,
      12995
    ],
    "mapped",
    [
      52,
      26376
    ]
  ],
  [
    [
      12996,
      12996
    ],
    "mapped",
    [
      53,
      26376
    ]
  ],
  [
    [
      12997,
      12997
    ],
    "mapped",
    [
      54,
      26376
    ]
  ],
  [
    [
      12998,
      12998
    ],
    "mapped",
    [
      55,
      26376
    ]
  ],
  [
    [
      12999,
      12999
    ],
    "mapped",
    [
      56,
      26376
    ]
  ],
  [
    [
      13e3,
      13e3
    ],
    "mapped",
    [
      57,
      26376
    ]
  ],
  [
    [
      13001,
      13001
    ],
    "mapped",
    [
      49,
      48,
      26376
    ]
  ],
  [
    [
      13002,
      13002
    ],
    "mapped",
    [
      49,
      49,
      26376
    ]
  ],
  [
    [
      13003,
      13003
    ],
    "mapped",
    [
      49,
      50,
      26376
    ]
  ],
  [
    [
      13004,
      13004
    ],
    "mapped",
    [
      104,
      103
    ]
  ],
  [
    [
      13005,
      13005
    ],
    "mapped",
    [
      101,
      114,
      103
    ]
  ],
  [
    [
      13006,
      13006
    ],
    "mapped",
    [
      101,
      118
    ]
  ],
  [
    [
      13007,
      13007
    ],
    "mapped",
    [
      108,
      116,
      100
    ]
  ],
  [
    [
      13008,
      13008
    ],
    "mapped",
    [
      12450
    ]
  ],
  [
    [
      13009,
      13009
    ],
    "mapped",
    [
      12452
    ]
  ],
  [
    [
      13010,
      13010
    ],
    "mapped",
    [
      12454
    ]
  ],
  [
    [
      13011,
      13011
    ],
    "mapped",
    [
      12456
    ]
  ],
  [
    [
      13012,
      13012
    ],
    "mapped",
    [
      12458
    ]
  ],
  [
    [
      13013,
      13013
    ],
    "mapped",
    [
      12459
    ]
  ],
  [
    [
      13014,
      13014
    ],
    "mapped",
    [
      12461
    ]
  ],
  [
    [
      13015,
      13015
    ],
    "mapped",
    [
      12463
    ]
  ],
  [
    [
      13016,
      13016
    ],
    "mapped",
    [
      12465
    ]
  ],
  [
    [
      13017,
      13017
    ],
    "mapped",
    [
      12467
    ]
  ],
  [
    [
      13018,
      13018
    ],
    "mapped",
    [
      12469
    ]
  ],
  [
    [
      13019,
      13019
    ],
    "mapped",
    [
      12471
    ]
  ],
  [
    [
      13020,
      13020
    ],
    "mapped",
    [
      12473
    ]
  ],
  [
    [
      13021,
      13021
    ],
    "mapped",
    [
      12475
    ]
  ],
  [
    [
      13022,
      13022
    ],
    "mapped",
    [
      12477
    ]
  ],
  [
    [
      13023,
      13023
    ],
    "mapped",
    [
      12479
    ]
  ],
  [
    [
      13024,
      13024
    ],
    "mapped",
    [
      12481
    ]
  ],
  [
    [
      13025,
      13025
    ],
    "mapped",
    [
      12484
    ]
  ],
  [
    [
      13026,
      13026
    ],
    "mapped",
    [
      12486
    ]
  ],
  [
    [
      13027,
      13027
    ],
    "mapped",
    [
      12488
    ]
  ],
  [
    [
      13028,
      13028
    ],
    "mapped",
    [
      12490
    ]
  ],
  [
    [
      13029,
      13029
    ],
    "mapped",
    [
      12491
    ]
  ],
  [
    [
      13030,
      13030
    ],
    "mapped",
    [
      12492
    ]
  ],
  [
    [
      13031,
      13031
    ],
    "mapped",
    [
      12493
    ]
  ],
  [
    [
      13032,
      13032
    ],
    "mapped",
    [
      12494
    ]
  ],
  [
    [
      13033,
      13033
    ],
    "mapped",
    [
      12495
    ]
  ],
  [
    [
      13034,
      13034
    ],
    "mapped",
    [
      12498
    ]
  ],
  [
    [
      13035,
      13035
    ],
    "mapped",
    [
      12501
    ]
  ],
  [
    [
      13036,
      13036
    ],
    "mapped",
    [
      12504
    ]
  ],
  [
    [
      13037,
      13037
    ],
    "mapped",
    [
      12507
    ]
  ],
  [
    [
      13038,
      13038
    ],
    "mapped",
    [
      12510
    ]
  ],
  [
    [
      13039,
      13039
    ],
    "mapped",
    [
      12511
    ]
  ],
  [
    [
      13040,
      13040
    ],
    "mapped",
    [
      12512
    ]
  ],
  [
    [
      13041,
      13041
    ],
    "mapped",
    [
      12513
    ]
  ],
  [
    [
      13042,
      13042
    ],
    "mapped",
    [
      12514
    ]
  ],
  [
    [
      13043,
      13043
    ],
    "mapped",
    [
      12516
    ]
  ],
  [
    [
      13044,
      13044
    ],
    "mapped",
    [
      12518
    ]
  ],
  [
    [
      13045,
      13045
    ],
    "mapped",
    [
      12520
    ]
  ],
  [
    [
      13046,
      13046
    ],
    "mapped",
    [
      12521
    ]
  ],
  [
    [
      13047,
      13047
    ],
    "mapped",
    [
      12522
    ]
  ],
  [
    [
      13048,
      13048
    ],
    "mapped",
    [
      12523
    ]
  ],
  [
    [
      13049,
      13049
    ],
    "mapped",
    [
      12524
    ]
  ],
  [
    [
      13050,
      13050
    ],
    "mapped",
    [
      12525
    ]
  ],
  [
    [
      13051,
      13051
    ],
    "mapped",
    [
      12527
    ]
  ],
  [
    [
      13052,
      13052
    ],
    "mapped",
    [
      12528
    ]
  ],
  [
    [
      13053,
      13053
    ],
    "mapped",
    [
      12529
    ]
  ],
  [
    [
      13054,
      13054
    ],
    "mapped",
    [
      12530
    ]
  ],
  [
    [
      13055,
      13055
    ],
    "disallowed"
  ],
  [
    [
      13056,
      13056
    ],
    "mapped",
    [
      12450,
      12497,
      12540,
      12488
    ]
  ],
  [
    [
      13057,
      13057
    ],
    "mapped",
    [
      12450,
      12523,
      12501,
      12449
    ]
  ],
  [
    [
      13058,
      13058
    ],
    "mapped",
    [
      12450,
      12531,
      12506,
      12450
    ]
  ],
  [
    [
      13059,
      13059
    ],
    "mapped",
    [
      12450,
      12540,
      12523
    ]
  ],
  [
    [
      13060,
      13060
    ],
    "mapped",
    [
      12452,
      12491,
      12531,
      12464
    ]
  ],
  [
    [
      13061,
      13061
    ],
    "mapped",
    [
      12452,
      12531,
      12481
    ]
  ],
  [
    [
      13062,
      13062
    ],
    "mapped",
    [
      12454,
      12457,
      12531
    ]
  ],
  [
    [
      13063,
      13063
    ],
    "mapped",
    [
      12456,
      12473,
      12463,
      12540,
      12489
    ]
  ],
  [
    [
      13064,
      13064
    ],
    "mapped",
    [
      12456,
      12540,
      12459,
      12540
    ]
  ],
  [
    [
      13065,
      13065
    ],
    "mapped",
    [
      12458,
      12531,
      12473
    ]
  ],
  [
    [
      13066,
      13066
    ],
    "mapped",
    [
      12458,
      12540,
      12512
    ]
  ],
  [
    [
      13067,
      13067
    ],
    "mapped",
    [
      12459,
      12452,
      12522
    ]
  ],
  [
    [
      13068,
      13068
    ],
    "mapped",
    [
      12459,
      12521,
      12483,
      12488
    ]
  ],
  [
    [
      13069,
      13069
    ],
    "mapped",
    [
      12459,
      12525,
      12522,
      12540
    ]
  ],
  [
    [
      13070,
      13070
    ],
    "mapped",
    [
      12460,
      12525,
      12531
    ]
  ],
  [
    [
      13071,
      13071
    ],
    "mapped",
    [
      12460,
      12531,
      12510
    ]
  ],
  [
    [
      13072,
      13072
    ],
    "mapped",
    [
      12462,
      12460
    ]
  ],
  [
    [
      13073,
      13073
    ],
    "mapped",
    [
      12462,
      12491,
      12540
    ]
  ],
  [
    [
      13074,
      13074
    ],
    "mapped",
    [
      12461,
      12517,
      12522,
      12540
    ]
  ],
  [
    [
      13075,
      13075
    ],
    "mapped",
    [
      12462,
      12523,
      12480,
      12540
    ]
  ],
  [
    [
      13076,
      13076
    ],
    "mapped",
    [
      12461,
      12525
    ]
  ],
  [
    [
      13077,
      13077
    ],
    "mapped",
    [
      12461,
      12525,
      12464,
      12521,
      12512
    ]
  ],
  [
    [
      13078,
      13078
    ],
    "mapped",
    [
      12461,
      12525,
      12513,
      12540,
      12488,
      12523
    ]
  ],
  [
    [
      13079,
      13079
    ],
    "mapped",
    [
      12461,
      12525,
      12527,
      12483,
      12488
    ]
  ],
  [
    [
      13080,
      13080
    ],
    "mapped",
    [
      12464,
      12521,
      12512
    ]
  ],
  [
    [
      13081,
      13081
    ],
    "mapped",
    [
      12464,
      12521,
      12512,
      12488,
      12531
    ]
  ],
  [
    [
      13082,
      13082
    ],
    "mapped",
    [
      12463,
      12523,
      12476,
      12452,
      12525
    ]
  ],
  [
    [
      13083,
      13083
    ],
    "mapped",
    [
      12463,
      12525,
      12540,
      12493
    ]
  ],
  [
    [
      13084,
      13084
    ],
    "mapped",
    [
      12465,
      12540,
      12473
    ]
  ],
  [
    [
      13085,
      13085
    ],
    "mapped",
    [
      12467,
      12523,
      12490
    ]
  ],
  [
    [
      13086,
      13086
    ],
    "mapped",
    [
      12467,
      12540,
      12509
    ]
  ],
  [
    [
      13087,
      13087
    ],
    "mapped",
    [
      12469,
      12452,
      12463,
      12523
    ]
  ],
  [
    [
      13088,
      13088
    ],
    "mapped",
    [
      12469,
      12531,
      12481,
      12540,
      12512
    ]
  ],
  [
    [
      13089,
      13089
    ],
    "mapped",
    [
      12471,
      12522,
      12531,
      12464
    ]
  ],
  [
    [
      13090,
      13090
    ],
    "mapped",
    [
      12475,
      12531,
      12481
    ]
  ],
  [
    [
      13091,
      13091
    ],
    "mapped",
    [
      12475,
      12531,
      12488
    ]
  ],
  [
    [
      13092,
      13092
    ],
    "mapped",
    [
      12480,
      12540,
      12473
    ]
  ],
  [
    [
      13093,
      13093
    ],
    "mapped",
    [
      12487,
      12471
    ]
  ],
  [
    [
      13094,
      13094
    ],
    "mapped",
    [
      12489,
      12523
    ]
  ],
  [
    [
      13095,
      13095
    ],
    "mapped",
    [
      12488,
      12531
    ]
  ],
  [
    [
      13096,
      13096
    ],
    "mapped",
    [
      12490,
      12494
    ]
  ],
  [
    [
      13097,
      13097
    ],
    "mapped",
    [
      12494,
      12483,
      12488
    ]
  ],
  [
    [
      13098,
      13098
    ],
    "mapped",
    [
      12495,
      12452,
      12484
    ]
  ],
  [
    [
      13099,
      13099
    ],
    "mapped",
    [
      12497,
      12540,
      12475,
      12531,
      12488
    ]
  ],
  [
    [
      13100,
      13100
    ],
    "mapped",
    [
      12497,
      12540,
      12484
    ]
  ],
  [
    [
      13101,
      13101
    ],
    "mapped",
    [
      12496,
      12540,
      12524,
      12523
    ]
  ],
  [
    [
      13102,
      13102
    ],
    "mapped",
    [
      12500,
      12450,
      12473,
      12488,
      12523
    ]
  ],
  [
    [
      13103,
      13103
    ],
    "mapped",
    [
      12500,
      12463,
      12523
    ]
  ],
  [
    [
      13104,
      13104
    ],
    "mapped",
    [
      12500,
      12467
    ]
  ],
  [
    [
      13105,
      13105
    ],
    "mapped",
    [
      12499,
      12523
    ]
  ],
  [
    [
      13106,
      13106
    ],
    "mapped",
    [
      12501,
      12449,
      12521,
      12483,
      12489
    ]
  ],
  [
    [
      13107,
      13107
    ],
    "mapped",
    [
      12501,
      12451,
      12540,
      12488
    ]
  ],
  [
    [
      13108,
      13108
    ],
    "mapped",
    [
      12502,
      12483,
      12471,
      12455,
      12523
    ]
  ],
  [
    [
      13109,
      13109
    ],
    "mapped",
    [
      12501,
      12521,
      12531
    ]
  ],
  [
    [
      13110,
      13110
    ],
    "mapped",
    [
      12504,
      12463,
      12479,
      12540,
      12523
    ]
  ],
  [
    [
      13111,
      13111
    ],
    "mapped",
    [
      12506,
      12477
    ]
  ],
  [
    [
      13112,
      13112
    ],
    "mapped",
    [
      12506,
      12491,
      12498
    ]
  ],
  [
    [
      13113,
      13113
    ],
    "mapped",
    [
      12504,
      12523,
      12484
    ]
  ],
  [
    [
      13114,
      13114
    ],
    "mapped",
    [
      12506,
      12531,
      12473
    ]
  ],
  [
    [
      13115,
      13115
    ],
    "mapped",
    [
      12506,
      12540,
      12472
    ]
  ],
  [
    [
      13116,
      13116
    ],
    "mapped",
    [
      12505,
      12540,
      12479
    ]
  ],
  [
    [
      13117,
      13117
    ],
    "mapped",
    [
      12509,
      12452,
      12531,
      12488
    ]
  ],
  [
    [
      13118,
      13118
    ],
    "mapped",
    [
      12508,
      12523,
      12488
    ]
  ],
  [
    [
      13119,
      13119
    ],
    "mapped",
    [
      12507,
      12531
    ]
  ],
  [
    [
      13120,
      13120
    ],
    "mapped",
    [
      12509,
      12531,
      12489
    ]
  ],
  [
    [
      13121,
      13121
    ],
    "mapped",
    [
      12507,
      12540,
      12523
    ]
  ],
  [
    [
      13122,
      13122
    ],
    "mapped",
    [
      12507,
      12540,
      12531
    ]
  ],
  [
    [
      13123,
      13123
    ],
    "mapped",
    [
      12510,
      12452,
      12463,
      12525
    ]
  ],
  [
    [
      13124,
      13124
    ],
    "mapped",
    [
      12510,
      12452,
      12523
    ]
  ],
  [
    [
      13125,
      13125
    ],
    "mapped",
    [
      12510,
      12483,
      12495
    ]
  ],
  [
    [
      13126,
      13126
    ],
    "mapped",
    [
      12510,
      12523,
      12463
    ]
  ],
  [
    [
      13127,
      13127
    ],
    "mapped",
    [
      12510,
      12531,
      12471,
      12519,
      12531
    ]
  ],
  [
    [
      13128,
      13128
    ],
    "mapped",
    [
      12511,
      12463,
      12525,
      12531
    ]
  ],
  [
    [
      13129,
      13129
    ],
    "mapped",
    [
      12511,
      12522
    ]
  ],
  [
    [
      13130,
      13130
    ],
    "mapped",
    [
      12511,
      12522,
      12496,
      12540,
      12523
    ]
  ],
  [
    [
      13131,
      13131
    ],
    "mapped",
    [
      12513,
      12460
    ]
  ],
  [
    [
      13132,
      13132
    ],
    "mapped",
    [
      12513,
      12460,
      12488,
      12531
    ]
  ],
  [
    [
      13133,
      13133
    ],
    "mapped",
    [
      12513,
      12540,
      12488,
      12523
    ]
  ],
  [
    [
      13134,
      13134
    ],
    "mapped",
    [
      12516,
      12540,
      12489
    ]
  ],
  [
    [
      13135,
      13135
    ],
    "mapped",
    [
      12516,
      12540,
      12523
    ]
  ],
  [
    [
      13136,
      13136
    ],
    "mapped",
    [
      12518,
      12450,
      12531
    ]
  ],
  [
    [
      13137,
      13137
    ],
    "mapped",
    [
      12522,
      12483,
      12488,
      12523
    ]
  ],
  [
    [
      13138,
      13138
    ],
    "mapped",
    [
      12522,
      12521
    ]
  ],
  [
    [
      13139,
      13139
    ],
    "mapped",
    [
      12523,
      12500,
      12540
    ]
  ],
  [
    [
      13140,
      13140
    ],
    "mapped",
    [
      12523,
      12540,
      12502,
      12523
    ]
  ],
  [
    [
      13141,
      13141
    ],
    "mapped",
    [
      12524,
      12512
    ]
  ],
  [
    [
      13142,
      13142
    ],
    "mapped",
    [
      12524,
      12531,
      12488,
      12466,
      12531
    ]
  ],
  [
    [
      13143,
      13143
    ],
    "mapped",
    [
      12527,
      12483,
      12488
    ]
  ],
  [
    [
      13144,
      13144
    ],
    "mapped",
    [
      48,
      28857
    ]
  ],
  [
    [
      13145,
      13145
    ],
    "mapped",
    [
      49,
      28857
    ]
  ],
  [
    [
      13146,
      13146
    ],
    "mapped",
    [
      50,
      28857
    ]
  ],
  [
    [
      13147,
      13147
    ],
    "mapped",
    [
      51,
      28857
    ]
  ],
  [
    [
      13148,
      13148
    ],
    "mapped",
    [
      52,
      28857
    ]
  ],
  [
    [
      13149,
      13149
    ],
    "mapped",
    [
      53,
      28857
    ]
  ],
  [
    [
      13150,
      13150
    ],
    "mapped",
    [
      54,
      28857
    ]
  ],
  [
    [
      13151,
      13151
    ],
    "mapped",
    [
      55,
      28857
    ]
  ],
  [
    [
      13152,
      13152
    ],
    "mapped",
    [
      56,
      28857
    ]
  ],
  [
    [
      13153,
      13153
    ],
    "mapped",
    [
      57,
      28857
    ]
  ],
  [
    [
      13154,
      13154
    ],
    "mapped",
    [
      49,
      48,
      28857
    ]
  ],
  [
    [
      13155,
      13155
    ],
    "mapped",
    [
      49,
      49,
      28857
    ]
  ],
  [
    [
      13156,
      13156
    ],
    "mapped",
    [
      49,
      50,
      28857
    ]
  ],
  [
    [
      13157,
      13157
    ],
    "mapped",
    [
      49,
      51,
      28857
    ]
  ],
  [
    [
      13158,
      13158
    ],
    "mapped",
    [
      49,
      52,
      28857
    ]
  ],
  [
    [
      13159,
      13159
    ],
    "mapped",
    [
      49,
      53,
      28857
    ]
  ],
  [
    [
      13160,
      13160
    ],
    "mapped",
    [
      49,
      54,
      28857
    ]
  ],
  [
    [
      13161,
      13161
    ],
    "mapped",
    [
      49,
      55,
      28857
    ]
  ],
  [
    [
      13162,
      13162
    ],
    "mapped",
    [
      49,
      56,
      28857
    ]
  ],
  [
    [
      13163,
      13163
    ],
    "mapped",
    [
      49,
      57,
      28857
    ]
  ],
  [
    [
      13164,
      13164
    ],
    "mapped",
    [
      50,
      48,
      28857
    ]
  ],
  [
    [
      13165,
      13165
    ],
    "mapped",
    [
      50,
      49,
      28857
    ]
  ],
  [
    [
      13166,
      13166
    ],
    "mapped",
    [
      50,
      50,
      28857
    ]
  ],
  [
    [
      13167,
      13167
    ],
    "mapped",
    [
      50,
      51,
      28857
    ]
  ],
  [
    [
      13168,
      13168
    ],
    "mapped",
    [
      50,
      52,
      28857
    ]
  ],
  [
    [
      13169,
      13169
    ],
    "mapped",
    [
      104,
      112,
      97
    ]
  ],
  [
    [
      13170,
      13170
    ],
    "mapped",
    [
      100,
      97
    ]
  ],
  [
    [
      13171,
      13171
    ],
    "mapped",
    [
      97,
      117
    ]
  ],
  [
    [
      13172,
      13172
    ],
    "mapped",
    [
      98,
      97,
      114
    ]
  ],
  [
    [
      13173,
      13173
    ],
    "mapped",
    [
      111,
      118
    ]
  ],
  [
    [
      13174,
      13174
    ],
    "mapped",
    [
      112,
      99
    ]
  ],
  [
    [
      13175,
      13175
    ],
    "mapped",
    [
      100,
      109
    ]
  ],
  [
    [
      13176,
      13176
    ],
    "mapped",
    [
      100,
      109,
      50
    ]
  ],
  [
    [
      13177,
      13177
    ],
    "mapped",
    [
      100,
      109,
      51
    ]
  ],
  [
    [
      13178,
      13178
    ],
    "mapped",
    [
      105,
      117
    ]
  ],
  [
    [
      13179,
      13179
    ],
    "mapped",
    [
      24179,
      25104
    ]
  ],
  [
    [
      13180,
      13180
    ],
    "mapped",
    [
      26157,
      21644
    ]
  ],
  [
    [
      13181,
      13181
    ],
    "mapped",
    [
      22823,
      27491
    ]
  ],
  [
    [
      13182,
      13182
    ],
    "mapped",
    [
      26126,
      27835
    ]
  ],
  [
    [
      13183,
      13183
    ],
    "mapped",
    [
      26666,
      24335,
      20250,
      31038
    ]
  ],
  [
    [
      13184,
      13184
    ],
    "mapped",
    [
      112,
      97
    ]
  ],
  [
    [
      13185,
      13185
    ],
    "mapped",
    [
      110,
      97
    ]
  ],
  [
    [
      13186,
      13186
    ],
    "mapped",
    [
      956,
      97
    ]
  ],
  [
    [
      13187,
      13187
    ],
    "mapped",
    [
      109,
      97
    ]
  ],
  [
    [
      13188,
      13188
    ],
    "mapped",
    [
      107,
      97
    ]
  ],
  [
    [
      13189,
      13189
    ],
    "mapped",
    [
      107,
      98
    ]
  ],
  [
    [
      13190,
      13190
    ],
    "mapped",
    [
      109,
      98
    ]
  ],
  [
    [
      13191,
      13191
    ],
    "mapped",
    [
      103,
      98
    ]
  ],
  [
    [
      13192,
      13192
    ],
    "mapped",
    [
      99,
      97,
      108
    ]
  ],
  [
    [
      13193,
      13193
    ],
    "mapped",
    [
      107,
      99,
      97,
      108
    ]
  ],
  [
    [
      13194,
      13194
    ],
    "mapped",
    [
      112,
      102
    ]
  ],
  [
    [
      13195,
      13195
    ],
    "mapped",
    [
      110,
      102
    ]
  ],
  [
    [
      13196,
      13196
    ],
    "mapped",
    [
      956,
      102
    ]
  ],
  [
    [
      13197,
      13197
    ],
    "mapped",
    [
      956,
      103
    ]
  ],
  [
    [
      13198,
      13198
    ],
    "mapped",
    [
      109,
      103
    ]
  ],
  [
    [
      13199,
      13199
    ],
    "mapped",
    [
      107,
      103
    ]
  ],
  [
    [
      13200,
      13200
    ],
    "mapped",
    [
      104,
      122
    ]
  ],
  [
    [
      13201,
      13201
    ],
    "mapped",
    [
      107,
      104,
      122
    ]
  ],
  [
    [
      13202,
      13202
    ],
    "mapped",
    [
      109,
      104,
      122
    ]
  ],
  [
    [
      13203,
      13203
    ],
    "mapped",
    [
      103,
      104,
      122
    ]
  ],
  [
    [
      13204,
      13204
    ],
    "mapped",
    [
      116,
      104,
      122
    ]
  ],
  [
    [
      13205,
      13205
    ],
    "mapped",
    [
      956,
      108
    ]
  ],
  [
    [
      13206,
      13206
    ],
    "mapped",
    [
      109,
      108
    ]
  ],
  [
    [
      13207,
      13207
    ],
    "mapped",
    [
      100,
      108
    ]
  ],
  [
    [
      13208,
      13208
    ],
    "mapped",
    [
      107,
      108
    ]
  ],
  [
    [
      13209,
      13209
    ],
    "mapped",
    [
      102,
      109
    ]
  ],
  [
    [
      13210,
      13210
    ],
    "mapped",
    [
      110,
      109
    ]
  ],
  [
    [
      13211,
      13211
    ],
    "mapped",
    [
      956,
      109
    ]
  ],
  [
    [
      13212,
      13212
    ],
    "mapped",
    [
      109,
      109
    ]
  ],
  [
    [
      13213,
      13213
    ],
    "mapped",
    [
      99,
      109
    ]
  ],
  [
    [
      13214,
      13214
    ],
    "mapped",
    [
      107,
      109
    ]
  ],
  [
    [
      13215,
      13215
    ],
    "mapped",
    [
      109,
      109,
      50
    ]
  ],
  [
    [
      13216,
      13216
    ],
    "mapped",
    [
      99,
      109,
      50
    ]
  ],
  [
    [
      13217,
      13217
    ],
    "mapped",
    [
      109,
      50
    ]
  ],
  [
    [
      13218,
      13218
    ],
    "mapped",
    [
      107,
      109,
      50
    ]
  ],
  [
    [
      13219,
      13219
    ],
    "mapped",
    [
      109,
      109,
      51
    ]
  ],
  [
    [
      13220,
      13220
    ],
    "mapped",
    [
      99,
      109,
      51
    ]
  ],
  [
    [
      13221,
      13221
    ],
    "mapped",
    [
      109,
      51
    ]
  ],
  [
    [
      13222,
      13222
    ],
    "mapped",
    [
      107,
      109,
      51
    ]
  ],
  [
    [
      13223,
      13223
    ],
    "mapped",
    [
      109,
      8725,
      115
    ]
  ],
  [
    [
      13224,
      13224
    ],
    "mapped",
    [
      109,
      8725,
      115,
      50
    ]
  ],
  [
    [
      13225,
      13225
    ],
    "mapped",
    [
      112,
      97
    ]
  ],
  [
    [
      13226,
      13226
    ],
    "mapped",
    [
      107,
      112,
      97
    ]
  ],
  [
    [
      13227,
      13227
    ],
    "mapped",
    [
      109,
      112,
      97
    ]
  ],
  [
    [
      13228,
      13228
    ],
    "mapped",
    [
      103,
      112,
      97
    ]
  ],
  [
    [
      13229,
      13229
    ],
    "mapped",
    [
      114,
      97,
      100
    ]
  ],
  [
    [
      13230,
      13230
    ],
    "mapped",
    [
      114,
      97,
      100,
      8725,
      115
    ]
  ],
  [
    [
      13231,
      13231
    ],
    "mapped",
    [
      114,
      97,
      100,
      8725,
      115,
      50
    ]
  ],
  [
    [
      13232,
      13232
    ],
    "mapped",
    [
      112,
      115
    ]
  ],
  [
    [
      13233,
      13233
    ],
    "mapped",
    [
      110,
      115
    ]
  ],
  [
    [
      13234,
      13234
    ],
    "mapped",
    [
      956,
      115
    ]
  ],
  [
    [
      13235,
      13235
    ],
    "mapped",
    [
      109,
      115
    ]
  ],
  [
    [
      13236,
      13236
    ],
    "mapped",
    [
      112,
      118
    ]
  ],
  [
    [
      13237,
      13237
    ],
    "mapped",
    [
      110,
      118
    ]
  ],
  [
    [
      13238,
      13238
    ],
    "mapped",
    [
      956,
      118
    ]
  ],
  [
    [
      13239,
      13239
    ],
    "mapped",
    [
      109,
      118
    ]
  ],
  [
    [
      13240,
      13240
    ],
    "mapped",
    [
      107,
      118
    ]
  ],
  [
    [
      13241,
      13241
    ],
    "mapped",
    [
      109,
      118
    ]
  ],
  [
    [
      13242,
      13242
    ],
    "mapped",
    [
      112,
      119
    ]
  ],
  [
    [
      13243,
      13243
    ],
    "mapped",
    [
      110,
      119
    ]
  ],
  [
    [
      13244,
      13244
    ],
    "mapped",
    [
      956,
      119
    ]
  ],
  [
    [
      13245,
      13245
    ],
    "mapped",
    [
      109,
      119
    ]
  ],
  [
    [
      13246,
      13246
    ],
    "mapped",
    [
      107,
      119
    ]
  ],
  [
    [
      13247,
      13247
    ],
    "mapped",
    [
      109,
      119
    ]
  ],
  [
    [
      13248,
      13248
    ],
    "mapped",
    [
      107,
      969
    ]
  ],
  [
    [
      13249,
      13249
    ],
    "mapped",
    [
      109,
      969
    ]
  ],
  [
    [
      13250,
      13250
    ],
    "disallowed"
  ],
  [
    [
      13251,
      13251
    ],
    "mapped",
    [
      98,
      113
    ]
  ],
  [
    [
      13252,
      13252
    ],
    "mapped",
    [
      99,
      99
    ]
  ],
  [
    [
      13253,
      13253
    ],
    "mapped",
    [
      99,
      100
    ]
  ],
  [
    [
      13254,
      13254
    ],
    "mapped",
    [
      99,
      8725,
      107,
      103
    ]
  ],
  [
    [
      13255,
      13255
    ],
    "disallowed"
  ],
  [
    [
      13256,
      13256
    ],
    "mapped",
    [
      100,
      98
    ]
  ],
  [
    [
      13257,
      13257
    ],
    "mapped",
    [
      103,
      121
    ]
  ],
  [
    [
      13258,
      13258
    ],
    "mapped",
    [
      104,
      97
    ]
  ],
  [
    [
      13259,
      13259
    ],
    "mapped",
    [
      104,
      112
    ]
  ],
  [
    [
      13260,
      13260
    ],
    "mapped",
    [
      105,
      110
    ]
  ],
  [
    [
      13261,
      13261
    ],
    "mapped",
    [
      107,
      107
    ]
  ],
  [
    [
      13262,
      13262
    ],
    "mapped",
    [
      107,
      109
    ]
  ],
  [
    [
      13263,
      13263
    ],
    "mapped",
    [
      107,
      116
    ]
  ],
  [
    [
      13264,
      13264
    ],
    "mapped",
    [
      108,
      109
    ]
  ],
  [
    [
      13265,
      13265
    ],
    "mapped",
    [
      108,
      110
    ]
  ],
  [
    [
      13266,
      13266
    ],
    "mapped",
    [
      108,
      111,
      103
    ]
  ],
  [
    [
      13267,
      13267
    ],
    "mapped",
    [
      108,
      120
    ]
  ],
  [
    [
      13268,
      13268
    ],
    "mapped",
    [
      109,
      98
    ]
  ],
  [
    [
      13269,
      13269
    ],
    "mapped",
    [
      109,
      105,
      108
    ]
  ],
  [
    [
      13270,
      13270
    ],
    "mapped",
    [
      109,
      111,
      108
    ]
  ],
  [
    [
      13271,
      13271
    ],
    "mapped",
    [
      112,
      104
    ]
  ],
  [
    [
      13272,
      13272
    ],
    "disallowed"
  ],
  [
    [
      13273,
      13273
    ],
    "mapped",
    [
      112,
      112,
      109
    ]
  ],
  [
    [
      13274,
      13274
    ],
    "mapped",
    [
      112,
      114
    ]
  ],
  [
    [
      13275,
      13275
    ],
    "mapped",
    [
      115,
      114
    ]
  ],
  [
    [
      13276,
      13276
    ],
    "mapped",
    [
      115,
      118
    ]
  ],
  [
    [
      13277,
      13277
    ],
    "mapped",
    [
      119,
      98
    ]
  ],
  [
    [
      13278,
      13278
    ],
    "mapped",
    [
      118,
      8725,
      109
    ]
  ],
  [
    [
      13279,
      13279
    ],
    "mapped",
    [
      97,
      8725,
      109
    ]
  ],
  [
    [
      13280,
      13280
    ],
    "mapped",
    [
      49,
      26085
    ]
  ],
  [
    [
      13281,
      13281
    ],
    "mapped",
    [
      50,
      26085
    ]
  ],
  [
    [
      13282,
      13282
    ],
    "mapped",
    [
      51,
      26085
    ]
  ],
  [
    [
      13283,
      13283
    ],
    "mapped",
    [
      52,
      26085
    ]
  ],
  [
    [
      13284,
      13284
    ],
    "mapped",
    [
      53,
      26085
    ]
  ],
  [
    [
      13285,
      13285
    ],
    "mapped",
    [
      54,
      26085
    ]
  ],
  [
    [
      13286,
      13286
    ],
    "mapped",
    [
      55,
      26085
    ]
  ],
  [
    [
      13287,
      13287
    ],
    "mapped",
    [
      56,
      26085
    ]
  ],
  [
    [
      13288,
      13288
    ],
    "mapped",
    [
      57,
      26085
    ]
  ],
  [
    [
      13289,
      13289
    ],
    "mapped",
    [
      49,
      48,
      26085
    ]
  ],
  [
    [
      13290,
      13290
    ],
    "mapped",
    [
      49,
      49,
      26085
    ]
  ],
  [
    [
      13291,
      13291
    ],
    "mapped",
    [
      49,
      50,
      26085
    ]
  ],
  [
    [
      13292,
      13292
    ],
    "mapped",
    [
      49,
      51,
      26085
    ]
  ],
  [
    [
      13293,
      13293
    ],
    "mapped",
    [
      49,
      52,
      26085
    ]
  ],
  [
    [
      13294,
      13294
    ],
    "mapped",
    [
      49,
      53,
      26085
    ]
  ],
  [
    [
      13295,
      13295
    ],
    "mapped",
    [
      49,
      54,
      26085
    ]
  ],
  [
    [
      13296,
      13296
    ],
    "mapped",
    [
      49,
      55,
      26085
    ]
  ],
  [
    [
      13297,
      13297
    ],
    "mapped",
    [
      49,
      56,
      26085
    ]
  ],
  [
    [
      13298,
      13298
    ],
    "mapped",
    [
      49,
      57,
      26085
    ]
  ],
  [
    [
      13299,
      13299
    ],
    "mapped",
    [
      50,
      48,
      26085
    ]
  ],
  [
    [
      13300,
      13300
    ],
    "mapped",
    [
      50,
      49,
      26085
    ]
  ],
  [
    [
      13301,
      13301
    ],
    "mapped",
    [
      50,
      50,
      26085
    ]
  ],
  [
    [
      13302,
      13302
    ],
    "mapped",
    [
      50,
      51,
      26085
    ]
  ],
  [
    [
      13303,
      13303
    ],
    "mapped",
    [
      50,
      52,
      26085
    ]
  ],
  [
    [
      13304,
      13304
    ],
    "mapped",
    [
      50,
      53,
      26085
    ]
  ],
  [
    [
      13305,
      13305
    ],
    "mapped",
    [
      50,
      54,
      26085
    ]
  ],
  [
    [
      13306,
      13306
    ],
    "mapped",
    [
      50,
      55,
      26085
    ]
  ],
  [
    [
      13307,
      13307
    ],
    "mapped",
    [
      50,
      56,
      26085
    ]
  ],
  [
    [
      13308,
      13308
    ],
    "mapped",
    [
      50,
      57,
      26085
    ]
  ],
  [
    [
      13309,
      13309
    ],
    "mapped",
    [
      51,
      48,
      26085
    ]
  ],
  [
    [
      13310,
      13310
    ],
    "mapped",
    [
      51,
      49,
      26085
    ]
  ],
  [
    [
      13311,
      13311
    ],
    "mapped",
    [
      103,
      97,
      108
    ]
  ],
  [
    [
      13312,
      19893
    ],
    "valid"
  ],
  [
    [
      19894,
      19903
    ],
    "disallowed"
  ],
  [
    [
      19904,
      19967
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      19968,
      40869
    ],
    "valid"
  ],
  [
    [
      40870,
      40891
    ],
    "valid"
  ],
  [
    [
      40892,
      40899
    ],
    "valid"
  ],
  [
    [
      40900,
      40907
    ],
    "valid"
  ],
  [
    [
      40908,
      40908
    ],
    "valid"
  ],
  [
    [
      40909,
      40917
    ],
    "valid"
  ],
  [
    [
      40918,
      40959
    ],
    "disallowed"
  ],
  [
    [
      40960,
      42124
    ],
    "valid"
  ],
  [
    [
      42125,
      42127
    ],
    "disallowed"
  ],
  [
    [
      42128,
      42145
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42146,
      42147
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42148,
      42163
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42164,
      42164
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42165,
      42176
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42177,
      42177
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42178,
      42180
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42181,
      42181
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42182,
      42182
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42183,
      42191
    ],
    "disallowed"
  ],
  [
    [
      42192,
      42237
    ],
    "valid"
  ],
  [
    [
      42238,
      42239
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42240,
      42508
    ],
    "valid"
  ],
  [
    [
      42509,
      42511
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42512,
      42539
    ],
    "valid"
  ],
  [
    [
      42540,
      42559
    ],
    "disallowed"
  ],
  [
    [
      42560,
      42560
    ],
    "mapped",
    [
      42561
    ]
  ],
  [
    [
      42561,
      42561
    ],
    "valid"
  ],
  [
    [
      42562,
      42562
    ],
    "mapped",
    [
      42563
    ]
  ],
  [
    [
      42563,
      42563
    ],
    "valid"
  ],
  [
    [
      42564,
      42564
    ],
    "mapped",
    [
      42565
    ]
  ],
  [
    [
      42565,
      42565
    ],
    "valid"
  ],
  [
    [
      42566,
      42566
    ],
    "mapped",
    [
      42567
    ]
  ],
  [
    [
      42567,
      42567
    ],
    "valid"
  ],
  [
    [
      42568,
      42568
    ],
    "mapped",
    [
      42569
    ]
  ],
  [
    [
      42569,
      42569
    ],
    "valid"
  ],
  [
    [
      42570,
      42570
    ],
    "mapped",
    [
      42571
    ]
  ],
  [
    [
      42571,
      42571
    ],
    "valid"
  ],
  [
    [
      42572,
      42572
    ],
    "mapped",
    [
      42573
    ]
  ],
  [
    [
      42573,
      42573
    ],
    "valid"
  ],
  [
    [
      42574,
      42574
    ],
    "mapped",
    [
      42575
    ]
  ],
  [
    [
      42575,
      42575
    ],
    "valid"
  ],
  [
    [
      42576,
      42576
    ],
    "mapped",
    [
      42577
    ]
  ],
  [
    [
      42577,
      42577
    ],
    "valid"
  ],
  [
    [
      42578,
      42578
    ],
    "mapped",
    [
      42579
    ]
  ],
  [
    [
      42579,
      42579
    ],
    "valid"
  ],
  [
    [
      42580,
      42580
    ],
    "mapped",
    [
      42581
    ]
  ],
  [
    [
      42581,
      42581
    ],
    "valid"
  ],
  [
    [
      42582,
      42582
    ],
    "mapped",
    [
      42583
    ]
  ],
  [
    [
      42583,
      42583
    ],
    "valid"
  ],
  [
    [
      42584,
      42584
    ],
    "mapped",
    [
      42585
    ]
  ],
  [
    [
      42585,
      42585
    ],
    "valid"
  ],
  [
    [
      42586,
      42586
    ],
    "mapped",
    [
      42587
    ]
  ],
  [
    [
      42587,
      42587
    ],
    "valid"
  ],
  [
    [
      42588,
      42588
    ],
    "mapped",
    [
      42589
    ]
  ],
  [
    [
      42589,
      42589
    ],
    "valid"
  ],
  [
    [
      42590,
      42590
    ],
    "mapped",
    [
      42591
    ]
  ],
  [
    [
      42591,
      42591
    ],
    "valid"
  ],
  [
    [
      42592,
      42592
    ],
    "mapped",
    [
      42593
    ]
  ],
  [
    [
      42593,
      42593
    ],
    "valid"
  ],
  [
    [
      42594,
      42594
    ],
    "mapped",
    [
      42595
    ]
  ],
  [
    [
      42595,
      42595
    ],
    "valid"
  ],
  [
    [
      42596,
      42596
    ],
    "mapped",
    [
      42597
    ]
  ],
  [
    [
      42597,
      42597
    ],
    "valid"
  ],
  [
    [
      42598,
      42598
    ],
    "mapped",
    [
      42599
    ]
  ],
  [
    [
      42599,
      42599
    ],
    "valid"
  ],
  [
    [
      42600,
      42600
    ],
    "mapped",
    [
      42601
    ]
  ],
  [
    [
      42601,
      42601
    ],
    "valid"
  ],
  [
    [
      42602,
      42602
    ],
    "mapped",
    [
      42603
    ]
  ],
  [
    [
      42603,
      42603
    ],
    "valid"
  ],
  [
    [
      42604,
      42604
    ],
    "mapped",
    [
      42605
    ]
  ],
  [
    [
      42605,
      42607
    ],
    "valid"
  ],
  [
    [
      42608,
      42611
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42612,
      42619
    ],
    "valid"
  ],
  [
    [
      42620,
      42621
    ],
    "valid"
  ],
  [
    [
      42622,
      42622
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42623,
      42623
    ],
    "valid"
  ],
  [
    [
      42624,
      42624
    ],
    "mapped",
    [
      42625
    ]
  ],
  [
    [
      42625,
      42625
    ],
    "valid"
  ],
  [
    [
      42626,
      42626
    ],
    "mapped",
    [
      42627
    ]
  ],
  [
    [
      42627,
      42627
    ],
    "valid"
  ],
  [
    [
      42628,
      42628
    ],
    "mapped",
    [
      42629
    ]
  ],
  [
    [
      42629,
      42629
    ],
    "valid"
  ],
  [
    [
      42630,
      42630
    ],
    "mapped",
    [
      42631
    ]
  ],
  [
    [
      42631,
      42631
    ],
    "valid"
  ],
  [
    [
      42632,
      42632
    ],
    "mapped",
    [
      42633
    ]
  ],
  [
    [
      42633,
      42633
    ],
    "valid"
  ],
  [
    [
      42634,
      42634
    ],
    "mapped",
    [
      42635
    ]
  ],
  [
    [
      42635,
      42635
    ],
    "valid"
  ],
  [
    [
      42636,
      42636
    ],
    "mapped",
    [
      42637
    ]
  ],
  [
    [
      42637,
      42637
    ],
    "valid"
  ],
  [
    [
      42638,
      42638
    ],
    "mapped",
    [
      42639
    ]
  ],
  [
    [
      42639,
      42639
    ],
    "valid"
  ],
  [
    [
      42640,
      42640
    ],
    "mapped",
    [
      42641
    ]
  ],
  [
    [
      42641,
      42641
    ],
    "valid"
  ],
  [
    [
      42642,
      42642
    ],
    "mapped",
    [
      42643
    ]
  ],
  [
    [
      42643,
      42643
    ],
    "valid"
  ],
  [
    [
      42644,
      42644
    ],
    "mapped",
    [
      42645
    ]
  ],
  [
    [
      42645,
      42645
    ],
    "valid"
  ],
  [
    [
      42646,
      42646
    ],
    "mapped",
    [
      42647
    ]
  ],
  [
    [
      42647,
      42647
    ],
    "valid"
  ],
  [
    [
      42648,
      42648
    ],
    "mapped",
    [
      42649
    ]
  ],
  [
    [
      42649,
      42649
    ],
    "valid"
  ],
  [
    [
      42650,
      42650
    ],
    "mapped",
    [
      42651
    ]
  ],
  [
    [
      42651,
      42651
    ],
    "valid"
  ],
  [
    [
      42652,
      42652
    ],
    "mapped",
    [
      1098
    ]
  ],
  [
    [
      42653,
      42653
    ],
    "mapped",
    [
      1100
    ]
  ],
  [
    [
      42654,
      42654
    ],
    "valid"
  ],
  [
    [
      42655,
      42655
    ],
    "valid"
  ],
  [
    [
      42656,
      42725
    ],
    "valid"
  ],
  [
    [
      42726,
      42735
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42736,
      42737
    ],
    "valid"
  ],
  [
    [
      42738,
      42743
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42744,
      42751
    ],
    "disallowed"
  ],
  [
    [
      42752,
      42774
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42775,
      42778
    ],
    "valid"
  ],
  [
    [
      42779,
      42783
    ],
    "valid"
  ],
  [
    [
      42784,
      42785
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42786,
      42786
    ],
    "mapped",
    [
      42787
    ]
  ],
  [
    [
      42787,
      42787
    ],
    "valid"
  ],
  [
    [
      42788,
      42788
    ],
    "mapped",
    [
      42789
    ]
  ],
  [
    [
      42789,
      42789
    ],
    "valid"
  ],
  [
    [
      42790,
      42790
    ],
    "mapped",
    [
      42791
    ]
  ],
  [
    [
      42791,
      42791
    ],
    "valid"
  ],
  [
    [
      42792,
      42792
    ],
    "mapped",
    [
      42793
    ]
  ],
  [
    [
      42793,
      42793
    ],
    "valid"
  ],
  [
    [
      42794,
      42794
    ],
    "mapped",
    [
      42795
    ]
  ],
  [
    [
      42795,
      42795
    ],
    "valid"
  ],
  [
    [
      42796,
      42796
    ],
    "mapped",
    [
      42797
    ]
  ],
  [
    [
      42797,
      42797
    ],
    "valid"
  ],
  [
    [
      42798,
      42798
    ],
    "mapped",
    [
      42799
    ]
  ],
  [
    [
      42799,
      42801
    ],
    "valid"
  ],
  [
    [
      42802,
      42802
    ],
    "mapped",
    [
      42803
    ]
  ],
  [
    [
      42803,
      42803
    ],
    "valid"
  ],
  [
    [
      42804,
      42804
    ],
    "mapped",
    [
      42805
    ]
  ],
  [
    [
      42805,
      42805
    ],
    "valid"
  ],
  [
    [
      42806,
      42806
    ],
    "mapped",
    [
      42807
    ]
  ],
  [
    [
      42807,
      42807
    ],
    "valid"
  ],
  [
    [
      42808,
      42808
    ],
    "mapped",
    [
      42809
    ]
  ],
  [
    [
      42809,
      42809
    ],
    "valid"
  ],
  [
    [
      42810,
      42810
    ],
    "mapped",
    [
      42811
    ]
  ],
  [
    [
      42811,
      42811
    ],
    "valid"
  ],
  [
    [
      42812,
      42812
    ],
    "mapped",
    [
      42813
    ]
  ],
  [
    [
      42813,
      42813
    ],
    "valid"
  ],
  [
    [
      42814,
      42814
    ],
    "mapped",
    [
      42815
    ]
  ],
  [
    [
      42815,
      42815
    ],
    "valid"
  ],
  [
    [
      42816,
      42816
    ],
    "mapped",
    [
      42817
    ]
  ],
  [
    [
      42817,
      42817
    ],
    "valid"
  ],
  [
    [
      42818,
      42818
    ],
    "mapped",
    [
      42819
    ]
  ],
  [
    [
      42819,
      42819
    ],
    "valid"
  ],
  [
    [
      42820,
      42820
    ],
    "mapped",
    [
      42821
    ]
  ],
  [
    [
      42821,
      42821
    ],
    "valid"
  ],
  [
    [
      42822,
      42822
    ],
    "mapped",
    [
      42823
    ]
  ],
  [
    [
      42823,
      42823
    ],
    "valid"
  ],
  [
    [
      42824,
      42824
    ],
    "mapped",
    [
      42825
    ]
  ],
  [
    [
      42825,
      42825
    ],
    "valid"
  ],
  [
    [
      42826,
      42826
    ],
    "mapped",
    [
      42827
    ]
  ],
  [
    [
      42827,
      42827
    ],
    "valid"
  ],
  [
    [
      42828,
      42828
    ],
    "mapped",
    [
      42829
    ]
  ],
  [
    [
      42829,
      42829
    ],
    "valid"
  ],
  [
    [
      42830,
      42830
    ],
    "mapped",
    [
      42831
    ]
  ],
  [
    [
      42831,
      42831
    ],
    "valid"
  ],
  [
    [
      42832,
      42832
    ],
    "mapped",
    [
      42833
    ]
  ],
  [
    [
      42833,
      42833
    ],
    "valid"
  ],
  [
    [
      42834,
      42834
    ],
    "mapped",
    [
      42835
    ]
  ],
  [
    [
      42835,
      42835
    ],
    "valid"
  ],
  [
    [
      42836,
      42836
    ],
    "mapped",
    [
      42837
    ]
  ],
  [
    [
      42837,
      42837
    ],
    "valid"
  ],
  [
    [
      42838,
      42838
    ],
    "mapped",
    [
      42839
    ]
  ],
  [
    [
      42839,
      42839
    ],
    "valid"
  ],
  [
    [
      42840,
      42840
    ],
    "mapped",
    [
      42841
    ]
  ],
  [
    [
      42841,
      42841
    ],
    "valid"
  ],
  [
    [
      42842,
      42842
    ],
    "mapped",
    [
      42843
    ]
  ],
  [
    [
      42843,
      42843
    ],
    "valid"
  ],
  [
    [
      42844,
      42844
    ],
    "mapped",
    [
      42845
    ]
  ],
  [
    [
      42845,
      42845
    ],
    "valid"
  ],
  [
    [
      42846,
      42846
    ],
    "mapped",
    [
      42847
    ]
  ],
  [
    [
      42847,
      42847
    ],
    "valid"
  ],
  [
    [
      42848,
      42848
    ],
    "mapped",
    [
      42849
    ]
  ],
  [
    [
      42849,
      42849
    ],
    "valid"
  ],
  [
    [
      42850,
      42850
    ],
    "mapped",
    [
      42851
    ]
  ],
  [
    [
      42851,
      42851
    ],
    "valid"
  ],
  [
    [
      42852,
      42852
    ],
    "mapped",
    [
      42853
    ]
  ],
  [
    [
      42853,
      42853
    ],
    "valid"
  ],
  [
    [
      42854,
      42854
    ],
    "mapped",
    [
      42855
    ]
  ],
  [
    [
      42855,
      42855
    ],
    "valid"
  ],
  [
    [
      42856,
      42856
    ],
    "mapped",
    [
      42857
    ]
  ],
  [
    [
      42857,
      42857
    ],
    "valid"
  ],
  [
    [
      42858,
      42858
    ],
    "mapped",
    [
      42859
    ]
  ],
  [
    [
      42859,
      42859
    ],
    "valid"
  ],
  [
    [
      42860,
      42860
    ],
    "mapped",
    [
      42861
    ]
  ],
  [
    [
      42861,
      42861
    ],
    "valid"
  ],
  [
    [
      42862,
      42862
    ],
    "mapped",
    [
      42863
    ]
  ],
  [
    [
      42863,
      42863
    ],
    "valid"
  ],
  [
    [
      42864,
      42864
    ],
    "mapped",
    [
      42863
    ]
  ],
  [
    [
      42865,
      42872
    ],
    "valid"
  ],
  [
    [
      42873,
      42873
    ],
    "mapped",
    [
      42874
    ]
  ],
  [
    [
      42874,
      42874
    ],
    "valid"
  ],
  [
    [
      42875,
      42875
    ],
    "mapped",
    [
      42876
    ]
  ],
  [
    [
      42876,
      42876
    ],
    "valid"
  ],
  [
    [
      42877,
      42877
    ],
    "mapped",
    [
      7545
    ]
  ],
  [
    [
      42878,
      42878
    ],
    "mapped",
    [
      42879
    ]
  ],
  [
    [
      42879,
      42879
    ],
    "valid"
  ],
  [
    [
      42880,
      42880
    ],
    "mapped",
    [
      42881
    ]
  ],
  [
    [
      42881,
      42881
    ],
    "valid"
  ],
  [
    [
      42882,
      42882
    ],
    "mapped",
    [
      42883
    ]
  ],
  [
    [
      42883,
      42883
    ],
    "valid"
  ],
  [
    [
      42884,
      42884
    ],
    "mapped",
    [
      42885
    ]
  ],
  [
    [
      42885,
      42885
    ],
    "valid"
  ],
  [
    [
      42886,
      42886
    ],
    "mapped",
    [
      42887
    ]
  ],
  [
    [
      42887,
      42888
    ],
    "valid"
  ],
  [
    [
      42889,
      42890
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42891,
      42891
    ],
    "mapped",
    [
      42892
    ]
  ],
  [
    [
      42892,
      42892
    ],
    "valid"
  ],
  [
    [
      42893,
      42893
    ],
    "mapped",
    [
      613
    ]
  ],
  [
    [
      42894,
      42894
    ],
    "valid"
  ],
  [
    [
      42895,
      42895
    ],
    "valid"
  ],
  [
    [
      42896,
      42896
    ],
    "mapped",
    [
      42897
    ]
  ],
  [
    [
      42897,
      42897
    ],
    "valid"
  ],
  [
    [
      42898,
      42898
    ],
    "mapped",
    [
      42899
    ]
  ],
  [
    [
      42899,
      42899
    ],
    "valid"
  ],
  [
    [
      42900,
      42901
    ],
    "valid"
  ],
  [
    [
      42902,
      42902
    ],
    "mapped",
    [
      42903
    ]
  ],
  [
    [
      42903,
      42903
    ],
    "valid"
  ],
  [
    [
      42904,
      42904
    ],
    "mapped",
    [
      42905
    ]
  ],
  [
    [
      42905,
      42905
    ],
    "valid"
  ],
  [
    [
      42906,
      42906
    ],
    "mapped",
    [
      42907
    ]
  ],
  [
    [
      42907,
      42907
    ],
    "valid"
  ],
  [
    [
      42908,
      42908
    ],
    "mapped",
    [
      42909
    ]
  ],
  [
    [
      42909,
      42909
    ],
    "valid"
  ],
  [
    [
      42910,
      42910
    ],
    "mapped",
    [
      42911
    ]
  ],
  [
    [
      42911,
      42911
    ],
    "valid"
  ],
  [
    [
      42912,
      42912
    ],
    "mapped",
    [
      42913
    ]
  ],
  [
    [
      42913,
      42913
    ],
    "valid"
  ],
  [
    [
      42914,
      42914
    ],
    "mapped",
    [
      42915
    ]
  ],
  [
    [
      42915,
      42915
    ],
    "valid"
  ],
  [
    [
      42916,
      42916
    ],
    "mapped",
    [
      42917
    ]
  ],
  [
    [
      42917,
      42917
    ],
    "valid"
  ],
  [
    [
      42918,
      42918
    ],
    "mapped",
    [
      42919
    ]
  ],
  [
    [
      42919,
      42919
    ],
    "valid"
  ],
  [
    [
      42920,
      42920
    ],
    "mapped",
    [
      42921
    ]
  ],
  [
    [
      42921,
      42921
    ],
    "valid"
  ],
  [
    [
      42922,
      42922
    ],
    "mapped",
    [
      614
    ]
  ],
  [
    [
      42923,
      42923
    ],
    "mapped",
    [
      604
    ]
  ],
  [
    [
      42924,
      42924
    ],
    "mapped",
    [
      609
    ]
  ],
  [
    [
      42925,
      42925
    ],
    "mapped",
    [
      620
    ]
  ],
  [
    [
      42926,
      42927
    ],
    "disallowed"
  ],
  [
    [
      42928,
      42928
    ],
    "mapped",
    [
      670
    ]
  ],
  [
    [
      42929,
      42929
    ],
    "mapped",
    [
      647
    ]
  ],
  [
    [
      42930,
      42930
    ],
    "mapped",
    [
      669
    ]
  ],
  [
    [
      42931,
      42931
    ],
    "mapped",
    [
      43859
    ]
  ],
  [
    [
      42932,
      42932
    ],
    "mapped",
    [
      42933
    ]
  ],
  [
    [
      42933,
      42933
    ],
    "valid"
  ],
  [
    [
      42934,
      42934
    ],
    "mapped",
    [
      42935
    ]
  ],
  [
    [
      42935,
      42935
    ],
    "valid"
  ],
  [
    [
      42936,
      42998
    ],
    "disallowed"
  ],
  [
    [
      42999,
      42999
    ],
    "valid"
  ],
  [
    [
      43e3,
      43e3
    ],
    "mapped",
    [
      295
    ]
  ],
  [
    [
      43001,
      43001
    ],
    "mapped",
    [
      339
    ]
  ],
  [
    [
      43002,
      43002
    ],
    "valid"
  ],
  [
    [
      43003,
      43007
    ],
    "valid"
  ],
  [
    [
      43008,
      43047
    ],
    "valid"
  ],
  [
    [
      43048,
      43051
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43052,
      43055
    ],
    "disallowed"
  ],
  [
    [
      43056,
      43065
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43066,
      43071
    ],
    "disallowed"
  ],
  [
    [
      43072,
      43123
    ],
    "valid"
  ],
  [
    [
      43124,
      43127
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43128,
      43135
    ],
    "disallowed"
  ],
  [
    [
      43136,
      43204
    ],
    "valid"
  ],
  [
    [
      43205,
      43213
    ],
    "disallowed"
  ],
  [
    [
      43214,
      43215
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43216,
      43225
    ],
    "valid"
  ],
  [
    [
      43226,
      43231
    ],
    "disallowed"
  ],
  [
    [
      43232,
      43255
    ],
    "valid"
  ],
  [
    [
      43256,
      43258
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43259,
      43259
    ],
    "valid"
  ],
  [
    [
      43260,
      43260
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43261,
      43261
    ],
    "valid"
  ],
  [
    [
      43262,
      43263
    ],
    "disallowed"
  ],
  [
    [
      43264,
      43309
    ],
    "valid"
  ],
  [
    [
      43310,
      43311
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43312,
      43347
    ],
    "valid"
  ],
  [
    [
      43348,
      43358
    ],
    "disallowed"
  ],
  [
    [
      43359,
      43359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43360,
      43388
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43389,
      43391
    ],
    "disallowed"
  ],
  [
    [
      43392,
      43456
    ],
    "valid"
  ],
  [
    [
      43457,
      43469
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43470,
      43470
    ],
    "disallowed"
  ],
  [
    [
      43471,
      43481
    ],
    "valid"
  ],
  [
    [
      43482,
      43485
    ],
    "disallowed"
  ],
  [
    [
      43486,
      43487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43488,
      43518
    ],
    "valid"
  ],
  [
    [
      43519,
      43519
    ],
    "disallowed"
  ],
  [
    [
      43520,
      43574
    ],
    "valid"
  ],
  [
    [
      43575,
      43583
    ],
    "disallowed"
  ],
  [
    [
      43584,
      43597
    ],
    "valid"
  ],
  [
    [
      43598,
      43599
    ],
    "disallowed"
  ],
  [
    [
      43600,
      43609
    ],
    "valid"
  ],
  [
    [
      43610,
      43611
    ],
    "disallowed"
  ],
  [
    [
      43612,
      43615
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43616,
      43638
    ],
    "valid"
  ],
  [
    [
      43639,
      43641
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43642,
      43643
    ],
    "valid"
  ],
  [
    [
      43644,
      43647
    ],
    "valid"
  ],
  [
    [
      43648,
      43714
    ],
    "valid"
  ],
  [
    [
      43715,
      43738
    ],
    "disallowed"
  ],
  [
    [
      43739,
      43741
    ],
    "valid"
  ],
  [
    [
      43742,
      43743
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43744,
      43759
    ],
    "valid"
  ],
  [
    [
      43760,
      43761
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43762,
      43766
    ],
    "valid"
  ],
  [
    [
      43767,
      43776
    ],
    "disallowed"
  ],
  [
    [
      43777,
      43782
    ],
    "valid"
  ],
  [
    [
      43783,
      43784
    ],
    "disallowed"
  ],
  [
    [
      43785,
      43790
    ],
    "valid"
  ],
  [
    [
      43791,
      43792
    ],
    "disallowed"
  ],
  [
    [
      43793,
      43798
    ],
    "valid"
  ],
  [
    [
      43799,
      43807
    ],
    "disallowed"
  ],
  [
    [
      43808,
      43814
    ],
    "valid"
  ],
  [
    [
      43815,
      43815
    ],
    "disallowed"
  ],
  [
    [
      43816,
      43822
    ],
    "valid"
  ],
  [
    [
      43823,
      43823
    ],
    "disallowed"
  ],
  [
    [
      43824,
      43866
    ],
    "valid"
  ],
  [
    [
      43867,
      43867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43868,
      43868
    ],
    "mapped",
    [
      42791
    ]
  ],
  [
    [
      43869,
      43869
    ],
    "mapped",
    [
      43831
    ]
  ],
  [
    [
      43870,
      43870
    ],
    "mapped",
    [
      619
    ]
  ],
  [
    [
      43871,
      43871
    ],
    "mapped",
    [
      43858
    ]
  ],
  [
    [
      43872,
      43875
    ],
    "valid"
  ],
  [
    [
      43876,
      43877
    ],
    "valid"
  ],
  [
    [
      43878,
      43887
    ],
    "disallowed"
  ],
  [
    [
      43888,
      43888
    ],
    "mapped",
    [
      5024
    ]
  ],
  [
    [
      43889,
      43889
    ],
    "mapped",
    [
      5025
    ]
  ],
  [
    [
      43890,
      43890
    ],
    "mapped",
    [
      5026
    ]
  ],
  [
    [
      43891,
      43891
    ],
    "mapped",
    [
      5027
    ]
  ],
  [
    [
      43892,
      43892
    ],
    "mapped",
    [
      5028
    ]
  ],
  [
    [
      43893,
      43893
    ],
    "mapped",
    [
      5029
    ]
  ],
  [
    [
      43894,
      43894
    ],
    "mapped",
    [
      5030
    ]
  ],
  [
    [
      43895,
      43895
    ],
    "mapped",
    [
      5031
    ]
  ],
  [
    [
      43896,
      43896
    ],
    "mapped",
    [
      5032
    ]
  ],
  [
    [
      43897,
      43897
    ],
    "mapped",
    [
      5033
    ]
  ],
  [
    [
      43898,
      43898
    ],
    "mapped",
    [
      5034
    ]
  ],
  [
    [
      43899,
      43899
    ],
    "mapped",
    [
      5035
    ]
  ],
  [
    [
      43900,
      43900
    ],
    "mapped",
    [
      5036
    ]
  ],
  [
    [
      43901,
      43901
    ],
    "mapped",
    [
      5037
    ]
  ],
  [
    [
      43902,
      43902
    ],
    "mapped",
    [
      5038
    ]
  ],
  [
    [
      43903,
      43903
    ],
    "mapped",
    [
      5039
    ]
  ],
  [
    [
      43904,
      43904
    ],
    "mapped",
    [
      5040
    ]
  ],
  [
    [
      43905,
      43905
    ],
    "mapped",
    [
      5041
    ]
  ],
  [
    [
      43906,
      43906
    ],
    "mapped",
    [
      5042
    ]
  ],
  [
    [
      43907,
      43907
    ],
    "mapped",
    [
      5043
    ]
  ],
  [
    [
      43908,
      43908
    ],
    "mapped",
    [
      5044
    ]
  ],
  [
    [
      43909,
      43909
    ],
    "mapped",
    [
      5045
    ]
  ],
  [
    [
      43910,
      43910
    ],
    "mapped",
    [
      5046
    ]
  ],
  [
    [
      43911,
      43911
    ],
    "mapped",
    [
      5047
    ]
  ],
  [
    [
      43912,
      43912
    ],
    "mapped",
    [
      5048
    ]
  ],
  [
    [
      43913,
      43913
    ],
    "mapped",
    [
      5049
    ]
  ],
  [
    [
      43914,
      43914
    ],
    "mapped",
    [
      5050
    ]
  ],
  [
    [
      43915,
      43915
    ],
    "mapped",
    [
      5051
    ]
  ],
  [
    [
      43916,
      43916
    ],
    "mapped",
    [
      5052
    ]
  ],
  [
    [
      43917,
      43917
    ],
    "mapped",
    [
      5053
    ]
  ],
  [
    [
      43918,
      43918
    ],
    "mapped",
    [
      5054
    ]
  ],
  [
    [
      43919,
      43919
    ],
    "mapped",
    [
      5055
    ]
  ],
  [
    [
      43920,
      43920
    ],
    "mapped",
    [
      5056
    ]
  ],
  [
    [
      43921,
      43921
    ],
    "mapped",
    [
      5057
    ]
  ],
  [
    [
      43922,
      43922
    ],
    "mapped",
    [
      5058
    ]
  ],
  [
    [
      43923,
      43923
    ],
    "mapped",
    [
      5059
    ]
  ],
  [
    [
      43924,
      43924
    ],
    "mapped",
    [
      5060
    ]
  ],
  [
    [
      43925,
      43925
    ],
    "mapped",
    [
      5061
    ]
  ],
  [
    [
      43926,
      43926
    ],
    "mapped",
    [
      5062
    ]
  ],
  [
    [
      43927,
      43927
    ],
    "mapped",
    [
      5063
    ]
  ],
  [
    [
      43928,
      43928
    ],
    "mapped",
    [
      5064
    ]
  ],
  [
    [
      43929,
      43929
    ],
    "mapped",
    [
      5065
    ]
  ],
  [
    [
      43930,
      43930
    ],
    "mapped",
    [
      5066
    ]
  ],
  [
    [
      43931,
      43931
    ],
    "mapped",
    [
      5067
    ]
  ],
  [
    [
      43932,
      43932
    ],
    "mapped",
    [
      5068
    ]
  ],
  [
    [
      43933,
      43933
    ],
    "mapped",
    [
      5069
    ]
  ],
  [
    [
      43934,
      43934
    ],
    "mapped",
    [
      5070
    ]
  ],
  [
    [
      43935,
      43935
    ],
    "mapped",
    [
      5071
    ]
  ],
  [
    [
      43936,
      43936
    ],
    "mapped",
    [
      5072
    ]
  ],
  [
    [
      43937,
      43937
    ],
    "mapped",
    [
      5073
    ]
  ],
  [
    [
      43938,
      43938
    ],
    "mapped",
    [
      5074
    ]
  ],
  [
    [
      43939,
      43939
    ],
    "mapped",
    [
      5075
    ]
  ],
  [
    [
      43940,
      43940
    ],
    "mapped",
    [
      5076
    ]
  ],
  [
    [
      43941,
      43941
    ],
    "mapped",
    [
      5077
    ]
  ],
  [
    [
      43942,
      43942
    ],
    "mapped",
    [
      5078
    ]
  ],
  [
    [
      43943,
      43943
    ],
    "mapped",
    [
      5079
    ]
  ],
  [
    [
      43944,
      43944
    ],
    "mapped",
    [
      5080
    ]
  ],
  [
    [
      43945,
      43945
    ],
    "mapped",
    [
      5081
    ]
  ],
  [
    [
      43946,
      43946
    ],
    "mapped",
    [
      5082
    ]
  ],
  [
    [
      43947,
      43947
    ],
    "mapped",
    [
      5083
    ]
  ],
  [
    [
      43948,
      43948
    ],
    "mapped",
    [
      5084
    ]
  ],
  [
    [
      43949,
      43949
    ],
    "mapped",
    [
      5085
    ]
  ],
  [
    [
      43950,
      43950
    ],
    "mapped",
    [
      5086
    ]
  ],
  [
    [
      43951,
      43951
    ],
    "mapped",
    [
      5087
    ]
  ],
  [
    [
      43952,
      43952
    ],
    "mapped",
    [
      5088
    ]
  ],
  [
    [
      43953,
      43953
    ],
    "mapped",
    [
      5089
    ]
  ],
  [
    [
      43954,
      43954
    ],
    "mapped",
    [
      5090
    ]
  ],
  [
    [
      43955,
      43955
    ],
    "mapped",
    [
      5091
    ]
  ],
  [
    [
      43956,
      43956
    ],
    "mapped",
    [
      5092
    ]
  ],
  [
    [
      43957,
      43957
    ],
    "mapped",
    [
      5093
    ]
  ],
  [
    [
      43958,
      43958
    ],
    "mapped",
    [
      5094
    ]
  ],
  [
    [
      43959,
      43959
    ],
    "mapped",
    [
      5095
    ]
  ],
  [
    [
      43960,
      43960
    ],
    "mapped",
    [
      5096
    ]
  ],
  [
    [
      43961,
      43961
    ],
    "mapped",
    [
      5097
    ]
  ],
  [
    [
      43962,
      43962
    ],
    "mapped",
    [
      5098
    ]
  ],
  [
    [
      43963,
      43963
    ],
    "mapped",
    [
      5099
    ]
  ],
  [
    [
      43964,
      43964
    ],
    "mapped",
    [
      5100
    ]
  ],
  [
    [
      43965,
      43965
    ],
    "mapped",
    [
      5101
    ]
  ],
  [
    [
      43966,
      43966
    ],
    "mapped",
    [
      5102
    ]
  ],
  [
    [
      43967,
      43967
    ],
    "mapped",
    [
      5103
    ]
  ],
  [
    [
      43968,
      44010
    ],
    "valid"
  ],
  [
    [
      44011,
      44011
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      44012,
      44013
    ],
    "valid"
  ],
  [
    [
      44014,
      44015
    ],
    "disallowed"
  ],
  [
    [
      44016,
      44025
    ],
    "valid"
  ],
  [
    [
      44026,
      44031
    ],
    "disallowed"
  ],
  [
    [
      44032,
      55203
    ],
    "valid"
  ],
  [
    [
      55204,
      55215
    ],
    "disallowed"
  ],
  [
    [
      55216,
      55238
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      55239,
      55242
    ],
    "disallowed"
  ],
  [
    [
      55243,
      55291
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      55292,
      55295
    ],
    "disallowed"
  ],
  [
    [
      55296,
      57343
    ],
    "disallowed"
  ],
  [
    [
      57344,
      63743
    ],
    "disallowed"
  ],
  [
    [
      63744,
      63744
    ],
    "mapped",
    [
      35912
    ]
  ],
  [
    [
      63745,
      63745
    ],
    "mapped",
    [
      26356
    ]
  ],
  [
    [
      63746,
      63746
    ],
    "mapped",
    [
      36554
    ]
  ],
  [
    [
      63747,
      63747
    ],
    "mapped",
    [
      36040
    ]
  ],
  [
    [
      63748,
      63748
    ],
    "mapped",
    [
      28369
    ]
  ],
  [
    [
      63749,
      63749
    ],
    "mapped",
    [
      20018
    ]
  ],
  [
    [
      63750,
      63750
    ],
    "mapped",
    [
      21477
    ]
  ],
  [
    [
      63751,
      63752
    ],
    "mapped",
    [
      40860
    ]
  ],
  [
    [
      63753,
      63753
    ],
    "mapped",
    [
      22865
    ]
  ],
  [
    [
      63754,
      63754
    ],
    "mapped",
    [
      37329
    ]
  ],
  [
    [
      63755,
      63755
    ],
    "mapped",
    [
      21895
    ]
  ],
  [
    [
      63756,
      63756
    ],
    "mapped",
    [
      22856
    ]
  ],
  [
    [
      63757,
      63757
    ],
    "mapped",
    [
      25078
    ]
  ],
  [
    [
      63758,
      63758
    ],
    "mapped",
    [
      30313
    ]
  ],
  [
    [
      63759,
      63759
    ],
    "mapped",
    [
      32645
    ]
  ],
  [
    [
      63760,
      63760
    ],
    "mapped",
    [
      34367
    ]
  ],
  [
    [
      63761,
      63761
    ],
    "mapped",
    [
      34746
    ]
  ],
  [
    [
      63762,
      63762
    ],
    "mapped",
    [
      35064
    ]
  ],
  [
    [
      63763,
      63763
    ],
    "mapped",
    [
      37007
    ]
  ],
  [
    [
      63764,
      63764
    ],
    "mapped",
    [
      27138
    ]
  ],
  [
    [
      63765,
      63765
    ],
    "mapped",
    [
      27931
    ]
  ],
  [
    [
      63766,
      63766
    ],
    "mapped",
    [
      28889
    ]
  ],
  [
    [
      63767,
      63767
    ],
    "mapped",
    [
      29662
    ]
  ],
  [
    [
      63768,
      63768
    ],
    "mapped",
    [
      33853
    ]
  ],
  [
    [
      63769,
      63769
    ],
    "mapped",
    [
      37226
    ]
  ],
  [
    [
      63770,
      63770
    ],
    "mapped",
    [
      39409
    ]
  ],
  [
    [
      63771,
      63771
    ],
    "mapped",
    [
      20098
    ]
  ],
  [
    [
      63772,
      63772
    ],
    "mapped",
    [
      21365
    ]
  ],
  [
    [
      63773,
      63773
    ],
    "mapped",
    [
      27396
    ]
  ],
  [
    [
      63774,
      63774
    ],
    "mapped",
    [
      29211
    ]
  ],
  [
    [
      63775,
      63775
    ],
    "mapped",
    [
      34349
    ]
  ],
  [
    [
      63776,
      63776
    ],
    "mapped",
    [
      40478
    ]
  ],
  [
    [
      63777,
      63777
    ],
    "mapped",
    [
      23888
    ]
  ],
  [
    [
      63778,
      63778
    ],
    "mapped",
    [
      28651
    ]
  ],
  [
    [
      63779,
      63779
    ],
    "mapped",
    [
      34253
    ]
  ],
  [
    [
      63780,
      63780
    ],
    "mapped",
    [
      35172
    ]
  ],
  [
    [
      63781,
      63781
    ],
    "mapped",
    [
      25289
    ]
  ],
  [
    [
      63782,
      63782
    ],
    "mapped",
    [
      33240
    ]
  ],
  [
    [
      63783,
      63783
    ],
    "mapped",
    [
      34847
    ]
  ],
  [
    [
      63784,
      63784
    ],
    "mapped",
    [
      24266
    ]
  ],
  [
    [
      63785,
      63785
    ],
    "mapped",
    [
      26391
    ]
  ],
  [
    [
      63786,
      63786
    ],
    "mapped",
    [
      28010
    ]
  ],
  [
    [
      63787,
      63787
    ],
    "mapped",
    [
      29436
    ]
  ],
  [
    [
      63788,
      63788
    ],
    "mapped",
    [
      37070
    ]
  ],
  [
    [
      63789,
      63789
    ],
    "mapped",
    [
      20358
    ]
  ],
  [
    [
      63790,
      63790
    ],
    "mapped",
    [
      20919
    ]
  ],
  [
    [
      63791,
      63791
    ],
    "mapped",
    [
      21214
    ]
  ],
  [
    [
      63792,
      63792
    ],
    "mapped",
    [
      25796
    ]
  ],
  [
    [
      63793,
      63793
    ],
    "mapped",
    [
      27347
    ]
  ],
  [
    [
      63794,
      63794
    ],
    "mapped",
    [
      29200
    ]
  ],
  [
    [
      63795,
      63795
    ],
    "mapped",
    [
      30439
    ]
  ],
  [
    [
      63796,
      63796
    ],
    "mapped",
    [
      32769
    ]
  ],
  [
    [
      63797,
      63797
    ],
    "mapped",
    [
      34310
    ]
  ],
  [
    [
      63798,
      63798
    ],
    "mapped",
    [
      34396
    ]
  ],
  [
    [
      63799,
      63799
    ],
    "mapped",
    [
      36335
    ]
  ],
  [
    [
      63800,
      63800
    ],
    "mapped",
    [
      38706
    ]
  ],
  [
    [
      63801,
      63801
    ],
    "mapped",
    [
      39791
    ]
  ],
  [
    [
      63802,
      63802
    ],
    "mapped",
    [
      40442
    ]
  ],
  [
    [
      63803,
      63803
    ],
    "mapped",
    [
      30860
    ]
  ],
  [
    [
      63804,
      63804
    ],
    "mapped",
    [
      31103
    ]
  ],
  [
    [
      63805,
      63805
    ],
    "mapped",
    [
      32160
    ]
  ],
  [
    [
      63806,
      63806
    ],
    "mapped",
    [
      33737
    ]
  ],
  [
    [
      63807,
      63807
    ],
    "mapped",
    [
      37636
    ]
  ],
  [
    [
      63808,
      63808
    ],
    "mapped",
    [
      40575
    ]
  ],
  [
    [
      63809,
      63809
    ],
    "mapped",
    [
      35542
    ]
  ],
  [
    [
      63810,
      63810
    ],
    "mapped",
    [
      22751
    ]
  ],
  [
    [
      63811,
      63811
    ],
    "mapped",
    [
      24324
    ]
  ],
  [
    [
      63812,
      63812
    ],
    "mapped",
    [
      31840
    ]
  ],
  [
    [
      63813,
      63813
    ],
    "mapped",
    [
      32894
    ]
  ],
  [
    [
      63814,
      63814
    ],
    "mapped",
    [
      29282
    ]
  ],
  [
    [
      63815,
      63815
    ],
    "mapped",
    [
      30922
    ]
  ],
  [
    [
      63816,
      63816
    ],
    "mapped",
    [
      36034
    ]
  ],
  [
    [
      63817,
      63817
    ],
    "mapped",
    [
      38647
    ]
  ],
  [
    [
      63818,
      63818
    ],
    "mapped",
    [
      22744
    ]
  ],
  [
    [
      63819,
      63819
    ],
    "mapped",
    [
      23650
    ]
  ],
  [
    [
      63820,
      63820
    ],
    "mapped",
    [
      27155
    ]
  ],
  [
    [
      63821,
      63821
    ],
    "mapped",
    [
      28122
    ]
  ],
  [
    [
      63822,
      63822
    ],
    "mapped",
    [
      28431
    ]
  ],
  [
    [
      63823,
      63823
    ],
    "mapped",
    [
      32047
    ]
  ],
  [
    [
      63824,
      63824
    ],
    "mapped",
    [
      32311
    ]
  ],
  [
    [
      63825,
      63825
    ],
    "mapped",
    [
      38475
    ]
  ],
  [
    [
      63826,
      63826
    ],
    "mapped",
    [
      21202
    ]
  ],
  [
    [
      63827,
      63827
    ],
    "mapped",
    [
      32907
    ]
  ],
  [
    [
      63828,
      63828
    ],
    "mapped",
    [
      20956
    ]
  ],
  [
    [
      63829,
      63829
    ],
    "mapped",
    [
      20940
    ]
  ],
  [
    [
      63830,
      63830
    ],
    "mapped",
    [
      31260
    ]
  ],
  [
    [
      63831,
      63831
    ],
    "mapped",
    [
      32190
    ]
  ],
  [
    [
      63832,
      63832
    ],
    "mapped",
    [
      33777
    ]
  ],
  [
    [
      63833,
      63833
    ],
    "mapped",
    [
      38517
    ]
  ],
  [
    [
      63834,
      63834
    ],
    "mapped",
    [
      35712
    ]
  ],
  [
    [
      63835,
      63835
    ],
    "mapped",
    [
      25295
    ]
  ],
  [
    [
      63836,
      63836
    ],
    "mapped",
    [
      27138
    ]
  ],
  [
    [
      63837,
      63837
    ],
    "mapped",
    [
      35582
    ]
  ],
  [
    [
      63838,
      63838
    ],
    "mapped",
    [
      20025
    ]
  ],
  [
    [
      63839,
      63839
    ],
    "mapped",
    [
      23527
    ]
  ],
  [
    [
      63840,
      63840
    ],
    "mapped",
    [
      24594
    ]
  ],
  [
    [
      63841,
      63841
    ],
    "mapped",
    [
      29575
    ]
  ],
  [
    [
      63842,
      63842
    ],
    "mapped",
    [
      30064
    ]
  ],
  [
    [
      63843,
      63843
    ],
    "mapped",
    [
      21271
    ]
  ],
  [
    [
      63844,
      63844
    ],
    "mapped",
    [
      30971
    ]
  ],
  [
    [
      63845,
      63845
    ],
    "mapped",
    [
      20415
    ]
  ],
  [
    [
      63846,
      63846
    ],
    "mapped",
    [
      24489
    ]
  ],
  [
    [
      63847,
      63847
    ],
    "mapped",
    [
      19981
    ]
  ],
  [
    [
      63848,
      63848
    ],
    "mapped",
    [
      27852
    ]
  ],
  [
    [
      63849,
      63849
    ],
    "mapped",
    [
      25976
    ]
  ],
  [
    [
      63850,
      63850
    ],
    "mapped",
    [
      32034
    ]
  ],
  [
    [
      63851,
      63851
    ],
    "mapped",
    [
      21443
    ]
  ],
  [
    [
      63852,
      63852
    ],
    "mapped",
    [
      22622
    ]
  ],
  [
    [
      63853,
      63853
    ],
    "mapped",
    [
      30465
    ]
  ],
  [
    [
      63854,
      63854
    ],
    "mapped",
    [
      33865
    ]
  ],
  [
    [
      63855,
      63855
    ],
    "mapped",
    [
      35498
    ]
  ],
  [
    [
      63856,
      63856
    ],
    "mapped",
    [
      27578
    ]
  ],
  [
    [
      63857,
      63857
    ],
    "mapped",
    [
      36784
    ]
  ],
  [
    [
      63858,
      63858
    ],
    "mapped",
    [
      27784
    ]
  ],
  [
    [
      63859,
      63859
    ],
    "mapped",
    [
      25342
    ]
  ],
  [
    [
      63860,
      63860
    ],
    "mapped",
    [
      33509
    ]
  ],
  [
    [
      63861,
      63861
    ],
    "mapped",
    [
      25504
    ]
  ],
  [
    [
      63862,
      63862
    ],
    "mapped",
    [
      30053
    ]
  ],
  [
    [
      63863,
      63863
    ],
    "mapped",
    [
      20142
    ]
  ],
  [
    [
      63864,
      63864
    ],
    "mapped",
    [
      20841
    ]
  ],
  [
    [
      63865,
      63865
    ],
    "mapped",
    [
      20937
    ]
  ],
  [
    [
      63866,
      63866
    ],
    "mapped",
    [
      26753
    ]
  ],
  [
    [
      63867,
      63867
    ],
    "mapped",
    [
      31975
    ]
  ],
  [
    [
      63868,
      63868
    ],
    "mapped",
    [
      33391
    ]
  ],
  [
    [
      63869,
      63869
    ],
    "mapped",
    [
      35538
    ]
  ],
  [
    [
      63870,
      63870
    ],
    "mapped",
    [
      37327
    ]
  ],
  [
    [
      63871,
      63871
    ],
    "mapped",
    [
      21237
    ]
  ],
  [
    [
      63872,
      63872
    ],
    "mapped",
    [
      21570
    ]
  ],
  [
    [
      63873,
      63873
    ],
    "mapped",
    [
      22899
    ]
  ],
  [
    [
      63874,
      63874
    ],
    "mapped",
    [
      24300
    ]
  ],
  [
    [
      63875,
      63875
    ],
    "mapped",
    [
      26053
    ]
  ],
  [
    [
      63876,
      63876
    ],
    "mapped",
    [
      28670
    ]
  ],
  [
    [
      63877,
      63877
    ],
    "mapped",
    [
      31018
    ]
  ],
  [
    [
      63878,
      63878
    ],
    "mapped",
    [
      38317
    ]
  ],
  [
    [
      63879,
      63879
    ],
    "mapped",
    [
      39530
    ]
  ],
  [
    [
      63880,
      63880
    ],
    "mapped",
    [
      40599
    ]
  ],
  [
    [
      63881,
      63881
    ],
    "mapped",
    [
      40654
    ]
  ],
  [
    [
      63882,
      63882
    ],
    "mapped",
    [
      21147
    ]
  ],
  [
    [
      63883,
      63883
    ],
    "mapped",
    [
      26310
    ]
  ],
  [
    [
      63884,
      63884
    ],
    "mapped",
    [
      27511
    ]
  ],
  [
    [
      63885,
      63885
    ],
    "mapped",
    [
      36706
    ]
  ],
  [
    [
      63886,
      63886
    ],
    "mapped",
    [
      24180
    ]
  ],
  [
    [
      63887,
      63887
    ],
    "mapped",
    [
      24976
    ]
  ],
  [
    [
      63888,
      63888
    ],
    "mapped",
    [
      25088
    ]
  ],
  [
    [
      63889,
      63889
    ],
    "mapped",
    [
      25754
    ]
  ],
  [
    [
      63890,
      63890
    ],
    "mapped",
    [
      28451
    ]
  ],
  [
    [
      63891,
      63891
    ],
    "mapped",
    [
      29001
    ]
  ],
  [
    [
      63892,
      63892
    ],
    "mapped",
    [
      29833
    ]
  ],
  [
    [
      63893,
      63893
    ],
    "mapped",
    [
      31178
    ]
  ],
  [
    [
      63894,
      63894
    ],
    "mapped",
    [
      32244
    ]
  ],
  [
    [
      63895,
      63895
    ],
    "mapped",
    [
      32879
    ]
  ],
  [
    [
      63896,
      63896
    ],
    "mapped",
    [
      36646
    ]
  ],
  [
    [
      63897,
      63897
    ],
    "mapped",
    [
      34030
    ]
  ],
  [
    [
      63898,
      63898
    ],
    "mapped",
    [
      36899
    ]
  ],
  [
    [
      63899,
      63899
    ],
    "mapped",
    [
      37706
    ]
  ],
  [
    [
      63900,
      63900
    ],
    "mapped",
    [
      21015
    ]
  ],
  [
    [
      63901,
      63901
    ],
    "mapped",
    [
      21155
    ]
  ],
  [
    [
      63902,
      63902
    ],
    "mapped",
    [
      21693
    ]
  ],
  [
    [
      63903,
      63903
    ],
    "mapped",
    [
      28872
    ]
  ],
  [
    [
      63904,
      63904
    ],
    "mapped",
    [
      35010
    ]
  ],
  [
    [
      63905,
      63905
    ],
    "mapped",
    [
      35498
    ]
  ],
  [
    [
      63906,
      63906
    ],
    "mapped",
    [
      24265
    ]
  ],
  [
    [
      63907,
      63907
    ],
    "mapped",
    [
      24565
    ]
  ],
  [
    [
      63908,
      63908
    ],
    "mapped",
    [
      25467
    ]
  ],
  [
    [
      63909,
      63909
    ],
    "mapped",
    [
      27566
    ]
  ],
  [
    [
      63910,
      63910
    ],
    "mapped",
    [
      31806
    ]
  ],
  [
    [
      63911,
      63911
    ],
    "mapped",
    [
      29557
    ]
  ],
  [
    [
      63912,
      63912
    ],
    "mapped",
    [
      20196
    ]
  ],
  [
    [
      63913,
      63913
    ],
    "mapped",
    [
      22265
    ]
  ],
  [
    [
      63914,
      63914
    ],
    "mapped",
    [
      23527
    ]
  ],
  [
    [
      63915,
      63915
    ],
    "mapped",
    [
      23994
    ]
  ],
  [
    [
      63916,
      63916
    ],
    "mapped",
    [
      24604
    ]
  ],
  [
    [
      63917,
      63917
    ],
    "mapped",
    [
      29618
    ]
  ],
  [
    [
      63918,
      63918
    ],
    "mapped",
    [
      29801
    ]
  ],
  [
    [
      63919,
      63919
    ],
    "mapped",
    [
      32666
    ]
  ],
  [
    [
      63920,
      63920
    ],
    "mapped",
    [
      32838
    ]
  ],
  [
    [
      63921,
      63921
    ],
    "mapped",
    [
      37428
    ]
  ],
  [
    [
      63922,
      63922
    ],
    "mapped",
    [
      38646
    ]
  ],
  [
    [
      63923,
      63923
    ],
    "mapped",
    [
      38728
    ]
  ],
  [
    [
      63924,
      63924
    ],
    "mapped",
    [
      38936
    ]
  ],
  [
    [
      63925,
      63925
    ],
    "mapped",
    [
      20363
    ]
  ],
  [
    [
      63926,
      63926
    ],
    "mapped",
    [
      31150
    ]
  ],
  [
    [
      63927,
      63927
    ],
    "mapped",
    [
      37300
    ]
  ],
  [
    [
      63928,
      63928
    ],
    "mapped",
    [
      38584
    ]
  ],
  [
    [
      63929,
      63929
    ],
    "mapped",
    [
      24801
    ]
  ],
  [
    [
      63930,
      63930
    ],
    "mapped",
    [
      20102
    ]
  ],
  [
    [
      63931,
      63931
    ],
    "mapped",
    [
      20698
    ]
  ],
  [
    [
      63932,
      63932
    ],
    "mapped",
    [
      23534
    ]
  ],
  [
    [
      63933,
      63933
    ],
    "mapped",
    [
      23615
    ]
  ],
  [
    [
      63934,
      63934
    ],
    "mapped",
    [
      26009
    ]
  ],
  [
    [
      63935,
      63935
    ],
    "mapped",
    [
      27138
    ]
  ],
  [
    [
      63936,
      63936
    ],
    "mapped",
    [
      29134
    ]
  ],
  [
    [
      63937,
      63937
    ],
    "mapped",
    [
      30274
    ]
  ],
  [
    [
      63938,
      63938
    ],
    "mapped",
    [
      34044
    ]
  ],
  [
    [
      63939,
      63939
    ],
    "mapped",
    [
      36988
    ]
  ],
  [
    [
      63940,
      63940
    ],
    "mapped",
    [
      40845
    ]
  ],
  [
    [
      63941,
      63941
    ],
    "mapped",
    [
      26248
    ]
  ],
  [
    [
      63942,
      63942
    ],
    "mapped",
    [
      38446
    ]
  ],
  [
    [
      63943,
      63943
    ],
    "mapped",
    [
      21129
    ]
  ],
  [
    [
      63944,
      63944
    ],
    "mapped",
    [
      26491
    ]
  ],
  [
    [
      63945,
      63945
    ],
    "mapped",
    [
      26611
    ]
  ],
  [
    [
      63946,
      63946
    ],
    "mapped",
    [
      27969
    ]
  ],
  [
    [
      63947,
      63947
    ],
    "mapped",
    [
      28316
    ]
  ],
  [
    [
      63948,
      63948
    ],
    "mapped",
    [
      29705
    ]
  ],
  [
    [
      63949,
      63949
    ],
    "mapped",
    [
      30041
    ]
  ],
  [
    [
      63950,
      63950
    ],
    "mapped",
    [
      30827
    ]
  ],
  [
    [
      63951,
      63951
    ],
    "mapped",
    [
      32016
    ]
  ],
  [
    [
      63952,
      63952
    ],
    "mapped",
    [
      39006
    ]
  ],
  [
    [
      63953,
      63953
    ],
    "mapped",
    [
      20845
    ]
  ],
  [
    [
      63954,
      63954
    ],
    "mapped",
    [
      25134
    ]
  ],
  [
    [
      63955,
      63955
    ],
    "mapped",
    [
      38520
    ]
  ],
  [
    [
      63956,
      63956
    ],
    "mapped",
    [
      20523
    ]
  ],
  [
    [
      63957,
      63957
    ],
    "mapped",
    [
      23833
    ]
  ],
  [
    [
      63958,
      63958
    ],
    "mapped",
    [
      28138
    ]
  ],
  [
    [
      63959,
      63959
    ],
    "mapped",
    [
      36650
    ]
  ],
  [
    [
      63960,
      63960
    ],
    "mapped",
    [
      24459
    ]
  ],
  [
    [
      63961,
      63961
    ],
    "mapped",
    [
      24900
    ]
  ],
  [
    [
      63962,
      63962
    ],
    "mapped",
    [
      26647
    ]
  ],
  [
    [
      63963,
      63963
    ],
    "mapped",
    [
      29575
    ]
  ],
  [
    [
      63964,
      63964
    ],
    "mapped",
    [
      38534
    ]
  ],
  [
    [
      63965,
      63965
    ],
    "mapped",
    [
      21033
    ]
  ],
  [
    [
      63966,
      63966
    ],
    "mapped",
    [
      21519
    ]
  ],
  [
    [
      63967,
      63967
    ],
    "mapped",
    [
      23653
    ]
  ],
  [
    [
      63968,
      63968
    ],
    "mapped",
    [
      26131
    ]
  ],
  [
    [
      63969,
      63969
    ],
    "mapped",
    [
      26446
    ]
  ],
  [
    [
      63970,
      63970
    ],
    "mapped",
    [
      26792
    ]
  ],
  [
    [
      63971,
      63971
    ],
    "mapped",
    [
      27877
    ]
  ],
  [
    [
      63972,
      63972
    ],
    "mapped",
    [
      29702
    ]
  ],
  [
    [
      63973,
      63973
    ],
    "mapped",
    [
      30178
    ]
  ],
  [
    [
      63974,
      63974
    ],
    "mapped",
    [
      32633
    ]
  ],
  [
    [
      63975,
      63975
    ],
    "mapped",
    [
      35023
    ]
  ],
  [
    [
      63976,
      63976
    ],
    "mapped",
    [
      35041
    ]
  ],
  [
    [
      63977,
      63977
    ],
    "mapped",
    [
      37324
    ]
  ],
  [
    [
      63978,
      63978
    ],
    "mapped",
    [
      38626
    ]
  ],
  [
    [
      63979,
      63979
    ],
    "mapped",
    [
      21311
    ]
  ],
  [
    [
      63980,
      63980
    ],
    "mapped",
    [
      28346
    ]
  ],
  [
    [
      63981,
      63981
    ],
    "mapped",
    [
      21533
    ]
  ],
  [
    [
      63982,
      63982
    ],
    "mapped",
    [
      29136
    ]
  ],
  [
    [
      63983,
      63983
    ],
    "mapped",
    [
      29848
    ]
  ],
  [
    [
      63984,
      63984
    ],
    "mapped",
    [
      34298
    ]
  ],
  [
    [
      63985,
      63985
    ],
    "mapped",
    [
      38563
    ]
  ],
  [
    [
      63986,
      63986
    ],
    "mapped",
    [
      40023
    ]
  ],
  [
    [
      63987,
      63987
    ],
    "mapped",
    [
      40607
    ]
  ],
  [
    [
      63988,
      63988
    ],
    "mapped",
    [
      26519
    ]
  ],
  [
    [
      63989,
      63989
    ],
    "mapped",
    [
      28107
    ]
  ],
  [
    [
      63990,
      63990
    ],
    "mapped",
    [
      33256
    ]
  ],
  [
    [
      63991,
      63991
    ],
    "mapped",
    [
      31435
    ]
  ],
  [
    [
      63992,
      63992
    ],
    "mapped",
    [
      31520
    ]
  ],
  [
    [
      63993,
      63993
    ],
    "mapped",
    [
      31890
    ]
  ],
  [
    [
      63994,
      63994
    ],
    "mapped",
    [
      29376
    ]
  ],
  [
    [
      63995,
      63995
    ],
    "mapped",
    [
      28825
    ]
  ],
  [
    [
      63996,
      63996
    ],
    "mapped",
    [
      35672
    ]
  ],
  [
    [
      63997,
      63997
    ],
    "mapped",
    [
      20160
    ]
  ],
  [
    [
      63998,
      63998
    ],
    "mapped",
    [
      33590
    ]
  ],
  [
    [
      63999,
      63999
    ],
    "mapped",
    [
      21050
    ]
  ],
  [
    [
      64e3,
      64e3
    ],
    "mapped",
    [
      20999
    ]
  ],
  [
    [
      64001,
      64001
    ],
    "mapped",
    [
      24230
    ]
  ],
  [
    [
      64002,
      64002
    ],
    "mapped",
    [
      25299
    ]
  ],
  [
    [
      64003,
      64003
    ],
    "mapped",
    [
      31958
    ]
  ],
  [
    [
      64004,
      64004
    ],
    "mapped",
    [
      23429
    ]
  ],
  [
    [
      64005,
      64005
    ],
    "mapped",
    [
      27934
    ]
  ],
  [
    [
      64006,
      64006
    ],
    "mapped",
    [
      26292
    ]
  ],
  [
    [
      64007,
      64007
    ],
    "mapped",
    [
      36667
    ]
  ],
  [
    [
      64008,
      64008
    ],
    "mapped",
    [
      34892
    ]
  ],
  [
    [
      64009,
      64009
    ],
    "mapped",
    [
      38477
    ]
  ],
  [
    [
      64010,
      64010
    ],
    "mapped",
    [
      35211
    ]
  ],
  [
    [
      64011,
      64011
    ],
    "mapped",
    [
      24275
    ]
  ],
  [
    [
      64012,
      64012
    ],
    "mapped",
    [
      20800
    ]
  ],
  [
    [
      64013,
      64013
    ],
    "mapped",
    [
      21952
    ]
  ],
  [
    [
      64014,
      64015
    ],
    "valid"
  ],
  [
    [
      64016,
      64016
    ],
    "mapped",
    [
      22618
    ]
  ],
  [
    [
      64017,
      64017
    ],
    "valid"
  ],
  [
    [
      64018,
      64018
    ],
    "mapped",
    [
      26228
    ]
  ],
  [
    [
      64019,
      64020
    ],
    "valid"
  ],
  [
    [
      64021,
      64021
    ],
    "mapped",
    [
      20958
    ]
  ],
  [
    [
      64022,
      64022
    ],
    "mapped",
    [
      29482
    ]
  ],
  [
    [
      64023,
      64023
    ],
    "mapped",
    [
      30410
    ]
  ],
  [
    [
      64024,
      64024
    ],
    "mapped",
    [
      31036
    ]
  ],
  [
    [
      64025,
      64025
    ],
    "mapped",
    [
      31070
    ]
  ],
  [
    [
      64026,
      64026
    ],
    "mapped",
    [
      31077
    ]
  ],
  [
    [
      64027,
      64027
    ],
    "mapped",
    [
      31119
    ]
  ],
  [
    [
      64028,
      64028
    ],
    "mapped",
    [
      38742
    ]
  ],
  [
    [
      64029,
      64029
    ],
    "mapped",
    [
      31934
    ]
  ],
  [
    [
      64030,
      64030
    ],
    "mapped",
    [
      32701
    ]
  ],
  [
    [
      64031,
      64031
    ],
    "valid"
  ],
  [
    [
      64032,
      64032
    ],
    "mapped",
    [
      34322
    ]
  ],
  [
    [
      64033,
      64033
    ],
    "valid"
  ],
  [
    [
      64034,
      64034
    ],
    "mapped",
    [
      35576
    ]
  ],
  [
    [
      64035,
      64036
    ],
    "valid"
  ],
  [
    [
      64037,
      64037
    ],
    "mapped",
    [
      36920
    ]
  ],
  [
    [
      64038,
      64038
    ],
    "mapped",
    [
      37117
    ]
  ],
  [
    [
      64039,
      64041
    ],
    "valid"
  ],
  [
    [
      64042,
      64042
    ],
    "mapped",
    [
      39151
    ]
  ],
  [
    [
      64043,
      64043
    ],
    "mapped",
    [
      39164
    ]
  ],
  [
    [
      64044,
      64044
    ],
    "mapped",
    [
      39208
    ]
  ],
  [
    [
      64045,
      64045
    ],
    "mapped",
    [
      40372
    ]
  ],
  [
    [
      64046,
      64046
    ],
    "mapped",
    [
      37086
    ]
  ],
  [
    [
      64047,
      64047
    ],
    "mapped",
    [
      38583
    ]
  ],
  [
    [
      64048,
      64048
    ],
    "mapped",
    [
      20398
    ]
  ],
  [
    [
      64049,
      64049
    ],
    "mapped",
    [
      20711
    ]
  ],
  [
    [
      64050,
      64050
    ],
    "mapped",
    [
      20813
    ]
  ],
  [
    [
      64051,
      64051
    ],
    "mapped",
    [
      21193
    ]
  ],
  [
    [
      64052,
      64052
    ],
    "mapped",
    [
      21220
    ]
  ],
  [
    [
      64053,
      64053
    ],
    "mapped",
    [
      21329
    ]
  ],
  [
    [
      64054,
      64054
    ],
    "mapped",
    [
      21917
    ]
  ],
  [
    [
      64055,
      64055
    ],
    "mapped",
    [
      22022
    ]
  ],
  [
    [
      64056,
      64056
    ],
    "mapped",
    [
      22120
    ]
  ],
  [
    [
      64057,
      64057
    ],
    "mapped",
    [
      22592
    ]
  ],
  [
    [
      64058,
      64058
    ],
    "mapped",
    [
      22696
    ]
  ],
  [
    [
      64059,
      64059
    ],
    "mapped",
    [
      23652
    ]
  ],
  [
    [
      64060,
      64060
    ],
    "mapped",
    [
      23662
    ]
  ],
  [
    [
      64061,
      64061
    ],
    "mapped",
    [
      24724
    ]
  ],
  [
    [
      64062,
      64062
    ],
    "mapped",
    [
      24936
    ]
  ],
  [
    [
      64063,
      64063
    ],
    "mapped",
    [
      24974
    ]
  ],
  [
    [
      64064,
      64064
    ],
    "mapped",
    [
      25074
    ]
  ],
  [
    [
      64065,
      64065
    ],
    "mapped",
    [
      25935
    ]
  ],
  [
    [
      64066,
      64066
    ],
    "mapped",
    [
      26082
    ]
  ],
  [
    [
      64067,
      64067
    ],
    "mapped",
    [
      26257
    ]
  ],
  [
    [
      64068,
      64068
    ],
    "mapped",
    [
      26757
    ]
  ],
  [
    [
      64069,
      64069
    ],
    "mapped",
    [
      28023
    ]
  ],
  [
    [
      64070,
      64070
    ],
    "mapped",
    [
      28186
    ]
  ],
  [
    [
      64071,
      64071
    ],
    "mapped",
    [
      28450
    ]
  ],
  [
    [
      64072,
      64072
    ],
    "mapped",
    [
      29038
    ]
  ],
  [
    [
      64073,
      64073
    ],
    "mapped",
    [
      29227
    ]
  ],
  [
    [
      64074,
      64074
    ],
    "mapped",
    [
      29730
    ]
  ],
  [
    [
      64075,
      64075
    ],
    "mapped",
    [
      30865
    ]
  ],
  [
    [
      64076,
      64076
    ],
    "mapped",
    [
      31038
    ]
  ],
  [
    [
      64077,
      64077
    ],
    "mapped",
    [
      31049
    ]
  ],
  [
    [
      64078,
      64078
    ],
    "mapped",
    [
      31048
    ]
  ],
  [
    [
      64079,
      64079
    ],
    "mapped",
    [
      31056
    ]
  ],
  [
    [
      64080,
      64080
    ],
    "mapped",
    [
      31062
    ]
  ],
  [
    [
      64081,
      64081
    ],
    "mapped",
    [
      31069
    ]
  ],
  [
    [
      64082,
      64082
    ],
    "mapped",
    [
      31117
    ]
  ],
  [
    [
      64083,
      64083
    ],
    "mapped",
    [
      31118
    ]
  ],
  [
    [
      64084,
      64084
    ],
    "mapped",
    [
      31296
    ]
  ],
  [
    [
      64085,
      64085
    ],
    "mapped",
    [
      31361
    ]
  ],
  [
    [
      64086,
      64086
    ],
    "mapped",
    [
      31680
    ]
  ],
  [
    [
      64087,
      64087
    ],
    "mapped",
    [
      32244
    ]
  ],
  [
    [
      64088,
      64088
    ],
    "mapped",
    [
      32265
    ]
  ],
  [
    [
      64089,
      64089
    ],
    "mapped",
    [
      32321
    ]
  ],
  [
    [
      64090,
      64090
    ],
    "mapped",
    [
      32626
    ]
  ],
  [
    [
      64091,
      64091
    ],
    "mapped",
    [
      32773
    ]
  ],
  [
    [
      64092,
      64092
    ],
    "mapped",
    [
      33261
    ]
  ],
  [
    [
      64093,
      64094
    ],
    "mapped",
    [
      33401
    ]
  ],
  [
    [
      64095,
      64095
    ],
    "mapped",
    [
      33879
    ]
  ],
  [
    [
      64096,
      64096
    ],
    "mapped",
    [
      35088
    ]
  ],
  [
    [
      64097,
      64097
    ],
    "mapped",
    [
      35222
    ]
  ],
  [
    [
      64098,
      64098
    ],
    "mapped",
    [
      35585
    ]
  ],
  [
    [
      64099,
      64099
    ],
    "mapped",
    [
      35641
    ]
  ],
  [
    [
      64100,
      64100
    ],
    "mapped",
    [
      36051
    ]
  ],
  [
    [
      64101,
      64101
    ],
    "mapped",
    [
      36104
    ]
  ],
  [
    [
      64102,
      64102
    ],
    "mapped",
    [
      36790
    ]
  ],
  [
    [
      64103,
      64103
    ],
    "mapped",
    [
      36920
    ]
  ],
  [
    [
      64104,
      64104
    ],
    "mapped",
    [
      38627
    ]
  ],
  [
    [
      64105,
      64105
    ],
    "mapped",
    [
      38911
    ]
  ],
  [
    [
      64106,
      64106
    ],
    "mapped",
    [
      38971
    ]
  ],
  [
    [
      64107,
      64107
    ],
    "mapped",
    [
      24693
    ]
  ],
  [
    [
      64108,
      64108
    ],
    "mapped",
    [
      148206
    ]
  ],
  [
    [
      64109,
      64109
    ],
    "mapped",
    [
      33304
    ]
  ],
  [
    [
      64110,
      64111
    ],
    "disallowed"
  ],
  [
    [
      64112,
      64112
    ],
    "mapped",
    [
      20006
    ]
  ],
  [
    [
      64113,
      64113
    ],
    "mapped",
    [
      20917
    ]
  ],
  [
    [
      64114,
      64114
    ],
    "mapped",
    [
      20840
    ]
  ],
  [
    [
      64115,
      64115
    ],
    "mapped",
    [
      20352
    ]
  ],
  [
    [
      64116,
      64116
    ],
    "mapped",
    [
      20805
    ]
  ],
  [
    [
      64117,
      64117
    ],
    "mapped",
    [
      20864
    ]
  ],
  [
    [
      64118,
      64118
    ],
    "mapped",
    [
      21191
    ]
  ],
  [
    [
      64119,
      64119
    ],
    "mapped",
    [
      21242
    ]
  ],
  [
    [
      64120,
      64120
    ],
    "mapped",
    [
      21917
    ]
  ],
  [
    [
      64121,
      64121
    ],
    "mapped",
    [
      21845
    ]
  ],
  [
    [
      64122,
      64122
    ],
    "mapped",
    [
      21913
    ]
  ],
  [
    [
      64123,
      64123
    ],
    "mapped",
    [
      21986
    ]
  ],
  [
    [
      64124,
      64124
    ],
    "mapped",
    [
      22618
    ]
  ],
  [
    [
      64125,
      64125
    ],
    "mapped",
    [
      22707
    ]
  ],
  [
    [
      64126,
      64126
    ],
    "mapped",
    [
      22852
    ]
  ],
  [
    [
      64127,
      64127
    ],
    "mapped",
    [
      22868
    ]
  ],
  [
    [
      64128,
      64128
    ],
    "mapped",
    [
      23138
    ]
  ],
  [
    [
      64129,
      64129
    ],
    "mapped",
    [
      23336
    ]
  ],
  [
    [
      64130,
      64130
    ],
    "mapped",
    [
      24274
    ]
  ],
  [
    [
      64131,
      64131
    ],
    "mapped",
    [
      24281
    ]
  ],
  [
    [
      64132,
      64132
    ],
    "mapped",
    [
      24425
    ]
  ],
  [
    [
      64133,
      64133
    ],
    "mapped",
    [
      24493
    ]
  ],
  [
    [
      64134,
      64134
    ],
    "mapped",
    [
      24792
    ]
  ],
  [
    [
      64135,
      64135
    ],
    "mapped",
    [
      24910
    ]
  ],
  [
    [
      64136,
      64136
    ],
    "mapped",
    [
      24840
    ]
  ],
  [
    [
      64137,
      64137
    ],
    "mapped",
    [
      24974
    ]
  ],
  [
    [
      64138,
      64138
    ],
    "mapped",
    [
      24928
    ]
  ],
  [
    [
      64139,
      64139
    ],
    "mapped",
    [
      25074
    ]
  ],
  [
    [
      64140,
      64140
    ],
    "mapped",
    [
      25140
    ]
  ],
  [
    [
      64141,
      64141
    ],
    "mapped",
    [
      25540
    ]
  ],
  [
    [
      64142,
      64142
    ],
    "mapped",
    [
      25628
    ]
  ],
  [
    [
      64143,
      64143
    ],
    "mapped",
    [
      25682
    ]
  ],
  [
    [
      64144,
      64144
    ],
    "mapped",
    [
      25942
    ]
  ],
  [
    [
      64145,
      64145
    ],
    "mapped",
    [
      26228
    ]
  ],
  [
    [
      64146,
      64146
    ],
    "mapped",
    [
      26391
    ]
  ],
  [
    [
      64147,
      64147
    ],
    "mapped",
    [
      26395
    ]
  ],
  [
    [
      64148,
      64148
    ],
    "mapped",
    [
      26454
    ]
  ],
  [
    [
      64149,
      64149
    ],
    "mapped",
    [
      27513
    ]
  ],
  [
    [
      64150,
      64150
    ],
    "mapped",
    [
      27578
    ]
  ],
  [
    [
      64151,
      64151
    ],
    "mapped",
    [
      27969
    ]
  ],
  [
    [
      64152,
      64152
    ],
    "mapped",
    [
      28379
    ]
  ],
  [
    [
      64153,
      64153
    ],
    "mapped",
    [
      28363
    ]
  ],
  [
    [
      64154,
      64154
    ],
    "mapped",
    [
      28450
    ]
  ],
  [
    [
      64155,
      64155
    ],
    "mapped",
    [
      28702
    ]
  ],
  [
    [
      64156,
      64156
    ],
    "mapped",
    [
      29038
    ]
  ],
  [
    [
      64157,
      64157
    ],
    "mapped",
    [
      30631
    ]
  ],
  [
    [
      64158,
      64158
    ],
    "mapped",
    [
      29237
    ]
  ],
  [
    [
      64159,
      64159
    ],
    "mapped",
    [
      29359
    ]
  ],
  [
    [
      64160,
      64160
    ],
    "mapped",
    [
      29482
    ]
  ],
  [
    [
      64161,
      64161
    ],
    "mapped",
    [
      29809
    ]
  ],
  [
    [
      64162,
      64162
    ],
    "mapped",
    [
      29958
    ]
  ],
  [
    [
      64163,
      64163
    ],
    "mapped",
    [
      30011
    ]
  ],
  [
    [
      64164,
      64164
    ],
    "mapped",
    [
      30237
    ]
  ],
  [
    [
      64165,
      64165
    ],
    "mapped",
    [
      30239
    ]
  ],
  [
    [
      64166,
      64166
    ],
    "mapped",
    [
      30410
    ]
  ],
  [
    [
      64167,
      64167
    ],
    "mapped",
    [
      30427
    ]
  ],
  [
    [
      64168,
      64168
    ],
    "mapped",
    [
      30452
    ]
  ],
  [
    [
      64169,
      64169
    ],
    "mapped",
    [
      30538
    ]
  ],
  [
    [
      64170,
      64170
    ],
    "mapped",
    [
      30528
    ]
  ],
  [
    [
      64171,
      64171
    ],
    "mapped",
    [
      30924
    ]
  ],
  [
    [
      64172,
      64172
    ],
    "mapped",
    [
      31409
    ]
  ],
  [
    [
      64173,
      64173
    ],
    "mapped",
    [
      31680
    ]
  ],
  [
    [
      64174,
      64174
    ],
    "mapped",
    [
      31867
    ]
  ],
  [
    [
      64175,
      64175
    ],
    "mapped",
    [
      32091
    ]
  ],
  [
    [
      64176,
      64176
    ],
    "mapped",
    [
      32244
    ]
  ],
  [
    [
      64177,
      64177
    ],
    "mapped",
    [
      32574
    ]
  ],
  [
    [
      64178,
      64178
    ],
    "mapped",
    [
      32773
    ]
  ],
  [
    [
      64179,
      64179
    ],
    "mapped",
    [
      33618
    ]
  ],
  [
    [
      64180,
      64180
    ],
    "mapped",
    [
      33775
    ]
  ],
  [
    [
      64181,
      64181
    ],
    "mapped",
    [
      34681
    ]
  ],
  [
    [
      64182,
      64182
    ],
    "mapped",
    [
      35137
    ]
  ],
  [
    [
      64183,
      64183
    ],
    "mapped",
    [
      35206
    ]
  ],
  [
    [
      64184,
      64184
    ],
    "mapped",
    [
      35222
    ]
  ],
  [
    [
      64185,
      64185
    ],
    "mapped",
    [
      35519
    ]
  ],
  [
    [
      64186,
      64186
    ],
    "mapped",
    [
      35576
    ]
  ],
  [
    [
      64187,
      64187
    ],
    "mapped",
    [
      35531
    ]
  ],
  [
    [
      64188,
      64188
    ],
    "mapped",
    [
      35585
    ]
  ],
  [
    [
      64189,
      64189
    ],
    "mapped",
    [
      35582
    ]
  ],
  [
    [
      64190,
      64190
    ],
    "mapped",
    [
      35565
    ]
  ],
  [
    [
      64191,
      64191
    ],
    "mapped",
    [
      35641
    ]
  ],
  [
    [
      64192,
      64192
    ],
    "mapped",
    [
      35722
    ]
  ],
  [
    [
      64193,
      64193
    ],
    "mapped",
    [
      36104
    ]
  ],
  [
    [
      64194,
      64194
    ],
    "mapped",
    [
      36664
    ]
  ],
  [
    [
      64195,
      64195
    ],
    "mapped",
    [
      36978
    ]
  ],
  [
    [
      64196,
      64196
    ],
    "mapped",
    [
      37273
    ]
  ],
  [
    [
      64197,
      64197
    ],
    "mapped",
    [
      37494
    ]
  ],
  [
    [
      64198,
      64198
    ],
    "mapped",
    [
      38524
    ]
  ],
  [
    [
      64199,
      64199
    ],
    "mapped",
    [
      38627
    ]
  ],
  [
    [
      64200,
      64200
    ],
    "mapped",
    [
      38742
    ]
  ],
  [
    [
      64201,
      64201
    ],
    "mapped",
    [
      38875
    ]
  ],
  [
    [
      64202,
      64202
    ],
    "mapped",
    [
      38911
    ]
  ],
  [
    [
      64203,
      64203
    ],
    "mapped",
    [
      38923
    ]
  ],
  [
    [
      64204,
      64204
    ],
    "mapped",
    [
      38971
    ]
  ],
  [
    [
      64205,
      64205
    ],
    "mapped",
    [
      39698
    ]
  ],
  [
    [
      64206,
      64206
    ],
    "mapped",
    [
      40860
    ]
  ],
  [
    [
      64207,
      64207
    ],
    "mapped",
    [
      141386
    ]
  ],
  [
    [
      64208,
      64208
    ],
    "mapped",
    [
      141380
    ]
  ],
  [
    [
      64209,
      64209
    ],
    "mapped",
    [
      144341
    ]
  ],
  [
    [
      64210,
      64210
    ],
    "mapped",
    [
      15261
    ]
  ],
  [
    [
      64211,
      64211
    ],
    "mapped",
    [
      16408
    ]
  ],
  [
    [
      64212,
      64212
    ],
    "mapped",
    [
      16441
    ]
  ],
  [
    [
      64213,
      64213
    ],
    "mapped",
    [
      152137
    ]
  ],
  [
    [
      64214,
      64214
    ],
    "mapped",
    [
      154832
    ]
  ],
  [
    [
      64215,
      64215
    ],
    "mapped",
    [
      163539
    ]
  ],
  [
    [
      64216,
      64216
    ],
    "mapped",
    [
      40771
    ]
  ],
  [
    [
      64217,
      64217
    ],
    "mapped",
    [
      40846
    ]
  ],
  [
    [
      64218,
      64255
    ],
    "disallowed"
  ],
  [
    [
      64256,
      64256
    ],
    "mapped",
    [
      102,
      102
    ]
  ],
  [
    [
      64257,
      64257
    ],
    "mapped",
    [
      102,
      105
    ]
  ],
  [
    [
      64258,
      64258
    ],
    "mapped",
    [
      102,
      108
    ]
  ],
  [
    [
      64259,
      64259
    ],
    "mapped",
    [
      102,
      102,
      105
    ]
  ],
  [
    [
      64260,
      64260
    ],
    "mapped",
    [
      102,
      102,
      108
    ]
  ],
  [
    [
      64261,
      64262
    ],
    "mapped",
    [
      115,
      116
    ]
  ],
  [
    [
      64263,
      64274
    ],
    "disallowed"
  ],
  [
    [
      64275,
      64275
    ],
    "mapped",
    [
      1396,
      1398
    ]
  ],
  [
    [
      64276,
      64276
    ],
    "mapped",
    [
      1396,
      1381
    ]
  ],
  [
    [
      64277,
      64277
    ],
    "mapped",
    [
      1396,
      1387
    ]
  ],
  [
    [
      64278,
      64278
    ],
    "mapped",
    [
      1406,
      1398
    ]
  ],
  [
    [
      64279,
      64279
    ],
    "mapped",
    [
      1396,
      1389
    ]
  ],
  [
    [
      64280,
      64284
    ],
    "disallowed"
  ],
  [
    [
      64285,
      64285
    ],
    "mapped",
    [
      1497,
      1460
    ]
  ],
  [
    [
      64286,
      64286
    ],
    "valid"
  ],
  [
    [
      64287,
      64287
    ],
    "mapped",
    [
      1522,
      1463
    ]
  ],
  [
    [
      64288,
      64288
    ],
    "mapped",
    [
      1506
    ]
  ],
  [
    [
      64289,
      64289
    ],
    "mapped",
    [
      1488
    ]
  ],
  [
    [
      64290,
      64290
    ],
    "mapped",
    [
      1491
    ]
  ],
  [
    [
      64291,
      64291
    ],
    "mapped",
    [
      1492
    ]
  ],
  [
    [
      64292,
      64292
    ],
    "mapped",
    [
      1499
    ]
  ],
  [
    [
      64293,
      64293
    ],
    "mapped",
    [
      1500
    ]
  ],
  [
    [
      64294,
      64294
    ],
    "mapped",
    [
      1501
    ]
  ],
  [
    [
      64295,
      64295
    ],
    "mapped",
    [
      1512
    ]
  ],
  [
    [
      64296,
      64296
    ],
    "mapped",
    [
      1514
    ]
  ],
  [
    [
      64297,
      64297
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      64298,
      64298
    ],
    "mapped",
    [
      1513,
      1473
    ]
  ],
  [
    [
      64299,
      64299
    ],
    "mapped",
    [
      1513,
      1474
    ]
  ],
  [
    [
      64300,
      64300
    ],
    "mapped",
    [
      1513,
      1468,
      1473
    ]
  ],
  [
    [
      64301,
      64301
    ],
    "mapped",
    [
      1513,
      1468,
      1474
    ]
  ],
  [
    [
      64302,
      64302
    ],
    "mapped",
    [
      1488,
      1463
    ]
  ],
  [
    [
      64303,
      64303
    ],
    "mapped",
    [
      1488,
      1464
    ]
  ],
  [
    [
      64304,
      64304
    ],
    "mapped",
    [
      1488,
      1468
    ]
  ],
  [
    [
      64305,
      64305
    ],
    "mapped",
    [
      1489,
      1468
    ]
  ],
  [
    [
      64306,
      64306
    ],
    "mapped",
    [
      1490,
      1468
    ]
  ],
  [
    [
      64307,
      64307
    ],
    "mapped",
    [
      1491,
      1468
    ]
  ],
  [
    [
      64308,
      64308
    ],
    "mapped",
    [
      1492,
      1468
    ]
  ],
  [
    [
      64309,
      64309
    ],
    "mapped",
    [
      1493,
      1468
    ]
  ],
  [
    [
      64310,
      64310
    ],
    "mapped",
    [
      1494,
      1468
    ]
  ],
  [
    [
      64311,
      64311
    ],
    "disallowed"
  ],
  [
    [
      64312,
      64312
    ],
    "mapped",
    [
      1496,
      1468
    ]
  ],
  [
    [
      64313,
      64313
    ],
    "mapped",
    [
      1497,
      1468
    ]
  ],
  [
    [
      64314,
      64314
    ],
    "mapped",
    [
      1498,
      1468
    ]
  ],
  [
    [
      64315,
      64315
    ],
    "mapped",
    [
      1499,
      1468
    ]
  ],
  [
    [
      64316,
      64316
    ],
    "mapped",
    [
      1500,
      1468
    ]
  ],
  [
    [
      64317,
      64317
    ],
    "disallowed"
  ],
  [
    [
      64318,
      64318
    ],
    "mapped",
    [
      1502,
      1468
    ]
  ],
  [
    [
      64319,
      64319
    ],
    "disallowed"
  ],
  [
    [
      64320,
      64320
    ],
    "mapped",
    [
      1504,
      1468
    ]
  ],
  [
    [
      64321,
      64321
    ],
    "mapped",
    [
      1505,
      1468
    ]
  ],
  [
    [
      64322,
      64322
    ],
    "disallowed"
  ],
  [
    [
      64323,
      64323
    ],
    "mapped",
    [
      1507,
      1468
    ]
  ],
  [
    [
      64324,
      64324
    ],
    "mapped",
    [
      1508,
      1468
    ]
  ],
  [
    [
      64325,
      64325
    ],
    "disallowed"
  ],
  [
    [
      64326,
      64326
    ],
    "mapped",
    [
      1510,
      1468
    ]
  ],
  [
    [
      64327,
      64327
    ],
    "mapped",
    [
      1511,
      1468
    ]
  ],
  [
    [
      64328,
      64328
    ],
    "mapped",
    [
      1512,
      1468
    ]
  ],
  [
    [
      64329,
      64329
    ],
    "mapped",
    [
      1513,
      1468
    ]
  ],
  [
    [
      64330,
      64330
    ],
    "mapped",
    [
      1514,
      1468
    ]
  ],
  [
    [
      64331,
      64331
    ],
    "mapped",
    [
      1493,
      1465
    ]
  ],
  [
    [
      64332,
      64332
    ],
    "mapped",
    [
      1489,
      1471
    ]
  ],
  [
    [
      64333,
      64333
    ],
    "mapped",
    [
      1499,
      1471
    ]
  ],
  [
    [
      64334,
      64334
    ],
    "mapped",
    [
      1508,
      1471
    ]
  ],
  [
    [
      64335,
      64335
    ],
    "mapped",
    [
      1488,
      1500
    ]
  ],
  [
    [
      64336,
      64337
    ],
    "mapped",
    [
      1649
    ]
  ],
  [
    [
      64338,
      64341
    ],
    "mapped",
    [
      1659
    ]
  ],
  [
    [
      64342,
      64345
    ],
    "mapped",
    [
      1662
    ]
  ],
  [
    [
      64346,
      64349
    ],
    "mapped",
    [
      1664
    ]
  ],
  [
    [
      64350,
      64353
    ],
    "mapped",
    [
      1658
    ]
  ],
  [
    [
      64354,
      64357
    ],
    "mapped",
    [
      1663
    ]
  ],
  [
    [
      64358,
      64361
    ],
    "mapped",
    [
      1657
    ]
  ],
  [
    [
      64362,
      64365
    ],
    "mapped",
    [
      1700
    ]
  ],
  [
    [
      64366,
      64369
    ],
    "mapped",
    [
      1702
    ]
  ],
  [
    [
      64370,
      64373
    ],
    "mapped",
    [
      1668
    ]
  ],
  [
    [
      64374,
      64377
    ],
    "mapped",
    [
      1667
    ]
  ],
  [
    [
      64378,
      64381
    ],
    "mapped",
    [
      1670
    ]
  ],
  [
    [
      64382,
      64385
    ],
    "mapped",
    [
      1671
    ]
  ],
  [
    [
      64386,
      64387
    ],
    "mapped",
    [
      1677
    ]
  ],
  [
    [
      64388,
      64389
    ],
    "mapped",
    [
      1676
    ]
  ],
  [
    [
      64390,
      64391
    ],
    "mapped",
    [
      1678
    ]
  ],
  [
    [
      64392,
      64393
    ],
    "mapped",
    [
      1672
    ]
  ],
  [
    [
      64394,
      64395
    ],
    "mapped",
    [
      1688
    ]
  ],
  [
    [
      64396,
      64397
    ],
    "mapped",
    [
      1681
    ]
  ],
  [
    [
      64398,
      64401
    ],
    "mapped",
    [
      1705
    ]
  ],
  [
    [
      64402,
      64405
    ],
    "mapped",
    [
      1711
    ]
  ],
  [
    [
      64406,
      64409
    ],
    "mapped",
    [
      1715
    ]
  ],
  [
    [
      64410,
      64413
    ],
    "mapped",
    [
      1713
    ]
  ],
  [
    [
      64414,
      64415
    ],
    "mapped",
    [
      1722
    ]
  ],
  [
    [
      64416,
      64419
    ],
    "mapped",
    [
      1723
    ]
  ],
  [
    [
      64420,
      64421
    ],
    "mapped",
    [
      1728
    ]
  ],
  [
    [
      64422,
      64425
    ],
    "mapped",
    [
      1729
    ]
  ],
  [
    [
      64426,
      64429
    ],
    "mapped",
    [
      1726
    ]
  ],
  [
    [
      64430,
      64431
    ],
    "mapped",
    [
      1746
    ]
  ],
  [
    [
      64432,
      64433
    ],
    "mapped",
    [
      1747
    ]
  ],
  [
    [
      64434,
      64449
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      64450,
      64466
    ],
    "disallowed"
  ],
  [
    [
      64467,
      64470
    ],
    "mapped",
    [
      1709
    ]
  ],
  [
    [
      64471,
      64472
    ],
    "mapped",
    [
      1735
    ]
  ],
  [
    [
      64473,
      64474
    ],
    "mapped",
    [
      1734
    ]
  ],
  [
    [
      64475,
      64476
    ],
    "mapped",
    [
      1736
    ]
  ],
  [
    [
      64477,
      64477
    ],
    "mapped",
    [
      1735,
      1652
    ]
  ],
  [
    [
      64478,
      64479
    ],
    "mapped",
    [
      1739
    ]
  ],
  [
    [
      64480,
      64481
    ],
    "mapped",
    [
      1733
    ]
  ],
  [
    [
      64482,
      64483
    ],
    "mapped",
    [
      1737
    ]
  ],
  [
    [
      64484,
      64487
    ],
    "mapped",
    [
      1744
    ]
  ],
  [
    [
      64488,
      64489
    ],
    "mapped",
    [
      1609
    ]
  ],
  [
    [
      64490,
      64491
    ],
    "mapped",
    [
      1574,
      1575
    ]
  ],
  [
    [
      64492,
      64493
    ],
    "mapped",
    [
      1574,
      1749
    ]
  ],
  [
    [
      64494,
      64495
    ],
    "mapped",
    [
      1574,
      1608
    ]
  ],
  [
    [
      64496,
      64497
    ],
    "mapped",
    [
      1574,
      1735
    ]
  ],
  [
    [
      64498,
      64499
    ],
    "mapped",
    [
      1574,
      1734
    ]
  ],
  [
    [
      64500,
      64501
    ],
    "mapped",
    [
      1574,
      1736
    ]
  ],
  [
    [
      64502,
      64504
    ],
    "mapped",
    [
      1574,
      1744
    ]
  ],
  [
    [
      64505,
      64507
    ],
    "mapped",
    [
      1574,
      1609
    ]
  ],
  [
    [
      64508,
      64511
    ],
    "mapped",
    [
      1740
    ]
  ],
  [
    [
      64512,
      64512
    ],
    "mapped",
    [
      1574,
      1580
    ]
  ],
  [
    [
      64513,
      64513
    ],
    "mapped",
    [
      1574,
      1581
    ]
  ],
  [
    [
      64514,
      64514
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64515,
      64515
    ],
    "mapped",
    [
      1574,
      1609
    ]
  ],
  [
    [
      64516,
      64516
    ],
    "mapped",
    [
      1574,
      1610
    ]
  ],
  [
    [
      64517,
      64517
    ],
    "mapped",
    [
      1576,
      1580
    ]
  ],
  [
    [
      64518,
      64518
    ],
    "mapped",
    [
      1576,
      1581
    ]
  ],
  [
    [
      64519,
      64519
    ],
    "mapped",
    [
      1576,
      1582
    ]
  ],
  [
    [
      64520,
      64520
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64521,
      64521
    ],
    "mapped",
    [
      1576,
      1609
    ]
  ],
  [
    [
      64522,
      64522
    ],
    "mapped",
    [
      1576,
      1610
    ]
  ],
  [
    [
      64523,
      64523
    ],
    "mapped",
    [
      1578,
      1580
    ]
  ],
  [
    [
      64524,
      64524
    ],
    "mapped",
    [
      1578,
      1581
    ]
  ],
  [
    [
      64525,
      64525
    ],
    "mapped",
    [
      1578,
      1582
    ]
  ],
  [
    [
      64526,
      64526
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64527,
      64527
    ],
    "mapped",
    [
      1578,
      1609
    ]
  ],
  [
    [
      64528,
      64528
    ],
    "mapped",
    [
      1578,
      1610
    ]
  ],
  [
    [
      64529,
      64529
    ],
    "mapped",
    [
      1579,
      1580
    ]
  ],
  [
    [
      64530,
      64530
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64531,
      64531
    ],
    "mapped",
    [
      1579,
      1609
    ]
  ],
  [
    [
      64532,
      64532
    ],
    "mapped",
    [
      1579,
      1610
    ]
  ],
  [
    [
      64533,
      64533
    ],
    "mapped",
    [
      1580,
      1581
    ]
  ],
  [
    [
      64534,
      64534
    ],
    "mapped",
    [
      1580,
      1605
    ]
  ],
  [
    [
      64535,
      64535
    ],
    "mapped",
    [
      1581,
      1580
    ]
  ],
  [
    [
      64536,
      64536
    ],
    "mapped",
    [
      1581,
      1605
    ]
  ],
  [
    [
      64537,
      64537
    ],
    "mapped",
    [
      1582,
      1580
    ]
  ],
  [
    [
      64538,
      64538
    ],
    "mapped",
    [
      1582,
      1581
    ]
  ],
  [
    [
      64539,
      64539
    ],
    "mapped",
    [
      1582,
      1605
    ]
  ],
  [
    [
      64540,
      64540
    ],
    "mapped",
    [
      1587,
      1580
    ]
  ],
  [
    [
      64541,
      64541
    ],
    "mapped",
    [
      1587,
      1581
    ]
  ],
  [
    [
      64542,
      64542
    ],
    "mapped",
    [
      1587,
      1582
    ]
  ],
  [
    [
      64543,
      64543
    ],
    "mapped",
    [
      1587,
      1605
    ]
  ],
  [
    [
      64544,
      64544
    ],
    "mapped",
    [
      1589,
      1581
    ]
  ],
  [
    [
      64545,
      64545
    ],
    "mapped",
    [
      1589,
      1605
    ]
  ],
  [
    [
      64546,
      64546
    ],
    "mapped",
    [
      1590,
      1580
    ]
  ],
  [
    [
      64547,
      64547
    ],
    "mapped",
    [
      1590,
      1581
    ]
  ],
  [
    [
      64548,
      64548
    ],
    "mapped",
    [
      1590,
      1582
    ]
  ],
  [
    [
      64549,
      64549
    ],
    "mapped",
    [
      1590,
      1605
    ]
  ],
  [
    [
      64550,
      64550
    ],
    "mapped",
    [
      1591,
      1581
    ]
  ],
  [
    [
      64551,
      64551
    ],
    "mapped",
    [
      1591,
      1605
    ]
  ],
  [
    [
      64552,
      64552
    ],
    "mapped",
    [
      1592,
      1605
    ]
  ],
  [
    [
      64553,
      64553
    ],
    "mapped",
    [
      1593,
      1580
    ]
  ],
  [
    [
      64554,
      64554
    ],
    "mapped",
    [
      1593,
      1605
    ]
  ],
  [
    [
      64555,
      64555
    ],
    "mapped",
    [
      1594,
      1580
    ]
  ],
  [
    [
      64556,
      64556
    ],
    "mapped",
    [
      1594,
      1605
    ]
  ],
  [
    [
      64557,
      64557
    ],
    "mapped",
    [
      1601,
      1580
    ]
  ],
  [
    [
      64558,
      64558
    ],
    "mapped",
    [
      1601,
      1581
    ]
  ],
  [
    [
      64559,
      64559
    ],
    "mapped",
    [
      1601,
      1582
    ]
  ],
  [
    [
      64560,
      64560
    ],
    "mapped",
    [
      1601,
      1605
    ]
  ],
  [
    [
      64561,
      64561
    ],
    "mapped",
    [
      1601,
      1609
    ]
  ],
  [
    [
      64562,
      64562
    ],
    "mapped",
    [
      1601,
      1610
    ]
  ],
  [
    [
      64563,
      64563
    ],
    "mapped",
    [
      1602,
      1581
    ]
  ],
  [
    [
      64564,
      64564
    ],
    "mapped",
    [
      1602,
      1605
    ]
  ],
  [
    [
      64565,
      64565
    ],
    "mapped",
    [
      1602,
      1609
    ]
  ],
  [
    [
      64566,
      64566
    ],
    "mapped",
    [
      1602,
      1610
    ]
  ],
  [
    [
      64567,
      64567
    ],
    "mapped",
    [
      1603,
      1575
    ]
  ],
  [
    [
      64568,
      64568
    ],
    "mapped",
    [
      1603,
      1580
    ]
  ],
  [
    [
      64569,
      64569
    ],
    "mapped",
    [
      1603,
      1581
    ]
  ],
  [
    [
      64570,
      64570
    ],
    "mapped",
    [
      1603,
      1582
    ]
  ],
  [
    [
      64571,
      64571
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64572,
      64572
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64573,
      64573
    ],
    "mapped",
    [
      1603,
      1609
    ]
  ],
  [
    [
      64574,
      64574
    ],
    "mapped",
    [
      1603,
      1610
    ]
  ],
  [
    [
      64575,
      64575
    ],
    "mapped",
    [
      1604,
      1580
    ]
  ],
  [
    [
      64576,
      64576
    ],
    "mapped",
    [
      1604,
      1581
    ]
  ],
  [
    [
      64577,
      64577
    ],
    "mapped",
    [
      1604,
      1582
    ]
  ],
  [
    [
      64578,
      64578
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64579,
      64579
    ],
    "mapped",
    [
      1604,
      1609
    ]
  ],
  [
    [
      64580,
      64580
    ],
    "mapped",
    [
      1604,
      1610
    ]
  ],
  [
    [
      64581,
      64581
    ],
    "mapped",
    [
      1605,
      1580
    ]
  ],
  [
    [
      64582,
      64582
    ],
    "mapped",
    [
      1605,
      1581
    ]
  ],
  [
    [
      64583,
      64583
    ],
    "mapped",
    [
      1605,
      1582
    ]
  ],
  [
    [
      64584,
      64584
    ],
    "mapped",
    [
      1605,
      1605
    ]
  ],
  [
    [
      64585,
      64585
    ],
    "mapped",
    [
      1605,
      1609
    ]
  ],
  [
    [
      64586,
      64586
    ],
    "mapped",
    [
      1605,
      1610
    ]
  ],
  [
    [
      64587,
      64587
    ],
    "mapped",
    [
      1606,
      1580
    ]
  ],
  [
    [
      64588,
      64588
    ],
    "mapped",
    [
      1606,
      1581
    ]
  ],
  [
    [
      64589,
      64589
    ],
    "mapped",
    [
      1606,
      1582
    ]
  ],
  [
    [
      64590,
      64590
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64591,
      64591
    ],
    "mapped",
    [
      1606,
      1609
    ]
  ],
  [
    [
      64592,
      64592
    ],
    "mapped",
    [
      1606,
      1610
    ]
  ],
  [
    [
      64593,
      64593
    ],
    "mapped",
    [
      1607,
      1580
    ]
  ],
  [
    [
      64594,
      64594
    ],
    "mapped",
    [
      1607,
      1605
    ]
  ],
  [
    [
      64595,
      64595
    ],
    "mapped",
    [
      1607,
      1609
    ]
  ],
  [
    [
      64596,
      64596
    ],
    "mapped",
    [
      1607,
      1610
    ]
  ],
  [
    [
      64597,
      64597
    ],
    "mapped",
    [
      1610,
      1580
    ]
  ],
  [
    [
      64598,
      64598
    ],
    "mapped",
    [
      1610,
      1581
    ]
  ],
  [
    [
      64599,
      64599
    ],
    "mapped",
    [
      1610,
      1582
    ]
  ],
  [
    [
      64600,
      64600
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64601,
      64601
    ],
    "mapped",
    [
      1610,
      1609
    ]
  ],
  [
    [
      64602,
      64602
    ],
    "mapped",
    [
      1610,
      1610
    ]
  ],
  [
    [
      64603,
      64603
    ],
    "mapped",
    [
      1584,
      1648
    ]
  ],
  [
    [
      64604,
      64604
    ],
    "mapped",
    [
      1585,
      1648
    ]
  ],
  [
    [
      64605,
      64605
    ],
    "mapped",
    [
      1609,
      1648
    ]
  ],
  [
    [
      64606,
      64606
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1612,
      1617
    ]
  ],
  [
    [
      64607,
      64607
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1613,
      1617
    ]
  ],
  [
    [
      64608,
      64608
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1614,
      1617
    ]
  ],
  [
    [
      64609,
      64609
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1615,
      1617
    ]
  ],
  [
    [
      64610,
      64610
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1616,
      1617
    ]
  ],
  [
    [
      64611,
      64611
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1617,
      1648
    ]
  ],
  [
    [
      64612,
      64612
    ],
    "mapped",
    [
      1574,
      1585
    ]
  ],
  [
    [
      64613,
      64613
    ],
    "mapped",
    [
      1574,
      1586
    ]
  ],
  [
    [
      64614,
      64614
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64615,
      64615
    ],
    "mapped",
    [
      1574,
      1606
    ]
  ],
  [
    [
      64616,
      64616
    ],
    "mapped",
    [
      1574,
      1609
    ]
  ],
  [
    [
      64617,
      64617
    ],
    "mapped",
    [
      1574,
      1610
    ]
  ],
  [
    [
      64618,
      64618
    ],
    "mapped",
    [
      1576,
      1585
    ]
  ],
  [
    [
      64619,
      64619
    ],
    "mapped",
    [
      1576,
      1586
    ]
  ],
  [
    [
      64620,
      64620
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64621,
      64621
    ],
    "mapped",
    [
      1576,
      1606
    ]
  ],
  [
    [
      64622,
      64622
    ],
    "mapped",
    [
      1576,
      1609
    ]
  ],
  [
    [
      64623,
      64623
    ],
    "mapped",
    [
      1576,
      1610
    ]
  ],
  [
    [
      64624,
      64624
    ],
    "mapped",
    [
      1578,
      1585
    ]
  ],
  [
    [
      64625,
      64625
    ],
    "mapped",
    [
      1578,
      1586
    ]
  ],
  [
    [
      64626,
      64626
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64627,
      64627
    ],
    "mapped",
    [
      1578,
      1606
    ]
  ],
  [
    [
      64628,
      64628
    ],
    "mapped",
    [
      1578,
      1609
    ]
  ],
  [
    [
      64629,
      64629
    ],
    "mapped",
    [
      1578,
      1610
    ]
  ],
  [
    [
      64630,
      64630
    ],
    "mapped",
    [
      1579,
      1585
    ]
  ],
  [
    [
      64631,
      64631
    ],
    "mapped",
    [
      1579,
      1586
    ]
  ],
  [
    [
      64632,
      64632
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64633,
      64633
    ],
    "mapped",
    [
      1579,
      1606
    ]
  ],
  [
    [
      64634,
      64634
    ],
    "mapped",
    [
      1579,
      1609
    ]
  ],
  [
    [
      64635,
      64635
    ],
    "mapped",
    [
      1579,
      1610
    ]
  ],
  [
    [
      64636,
      64636
    ],
    "mapped",
    [
      1601,
      1609
    ]
  ],
  [
    [
      64637,
      64637
    ],
    "mapped",
    [
      1601,
      1610
    ]
  ],
  [
    [
      64638,
      64638
    ],
    "mapped",
    [
      1602,
      1609
    ]
  ],
  [
    [
      64639,
      64639
    ],
    "mapped",
    [
      1602,
      1610
    ]
  ],
  [
    [
      64640,
      64640
    ],
    "mapped",
    [
      1603,
      1575
    ]
  ],
  [
    [
      64641,
      64641
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64642,
      64642
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64643,
      64643
    ],
    "mapped",
    [
      1603,
      1609
    ]
  ],
  [
    [
      64644,
      64644
    ],
    "mapped",
    [
      1603,
      1610
    ]
  ],
  [
    [
      64645,
      64645
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64646,
      64646
    ],
    "mapped",
    [
      1604,
      1609
    ]
  ],
  [
    [
      64647,
      64647
    ],
    "mapped",
    [
      1604,
      1610
    ]
  ],
  [
    [
      64648,
      64648
    ],
    "mapped",
    [
      1605,
      1575
    ]
  ],
  [
    [
      64649,
      64649
    ],
    "mapped",
    [
      1605,
      1605
    ]
  ],
  [
    [
      64650,
      64650
    ],
    "mapped",
    [
      1606,
      1585
    ]
  ],
  [
    [
      64651,
      64651
    ],
    "mapped",
    [
      1606,
      1586
    ]
  ],
  [
    [
      64652,
      64652
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64653,
      64653
    ],
    "mapped",
    [
      1606,
      1606
    ]
  ],
  [
    [
      64654,
      64654
    ],
    "mapped",
    [
      1606,
      1609
    ]
  ],
  [
    [
      64655,
      64655
    ],
    "mapped",
    [
      1606,
      1610
    ]
  ],
  [
    [
      64656,
      64656
    ],
    "mapped",
    [
      1609,
      1648
    ]
  ],
  [
    [
      64657,
      64657
    ],
    "mapped",
    [
      1610,
      1585
    ]
  ],
  [
    [
      64658,
      64658
    ],
    "mapped",
    [
      1610,
      1586
    ]
  ],
  [
    [
      64659,
      64659
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64660,
      64660
    ],
    "mapped",
    [
      1610,
      1606
    ]
  ],
  [
    [
      64661,
      64661
    ],
    "mapped",
    [
      1610,
      1609
    ]
  ],
  [
    [
      64662,
      64662
    ],
    "mapped",
    [
      1610,
      1610
    ]
  ],
  [
    [
      64663,
      64663
    ],
    "mapped",
    [
      1574,
      1580
    ]
  ],
  [
    [
      64664,
      64664
    ],
    "mapped",
    [
      1574,
      1581
    ]
  ],
  [
    [
      64665,
      64665
    ],
    "mapped",
    [
      1574,
      1582
    ]
  ],
  [
    [
      64666,
      64666
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64667,
      64667
    ],
    "mapped",
    [
      1574,
      1607
    ]
  ],
  [
    [
      64668,
      64668
    ],
    "mapped",
    [
      1576,
      1580
    ]
  ],
  [
    [
      64669,
      64669
    ],
    "mapped",
    [
      1576,
      1581
    ]
  ],
  [
    [
      64670,
      64670
    ],
    "mapped",
    [
      1576,
      1582
    ]
  ],
  [
    [
      64671,
      64671
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64672,
      64672
    ],
    "mapped",
    [
      1576,
      1607
    ]
  ],
  [
    [
      64673,
      64673
    ],
    "mapped",
    [
      1578,
      1580
    ]
  ],
  [
    [
      64674,
      64674
    ],
    "mapped",
    [
      1578,
      1581
    ]
  ],
  [
    [
      64675,
      64675
    ],
    "mapped",
    [
      1578,
      1582
    ]
  ],
  [
    [
      64676,
      64676
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64677,
      64677
    ],
    "mapped",
    [
      1578,
      1607
    ]
  ],
  [
    [
      64678,
      64678
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64679,
      64679
    ],
    "mapped",
    [
      1580,
      1581
    ]
  ],
  [
    [
      64680,
      64680
    ],
    "mapped",
    [
      1580,
      1605
    ]
  ],
  [
    [
      64681,
      64681
    ],
    "mapped",
    [
      1581,
      1580
    ]
  ],
  [
    [
      64682,
      64682
    ],
    "mapped",
    [
      1581,
      1605
    ]
  ],
  [
    [
      64683,
      64683
    ],
    "mapped",
    [
      1582,
      1580
    ]
  ],
  [
    [
      64684,
      64684
    ],
    "mapped",
    [
      1582,
      1605
    ]
  ],
  [
    [
      64685,
      64685
    ],
    "mapped",
    [
      1587,
      1580
    ]
  ],
  [
    [
      64686,
      64686
    ],
    "mapped",
    [
      1587,
      1581
    ]
  ],
  [
    [
      64687,
      64687
    ],
    "mapped",
    [
      1587,
      1582
    ]
  ],
  [
    [
      64688,
      64688
    ],
    "mapped",
    [
      1587,
      1605
    ]
  ],
  [
    [
      64689,
      64689
    ],
    "mapped",
    [
      1589,
      1581
    ]
  ],
  [
    [
      64690,
      64690
    ],
    "mapped",
    [
      1589,
      1582
    ]
  ],
  [
    [
      64691,
      64691
    ],
    "mapped",
    [
      1589,
      1605
    ]
  ],
  [
    [
      64692,
      64692
    ],
    "mapped",
    [
      1590,
      1580
    ]
  ],
  [
    [
      64693,
      64693
    ],
    "mapped",
    [
      1590,
      1581
    ]
  ],
  [
    [
      64694,
      64694
    ],
    "mapped",
    [
      1590,
      1582
    ]
  ],
  [
    [
      64695,
      64695
    ],
    "mapped",
    [
      1590,
      1605
    ]
  ],
  [
    [
      64696,
      64696
    ],
    "mapped",
    [
      1591,
      1581
    ]
  ],
  [
    [
      64697,
      64697
    ],
    "mapped",
    [
      1592,
      1605
    ]
  ],
  [
    [
      64698,
      64698
    ],
    "mapped",
    [
      1593,
      1580
    ]
  ],
  [
    [
      64699,
      64699
    ],
    "mapped",
    [
      1593,
      1605
    ]
  ],
  [
    [
      64700,
      64700
    ],
    "mapped",
    [
      1594,
      1580
    ]
  ],
  [
    [
      64701,
      64701
    ],
    "mapped",
    [
      1594,
      1605
    ]
  ],
  [
    [
      64702,
      64702
    ],
    "mapped",
    [
      1601,
      1580
    ]
  ],
  [
    [
      64703,
      64703
    ],
    "mapped",
    [
      1601,
      1581
    ]
  ],
  [
    [
      64704,
      64704
    ],
    "mapped",
    [
      1601,
      1582
    ]
  ],
  [
    [
      64705,
      64705
    ],
    "mapped",
    [
      1601,
      1605
    ]
  ],
  [
    [
      64706,
      64706
    ],
    "mapped",
    [
      1602,
      1581
    ]
  ],
  [
    [
      64707,
      64707
    ],
    "mapped",
    [
      1602,
      1605
    ]
  ],
  [
    [
      64708,
      64708
    ],
    "mapped",
    [
      1603,
      1580
    ]
  ],
  [
    [
      64709,
      64709
    ],
    "mapped",
    [
      1603,
      1581
    ]
  ],
  [
    [
      64710,
      64710
    ],
    "mapped",
    [
      1603,
      1582
    ]
  ],
  [
    [
      64711,
      64711
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64712,
      64712
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64713,
      64713
    ],
    "mapped",
    [
      1604,
      1580
    ]
  ],
  [
    [
      64714,
      64714
    ],
    "mapped",
    [
      1604,
      1581
    ]
  ],
  [
    [
      64715,
      64715
    ],
    "mapped",
    [
      1604,
      1582
    ]
  ],
  [
    [
      64716,
      64716
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64717,
      64717
    ],
    "mapped",
    [
      1604,
      1607
    ]
  ],
  [
    [
      64718,
      64718
    ],
    "mapped",
    [
      1605,
      1580
    ]
  ],
  [
    [
      64719,
      64719
    ],
    "mapped",
    [
      1605,
      1581
    ]
  ],
  [
    [
      64720,
      64720
    ],
    "mapped",
    [
      1605,
      1582
    ]
  ],
  [
    [
      64721,
      64721
    ],
    "mapped",
    [
      1605,
      1605
    ]
  ],
  [
    [
      64722,
      64722
    ],
    "mapped",
    [
      1606,
      1580
    ]
  ],
  [
    [
      64723,
      64723
    ],
    "mapped",
    [
      1606,
      1581
    ]
  ],
  [
    [
      64724,
      64724
    ],
    "mapped",
    [
      1606,
      1582
    ]
  ],
  [
    [
      64725,
      64725
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64726,
      64726
    ],
    "mapped",
    [
      1606,
      1607
    ]
  ],
  [
    [
      64727,
      64727
    ],
    "mapped",
    [
      1607,
      1580
    ]
  ],
  [
    [
      64728,
      64728
    ],
    "mapped",
    [
      1607,
      1605
    ]
  ],
  [
    [
      64729,
      64729
    ],
    "mapped",
    [
      1607,
      1648
    ]
  ],
  [
    [
      64730,
      64730
    ],
    "mapped",
    [
      1610,
      1580
    ]
  ],
  [
    [
      64731,
      64731
    ],
    "mapped",
    [
      1610,
      1581
    ]
  ],
  [
    [
      64732,
      64732
    ],
    "mapped",
    [
      1610,
      1582
    ]
  ],
  [
    [
      64733,
      64733
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64734,
      64734
    ],
    "mapped",
    [
      1610,
      1607
    ]
  ],
  [
    [
      64735,
      64735
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64736,
      64736
    ],
    "mapped",
    [
      1574,
      1607
    ]
  ],
  [
    [
      64737,
      64737
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64738,
      64738
    ],
    "mapped",
    [
      1576,
      1607
    ]
  ],
  [
    [
      64739,
      64739
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64740,
      64740
    ],
    "mapped",
    [
      1578,
      1607
    ]
  ],
  [
    [
      64741,
      64741
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64742,
      64742
    ],
    "mapped",
    [
      1579,
      1607
    ]
  ],
  [
    [
      64743,
      64743
    ],
    "mapped",
    [
      1587,
      1605
    ]
  ],
  [
    [
      64744,
      64744
    ],
    "mapped",
    [
      1587,
      1607
    ]
  ],
  [
    [
      64745,
      64745
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64746,
      64746
    ],
    "mapped",
    [
      1588,
      1607
    ]
  ],
  [
    [
      64747,
      64747
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64748,
      64748
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64749,
      64749
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64750,
      64750
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64751,
      64751
    ],
    "mapped",
    [
      1606,
      1607
    ]
  ],
  [
    [
      64752,
      64752
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64753,
      64753
    ],
    "mapped",
    [
      1610,
      1607
    ]
  ],
  [
    [
      64754,
      64754
    ],
    "mapped",
    [
      1600,
      1614,
      1617
    ]
  ],
  [
    [
      64755,
      64755
    ],
    "mapped",
    [
      1600,
      1615,
      1617
    ]
  ],
  [
    [
      64756,
      64756
    ],
    "mapped",
    [
      1600,
      1616,
      1617
    ]
  ],
  [
    [
      64757,
      64757
    ],
    "mapped",
    [
      1591,
      1609
    ]
  ],
  [
    [
      64758,
      64758
    ],
    "mapped",
    [
      1591,
      1610
    ]
  ],
  [
    [
      64759,
      64759
    ],
    "mapped",
    [
      1593,
      1609
    ]
  ],
  [
    [
      64760,
      64760
    ],
    "mapped",
    [
      1593,
      1610
    ]
  ],
  [
    [
      64761,
      64761
    ],
    "mapped",
    [
      1594,
      1609
    ]
  ],
  [
    [
      64762,
      64762
    ],
    "mapped",
    [
      1594,
      1610
    ]
  ],
  [
    [
      64763,
      64763
    ],
    "mapped",
    [
      1587,
      1609
    ]
  ],
  [
    [
      64764,
      64764
    ],
    "mapped",
    [
      1587,
      1610
    ]
  ],
  [
    [
      64765,
      64765
    ],
    "mapped",
    [
      1588,
      1609
    ]
  ],
  [
    [
      64766,
      64766
    ],
    "mapped",
    [
      1588,
      1610
    ]
  ],
  [
    [
      64767,
      64767
    ],
    "mapped",
    [
      1581,
      1609
    ]
  ],
  [
    [
      64768,
      64768
    ],
    "mapped",
    [
      1581,
      1610
    ]
  ],
  [
    [
      64769,
      64769
    ],
    "mapped",
    [
      1580,
      1609
    ]
  ],
  [
    [
      64770,
      64770
    ],
    "mapped",
    [
      1580,
      1610
    ]
  ],
  [
    [
      64771,
      64771
    ],
    "mapped",
    [
      1582,
      1609
    ]
  ],
  [
    [
      64772,
      64772
    ],
    "mapped",
    [
      1582,
      1610
    ]
  ],
  [
    [
      64773,
      64773
    ],
    "mapped",
    [
      1589,
      1609
    ]
  ],
  [
    [
      64774,
      64774
    ],
    "mapped",
    [
      1589,
      1610
    ]
  ],
  [
    [
      64775,
      64775
    ],
    "mapped",
    [
      1590,
      1609
    ]
  ],
  [
    [
      64776,
      64776
    ],
    "mapped",
    [
      1590,
      1610
    ]
  ],
  [
    [
      64777,
      64777
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64778,
      64778
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64779,
      64779
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64780,
      64780
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64781,
      64781
    ],
    "mapped",
    [
      1588,
      1585
    ]
  ],
  [
    [
      64782,
      64782
    ],
    "mapped",
    [
      1587,
      1585
    ]
  ],
  [
    [
      64783,
      64783
    ],
    "mapped",
    [
      1589,
      1585
    ]
  ],
  [
    [
      64784,
      64784
    ],
    "mapped",
    [
      1590,
      1585
    ]
  ],
  [
    [
      64785,
      64785
    ],
    "mapped",
    [
      1591,
      1609
    ]
  ],
  [
    [
      64786,
      64786
    ],
    "mapped",
    [
      1591,
      1610
    ]
  ],
  [
    [
      64787,
      64787
    ],
    "mapped",
    [
      1593,
      1609
    ]
  ],
  [
    [
      64788,
      64788
    ],
    "mapped",
    [
      1593,
      1610
    ]
  ],
  [
    [
      64789,
      64789
    ],
    "mapped",
    [
      1594,
      1609
    ]
  ],
  [
    [
      64790,
      64790
    ],
    "mapped",
    [
      1594,
      1610
    ]
  ],
  [
    [
      64791,
      64791
    ],
    "mapped",
    [
      1587,
      1609
    ]
  ],
  [
    [
      64792,
      64792
    ],
    "mapped",
    [
      1587,
      1610
    ]
  ],
  [
    [
      64793,
      64793
    ],
    "mapped",
    [
      1588,
      1609
    ]
  ],
  [
    [
      64794,
      64794
    ],
    "mapped",
    [
      1588,
      1610
    ]
  ],
  [
    [
      64795,
      64795
    ],
    "mapped",
    [
      1581,
      1609
    ]
  ],
  [
    [
      64796,
      64796
    ],
    "mapped",
    [
      1581,
      1610
    ]
  ],
  [
    [
      64797,
      64797
    ],
    "mapped",
    [
      1580,
      1609
    ]
  ],
  [
    [
      64798,
      64798
    ],
    "mapped",
    [
      1580,
      1610
    ]
  ],
  [
    [
      64799,
      64799
    ],
    "mapped",
    [
      1582,
      1609
    ]
  ],
  [
    [
      64800,
      64800
    ],
    "mapped",
    [
      1582,
      1610
    ]
  ],
  [
    [
      64801,
      64801
    ],
    "mapped",
    [
      1589,
      1609
    ]
  ],
  [
    [
      64802,
      64802
    ],
    "mapped",
    [
      1589,
      1610
    ]
  ],
  [
    [
      64803,
      64803
    ],
    "mapped",
    [
      1590,
      1609
    ]
  ],
  [
    [
      64804,
      64804
    ],
    "mapped",
    [
      1590,
      1610
    ]
  ],
  [
    [
      64805,
      64805
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64806,
      64806
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64807,
      64807
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64808,
      64808
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64809,
      64809
    ],
    "mapped",
    [
      1588,
      1585
    ]
  ],
  [
    [
      64810,
      64810
    ],
    "mapped",
    [
      1587,
      1585
    ]
  ],
  [
    [
      64811,
      64811
    ],
    "mapped",
    [
      1589,
      1585
    ]
  ],
  [
    [
      64812,
      64812
    ],
    "mapped",
    [
      1590,
      1585
    ]
  ],
  [
    [
      64813,
      64813
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64814,
      64814
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64815,
      64815
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64816,
      64816
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64817,
      64817
    ],
    "mapped",
    [
      1587,
      1607
    ]
  ],
  [
    [
      64818,
      64818
    ],
    "mapped",
    [
      1588,
      1607
    ]
  ],
  [
    [
      64819,
      64819
    ],
    "mapped",
    [
      1591,
      1605
    ]
  ],
  [
    [
      64820,
      64820
    ],
    "mapped",
    [
      1587,
      1580
    ]
  ],
  [
    [
      64821,
      64821
    ],
    "mapped",
    [
      1587,
      1581
    ]
  ],
  [
    [
      64822,
      64822
    ],
    "mapped",
    [
      1587,
      1582
    ]
  ],
  [
    [
      64823,
      64823
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64824,
      64824
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64825,
      64825
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64826,
      64826
    ],
    "mapped",
    [
      1591,
      1605
    ]
  ],
  [
    [
      64827,
      64827
    ],
    "mapped",
    [
      1592,
      1605
    ]
  ],
  [
    [
      64828,
      64829
    ],
    "mapped",
    [
      1575,
      1611
    ]
  ],
  [
    [
      64830,
      64831
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      64832,
      64847
    ],
    "disallowed"
  ],
  [
    [
      64848,
      64848
    ],
    "mapped",
    [
      1578,
      1580,
      1605
    ]
  ],
  [
    [
      64849,
      64850
    ],
    "mapped",
    [
      1578,
      1581,
      1580
    ]
  ],
  [
    [
      64851,
      64851
    ],
    "mapped",
    [
      1578,
      1581,
      1605
    ]
  ],
  [
    [
      64852,
      64852
    ],
    "mapped",
    [
      1578,
      1582,
      1605
    ]
  ],
  [
    [
      64853,
      64853
    ],
    "mapped",
    [
      1578,
      1605,
      1580
    ]
  ],
  [
    [
      64854,
      64854
    ],
    "mapped",
    [
      1578,
      1605,
      1581
    ]
  ],
  [
    [
      64855,
      64855
    ],
    "mapped",
    [
      1578,
      1605,
      1582
    ]
  ],
  [
    [
      64856,
      64857
    ],
    "mapped",
    [
      1580,
      1605,
      1581
    ]
  ],
  [
    [
      64858,
      64858
    ],
    "mapped",
    [
      1581,
      1605,
      1610
    ]
  ],
  [
    [
      64859,
      64859
    ],
    "mapped",
    [
      1581,
      1605,
      1609
    ]
  ],
  [
    [
      64860,
      64860
    ],
    "mapped",
    [
      1587,
      1581,
      1580
    ]
  ],
  [
    [
      64861,
      64861
    ],
    "mapped",
    [
      1587,
      1580,
      1581
    ]
  ],
  [
    [
      64862,
      64862
    ],
    "mapped",
    [
      1587,
      1580,
      1609
    ]
  ],
  [
    [
      64863,
      64864
    ],
    "mapped",
    [
      1587,
      1605,
      1581
    ]
  ],
  [
    [
      64865,
      64865
    ],
    "mapped",
    [
      1587,
      1605,
      1580
    ]
  ],
  [
    [
      64866,
      64867
    ],
    "mapped",
    [
      1587,
      1605,
      1605
    ]
  ],
  [
    [
      64868,
      64869
    ],
    "mapped",
    [
      1589,
      1581,
      1581
    ]
  ],
  [
    [
      64870,
      64870
    ],
    "mapped",
    [
      1589,
      1605,
      1605
    ]
  ],
  [
    [
      64871,
      64872
    ],
    "mapped",
    [
      1588,
      1581,
      1605
    ]
  ],
  [
    [
      64873,
      64873
    ],
    "mapped",
    [
      1588,
      1580,
      1610
    ]
  ],
  [
    [
      64874,
      64875
    ],
    "mapped",
    [
      1588,
      1605,
      1582
    ]
  ],
  [
    [
      64876,
      64877
    ],
    "mapped",
    [
      1588,
      1605,
      1605
    ]
  ],
  [
    [
      64878,
      64878
    ],
    "mapped",
    [
      1590,
      1581,
      1609
    ]
  ],
  [
    [
      64879,
      64880
    ],
    "mapped",
    [
      1590,
      1582,
      1605
    ]
  ],
  [
    [
      64881,
      64882
    ],
    "mapped",
    [
      1591,
      1605,
      1581
    ]
  ],
  [
    [
      64883,
      64883
    ],
    "mapped",
    [
      1591,
      1605,
      1605
    ]
  ],
  [
    [
      64884,
      64884
    ],
    "mapped",
    [
      1591,
      1605,
      1610
    ]
  ],
  [
    [
      64885,
      64885
    ],
    "mapped",
    [
      1593,
      1580,
      1605
    ]
  ],
  [
    [
      64886,
      64887
    ],
    "mapped",
    [
      1593,
      1605,
      1605
    ]
  ],
  [
    [
      64888,
      64888
    ],
    "mapped",
    [
      1593,
      1605,
      1609
    ]
  ],
  [
    [
      64889,
      64889
    ],
    "mapped",
    [
      1594,
      1605,
      1605
    ]
  ],
  [
    [
      64890,
      64890
    ],
    "mapped",
    [
      1594,
      1605,
      1610
    ]
  ],
  [
    [
      64891,
      64891
    ],
    "mapped",
    [
      1594,
      1605,
      1609
    ]
  ],
  [
    [
      64892,
      64893
    ],
    "mapped",
    [
      1601,
      1582,
      1605
    ]
  ],
  [
    [
      64894,
      64894
    ],
    "mapped",
    [
      1602,
      1605,
      1581
    ]
  ],
  [
    [
      64895,
      64895
    ],
    "mapped",
    [
      1602,
      1605,
      1605
    ]
  ],
  [
    [
      64896,
      64896
    ],
    "mapped",
    [
      1604,
      1581,
      1605
    ]
  ],
  [
    [
      64897,
      64897
    ],
    "mapped",
    [
      1604,
      1581,
      1610
    ]
  ],
  [
    [
      64898,
      64898
    ],
    "mapped",
    [
      1604,
      1581,
      1609
    ]
  ],
  [
    [
      64899,
      64900
    ],
    "mapped",
    [
      1604,
      1580,
      1580
    ]
  ],
  [
    [
      64901,
      64902
    ],
    "mapped",
    [
      1604,
      1582,
      1605
    ]
  ],
  [
    [
      64903,
      64904
    ],
    "mapped",
    [
      1604,
      1605,
      1581
    ]
  ],
  [
    [
      64905,
      64905
    ],
    "mapped",
    [
      1605,
      1581,
      1580
    ]
  ],
  [
    [
      64906,
      64906
    ],
    "mapped",
    [
      1605,
      1581,
      1605
    ]
  ],
  [
    [
      64907,
      64907
    ],
    "mapped",
    [
      1605,
      1581,
      1610
    ]
  ],
  [
    [
      64908,
      64908
    ],
    "mapped",
    [
      1605,
      1580,
      1581
    ]
  ],
  [
    [
      64909,
      64909
    ],
    "mapped",
    [
      1605,
      1580,
      1605
    ]
  ],
  [
    [
      64910,
      64910
    ],
    "mapped",
    [
      1605,
      1582,
      1580
    ]
  ],
  [
    [
      64911,
      64911
    ],
    "mapped",
    [
      1605,
      1582,
      1605
    ]
  ],
  [
    [
      64912,
      64913
    ],
    "disallowed"
  ],
  [
    [
      64914,
      64914
    ],
    "mapped",
    [
      1605,
      1580,
      1582
    ]
  ],
  [
    [
      64915,
      64915
    ],
    "mapped",
    [
      1607,
      1605,
      1580
    ]
  ],
  [
    [
      64916,
      64916
    ],
    "mapped",
    [
      1607,
      1605,
      1605
    ]
  ],
  [
    [
      64917,
      64917
    ],
    "mapped",
    [
      1606,
      1581,
      1605
    ]
  ],
  [
    [
      64918,
      64918
    ],
    "mapped",
    [
      1606,
      1581,
      1609
    ]
  ],
  [
    [
      64919,
      64920
    ],
    "mapped",
    [
      1606,
      1580,
      1605
    ]
  ],
  [
    [
      64921,
      64921
    ],
    "mapped",
    [
      1606,
      1580,
      1609
    ]
  ],
  [
    [
      64922,
      64922
    ],
    "mapped",
    [
      1606,
      1605,
      1610
    ]
  ],
  [
    [
      64923,
      64923
    ],
    "mapped",
    [
      1606,
      1605,
      1609
    ]
  ],
  [
    [
      64924,
      64925
    ],
    "mapped",
    [
      1610,
      1605,
      1605
    ]
  ],
  [
    [
      64926,
      64926
    ],
    "mapped",
    [
      1576,
      1582,
      1610
    ]
  ],
  [
    [
      64927,
      64927
    ],
    "mapped",
    [
      1578,
      1580,
      1610
    ]
  ],
  [
    [
      64928,
      64928
    ],
    "mapped",
    [
      1578,
      1580,
      1609
    ]
  ],
  [
    [
      64929,
      64929
    ],
    "mapped",
    [
      1578,
      1582,
      1610
    ]
  ],
  [
    [
      64930,
      64930
    ],
    "mapped",
    [
      1578,
      1582,
      1609
    ]
  ],
  [
    [
      64931,
      64931
    ],
    "mapped",
    [
      1578,
      1605,
      1610
    ]
  ],
  [
    [
      64932,
      64932
    ],
    "mapped",
    [
      1578,
      1605,
      1609
    ]
  ],
  [
    [
      64933,
      64933
    ],
    "mapped",
    [
      1580,
      1605,
      1610
    ]
  ],
  [
    [
      64934,
      64934
    ],
    "mapped",
    [
      1580,
      1581,
      1609
    ]
  ],
  [
    [
      64935,
      64935
    ],
    "mapped",
    [
      1580,
      1605,
      1609
    ]
  ],
  [
    [
      64936,
      64936
    ],
    "mapped",
    [
      1587,
      1582,
      1609
    ]
  ],
  [
    [
      64937,
      64937
    ],
    "mapped",
    [
      1589,
      1581,
      1610
    ]
  ],
  [
    [
      64938,
      64938
    ],
    "mapped",
    [
      1588,
      1581,
      1610
    ]
  ],
  [
    [
      64939,
      64939
    ],
    "mapped",
    [
      1590,
      1581,
      1610
    ]
  ],
  [
    [
      64940,
      64940
    ],
    "mapped",
    [
      1604,
      1580,
      1610
    ]
  ],
  [
    [
      64941,
      64941
    ],
    "mapped",
    [
      1604,
      1605,
      1610
    ]
  ],
  [
    [
      64942,
      64942
    ],
    "mapped",
    [
      1610,
      1581,
      1610
    ]
  ],
  [
    [
      64943,
      64943
    ],
    "mapped",
    [
      1610,
      1580,
      1610
    ]
  ],
  [
    [
      64944,
      64944
    ],
    "mapped",
    [
      1610,
      1605,
      1610
    ]
  ],
  [
    [
      64945,
      64945
    ],
    "mapped",
    [
      1605,
      1605,
      1610
    ]
  ],
  [
    [
      64946,
      64946
    ],
    "mapped",
    [
      1602,
      1605,
      1610
    ]
  ],
  [
    [
      64947,
      64947
    ],
    "mapped",
    [
      1606,
      1581,
      1610
    ]
  ],
  [
    [
      64948,
      64948
    ],
    "mapped",
    [
      1602,
      1605,
      1581
    ]
  ],
  [
    [
      64949,
      64949
    ],
    "mapped",
    [
      1604,
      1581,
      1605
    ]
  ],
  [
    [
      64950,
      64950
    ],
    "mapped",
    [
      1593,
      1605,
      1610
    ]
  ],
  [
    [
      64951,
      64951
    ],
    "mapped",
    [
      1603,
      1605,
      1610
    ]
  ],
  [
    [
      64952,
      64952
    ],
    "mapped",
    [
      1606,
      1580,
      1581
    ]
  ],
  [
    [
      64953,
      64953
    ],
    "mapped",
    [
      1605,
      1582,
      1610
    ]
  ],
  [
    [
      64954,
      64954
    ],
    "mapped",
    [
      1604,
      1580,
      1605
    ]
  ],
  [
    [
      64955,
      64955
    ],
    "mapped",
    [
      1603,
      1605,
      1605
    ]
  ],
  [
    [
      64956,
      64956
    ],
    "mapped",
    [
      1604,
      1580,
      1605
    ]
  ],
  [
    [
      64957,
      64957
    ],
    "mapped",
    [
      1606,
      1580,
      1581
    ]
  ],
  [
    [
      64958,
      64958
    ],
    "mapped",
    [
      1580,
      1581,
      1610
    ]
  ],
  [
    [
      64959,
      64959
    ],
    "mapped",
    [
      1581,
      1580,
      1610
    ]
  ],
  [
    [
      64960,
      64960
    ],
    "mapped",
    [
      1605,
      1580,
      1610
    ]
  ],
  [
    [
      64961,
      64961
    ],
    "mapped",
    [
      1601,
      1605,
      1610
    ]
  ],
  [
    [
      64962,
      64962
    ],
    "mapped",
    [
      1576,
      1581,
      1610
    ]
  ],
  [
    [
      64963,
      64963
    ],
    "mapped",
    [
      1603,
      1605,
      1605
    ]
  ],
  [
    [
      64964,
      64964
    ],
    "mapped",
    [
      1593,
      1580,
      1605
    ]
  ],
  [
    [
      64965,
      64965
    ],
    "mapped",
    [
      1589,
      1605,
      1605
    ]
  ],
  [
    [
      64966,
      64966
    ],
    "mapped",
    [
      1587,
      1582,
      1610
    ]
  ],
  [
    [
      64967,
      64967
    ],
    "mapped",
    [
      1606,
      1580,
      1610
    ]
  ],
  [
    [
      64968,
      64975
    ],
    "disallowed"
  ],
  [
    [
      64976,
      65007
    ],
    "disallowed"
  ],
  [
    [
      65008,
      65008
    ],
    "mapped",
    [
      1589,
      1604,
      1746
    ]
  ],
  [
    [
      65009,
      65009
    ],
    "mapped",
    [
      1602,
      1604,
      1746
    ]
  ],
  [
    [
      65010,
      65010
    ],
    "mapped",
    [
      1575,
      1604,
      1604,
      1607
    ]
  ],
  [
    [
      65011,
      65011
    ],
    "mapped",
    [
      1575,
      1603,
      1576,
      1585
    ]
  ],
  [
    [
      65012,
      65012
    ],
    "mapped",
    [
      1605,
      1581,
      1605,
      1583
    ]
  ],
  [
    [
      65013,
      65013
    ],
    "mapped",
    [
      1589,
      1604,
      1593,
      1605
    ]
  ],
  [
    [
      65014,
      65014
    ],
    "mapped",
    [
      1585,
      1587,
      1608,
      1604
    ]
  ],
  [
    [
      65015,
      65015
    ],
    "mapped",
    [
      1593,
      1604,
      1610,
      1607
    ]
  ],
  [
    [
      65016,
      65016
    ],
    "mapped",
    [
      1608,
      1587,
      1604,
      1605
    ]
  ],
  [
    [
      65017,
      65017
    ],
    "mapped",
    [
      1589,
      1604,
      1609
    ]
  ],
  [
    [
      65018,
      65018
    ],
    "disallowed_STD3_mapped",
    [
      1589,
      1604,
      1609,
      32,
      1575,
      1604,
      1604,
      1607,
      32,
      1593,
      1604,
      1610,
      1607,
      32,
      1608,
      1587,
      1604,
      1605
    ]
  ],
  [
    [
      65019,
      65019
    ],
    "disallowed_STD3_mapped",
    [
      1580,
      1604,
      32,
      1580,
      1604,
      1575,
      1604,
      1607
    ]
  ],
  [
    [
      65020,
      65020
    ],
    "mapped",
    [
      1585,
      1740,
      1575,
      1604
    ]
  ],
  [
    [
      65021,
      65021
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65022,
      65023
    ],
    "disallowed"
  ],
  [
    [
      65024,
      65039
    ],
    "ignored"
  ],
  [
    [
      65040,
      65040
    ],
    "disallowed_STD3_mapped",
    [
      44
    ]
  ],
  [
    [
      65041,
      65041
    ],
    "mapped",
    [
      12289
    ]
  ],
  [
    [
      65042,
      65042
    ],
    "disallowed"
  ],
  [
    [
      65043,
      65043
    ],
    "disallowed_STD3_mapped",
    [
      58
    ]
  ],
  [
    [
      65044,
      65044
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      65045,
      65045
    ],
    "disallowed_STD3_mapped",
    [
      33
    ]
  ],
  [
    [
      65046,
      65046
    ],
    "disallowed_STD3_mapped",
    [
      63
    ]
  ],
  [
    [
      65047,
      65047
    ],
    "mapped",
    [
      12310
    ]
  ],
  [
    [
      65048,
      65048
    ],
    "mapped",
    [
      12311
    ]
  ],
  [
    [
      65049,
      65049
    ],
    "disallowed"
  ],
  [
    [
      65050,
      65055
    ],
    "disallowed"
  ],
  [
    [
      65056,
      65059
    ],
    "valid"
  ],
  [
    [
      65060,
      65062
    ],
    "valid"
  ],
  [
    [
      65063,
      65069
    ],
    "valid"
  ],
  [
    [
      65070,
      65071
    ],
    "valid"
  ],
  [
    [
      65072,
      65072
    ],
    "disallowed"
  ],
  [
    [
      65073,
      65073
    ],
    "mapped",
    [
      8212
    ]
  ],
  [
    [
      65074,
      65074
    ],
    "mapped",
    [
      8211
    ]
  ],
  [
    [
      65075,
      65076
    ],
    "disallowed_STD3_mapped",
    [
      95
    ]
  ],
  [
    [
      65077,
      65077
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      65078,
      65078
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      65079,
      65079
    ],
    "disallowed_STD3_mapped",
    [
      123
    ]
  ],
  [
    [
      65080,
      65080
    ],
    "disallowed_STD3_mapped",
    [
      125
    ]
  ],
  [
    [
      65081,
      65081
    ],
    "mapped",
    [
      12308
    ]
  ],
  [
    [
      65082,
      65082
    ],
    "mapped",
    [
      12309
    ]
  ],
  [
    [
      65083,
      65083
    ],
    "mapped",
    [
      12304
    ]
  ],
  [
    [
      65084,
      65084
    ],
    "mapped",
    [
      12305
    ]
  ],
  [
    [
      65085,
      65085
    ],
    "mapped",
    [
      12298
    ]
  ],
  [
    [
      65086,
      65086
    ],
    "mapped",
    [
      12299
    ]
  ],
  [
    [
      65087,
      65087
    ],
    "mapped",
    [
      12296
    ]
  ],
  [
    [
      65088,
      65088
    ],
    "mapped",
    [
      12297
    ]
  ],
  [
    [
      65089,
      65089
    ],
    "mapped",
    [
      12300
    ]
  ],
  [
    [
      65090,
      65090
    ],
    "mapped",
    [
      12301
    ]
  ],
  [
    [
      65091,
      65091
    ],
    "mapped",
    [
      12302
    ]
  ],
  [
    [
      65092,
      65092
    ],
    "mapped",
    [
      12303
    ]
  ],
  [
    [
      65093,
      65094
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65095,
      65095
    ],
    "disallowed_STD3_mapped",
    [
      91
    ]
  ],
  [
    [
      65096,
      65096
    ],
    "disallowed_STD3_mapped",
    [
      93
    ]
  ],
  [
    [
      65097,
      65100
    ],
    "disallowed_STD3_mapped",
    [
      32,
      773
    ]
  ],
  [
    [
      65101,
      65103
    ],
    "disallowed_STD3_mapped",
    [
      95
    ]
  ],
  [
    [
      65104,
      65104
    ],
    "disallowed_STD3_mapped",
    [
      44
    ]
  ],
  [
    [
      65105,
      65105
    ],
    "mapped",
    [
      12289
    ]
  ],
  [
    [
      65106,
      65106
    ],
    "disallowed"
  ],
  [
    [
      65107,
      65107
    ],
    "disallowed"
  ],
  [
    [
      65108,
      65108
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      65109,
      65109
    ],
    "disallowed_STD3_mapped",
    [
      58
    ]
  ],
  [
    [
      65110,
      65110
    ],
    "disallowed_STD3_mapped",
    [
      63
    ]
  ],
  [
    [
      65111,
      65111
    ],
    "disallowed_STD3_mapped",
    [
      33
    ]
  ],
  [
    [
      65112,
      65112
    ],
    "mapped",
    [
      8212
    ]
  ],
  [
    [
      65113,
      65113
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      65114,
      65114
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      65115,
      65115
    ],
    "disallowed_STD3_mapped",
    [
      123
    ]
  ],
  [
    [
      65116,
      65116
    ],
    "disallowed_STD3_mapped",
    [
      125
    ]
  ],
  [
    [
      65117,
      65117
    ],
    "mapped",
    [
      12308
    ]
  ],
  [
    [
      65118,
      65118
    ],
    "mapped",
    [
      12309
    ]
  ],
  [
    [
      65119,
      65119
    ],
    "disallowed_STD3_mapped",
    [
      35
    ]
  ],
  [
    [
      65120,
      65120
    ],
    "disallowed_STD3_mapped",
    [
      38
    ]
  ],
  [
    [
      65121,
      65121
    ],
    "disallowed_STD3_mapped",
    [
      42
    ]
  ],
  [
    [
      65122,
      65122
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      65123,
      65123
    ],
    "mapped",
    [
      45
    ]
  ],
  [
    [
      65124,
      65124
    ],
    "disallowed_STD3_mapped",
    [
      60
    ]
  ],
  [
    [
      65125,
      65125
    ],
    "disallowed_STD3_mapped",
    [
      62
    ]
  ],
  [
    [
      65126,
      65126
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      65127,
      65127
    ],
    "disallowed"
  ],
  [
    [
      65128,
      65128
    ],
    "disallowed_STD3_mapped",
    [
      92
    ]
  ],
  [
    [
      65129,
      65129
    ],
    "disallowed_STD3_mapped",
    [
      36
    ]
  ],
  [
    [
      65130,
      65130
    ],
    "disallowed_STD3_mapped",
    [
      37
    ]
  ],
  [
    [
      65131,
      65131
    ],
    "disallowed_STD3_mapped",
    [
      64
    ]
  ],
  [
    [
      65132,
      65135
    ],
    "disallowed"
  ],
  [
    [
      65136,
      65136
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1611
    ]
  ],
  [
    [
      65137,
      65137
    ],
    "mapped",
    [
      1600,
      1611
    ]
  ],
  [
    [
      65138,
      65138
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1612
    ]
  ],
  [
    [
      65139,
      65139
    ],
    "valid"
  ],
  [
    [
      65140,
      65140
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1613
    ]
  ],
  [
    [
      65141,
      65141
    ],
    "disallowed"
  ],
  [
    [
      65142,
      65142
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1614
    ]
  ],
  [
    [
      65143,
      65143
    ],
    "mapped",
    [
      1600,
      1614
    ]
  ],
  [
    [
      65144,
      65144
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1615
    ]
  ],
  [
    [
      65145,
      65145
    ],
    "mapped",
    [
      1600,
      1615
    ]
  ],
  [
    [
      65146,
      65146
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1616
    ]
  ],
  [
    [
      65147,
      65147
    ],
    "mapped",
    [
      1600,
      1616
    ]
  ],
  [
    [
      65148,
      65148
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1617
    ]
  ],
  [
    [
      65149,
      65149
    ],
    "mapped",
    [
      1600,
      1617
    ]
  ],
  [
    [
      65150,
      65150
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1618
    ]
  ],
  [
    [
      65151,
      65151
    ],
    "mapped",
    [
      1600,
      1618
    ]
  ],
  [
    [
      65152,
      65152
    ],
    "mapped",
    [
      1569
    ]
  ],
  [
    [
      65153,
      65154
    ],
    "mapped",
    [
      1570
    ]
  ],
  [
    [
      65155,
      65156
    ],
    "mapped",
    [
      1571
    ]
  ],
  [
    [
      65157,
      65158
    ],
    "mapped",
    [
      1572
    ]
  ],
  [
    [
      65159,
      65160
    ],
    "mapped",
    [
      1573
    ]
  ],
  [
    [
      65161,
      65164
    ],
    "mapped",
    [
      1574
    ]
  ],
  [
    [
      65165,
      65166
    ],
    "mapped",
    [
      1575
    ]
  ],
  [
    [
      65167,
      65170
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      65171,
      65172
    ],
    "mapped",
    [
      1577
    ]
  ],
  [
    [
      65173,
      65176
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      65177,
      65180
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      65181,
      65184
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      65185,
      65188
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      65189,
      65192
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      65193,
      65194
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      65195,
      65196
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      65197,
      65198
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      65199,
      65200
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      65201,
      65204
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      65205,
      65208
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      65209,
      65212
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      65213,
      65216
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      65217,
      65220
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      65221,
      65224
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      65225,
      65228
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      65229,
      65232
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      65233,
      65236
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      65237,
      65240
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      65241,
      65244
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      65245,
      65248
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      65249,
      65252
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      65253,
      65256
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      65257,
      65260
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      65261,
      65262
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      65263,
      65264
    ],
    "mapped",
    [
      1609
    ]
  ],
  [
    [
      65265,
      65268
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      65269,
      65270
    ],
    "mapped",
    [
      1604,
      1570
    ]
  ],
  [
    [
      65271,
      65272
    ],
    "mapped",
    [
      1604,
      1571
    ]
  ],
  [
    [
      65273,
      65274
    ],
    "mapped",
    [
      1604,
      1573
    ]
  ],
  [
    [
      65275,
      65276
    ],
    "mapped",
    [
      1604,
      1575
    ]
  ],
  [
    [
      65277,
      65278
    ],
    "disallowed"
  ],
  [
    [
      65279,
      65279
    ],
    "ignored"
  ],
  [
    [
      65280,
      65280
    ],
    "disallowed"
  ],
  [
    [
      65281,
      65281
    ],
    "disallowed_STD3_mapped",
    [
      33
    ]
  ],
  [
    [
      65282,
      65282
    ],
    "disallowed_STD3_mapped",
    [
      34
    ]
  ],
  [
    [
      65283,
      65283
    ],
    "disallowed_STD3_mapped",
    [
      35
    ]
  ],
  [
    [
      65284,
      65284
    ],
    "disallowed_STD3_mapped",
    [
      36
    ]
  ],
  [
    [
      65285,
      65285
    ],
    "disallowed_STD3_mapped",
    [
      37
    ]
  ],
  [
    [
      65286,
      65286
    ],
    "disallowed_STD3_mapped",
    [
      38
    ]
  ],
  [
    [
      65287,
      65287
    ],
    "disallowed_STD3_mapped",
    [
      39
    ]
  ],
  [
    [
      65288,
      65288
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      65289,
      65289
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      65290,
      65290
    ],
    "disallowed_STD3_mapped",
    [
      42
    ]
  ],
  [
    [
      65291,
      65291
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      65292,
      65292
    ],
    "disallowed_STD3_mapped",
    [
      44
    ]
  ],
  [
    [
      65293,
      65293
    ],
    "mapped",
    [
      45
    ]
  ],
  [
    [
      65294,
      65294
    ],
    "mapped",
    [
      46
    ]
  ],
  [
    [
      65295,
      65295
    ],
    "disallowed_STD3_mapped",
    [
      47
    ]
  ],
  [
    [
      65296,
      65296
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      65297,
      65297
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      65298,
      65298
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      65299,
      65299
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      65300,
      65300
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      65301,
      65301
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      65302,
      65302
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      65303,
      65303
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      65304,
      65304
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      65305,
      65305
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      65306,
      65306
    ],
    "disallowed_STD3_mapped",
    [
      58
    ]
  ],
  [
    [
      65307,
      65307
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      65308,
      65308
    ],
    "disallowed_STD3_mapped",
    [
      60
    ]
  ],
  [
    [
      65309,
      65309
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      65310,
      65310
    ],
    "disallowed_STD3_mapped",
    [
      62
    ]
  ],
  [
    [
      65311,
      65311
    ],
    "disallowed_STD3_mapped",
    [
      63
    ]
  ],
  [
    [
      65312,
      65312
    ],
    "disallowed_STD3_mapped",
    [
      64
    ]
  ],
  [
    [
      65313,
      65313
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      65314,
      65314
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      65315,
      65315
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      65316,
      65316
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      65317,
      65317
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      65318,
      65318
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      65319,
      65319
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      65320,
      65320
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      65321,
      65321
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      65322,
      65322
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      65323,
      65323
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      65324,
      65324
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      65325,
      65325
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      65326,
      65326
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      65327,
      65327
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      65328,
      65328
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      65329,
      65329
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      65330,
      65330
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      65331,
      65331
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      65332,
      65332
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      65333,
      65333
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      65334,
      65334
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      65335,
      65335
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      65336,
      65336
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      65337,
      65337
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      65338,
      65338
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      65339,
      65339
    ],
    "disallowed_STD3_mapped",
    [
      91
    ]
  ],
  [
    [
      65340,
      65340
    ],
    "disallowed_STD3_mapped",
    [
      92
    ]
  ],
  [
    [
      65341,
      65341
    ],
    "disallowed_STD3_mapped",
    [
      93
    ]
  ],
  [
    [
      65342,
      65342
    ],
    "disallowed_STD3_mapped",
    [
      94
    ]
  ],
  [
    [
      65343,
      65343
    ],
    "disallowed_STD3_mapped",
    [
      95
    ]
  ],
  [
    [
      65344,
      65344
    ],
    "disallowed_STD3_mapped",
    [
      96
    ]
  ],
  [
    [
      65345,
      65345
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      65346,
      65346
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      65347,
      65347
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      65348,
      65348
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      65349,
      65349
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      65350,
      65350
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      65351,
      65351
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      65352,
      65352
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      65353,
      65353
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      65354,
      65354
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      65355,
      65355
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      65356,
      65356
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      65357,
      65357
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      65358,
      65358
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      65359,
      65359
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      65360,
      65360
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      65361,
      65361
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      65362,
      65362
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      65363,
      65363
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      65364,
      65364
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      65365,
      65365
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      65366,
      65366
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      65367,
      65367
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      65368,
      65368
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      65369,
      65369
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      65370,
      65370
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      65371,
      65371
    ],
    "disallowed_STD3_mapped",
    [
      123
    ]
  ],
  [
    [
      65372,
      65372
    ],
    "disallowed_STD3_mapped",
    [
      124
    ]
  ],
  [
    [
      65373,
      65373
    ],
    "disallowed_STD3_mapped",
    [
      125
    ]
  ],
  [
    [
      65374,
      65374
    ],
    "disallowed_STD3_mapped",
    [
      126
    ]
  ],
  [
    [
      65375,
      65375
    ],
    "mapped",
    [
      10629
    ]
  ],
  [
    [
      65376,
      65376
    ],
    "mapped",
    [
      10630
    ]
  ],
  [
    [
      65377,
      65377
    ],
    "mapped",
    [
      46
    ]
  ],
  [
    [
      65378,
      65378
    ],
    "mapped",
    [
      12300
    ]
  ],
  [
    [
      65379,
      65379
    ],
    "mapped",
    [
      12301
    ]
  ],
  [
    [
      65380,
      65380
    ],
    "mapped",
    [
      12289
    ]
  ],
  [
    [
      65381,
      65381
    ],
    "mapped",
    [
      12539
    ]
  ],
  [
    [
      65382,
      65382
    ],
    "mapped",
    [
      12530
    ]
  ],
  [
    [
      65383,
      65383
    ],
    "mapped",
    [
      12449
    ]
  ],
  [
    [
      65384,
      65384
    ],
    "mapped",
    [
      12451
    ]
  ],
  [
    [
      65385,
      65385
    ],
    "mapped",
    [
      12453
    ]
  ],
  [
    [
      65386,
      65386
    ],
    "mapped",
    [
      12455
    ]
  ],
  [
    [
      65387,
      65387
    ],
    "mapped",
    [
      12457
    ]
  ],
  [
    [
      65388,
      65388
    ],
    "mapped",
    [
      12515
    ]
  ],
  [
    [
      65389,
      65389
    ],
    "mapped",
    [
      12517
    ]
  ],
  [
    [
      65390,
      65390
    ],
    "mapped",
    [
      12519
    ]
  ],
  [
    [
      65391,
      65391
    ],
    "mapped",
    [
      12483
    ]
  ],
  [
    [
      65392,
      65392
    ],
    "mapped",
    [
      12540
    ]
  ],
  [
    [
      65393,
      65393
    ],
    "mapped",
    [
      12450
    ]
  ],
  [
    [
      65394,
      65394
    ],
    "mapped",
    [
      12452
    ]
  ],
  [
    [
      65395,
      65395
    ],
    "mapped",
    [
      12454
    ]
  ],
  [
    [
      65396,
      65396
    ],
    "mapped",
    [
      12456
    ]
  ],
  [
    [
      65397,
      65397
    ],
    "mapped",
    [
      12458
    ]
  ],
  [
    [
      65398,
      65398
    ],
    "mapped",
    [
      12459
    ]
  ],
  [
    [
      65399,
      65399
    ],
    "mapped",
    [
      12461
    ]
  ],
  [
    [
      65400,
      65400
    ],
    "mapped",
    [
      12463
    ]
  ],
  [
    [
      65401,
      65401
    ],
    "mapped",
    [
      12465
    ]
  ],
  [
    [
      65402,
      65402
    ],
    "mapped",
    [
      12467
    ]
  ],
  [
    [
      65403,
      65403
    ],
    "mapped",
    [
      12469
    ]
  ],
  [
    [
      65404,
      65404
    ],
    "mapped",
    [
      12471
    ]
  ],
  [
    [
      65405,
      65405
    ],
    "mapped",
    [
      12473
    ]
  ],
  [
    [
      65406,
      65406
    ],
    "mapped",
    [
      12475
    ]
  ],
  [
    [
      65407,
      65407
    ],
    "mapped",
    [
      12477
    ]
  ],
  [
    [
      65408,
      65408
    ],
    "mapped",
    [
      12479
    ]
  ],
  [
    [
      65409,
      65409
    ],
    "mapped",
    [
      12481
    ]
  ],
  [
    [
      65410,
      65410
    ],
    "mapped",
    [
      12484
    ]
  ],
  [
    [
      65411,
      65411
    ],
    "mapped",
    [
      12486
    ]
  ],
  [
    [
      65412,
      65412
    ],
    "mapped",
    [
      12488
    ]
  ],
  [
    [
      65413,
      65413
    ],
    "mapped",
    [
      12490
    ]
  ],
  [
    [
      65414,
      65414
    ],
    "mapped",
    [
      12491
    ]
  ],
  [
    [
      65415,
      65415
    ],
    "mapped",
    [
      12492
    ]
  ],
  [
    [
      65416,
      65416
    ],
    "mapped",
    [
      12493
    ]
  ],
  [
    [
      65417,
      65417
    ],
    "mapped",
    [
      12494
    ]
  ],
  [
    [
      65418,
      65418
    ],
    "mapped",
    [
      12495
    ]
  ],
  [
    [
      65419,
      65419
    ],
    "mapped",
    [
      12498
    ]
  ],
  [
    [
      65420,
      65420
    ],
    "mapped",
    [
      12501
    ]
  ],
  [
    [
      65421,
      65421
    ],
    "mapped",
    [
      12504
    ]
  ],
  [
    [
      65422,
      65422
    ],
    "mapped",
    [
      12507
    ]
  ],
  [
    [
      65423,
      65423
    ],
    "mapped",
    [
      12510
    ]
  ],
  [
    [
      65424,
      65424
    ],
    "mapped",
    [
      12511
    ]
  ],
  [
    [
      65425,
      65425
    ],
    "mapped",
    [
      12512
    ]
  ],
  [
    [
      65426,
      65426
    ],
    "mapped",
    [
      12513
    ]
  ],
  [
    [
      65427,
      65427
    ],
    "mapped",
    [
      12514
    ]
  ],
  [
    [
      65428,
      65428
    ],
    "mapped",
    [
      12516
    ]
  ],
  [
    [
      65429,
      65429
    ],
    "mapped",
    [
      12518
    ]
  ],
  [
    [
      65430,
      65430
    ],
    "mapped",
    [
      12520
    ]
  ],
  [
    [
      65431,
      65431
    ],
    "mapped",
    [
      12521
    ]
  ],
  [
    [
      65432,
      65432
    ],
    "mapped",
    [
      12522
    ]
  ],
  [
    [
      65433,
      65433
    ],
    "mapped",
    [
      12523
    ]
  ],
  [
    [
      65434,
      65434
    ],
    "mapped",
    [
      12524
    ]
  ],
  [
    [
      65435,
      65435
    ],
    "mapped",
    [
      12525
    ]
  ],
  [
    [
      65436,
      65436
    ],
    "mapped",
    [
      12527
    ]
  ],
  [
    [
      65437,
      65437
    ],
    "mapped",
    [
      12531
    ]
  ],
  [
    [
      65438,
      65438
    ],
    "mapped",
    [
      12441
    ]
  ],
  [
    [
      65439,
      65439
    ],
    "mapped",
    [
      12442
    ]
  ],
  [
    [
      65440,
      65440
    ],
    "disallowed"
  ],
  [
    [
      65441,
      65441
    ],
    "mapped",
    [
      4352
    ]
  ],
  [
    [
      65442,
      65442
    ],
    "mapped",
    [
      4353
    ]
  ],
  [
    [
      65443,
      65443
    ],
    "mapped",
    [
      4522
    ]
  ],
  [
    [
      65444,
      65444
    ],
    "mapped",
    [
      4354
    ]
  ],
  [
    [
      65445,
      65445
    ],
    "mapped",
    [
      4524
    ]
  ],
  [
    [
      65446,
      65446
    ],
    "mapped",
    [
      4525
    ]
  ],
  [
    [
      65447,
      65447
    ],
    "mapped",
    [
      4355
    ]
  ],
  [
    [
      65448,
      65448
    ],
    "mapped",
    [
      4356
    ]
  ],
  [
    [
      65449,
      65449
    ],
    "mapped",
    [
      4357
    ]
  ],
  [
    [
      65450,
      65450
    ],
    "mapped",
    [
      4528
    ]
  ],
  [
    [
      65451,
      65451
    ],
    "mapped",
    [
      4529
    ]
  ],
  [
    [
      65452,
      65452
    ],
    "mapped",
    [
      4530
    ]
  ],
  [
    [
      65453,
      65453
    ],
    "mapped",
    [
      4531
    ]
  ],
  [
    [
      65454,
      65454
    ],
    "mapped",
    [
      4532
    ]
  ],
  [
    [
      65455,
      65455
    ],
    "mapped",
    [
      4533
    ]
  ],
  [
    [
      65456,
      65456
    ],
    "mapped",
    [
      4378
    ]
  ],
  [
    [
      65457,
      65457
    ],
    "mapped",
    [
      4358
    ]
  ],
  [
    [
      65458,
      65458
    ],
    "mapped",
    [
      4359
    ]
  ],
  [
    [
      65459,
      65459
    ],
    "mapped",
    [
      4360
    ]
  ],
  [
    [
      65460,
      65460
    ],
    "mapped",
    [
      4385
    ]
  ],
  [
    [
      65461,
      65461
    ],
    "mapped",
    [
      4361
    ]
  ],
  [
    [
      65462,
      65462
    ],
    "mapped",
    [
      4362
    ]
  ],
  [
    [
      65463,
      65463
    ],
    "mapped",
    [
      4363
    ]
  ],
  [
    [
      65464,
      65464
    ],
    "mapped",
    [
      4364
    ]
  ],
  [
    [
      65465,
      65465
    ],
    "mapped",
    [
      4365
    ]
  ],
  [
    [
      65466,
      65466
    ],
    "mapped",
    [
      4366
    ]
  ],
  [
    [
      65467,
      65467
    ],
    "mapped",
    [
      4367
    ]
  ],
  [
    [
      65468,
      65468
    ],
    "mapped",
    [
      4368
    ]
  ],
  [
    [
      65469,
      65469
    ],
    "mapped",
    [
      4369
    ]
  ],
  [
    [
      65470,
      65470
    ],
    "mapped",
    [
      4370
    ]
  ],
  [
    [
      65471,
      65473
    ],
    "disallowed"
  ],
  [
    [
      65474,
      65474
    ],
    "mapped",
    [
      4449
    ]
  ],
  [
    [
      65475,
      65475
    ],
    "mapped",
    [
      4450
    ]
  ],
  [
    [
      65476,
      65476
    ],
    "mapped",
    [
      4451
    ]
  ],
  [
    [
      65477,
      65477
    ],
    "mapped",
    [
      4452
    ]
  ],
  [
    [
      65478,
      65478
    ],
    "mapped",
    [
      4453
    ]
  ],
  [
    [
      65479,
      65479
    ],
    "mapped",
    [
      4454
    ]
  ],
  [
    [
      65480,
      65481
    ],
    "disallowed"
  ],
  [
    [
      65482,
      65482
    ],
    "mapped",
    [
      4455
    ]
  ],
  [
    [
      65483,
      65483
    ],
    "mapped",
    [
      4456
    ]
  ],
  [
    [
      65484,
      65484
    ],
    "mapped",
    [
      4457
    ]
  ],
  [
    [
      65485,
      65485
    ],
    "mapped",
    [
      4458
    ]
  ],
  [
    [
      65486,
      65486
    ],
    "mapped",
    [
      4459
    ]
  ],
  [
    [
      65487,
      65487
    ],
    "mapped",
    [
      4460
    ]
  ],
  [
    [
      65488,
      65489
    ],
    "disallowed"
  ],
  [
    [
      65490,
      65490
    ],
    "mapped",
    [
      4461
    ]
  ],
  [
    [
      65491,
      65491
    ],
    "mapped",
    [
      4462
    ]
  ],
  [
    [
      65492,
      65492
    ],
    "mapped",
    [
      4463
    ]
  ],
  [
    [
      65493,
      65493
    ],
    "mapped",
    [
      4464
    ]
  ],
  [
    [
      65494,
      65494
    ],
    "mapped",
    [
      4465
    ]
  ],
  [
    [
      65495,
      65495
    ],
    "mapped",
    [
      4466
    ]
  ],
  [
    [
      65496,
      65497
    ],
    "disallowed"
  ],
  [
    [
      65498,
      65498
    ],
    "mapped",
    [
      4467
    ]
  ],
  [
    [
      65499,
      65499
    ],
    "mapped",
    [
      4468
    ]
  ],
  [
    [
      65500,
      65500
    ],
    "mapped",
    [
      4469
    ]
  ],
  [
    [
      65501,
      65503
    ],
    "disallowed"
  ],
  [
    [
      65504,
      65504
    ],
    "mapped",
    [
      162
    ]
  ],
  [
    [
      65505,
      65505
    ],
    "mapped",
    [
      163
    ]
  ],
  [
    [
      65506,
      65506
    ],
    "mapped",
    [
      172
    ]
  ],
  [
    [
      65507,
      65507
    ],
    "disallowed_STD3_mapped",
    [
      32,
      772
    ]
  ],
  [
    [
      65508,
      65508
    ],
    "mapped",
    [
      166
    ]
  ],
  [
    [
      65509,
      65509
    ],
    "mapped",
    [
      165
    ]
  ],
  [
    [
      65510,
      65510
    ],
    "mapped",
    [
      8361
    ]
  ],
  [
    [
      65511,
      65511
    ],
    "disallowed"
  ],
  [
    [
      65512,
      65512
    ],
    "mapped",
    [
      9474
    ]
  ],
  [
    [
      65513,
      65513
    ],
    "mapped",
    [
      8592
    ]
  ],
  [
    [
      65514,
      65514
    ],
    "mapped",
    [
      8593
    ]
  ],
  [
    [
      65515,
      65515
    ],
    "mapped",
    [
      8594
    ]
  ],
  [
    [
      65516,
      65516
    ],
    "mapped",
    [
      8595
    ]
  ],
  [
    [
      65517,
      65517
    ],
    "mapped",
    [
      9632
    ]
  ],
  [
    [
      65518,
      65518
    ],
    "mapped",
    [
      9675
    ]
  ],
  [
    [
      65519,
      65528
    ],
    "disallowed"
  ],
  [
    [
      65529,
      65531
    ],
    "disallowed"
  ],
  [
    [
      65532,
      65532
    ],
    "disallowed"
  ],
  [
    [
      65533,
      65533
    ],
    "disallowed"
  ],
  [
    [
      65534,
      65535
    ],
    "disallowed"
  ],
  [
    [
      65536,
      65547
    ],
    "valid"
  ],
  [
    [
      65548,
      65548
    ],
    "disallowed"
  ],
  [
    [
      65549,
      65574
    ],
    "valid"
  ],
  [
    [
      65575,
      65575
    ],
    "disallowed"
  ],
  [
    [
      65576,
      65594
    ],
    "valid"
  ],
  [
    [
      65595,
      65595
    ],
    "disallowed"
  ],
  [
    [
      65596,
      65597
    ],
    "valid"
  ],
  [
    [
      65598,
      65598
    ],
    "disallowed"
  ],
  [
    [
      65599,
      65613
    ],
    "valid"
  ],
  [
    [
      65614,
      65615
    ],
    "disallowed"
  ],
  [
    [
      65616,
      65629
    ],
    "valid"
  ],
  [
    [
      65630,
      65663
    ],
    "disallowed"
  ],
  [
    [
      65664,
      65786
    ],
    "valid"
  ],
  [
    [
      65787,
      65791
    ],
    "disallowed"
  ],
  [
    [
      65792,
      65794
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65795,
      65798
    ],
    "disallowed"
  ],
  [
    [
      65799,
      65843
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65844,
      65846
    ],
    "disallowed"
  ],
  [
    [
      65847,
      65855
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65856,
      65930
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65931,
      65932
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65933,
      65935
    ],
    "disallowed"
  ],
  [
    [
      65936,
      65947
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65948,
      65951
    ],
    "disallowed"
  ],
  [
    [
      65952,
      65952
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65953,
      65999
    ],
    "disallowed"
  ],
  [
    [
      66e3,
      66044
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66045,
      66045
    ],
    "valid"
  ],
  [
    [
      66046,
      66175
    ],
    "disallowed"
  ],
  [
    [
      66176,
      66204
    ],
    "valid"
  ],
  [
    [
      66205,
      66207
    ],
    "disallowed"
  ],
  [
    [
      66208,
      66256
    ],
    "valid"
  ],
  [
    [
      66257,
      66271
    ],
    "disallowed"
  ],
  [
    [
      66272,
      66272
    ],
    "valid"
  ],
  [
    [
      66273,
      66299
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66300,
      66303
    ],
    "disallowed"
  ],
  [
    [
      66304,
      66334
    ],
    "valid"
  ],
  [
    [
      66335,
      66335
    ],
    "valid"
  ],
  [
    [
      66336,
      66339
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66340,
      66351
    ],
    "disallowed"
  ],
  [
    [
      66352,
      66368
    ],
    "valid"
  ],
  [
    [
      66369,
      66369
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66370,
      66377
    ],
    "valid"
  ],
  [
    [
      66378,
      66378
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66379,
      66383
    ],
    "disallowed"
  ],
  [
    [
      66384,
      66426
    ],
    "valid"
  ],
  [
    [
      66427,
      66431
    ],
    "disallowed"
  ],
  [
    [
      66432,
      66461
    ],
    "valid"
  ],
  [
    [
      66462,
      66462
    ],
    "disallowed"
  ],
  [
    [
      66463,
      66463
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66464,
      66499
    ],
    "valid"
  ],
  [
    [
      66500,
      66503
    ],
    "disallowed"
  ],
  [
    [
      66504,
      66511
    ],
    "valid"
  ],
  [
    [
      66512,
      66517
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66518,
      66559
    ],
    "disallowed"
  ],
  [
    [
      66560,
      66560
    ],
    "mapped",
    [
      66600
    ]
  ],
  [
    [
      66561,
      66561
    ],
    "mapped",
    [
      66601
    ]
  ],
  [
    [
      66562,
      66562
    ],
    "mapped",
    [
      66602
    ]
  ],
  [
    [
      66563,
      66563
    ],
    "mapped",
    [
      66603
    ]
  ],
  [
    [
      66564,
      66564
    ],
    "mapped",
    [
      66604
    ]
  ],
  [
    [
      66565,
      66565
    ],
    "mapped",
    [
      66605
    ]
  ],
  [
    [
      66566,
      66566
    ],
    "mapped",
    [
      66606
    ]
  ],
  [
    [
      66567,
      66567
    ],
    "mapped",
    [
      66607
    ]
  ],
  [
    [
      66568,
      66568
    ],
    "mapped",
    [
      66608
    ]
  ],
  [
    [
      66569,
      66569
    ],
    "mapped",
    [
      66609
    ]
  ],
  [
    [
      66570,
      66570
    ],
    "mapped",
    [
      66610
    ]
  ],
  [
    [
      66571,
      66571
    ],
    "mapped",
    [
      66611
    ]
  ],
  [
    [
      66572,
      66572
    ],
    "mapped",
    [
      66612
    ]
  ],
  [
    [
      66573,
      66573
    ],
    "mapped",
    [
      66613
    ]
  ],
  [
    [
      66574,
      66574
    ],
    "mapped",
    [
      66614
    ]
  ],
  [
    [
      66575,
      66575
    ],
    "mapped",
    [
      66615
    ]
  ],
  [
    [
      66576,
      66576
    ],
    "mapped",
    [
      66616
    ]
  ],
  [
    [
      66577,
      66577
    ],
    "mapped",
    [
      66617
    ]
  ],
  [
    [
      66578,
      66578
    ],
    "mapped",
    [
      66618
    ]
  ],
  [
    [
      66579,
      66579
    ],
    "mapped",
    [
      66619
    ]
  ],
  [
    [
      66580,
      66580
    ],
    "mapped",
    [
      66620
    ]
  ],
  [
    [
      66581,
      66581
    ],
    "mapped",
    [
      66621
    ]
  ],
  [
    [
      66582,
      66582
    ],
    "mapped",
    [
      66622
    ]
  ],
  [
    [
      66583,
      66583
    ],
    "mapped",
    [
      66623
    ]
  ],
  [
    [
      66584,
      66584
    ],
    "mapped",
    [
      66624
    ]
  ],
  [
    [
      66585,
      66585
    ],
    "mapped",
    [
      66625
    ]
  ],
  [
    [
      66586,
      66586
    ],
    "mapped",
    [
      66626
    ]
  ],
  [
    [
      66587,
      66587
    ],
    "mapped",
    [
      66627
    ]
  ],
  [
    [
      66588,
      66588
    ],
    "mapped",
    [
      66628
    ]
  ],
  [
    [
      66589,
      66589
    ],
    "mapped",
    [
      66629
    ]
  ],
  [
    [
      66590,
      66590
    ],
    "mapped",
    [
      66630
    ]
  ],
  [
    [
      66591,
      66591
    ],
    "mapped",
    [
      66631
    ]
  ],
  [
    [
      66592,
      66592
    ],
    "mapped",
    [
      66632
    ]
  ],
  [
    [
      66593,
      66593
    ],
    "mapped",
    [
      66633
    ]
  ],
  [
    [
      66594,
      66594
    ],
    "mapped",
    [
      66634
    ]
  ],
  [
    [
      66595,
      66595
    ],
    "mapped",
    [
      66635
    ]
  ],
  [
    [
      66596,
      66596
    ],
    "mapped",
    [
      66636
    ]
  ],
  [
    [
      66597,
      66597
    ],
    "mapped",
    [
      66637
    ]
  ],
  [
    [
      66598,
      66598
    ],
    "mapped",
    [
      66638
    ]
  ],
  [
    [
      66599,
      66599
    ],
    "mapped",
    [
      66639
    ]
  ],
  [
    [
      66600,
      66637
    ],
    "valid"
  ],
  [
    [
      66638,
      66717
    ],
    "valid"
  ],
  [
    [
      66718,
      66719
    ],
    "disallowed"
  ],
  [
    [
      66720,
      66729
    ],
    "valid"
  ],
  [
    [
      66730,
      66815
    ],
    "disallowed"
  ],
  [
    [
      66816,
      66855
    ],
    "valid"
  ],
  [
    [
      66856,
      66863
    ],
    "disallowed"
  ],
  [
    [
      66864,
      66915
    ],
    "valid"
  ],
  [
    [
      66916,
      66926
    ],
    "disallowed"
  ],
  [
    [
      66927,
      66927
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66928,
      67071
    ],
    "disallowed"
  ],
  [
    [
      67072,
      67382
    ],
    "valid"
  ],
  [
    [
      67383,
      67391
    ],
    "disallowed"
  ],
  [
    [
      67392,
      67413
    ],
    "valid"
  ],
  [
    [
      67414,
      67423
    ],
    "disallowed"
  ],
  [
    [
      67424,
      67431
    ],
    "valid"
  ],
  [
    [
      67432,
      67583
    ],
    "disallowed"
  ],
  [
    [
      67584,
      67589
    ],
    "valid"
  ],
  [
    [
      67590,
      67591
    ],
    "disallowed"
  ],
  [
    [
      67592,
      67592
    ],
    "valid"
  ],
  [
    [
      67593,
      67593
    ],
    "disallowed"
  ],
  [
    [
      67594,
      67637
    ],
    "valid"
  ],
  [
    [
      67638,
      67638
    ],
    "disallowed"
  ],
  [
    [
      67639,
      67640
    ],
    "valid"
  ],
  [
    [
      67641,
      67643
    ],
    "disallowed"
  ],
  [
    [
      67644,
      67644
    ],
    "valid"
  ],
  [
    [
      67645,
      67646
    ],
    "disallowed"
  ],
  [
    [
      67647,
      67647
    ],
    "valid"
  ],
  [
    [
      67648,
      67669
    ],
    "valid"
  ],
  [
    [
      67670,
      67670
    ],
    "disallowed"
  ],
  [
    [
      67671,
      67679
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67680,
      67702
    ],
    "valid"
  ],
  [
    [
      67703,
      67711
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67712,
      67742
    ],
    "valid"
  ],
  [
    [
      67743,
      67750
    ],
    "disallowed"
  ],
  [
    [
      67751,
      67759
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67760,
      67807
    ],
    "disallowed"
  ],
  [
    [
      67808,
      67826
    ],
    "valid"
  ],
  [
    [
      67827,
      67827
    ],
    "disallowed"
  ],
  [
    [
      67828,
      67829
    ],
    "valid"
  ],
  [
    [
      67830,
      67834
    ],
    "disallowed"
  ],
  [
    [
      67835,
      67839
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67840,
      67861
    ],
    "valid"
  ],
  [
    [
      67862,
      67865
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67866,
      67867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67868,
      67870
    ],
    "disallowed"
  ],
  [
    [
      67871,
      67871
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67872,
      67897
    ],
    "valid"
  ],
  [
    [
      67898,
      67902
    ],
    "disallowed"
  ],
  [
    [
      67903,
      67903
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67904,
      67967
    ],
    "disallowed"
  ],
  [
    [
      67968,
      68023
    ],
    "valid"
  ],
  [
    [
      68024,
      68027
    ],
    "disallowed"
  ],
  [
    [
      68028,
      68029
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68030,
      68031
    ],
    "valid"
  ],
  [
    [
      68032,
      68047
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68048,
      68049
    ],
    "disallowed"
  ],
  [
    [
      68050,
      68095
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68096,
      68099
    ],
    "valid"
  ],
  [
    [
      68100,
      68100
    ],
    "disallowed"
  ],
  [
    [
      68101,
      68102
    ],
    "valid"
  ],
  [
    [
      68103,
      68107
    ],
    "disallowed"
  ],
  [
    [
      68108,
      68115
    ],
    "valid"
  ],
  [
    [
      68116,
      68116
    ],
    "disallowed"
  ],
  [
    [
      68117,
      68119
    ],
    "valid"
  ],
  [
    [
      68120,
      68120
    ],
    "disallowed"
  ],
  [
    [
      68121,
      68147
    ],
    "valid"
  ],
  [
    [
      68148,
      68151
    ],
    "disallowed"
  ],
  [
    [
      68152,
      68154
    ],
    "valid"
  ],
  [
    [
      68155,
      68158
    ],
    "disallowed"
  ],
  [
    [
      68159,
      68159
    ],
    "valid"
  ],
  [
    [
      68160,
      68167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68168,
      68175
    ],
    "disallowed"
  ],
  [
    [
      68176,
      68184
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68185,
      68191
    ],
    "disallowed"
  ],
  [
    [
      68192,
      68220
    ],
    "valid"
  ],
  [
    [
      68221,
      68223
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68224,
      68252
    ],
    "valid"
  ],
  [
    [
      68253,
      68255
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68256,
      68287
    ],
    "disallowed"
  ],
  [
    [
      68288,
      68295
    ],
    "valid"
  ],
  [
    [
      68296,
      68296
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68297,
      68326
    ],
    "valid"
  ],
  [
    [
      68327,
      68330
    ],
    "disallowed"
  ],
  [
    [
      68331,
      68342
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68343,
      68351
    ],
    "disallowed"
  ],
  [
    [
      68352,
      68405
    ],
    "valid"
  ],
  [
    [
      68406,
      68408
    ],
    "disallowed"
  ],
  [
    [
      68409,
      68415
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68416,
      68437
    ],
    "valid"
  ],
  [
    [
      68438,
      68439
    ],
    "disallowed"
  ],
  [
    [
      68440,
      68447
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68448,
      68466
    ],
    "valid"
  ],
  [
    [
      68467,
      68471
    ],
    "disallowed"
  ],
  [
    [
      68472,
      68479
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68480,
      68497
    ],
    "valid"
  ],
  [
    [
      68498,
      68504
    ],
    "disallowed"
  ],
  [
    [
      68505,
      68508
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68509,
      68520
    ],
    "disallowed"
  ],
  [
    [
      68521,
      68527
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68528,
      68607
    ],
    "disallowed"
  ],
  [
    [
      68608,
      68680
    ],
    "valid"
  ],
  [
    [
      68681,
      68735
    ],
    "disallowed"
  ],
  [
    [
      68736,
      68736
    ],
    "mapped",
    [
      68800
    ]
  ],
  [
    [
      68737,
      68737
    ],
    "mapped",
    [
      68801
    ]
  ],
  [
    [
      68738,
      68738
    ],
    "mapped",
    [
      68802
    ]
  ],
  [
    [
      68739,
      68739
    ],
    "mapped",
    [
      68803
    ]
  ],
  [
    [
      68740,
      68740
    ],
    "mapped",
    [
      68804
    ]
  ],
  [
    [
      68741,
      68741
    ],
    "mapped",
    [
      68805
    ]
  ],
  [
    [
      68742,
      68742
    ],
    "mapped",
    [
      68806
    ]
  ],
  [
    [
      68743,
      68743
    ],
    "mapped",
    [
      68807
    ]
  ],
  [
    [
      68744,
      68744
    ],
    "mapped",
    [
      68808
    ]
  ],
  [
    [
      68745,
      68745
    ],
    "mapped",
    [
      68809
    ]
  ],
  [
    [
      68746,
      68746
    ],
    "mapped",
    [
      68810
    ]
  ],
  [
    [
      68747,
      68747
    ],
    "mapped",
    [
      68811
    ]
  ],
  [
    [
      68748,
      68748
    ],
    "mapped",
    [
      68812
    ]
  ],
  [
    [
      68749,
      68749
    ],
    "mapped",
    [
      68813
    ]
  ],
  [
    [
      68750,
      68750
    ],
    "mapped",
    [
      68814
    ]
  ],
  [
    [
      68751,
      68751
    ],
    "mapped",
    [
      68815
    ]
  ],
  [
    [
      68752,
      68752
    ],
    "mapped",
    [
      68816
    ]
  ],
  [
    [
      68753,
      68753
    ],
    "mapped",
    [
      68817
    ]
  ],
  [
    [
      68754,
      68754
    ],
    "mapped",
    [
      68818
    ]
  ],
  [
    [
      68755,
      68755
    ],
    "mapped",
    [
      68819
    ]
  ],
  [
    [
      68756,
      68756
    ],
    "mapped",
    [
      68820
    ]
  ],
  [
    [
      68757,
      68757
    ],
    "mapped",
    [
      68821
    ]
  ],
  [
    [
      68758,
      68758
    ],
    "mapped",
    [
      68822
    ]
  ],
  [
    [
      68759,
      68759
    ],
    "mapped",
    [
      68823
    ]
  ],
  [
    [
      68760,
      68760
    ],
    "mapped",
    [
      68824
    ]
  ],
  [
    [
      68761,
      68761
    ],
    "mapped",
    [
      68825
    ]
  ],
  [
    [
      68762,
      68762
    ],
    "mapped",
    [
      68826
    ]
  ],
  [
    [
      68763,
      68763
    ],
    "mapped",
    [
      68827
    ]
  ],
  [
    [
      68764,
      68764
    ],
    "mapped",
    [
      68828
    ]
  ],
  [
    [
      68765,
      68765
    ],
    "mapped",
    [
      68829
    ]
  ],
  [
    [
      68766,
      68766
    ],
    "mapped",
    [
      68830
    ]
  ],
  [
    [
      68767,
      68767
    ],
    "mapped",
    [
      68831
    ]
  ],
  [
    [
      68768,
      68768
    ],
    "mapped",
    [
      68832
    ]
  ],
  [
    [
      68769,
      68769
    ],
    "mapped",
    [
      68833
    ]
  ],
  [
    [
      68770,
      68770
    ],
    "mapped",
    [
      68834
    ]
  ],
  [
    [
      68771,
      68771
    ],
    "mapped",
    [
      68835
    ]
  ],
  [
    [
      68772,
      68772
    ],
    "mapped",
    [
      68836
    ]
  ],
  [
    [
      68773,
      68773
    ],
    "mapped",
    [
      68837
    ]
  ],
  [
    [
      68774,
      68774
    ],
    "mapped",
    [
      68838
    ]
  ],
  [
    [
      68775,
      68775
    ],
    "mapped",
    [
      68839
    ]
  ],
  [
    [
      68776,
      68776
    ],
    "mapped",
    [
      68840
    ]
  ],
  [
    [
      68777,
      68777
    ],
    "mapped",
    [
      68841
    ]
  ],
  [
    [
      68778,
      68778
    ],
    "mapped",
    [
      68842
    ]
  ],
  [
    [
      68779,
      68779
    ],
    "mapped",
    [
      68843
    ]
  ],
  [
    [
      68780,
      68780
    ],
    "mapped",
    [
      68844
    ]
  ],
  [
    [
      68781,
      68781
    ],
    "mapped",
    [
      68845
    ]
  ],
  [
    [
      68782,
      68782
    ],
    "mapped",
    [
      68846
    ]
  ],
  [
    [
      68783,
      68783
    ],
    "mapped",
    [
      68847
    ]
  ],
  [
    [
      68784,
      68784
    ],
    "mapped",
    [
      68848
    ]
  ],
  [
    [
      68785,
      68785
    ],
    "mapped",
    [
      68849
    ]
  ],
  [
    [
      68786,
      68786
    ],
    "mapped",
    [
      68850
    ]
  ],
  [
    [
      68787,
      68799
    ],
    "disallowed"
  ],
  [
    [
      68800,
      68850
    ],
    "valid"
  ],
  [
    [
      68851,
      68857
    ],
    "disallowed"
  ],
  [
    [
      68858,
      68863
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68864,
      69215
    ],
    "disallowed"
  ],
  [
    [
      69216,
      69246
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69247,
      69631
    ],
    "disallowed"
  ],
  [
    [
      69632,
      69702
    ],
    "valid"
  ],
  [
    [
      69703,
      69709
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69710,
      69713
    ],
    "disallowed"
  ],
  [
    [
      69714,
      69733
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69734,
      69743
    ],
    "valid"
  ],
  [
    [
      69744,
      69758
    ],
    "disallowed"
  ],
  [
    [
      69759,
      69759
    ],
    "valid"
  ],
  [
    [
      69760,
      69818
    ],
    "valid"
  ],
  [
    [
      69819,
      69820
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69821,
      69821
    ],
    "disallowed"
  ],
  [
    [
      69822,
      69825
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69826,
      69839
    ],
    "disallowed"
  ],
  [
    [
      69840,
      69864
    ],
    "valid"
  ],
  [
    [
      69865,
      69871
    ],
    "disallowed"
  ],
  [
    [
      69872,
      69881
    ],
    "valid"
  ],
  [
    [
      69882,
      69887
    ],
    "disallowed"
  ],
  [
    [
      69888,
      69940
    ],
    "valid"
  ],
  [
    [
      69941,
      69941
    ],
    "disallowed"
  ],
  [
    [
      69942,
      69951
    ],
    "valid"
  ],
  [
    [
      69952,
      69955
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69956,
      69967
    ],
    "disallowed"
  ],
  [
    [
      69968,
      70003
    ],
    "valid"
  ],
  [
    [
      70004,
      70005
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70006,
      70006
    ],
    "valid"
  ],
  [
    [
      70007,
      70015
    ],
    "disallowed"
  ],
  [
    [
      70016,
      70084
    ],
    "valid"
  ],
  [
    [
      70085,
      70088
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70089,
      70089
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70090,
      70092
    ],
    "valid"
  ],
  [
    [
      70093,
      70093
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70094,
      70095
    ],
    "disallowed"
  ],
  [
    [
      70096,
      70105
    ],
    "valid"
  ],
  [
    [
      70106,
      70106
    ],
    "valid"
  ],
  [
    [
      70107,
      70107
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70108,
      70108
    ],
    "valid"
  ],
  [
    [
      70109,
      70111
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70112,
      70112
    ],
    "disallowed"
  ],
  [
    [
      70113,
      70132
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70133,
      70143
    ],
    "disallowed"
  ],
  [
    [
      70144,
      70161
    ],
    "valid"
  ],
  [
    [
      70162,
      70162
    ],
    "disallowed"
  ],
  [
    [
      70163,
      70199
    ],
    "valid"
  ],
  [
    [
      70200,
      70205
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70206,
      70271
    ],
    "disallowed"
  ],
  [
    [
      70272,
      70278
    ],
    "valid"
  ],
  [
    [
      70279,
      70279
    ],
    "disallowed"
  ],
  [
    [
      70280,
      70280
    ],
    "valid"
  ],
  [
    [
      70281,
      70281
    ],
    "disallowed"
  ],
  [
    [
      70282,
      70285
    ],
    "valid"
  ],
  [
    [
      70286,
      70286
    ],
    "disallowed"
  ],
  [
    [
      70287,
      70301
    ],
    "valid"
  ],
  [
    [
      70302,
      70302
    ],
    "disallowed"
  ],
  [
    [
      70303,
      70312
    ],
    "valid"
  ],
  [
    [
      70313,
      70313
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70314,
      70319
    ],
    "disallowed"
  ],
  [
    [
      70320,
      70378
    ],
    "valid"
  ],
  [
    [
      70379,
      70383
    ],
    "disallowed"
  ],
  [
    [
      70384,
      70393
    ],
    "valid"
  ],
  [
    [
      70394,
      70399
    ],
    "disallowed"
  ],
  [
    [
      70400,
      70400
    ],
    "valid"
  ],
  [
    [
      70401,
      70403
    ],
    "valid"
  ],
  [
    [
      70404,
      70404
    ],
    "disallowed"
  ],
  [
    [
      70405,
      70412
    ],
    "valid"
  ],
  [
    [
      70413,
      70414
    ],
    "disallowed"
  ],
  [
    [
      70415,
      70416
    ],
    "valid"
  ],
  [
    [
      70417,
      70418
    ],
    "disallowed"
  ],
  [
    [
      70419,
      70440
    ],
    "valid"
  ],
  [
    [
      70441,
      70441
    ],
    "disallowed"
  ],
  [
    [
      70442,
      70448
    ],
    "valid"
  ],
  [
    [
      70449,
      70449
    ],
    "disallowed"
  ],
  [
    [
      70450,
      70451
    ],
    "valid"
  ],
  [
    [
      70452,
      70452
    ],
    "disallowed"
  ],
  [
    [
      70453,
      70457
    ],
    "valid"
  ],
  [
    [
      70458,
      70459
    ],
    "disallowed"
  ],
  [
    [
      70460,
      70468
    ],
    "valid"
  ],
  [
    [
      70469,
      70470
    ],
    "disallowed"
  ],
  [
    [
      70471,
      70472
    ],
    "valid"
  ],
  [
    [
      70473,
      70474
    ],
    "disallowed"
  ],
  [
    [
      70475,
      70477
    ],
    "valid"
  ],
  [
    [
      70478,
      70479
    ],
    "disallowed"
  ],
  [
    [
      70480,
      70480
    ],
    "valid"
  ],
  [
    [
      70481,
      70486
    ],
    "disallowed"
  ],
  [
    [
      70487,
      70487
    ],
    "valid"
  ],
  [
    [
      70488,
      70492
    ],
    "disallowed"
  ],
  [
    [
      70493,
      70499
    ],
    "valid"
  ],
  [
    [
      70500,
      70501
    ],
    "disallowed"
  ],
  [
    [
      70502,
      70508
    ],
    "valid"
  ],
  [
    [
      70509,
      70511
    ],
    "disallowed"
  ],
  [
    [
      70512,
      70516
    ],
    "valid"
  ],
  [
    [
      70517,
      70783
    ],
    "disallowed"
  ],
  [
    [
      70784,
      70853
    ],
    "valid"
  ],
  [
    [
      70854,
      70854
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70855,
      70855
    ],
    "valid"
  ],
  [
    [
      70856,
      70863
    ],
    "disallowed"
  ],
  [
    [
      70864,
      70873
    ],
    "valid"
  ],
  [
    [
      70874,
      71039
    ],
    "disallowed"
  ],
  [
    [
      71040,
      71093
    ],
    "valid"
  ],
  [
    [
      71094,
      71095
    ],
    "disallowed"
  ],
  [
    [
      71096,
      71104
    ],
    "valid"
  ],
  [
    [
      71105,
      71113
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71114,
      71127
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71128,
      71133
    ],
    "valid"
  ],
  [
    [
      71134,
      71167
    ],
    "disallowed"
  ],
  [
    [
      71168,
      71232
    ],
    "valid"
  ],
  [
    [
      71233,
      71235
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71236,
      71236
    ],
    "valid"
  ],
  [
    [
      71237,
      71247
    ],
    "disallowed"
  ],
  [
    [
      71248,
      71257
    ],
    "valid"
  ],
  [
    [
      71258,
      71295
    ],
    "disallowed"
  ],
  [
    [
      71296,
      71351
    ],
    "valid"
  ],
  [
    [
      71352,
      71359
    ],
    "disallowed"
  ],
  [
    [
      71360,
      71369
    ],
    "valid"
  ],
  [
    [
      71370,
      71423
    ],
    "disallowed"
  ],
  [
    [
      71424,
      71449
    ],
    "valid"
  ],
  [
    [
      71450,
      71452
    ],
    "disallowed"
  ],
  [
    [
      71453,
      71467
    ],
    "valid"
  ],
  [
    [
      71468,
      71471
    ],
    "disallowed"
  ],
  [
    [
      71472,
      71481
    ],
    "valid"
  ],
  [
    [
      71482,
      71487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71488,
      71839
    ],
    "disallowed"
  ],
  [
    [
      71840,
      71840
    ],
    "mapped",
    [
      71872
    ]
  ],
  [
    [
      71841,
      71841
    ],
    "mapped",
    [
      71873
    ]
  ],
  [
    [
      71842,
      71842
    ],
    "mapped",
    [
      71874
    ]
  ],
  [
    [
      71843,
      71843
    ],
    "mapped",
    [
      71875
    ]
  ],
  [
    [
      71844,
      71844
    ],
    "mapped",
    [
      71876
    ]
  ],
  [
    [
      71845,
      71845
    ],
    "mapped",
    [
      71877
    ]
  ],
  [
    [
      71846,
      71846
    ],
    "mapped",
    [
      71878
    ]
  ],
  [
    [
      71847,
      71847
    ],
    "mapped",
    [
      71879
    ]
  ],
  [
    [
      71848,
      71848
    ],
    "mapped",
    [
      71880
    ]
  ],
  [
    [
      71849,
      71849
    ],
    "mapped",
    [
      71881
    ]
  ],
  [
    [
      71850,
      71850
    ],
    "mapped",
    [
      71882
    ]
  ],
  [
    [
      71851,
      71851
    ],
    "mapped",
    [
      71883
    ]
  ],
  [
    [
      71852,
      71852
    ],
    "mapped",
    [
      71884
    ]
  ],
  [
    [
      71853,
      71853
    ],
    "mapped",
    [
      71885
    ]
  ],
  [
    [
      71854,
      71854
    ],
    "mapped",
    [
      71886
    ]
  ],
  [
    [
      71855,
      71855
    ],
    "mapped",
    [
      71887
    ]
  ],
  [
    [
      71856,
      71856
    ],
    "mapped",
    [
      71888
    ]
  ],
  [
    [
      71857,
      71857
    ],
    "mapped",
    [
      71889
    ]
  ],
  [
    [
      71858,
      71858
    ],
    "mapped",
    [
      71890
    ]
  ],
  [
    [
      71859,
      71859
    ],
    "mapped",
    [
      71891
    ]
  ],
  [
    [
      71860,
      71860
    ],
    "mapped",
    [
      71892
    ]
  ],
  [
    [
      71861,
      71861
    ],
    "mapped",
    [
      71893
    ]
  ],
  [
    [
      71862,
      71862
    ],
    "mapped",
    [
      71894
    ]
  ],
  [
    [
      71863,
      71863
    ],
    "mapped",
    [
      71895
    ]
  ],
  [
    [
      71864,
      71864
    ],
    "mapped",
    [
      71896
    ]
  ],
  [
    [
      71865,
      71865
    ],
    "mapped",
    [
      71897
    ]
  ],
  [
    [
      71866,
      71866
    ],
    "mapped",
    [
      71898
    ]
  ],
  [
    [
      71867,
      71867
    ],
    "mapped",
    [
      71899
    ]
  ],
  [
    [
      71868,
      71868
    ],
    "mapped",
    [
      71900
    ]
  ],
  [
    [
      71869,
      71869
    ],
    "mapped",
    [
      71901
    ]
  ],
  [
    [
      71870,
      71870
    ],
    "mapped",
    [
      71902
    ]
  ],
  [
    [
      71871,
      71871
    ],
    "mapped",
    [
      71903
    ]
  ],
  [
    [
      71872,
      71913
    ],
    "valid"
  ],
  [
    [
      71914,
      71922
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71923,
      71934
    ],
    "disallowed"
  ],
  [
    [
      71935,
      71935
    ],
    "valid"
  ],
  [
    [
      71936,
      72383
    ],
    "disallowed"
  ],
  [
    [
      72384,
      72440
    ],
    "valid"
  ],
  [
    [
      72441,
      73727
    ],
    "disallowed"
  ],
  [
    [
      73728,
      74606
    ],
    "valid"
  ],
  [
    [
      74607,
      74648
    ],
    "valid"
  ],
  [
    [
      74649,
      74649
    ],
    "valid"
  ],
  [
    [
      74650,
      74751
    ],
    "disallowed"
  ],
  [
    [
      74752,
      74850
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74851,
      74862
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74863,
      74863
    ],
    "disallowed"
  ],
  [
    [
      74864,
      74867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74868,
      74868
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74869,
      74879
    ],
    "disallowed"
  ],
  [
    [
      74880,
      75075
    ],
    "valid"
  ],
  [
    [
      75076,
      77823
    ],
    "disallowed"
  ],
  [
    [
      77824,
      78894
    ],
    "valid"
  ],
  [
    [
      78895,
      82943
    ],
    "disallowed"
  ],
  [
    [
      82944,
      83526
    ],
    "valid"
  ],
  [
    [
      83527,
      92159
    ],
    "disallowed"
  ],
  [
    [
      92160,
      92728
    ],
    "valid"
  ],
  [
    [
      92729,
      92735
    ],
    "disallowed"
  ],
  [
    [
      92736,
      92766
    ],
    "valid"
  ],
  [
    [
      92767,
      92767
    ],
    "disallowed"
  ],
  [
    [
      92768,
      92777
    ],
    "valid"
  ],
  [
    [
      92778,
      92781
    ],
    "disallowed"
  ],
  [
    [
      92782,
      92783
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92784,
      92879
    ],
    "disallowed"
  ],
  [
    [
      92880,
      92909
    ],
    "valid"
  ],
  [
    [
      92910,
      92911
    ],
    "disallowed"
  ],
  [
    [
      92912,
      92916
    ],
    "valid"
  ],
  [
    [
      92917,
      92917
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92918,
      92927
    ],
    "disallowed"
  ],
  [
    [
      92928,
      92982
    ],
    "valid"
  ],
  [
    [
      92983,
      92991
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92992,
      92995
    ],
    "valid"
  ],
  [
    [
      92996,
      92997
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92998,
      93007
    ],
    "disallowed"
  ],
  [
    [
      93008,
      93017
    ],
    "valid"
  ],
  [
    [
      93018,
      93018
    ],
    "disallowed"
  ],
  [
    [
      93019,
      93025
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      93026,
      93026
    ],
    "disallowed"
  ],
  [
    [
      93027,
      93047
    ],
    "valid"
  ],
  [
    [
      93048,
      93052
    ],
    "disallowed"
  ],
  [
    [
      93053,
      93071
    ],
    "valid"
  ],
  [
    [
      93072,
      93951
    ],
    "disallowed"
  ],
  [
    [
      93952,
      94020
    ],
    "valid"
  ],
  [
    [
      94021,
      94031
    ],
    "disallowed"
  ],
  [
    [
      94032,
      94078
    ],
    "valid"
  ],
  [
    [
      94079,
      94094
    ],
    "disallowed"
  ],
  [
    [
      94095,
      94111
    ],
    "valid"
  ],
  [
    [
      94112,
      110591
    ],
    "disallowed"
  ],
  [
    [
      110592,
      110593
    ],
    "valid"
  ],
  [
    [
      110594,
      113663
    ],
    "disallowed"
  ],
  [
    [
      113664,
      113770
    ],
    "valid"
  ],
  [
    [
      113771,
      113775
    ],
    "disallowed"
  ],
  [
    [
      113776,
      113788
    ],
    "valid"
  ],
  [
    [
      113789,
      113791
    ],
    "disallowed"
  ],
  [
    [
      113792,
      113800
    ],
    "valid"
  ],
  [
    [
      113801,
      113807
    ],
    "disallowed"
  ],
  [
    [
      113808,
      113817
    ],
    "valid"
  ],
  [
    [
      113818,
      113819
    ],
    "disallowed"
  ],
  [
    [
      113820,
      113820
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      113821,
      113822
    ],
    "valid"
  ],
  [
    [
      113823,
      113823
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      113824,
      113827
    ],
    "ignored"
  ],
  [
    [
      113828,
      118783
    ],
    "disallowed"
  ],
  [
    [
      118784,
      119029
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119030,
      119039
    ],
    "disallowed"
  ],
  [
    [
      119040,
      119078
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119079,
      119080
    ],
    "disallowed"
  ],
  [
    [
      119081,
      119081
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119082,
      119133
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119134,
      119134
    ],
    "mapped",
    [
      119127,
      119141
    ]
  ],
  [
    [
      119135,
      119135
    ],
    "mapped",
    [
      119128,
      119141
    ]
  ],
  [
    [
      119136,
      119136
    ],
    "mapped",
    [
      119128,
      119141,
      119150
    ]
  ],
  [
    [
      119137,
      119137
    ],
    "mapped",
    [
      119128,
      119141,
      119151
    ]
  ],
  [
    [
      119138,
      119138
    ],
    "mapped",
    [
      119128,
      119141,
      119152
    ]
  ],
  [
    [
      119139,
      119139
    ],
    "mapped",
    [
      119128,
      119141,
      119153
    ]
  ],
  [
    [
      119140,
      119140
    ],
    "mapped",
    [
      119128,
      119141,
      119154
    ]
  ],
  [
    [
      119141,
      119154
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119155,
      119162
    ],
    "disallowed"
  ],
  [
    [
      119163,
      119226
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119227,
      119227
    ],
    "mapped",
    [
      119225,
      119141
    ]
  ],
  [
    [
      119228,
      119228
    ],
    "mapped",
    [
      119226,
      119141
    ]
  ],
  [
    [
      119229,
      119229
    ],
    "mapped",
    [
      119225,
      119141,
      119150
    ]
  ],
  [
    [
      119230,
      119230
    ],
    "mapped",
    [
      119226,
      119141,
      119150
    ]
  ],
  [
    [
      119231,
      119231
    ],
    "mapped",
    [
      119225,
      119141,
      119151
    ]
  ],
  [
    [
      119232,
      119232
    ],
    "mapped",
    [
      119226,
      119141,
      119151
    ]
  ],
  [
    [
      119233,
      119261
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119262,
      119272
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119273,
      119295
    ],
    "disallowed"
  ],
  [
    [
      119296,
      119365
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119366,
      119551
    ],
    "disallowed"
  ],
  [
    [
      119552,
      119638
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119639,
      119647
    ],
    "disallowed"
  ],
  [
    [
      119648,
      119665
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119666,
      119807
    ],
    "disallowed"
  ],
  [
    [
      119808,
      119808
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119809,
      119809
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119810,
      119810
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119811,
      119811
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119812,
      119812
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119813,
      119813
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119814,
      119814
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119815,
      119815
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119816,
      119816
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119817,
      119817
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119818,
      119818
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119819,
      119819
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119820,
      119820
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119821,
      119821
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119822,
      119822
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119823,
      119823
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119824,
      119824
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119825,
      119825
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119826,
      119826
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119827,
      119827
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119828,
      119828
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119829,
      119829
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119830,
      119830
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119831,
      119831
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119832,
      119832
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119833,
      119833
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119834,
      119834
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119835,
      119835
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119836,
      119836
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119837,
      119837
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119838,
      119838
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119839,
      119839
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119840,
      119840
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119841,
      119841
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119842,
      119842
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119843,
      119843
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119844,
      119844
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119845,
      119845
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119846,
      119846
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119847,
      119847
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119848,
      119848
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119849,
      119849
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119850,
      119850
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119851,
      119851
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119852,
      119852
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119853,
      119853
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119854,
      119854
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119855,
      119855
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119856,
      119856
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119857,
      119857
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119858,
      119858
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119859,
      119859
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119860,
      119860
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119861,
      119861
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119862,
      119862
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119863,
      119863
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119864,
      119864
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119865,
      119865
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119866,
      119866
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119867,
      119867
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119868,
      119868
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119869,
      119869
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119870,
      119870
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119871,
      119871
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119872,
      119872
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119873,
      119873
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119874,
      119874
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119875,
      119875
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119876,
      119876
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119877,
      119877
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119878,
      119878
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119879,
      119879
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119880,
      119880
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119881,
      119881
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119882,
      119882
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119883,
      119883
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119884,
      119884
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119885,
      119885
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119886,
      119886
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119887,
      119887
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119888,
      119888
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119889,
      119889
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119890,
      119890
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119891,
      119891
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119892,
      119892
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119893,
      119893
    ],
    "disallowed"
  ],
  [
    [
      119894,
      119894
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119895,
      119895
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119896,
      119896
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119897,
      119897
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119898,
      119898
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119899,
      119899
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119900,
      119900
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119901,
      119901
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119902,
      119902
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119903,
      119903
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119904,
      119904
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119905,
      119905
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119906,
      119906
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119907,
      119907
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119908,
      119908
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119909,
      119909
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119910,
      119910
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119911,
      119911
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119912,
      119912
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119913,
      119913
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119914,
      119914
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119915,
      119915
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119916,
      119916
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119917,
      119917
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119918,
      119918
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119919,
      119919
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119920,
      119920
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119921,
      119921
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119922,
      119922
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119923,
      119923
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119924,
      119924
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119925,
      119925
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119926,
      119926
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119927,
      119927
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119928,
      119928
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119929,
      119929
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119930,
      119930
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119931,
      119931
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119932,
      119932
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119933,
      119933
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119934,
      119934
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119935,
      119935
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119936,
      119936
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119937,
      119937
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119938,
      119938
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119939,
      119939
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119940,
      119940
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119941,
      119941
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119942,
      119942
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119943,
      119943
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119944,
      119944
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119945,
      119945
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119946,
      119946
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119947,
      119947
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119948,
      119948
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119949,
      119949
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119950,
      119950
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119951,
      119951
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119952,
      119952
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119953,
      119953
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119954,
      119954
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119955,
      119955
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119956,
      119956
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119957,
      119957
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119958,
      119958
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119959,
      119959
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119960,
      119960
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119961,
      119961
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119962,
      119962
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119963,
      119963
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119964,
      119964
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119965,
      119965
    ],
    "disallowed"
  ],
  [
    [
      119966,
      119966
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119967,
      119967
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119968,
      119969
    ],
    "disallowed"
  ],
  [
    [
      119970,
      119970
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119971,
      119972
    ],
    "disallowed"
  ],
  [
    [
      119973,
      119973
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119974,
      119974
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119975,
      119976
    ],
    "disallowed"
  ],
  [
    [
      119977,
      119977
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119978,
      119978
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119979,
      119979
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119980,
      119980
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119981,
      119981
    ],
    "disallowed"
  ],
  [
    [
      119982,
      119982
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119983,
      119983
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119984,
      119984
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119985,
      119985
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119986,
      119986
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119987,
      119987
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119988,
      119988
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119989,
      119989
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119990,
      119990
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119991,
      119991
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119992,
      119992
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119993,
      119993
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119994,
      119994
    ],
    "disallowed"
  ],
  [
    [
      119995,
      119995
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119996,
      119996
    ],
    "disallowed"
  ],
  [
    [
      119997,
      119997
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119998,
      119998
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119999,
      119999
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      12e4,
      12e4
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120001,
      120001
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120002,
      120002
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120003,
      120003
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120004,
      120004
    ],
    "disallowed"
  ],
  [
    [
      120005,
      120005
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120006,
      120006
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120007,
      120007
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120008,
      120008
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120009,
      120009
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120010,
      120010
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120011,
      120011
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120012,
      120012
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120013,
      120013
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120014,
      120014
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120015,
      120015
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120016,
      120016
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120017,
      120017
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120018,
      120018
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120019,
      120019
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120020,
      120020
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120021,
      120021
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120022,
      120022
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120023,
      120023
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120024,
      120024
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120025,
      120025
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120026,
      120026
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120027,
      120027
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120028,
      120028
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120029,
      120029
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120030,
      120030
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120031,
      120031
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120032,
      120032
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120033,
      120033
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120034,
      120034
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120035,
      120035
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120036,
      120036
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120037,
      120037
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120038,
      120038
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120039,
      120039
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120040,
      120040
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120041,
      120041
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120042,
      120042
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120043,
      120043
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120044,
      120044
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120045,
      120045
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120046,
      120046
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120047,
      120047
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120048,
      120048
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120049,
      120049
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120050,
      120050
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120051,
      120051
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120052,
      120052
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120053,
      120053
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120054,
      120054
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120055,
      120055
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120056,
      120056
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120057,
      120057
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120058,
      120058
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120059,
      120059
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120060,
      120060
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120061,
      120061
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120062,
      120062
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120063,
      120063
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120064,
      120064
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120065,
      120065
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120066,
      120066
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120067,
      120067
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120068,
      120068
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120069,
      120069
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120070,
      120070
    ],
    "disallowed"
  ],
  [
    [
      120071,
      120071
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120072,
      120072
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120073,
      120073
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120074,
      120074
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120075,
      120076
    ],
    "disallowed"
  ],
  [
    [
      120077,
      120077
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120078,
      120078
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120079,
      120079
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120080,
      120080
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120081,
      120081
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120082,
      120082
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120083,
      120083
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120084,
      120084
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120085,
      120085
    ],
    "disallowed"
  ],
  [
    [
      120086,
      120086
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120087,
      120087
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120088,
      120088
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120089,
      120089
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120090,
      120090
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120091,
      120091
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120092,
      120092
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120093,
      120093
    ],
    "disallowed"
  ],
  [
    [
      120094,
      120094
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120095,
      120095
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120096,
      120096
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120097,
      120097
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120098,
      120098
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120099,
      120099
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120100,
      120100
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120101,
      120101
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120102,
      120102
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120103,
      120103
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120104,
      120104
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120105,
      120105
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120106,
      120106
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120107,
      120107
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120108,
      120108
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120109,
      120109
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120110,
      120110
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120111,
      120111
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120112,
      120112
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120113,
      120113
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120114,
      120114
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120115,
      120115
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120116,
      120116
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120117,
      120117
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120118,
      120118
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120119,
      120119
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120120,
      120120
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120121,
      120121
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120122,
      120122
    ],
    "disallowed"
  ],
  [
    [
      120123,
      120123
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120124,
      120124
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120125,
      120125
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120126,
      120126
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120127,
      120127
    ],
    "disallowed"
  ],
  [
    [
      120128,
      120128
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120129,
      120129
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120130,
      120130
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120131,
      120131
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120132,
      120132
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120133,
      120133
    ],
    "disallowed"
  ],
  [
    [
      120134,
      120134
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120135,
      120137
    ],
    "disallowed"
  ],
  [
    [
      120138,
      120138
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120139,
      120139
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120140,
      120140
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120141,
      120141
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120142,
      120142
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120143,
      120143
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120144,
      120144
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120145,
      120145
    ],
    "disallowed"
  ],
  [
    [
      120146,
      120146
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120147,
      120147
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120148,
      120148
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120149,
      120149
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120150,
      120150
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120151,
      120151
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120152,
      120152
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120153,
      120153
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120154,
      120154
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120155,
      120155
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120156,
      120156
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120157,
      120157
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120158,
      120158
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120159,
      120159
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120160,
      120160
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120161,
      120161
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120162,
      120162
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120163,
      120163
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120164,
      120164
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120165,
      120165
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120166,
      120166
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120167,
      120167
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120168,
      120168
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120169,
      120169
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120170,
      120170
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120171,
      120171
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120172,
      120172
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120173,
      120173
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120174,
      120174
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120175,
      120175
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120176,
      120176
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120177,
      120177
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120178,
      120178
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120179,
      120179
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120180,
      120180
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120181,
      120181
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120182,
      120182
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120183,
      120183
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120184,
      120184
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120185,
      120185
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120186,
      120186
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120187,
      120187
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120188,
      120188
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120189,
      120189
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120190,
      120190
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120191,
      120191
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120192,
      120192
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120193,
      120193
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120194,
      120194
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120195,
      120195
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120196,
      120196
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120197,
      120197
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120198,
      120198
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120199,
      120199
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120200,
      120200
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120201,
      120201
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120202,
      120202
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120203,
      120203
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120204,
      120204
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120205,
      120205
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120206,
      120206
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120207,
      120207
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120208,
      120208
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120209,
      120209
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120210,
      120210
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120211,
      120211
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120212,
      120212
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120213,
      120213
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120214,
      120214
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120215,
      120215
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120216,
      120216
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120217,
      120217
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120218,
      120218
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120219,
      120219
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120220,
      120220
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120221,
      120221
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120222,
      120222
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120223,
      120223
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120224,
      120224
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120225,
      120225
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120226,
      120226
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120227,
      120227
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120228,
      120228
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120229,
      120229
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120230,
      120230
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120231,
      120231
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120232,
      120232
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120233,
      120233
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120234,
      120234
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120235,
      120235
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120236,
      120236
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120237,
      120237
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120238,
      120238
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120239,
      120239
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120240,
      120240
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120241,
      120241
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120242,
      120242
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120243,
      120243
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120244,
      120244
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120245,
      120245
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120246,
      120246
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120247,
      120247
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120248,
      120248
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120249,
      120249
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120250,
      120250
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120251,
      120251
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120252,
      120252
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120253,
      120253
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120254,
      120254
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120255,
      120255
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120256,
      120256
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120257,
      120257
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120258,
      120258
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120259,
      120259
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120260,
      120260
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120261,
      120261
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120262,
      120262
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120263,
      120263
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120264,
      120264
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120265,
      120265
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120266,
      120266
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120267,
      120267
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120268,
      120268
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120269,
      120269
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120270,
      120270
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120271,
      120271
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120272,
      120272
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120273,
      120273
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120274,
      120274
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120275,
      120275
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120276,
      120276
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120277,
      120277
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120278,
      120278
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120279,
      120279
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120280,
      120280
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120281,
      120281
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120282,
      120282
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120283,
      120283
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120284,
      120284
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120285,
      120285
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120286,
      120286
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120287,
      120287
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120288,
      120288
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120289,
      120289
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120290,
      120290
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120291,
      120291
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120292,
      120292
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120293,
      120293
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120294,
      120294
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120295,
      120295
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120296,
      120296
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120297,
      120297
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120298,
      120298
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120299,
      120299
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120300,
      120300
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120301,
      120301
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120302,
      120302
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120303,
      120303
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120304,
      120304
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120305,
      120305
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120306,
      120306
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120307,
      120307
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120308,
      120308
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120309,
      120309
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120310,
      120310
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120311,
      120311
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120312,
      120312
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120313,
      120313
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120314,
      120314
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120315,
      120315
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120316,
      120316
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120317,
      120317
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120318,
      120318
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120319,
      120319
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120320,
      120320
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120321,
      120321
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120322,
      120322
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120323,
      120323
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120324,
      120324
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120325,
      120325
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120326,
      120326
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120327,
      120327
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120328,
      120328
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120329,
      120329
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120330,
      120330
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120331,
      120331
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120332,
      120332
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120333,
      120333
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120334,
      120334
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120335,
      120335
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120336,
      120336
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120337,
      120337
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120338,
      120338
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120339,
      120339
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120340,
      120340
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120341,
      120341
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120342,
      120342
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120343,
      120343
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120344,
      120344
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120345,
      120345
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120346,
      120346
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120347,
      120347
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120348,
      120348
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120349,
      120349
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120350,
      120350
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120351,
      120351
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120352,
      120352
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120353,
      120353
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120354,
      120354
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120355,
      120355
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120356,
      120356
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120357,
      120357
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120358,
      120358
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120359,
      120359
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120360,
      120360
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120361,
      120361
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120362,
      120362
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120363,
      120363
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120364,
      120364
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120365,
      120365
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120366,
      120366
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120367,
      120367
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120368,
      120368
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120369,
      120369
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120370,
      120370
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120371,
      120371
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120372,
      120372
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120373,
      120373
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120374,
      120374
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120375,
      120375
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120376,
      120376
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120377,
      120377
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120378,
      120378
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120379,
      120379
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120380,
      120380
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120381,
      120381
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120382,
      120382
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120383,
      120383
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120384,
      120384
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120385,
      120385
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120386,
      120386
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120387,
      120387
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120388,
      120388
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120389,
      120389
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120390,
      120390
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120391,
      120391
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120392,
      120392
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120393,
      120393
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120394,
      120394
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120395,
      120395
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120396,
      120396
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120397,
      120397
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120398,
      120398
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120399,
      120399
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120400,
      120400
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120401,
      120401
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120402,
      120402
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120403,
      120403
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120404,
      120404
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120405,
      120405
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120406,
      120406
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120407,
      120407
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120408,
      120408
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120409,
      120409
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120410,
      120410
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120411,
      120411
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120412,
      120412
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120413,
      120413
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120414,
      120414
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120415,
      120415
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120416,
      120416
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120417,
      120417
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120418,
      120418
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120419,
      120419
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120420,
      120420
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120421,
      120421
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120422,
      120422
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120423,
      120423
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120424,
      120424
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120425,
      120425
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120426,
      120426
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120427,
      120427
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120428,
      120428
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120429,
      120429
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120430,
      120430
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120431,
      120431
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120432,
      120432
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120433,
      120433
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120434,
      120434
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120435,
      120435
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120436,
      120436
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120437,
      120437
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120438,
      120438
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120439,
      120439
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120440,
      120440
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120441,
      120441
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120442,
      120442
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120443,
      120443
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120444,
      120444
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120445,
      120445
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120446,
      120446
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120447,
      120447
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120448,
      120448
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120449,
      120449
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120450,
      120450
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120451,
      120451
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120452,
      120452
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120453,
      120453
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120454,
      120454
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120455,
      120455
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120456,
      120456
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120457,
      120457
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120458,
      120458
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120459,
      120459
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120460,
      120460
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120461,
      120461
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120462,
      120462
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120463,
      120463
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120464,
      120464
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120465,
      120465
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120466,
      120466
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120467,
      120467
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120468,
      120468
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120469,
      120469
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120470,
      120470
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120471,
      120471
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120472,
      120472
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120473,
      120473
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120474,
      120474
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120475,
      120475
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120476,
      120476
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120477,
      120477
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120478,
      120478
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120479,
      120479
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120480,
      120480
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120481,
      120481
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120482,
      120482
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120483,
      120483
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120484,
      120484
    ],
    "mapped",
    [
      305
    ]
  ],
  [
    [
      120485,
      120485
    ],
    "mapped",
    [
      567
    ]
  ],
  [
    [
      120486,
      120487
    ],
    "disallowed"
  ],
  [
    [
      120488,
      120488
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120489,
      120489
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120490,
      120490
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120491,
      120491
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120492,
      120492
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120493,
      120493
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120494,
      120494
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120495,
      120495
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120496,
      120496
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120497,
      120497
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120498,
      120498
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120499,
      120499
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120500,
      120500
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120501,
      120501
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120502,
      120502
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120503,
      120503
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120504,
      120504
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120505,
      120505
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120506,
      120506
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120507,
      120507
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120508,
      120508
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120509,
      120509
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120510,
      120510
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120511,
      120511
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120512,
      120512
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120513,
      120513
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120514,
      120514
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120515,
      120515
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120516,
      120516
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120517,
      120517
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120518,
      120518
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120519,
      120519
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120520,
      120520
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120521,
      120521
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120522,
      120522
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120523,
      120523
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120524,
      120524
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120525,
      120525
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120526,
      120526
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120527,
      120527
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120528,
      120528
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120529,
      120529
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120530,
      120530
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120531,
      120532
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120533,
      120533
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120534,
      120534
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120535,
      120535
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120536,
      120536
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120537,
      120537
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120538,
      120538
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120539,
      120539
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120540,
      120540
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120541,
      120541
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120542,
      120542
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120543,
      120543
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120544,
      120544
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120545,
      120545
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120546,
      120546
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120547,
      120547
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120548,
      120548
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120549,
      120549
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120550,
      120550
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120551,
      120551
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120552,
      120552
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120553,
      120553
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120554,
      120554
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120555,
      120555
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120556,
      120556
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120557,
      120557
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120558,
      120558
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120559,
      120559
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120560,
      120560
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120561,
      120561
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120562,
      120562
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120563,
      120563
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120564,
      120564
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120565,
      120565
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120566,
      120566
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120567,
      120567
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120568,
      120568
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120569,
      120569
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120570,
      120570
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120571,
      120571
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120572,
      120572
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120573,
      120573
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120574,
      120574
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120575,
      120575
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120576,
      120576
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120577,
      120577
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120578,
      120578
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120579,
      120579
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120580,
      120580
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120581,
      120581
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120582,
      120582
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120583,
      120583
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120584,
      120584
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120585,
      120585
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120586,
      120586
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120587,
      120587
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120588,
      120588
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120589,
      120590
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120591,
      120591
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120592,
      120592
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120593,
      120593
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120594,
      120594
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120595,
      120595
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120596,
      120596
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120597,
      120597
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120598,
      120598
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120599,
      120599
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120600,
      120600
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120601,
      120601
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120602,
      120602
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120603,
      120603
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120604,
      120604
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120605,
      120605
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120606,
      120606
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120607,
      120607
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120608,
      120608
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120609,
      120609
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120610,
      120610
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120611,
      120611
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120612,
      120612
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120613,
      120613
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120614,
      120614
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120615,
      120615
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120616,
      120616
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120617,
      120617
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120618,
      120618
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120619,
      120619
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120620,
      120620
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120621,
      120621
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120622,
      120622
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120623,
      120623
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120624,
      120624
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120625,
      120625
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120626,
      120626
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120627,
      120627
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120628,
      120628
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120629,
      120629
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120630,
      120630
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120631,
      120631
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120632,
      120632
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120633,
      120633
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120634,
      120634
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120635,
      120635
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120636,
      120636
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120637,
      120637
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120638,
      120638
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120639,
      120639
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120640,
      120640
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120641,
      120641
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120642,
      120642
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120643,
      120643
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120644,
      120644
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120645,
      120645
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120646,
      120646
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120647,
      120648
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120649,
      120649
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120650,
      120650
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120651,
      120651
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120652,
      120652
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120653,
      120653
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120654,
      120654
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120655,
      120655
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120656,
      120656
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120657,
      120657
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120658,
      120658
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120659,
      120659
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120660,
      120660
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120661,
      120661
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120662,
      120662
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120663,
      120663
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120664,
      120664
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120665,
      120665
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120666,
      120666
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120667,
      120667
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120668,
      120668
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120669,
      120669
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120670,
      120670
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120671,
      120671
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120672,
      120672
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120673,
      120673
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120674,
      120674
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120675,
      120675
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120676,
      120676
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120677,
      120677
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120678,
      120678
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120679,
      120679
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120680,
      120680
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120681,
      120681
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120682,
      120682
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120683,
      120683
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120684,
      120684
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120685,
      120685
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120686,
      120686
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120687,
      120687
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120688,
      120688
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120689,
      120689
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120690,
      120690
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120691,
      120691
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120692,
      120692
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120693,
      120693
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120694,
      120694
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120695,
      120695
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120696,
      120696
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120697,
      120697
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120698,
      120698
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120699,
      120699
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120700,
      120700
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120701,
      120701
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120702,
      120702
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120703,
      120703
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120704,
      120704
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120705,
      120706
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120707,
      120707
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120708,
      120708
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120709,
      120709
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120710,
      120710
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120711,
      120711
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120712,
      120712
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120713,
      120713
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120714,
      120714
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120715,
      120715
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120716,
      120716
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120717,
      120717
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120718,
      120718
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120719,
      120719
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120720,
      120720
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120721,
      120721
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120722,
      120722
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120723,
      120723
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120724,
      120724
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120725,
      120725
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120726,
      120726
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120727,
      120727
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120728,
      120728
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120729,
      120729
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120730,
      120730
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120731,
      120731
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120732,
      120732
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120733,
      120733
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120734,
      120734
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120735,
      120735
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120736,
      120736
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120737,
      120737
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120738,
      120738
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120739,
      120739
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120740,
      120740
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120741,
      120741
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120742,
      120742
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120743,
      120743
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120744,
      120744
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120745,
      120745
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120746,
      120746
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120747,
      120747
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120748,
      120748
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120749,
      120749
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120750,
      120750
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120751,
      120751
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120752,
      120752
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120753,
      120753
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120754,
      120754
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120755,
      120755
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120756,
      120756
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120757,
      120757
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120758,
      120758
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120759,
      120759
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120760,
      120760
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120761,
      120761
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120762,
      120762
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120763,
      120764
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120765,
      120765
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120766,
      120766
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120767,
      120767
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120768,
      120768
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120769,
      120769
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120770,
      120770
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120771,
      120771
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120772,
      120772
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120773,
      120773
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120774,
      120774
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120775,
      120775
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120776,
      120776
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120777,
      120777
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120778,
      120779
    ],
    "mapped",
    [
      989
    ]
  ],
  [
    [
      120780,
      120781
    ],
    "disallowed"
  ],
  [
    [
      120782,
      120782
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120783,
      120783
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120784,
      120784
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120785,
      120785
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120786,
      120786
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120787,
      120787
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120788,
      120788
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120789,
      120789
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120790,
      120790
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120791,
      120791
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120792,
      120792
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120793,
      120793
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120794,
      120794
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120795,
      120795
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120796,
      120796
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120797,
      120797
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120798,
      120798
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120799,
      120799
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120800,
      120800
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120801,
      120801
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120802,
      120802
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120803,
      120803
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120804,
      120804
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120805,
      120805
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120806,
      120806
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120807,
      120807
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120808,
      120808
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120809,
      120809
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120810,
      120810
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120811,
      120811
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120812,
      120812
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120813,
      120813
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120814,
      120814
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120815,
      120815
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120816,
      120816
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120817,
      120817
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120818,
      120818
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120819,
      120819
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120820,
      120820
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120821,
      120821
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120822,
      120822
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120823,
      120823
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120824,
      120824
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120825,
      120825
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120826,
      120826
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120827,
      120827
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120828,
      120828
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120829,
      120829
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120830,
      120830
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120831,
      120831
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120832,
      121343
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121344,
      121398
    ],
    "valid"
  ],
  [
    [
      121399,
      121402
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121403,
      121452
    ],
    "valid"
  ],
  [
    [
      121453,
      121460
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121461,
      121461
    ],
    "valid"
  ],
  [
    [
      121462,
      121475
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121476,
      121476
    ],
    "valid"
  ],
  [
    [
      121477,
      121483
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121484,
      121498
    ],
    "disallowed"
  ],
  [
    [
      121499,
      121503
    ],
    "valid"
  ],
  [
    [
      121504,
      121504
    ],
    "disallowed"
  ],
  [
    [
      121505,
      121519
    ],
    "valid"
  ],
  [
    [
      121520,
      124927
    ],
    "disallowed"
  ],
  [
    [
      124928,
      125124
    ],
    "valid"
  ],
  [
    [
      125125,
      125126
    ],
    "disallowed"
  ],
  [
    [
      125127,
      125135
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      125136,
      125142
    ],
    "valid"
  ],
  [
    [
      125143,
      126463
    ],
    "disallowed"
  ],
  [
    [
      126464,
      126464
    ],
    "mapped",
    [
      1575
    ]
  ],
  [
    [
      126465,
      126465
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126466,
      126466
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126467,
      126467
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      126468,
      126468
    ],
    "disallowed"
  ],
  [
    [
      126469,
      126469
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      126470,
      126470
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      126471,
      126471
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126472,
      126472
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126473,
      126473
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126474,
      126474
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      126475,
      126475
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126476,
      126476
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126477,
      126477
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126478,
      126478
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126479,
      126479
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126480,
      126480
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126481,
      126481
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126482,
      126482
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126483,
      126483
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      126484,
      126484
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126485,
      126485
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126486,
      126486
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126487,
      126487
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126488,
      126488
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      126489,
      126489
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126490,
      126490
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126491,
      126491
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126492,
      126492
    ],
    "mapped",
    [
      1646
    ]
  ],
  [
    [
      126493,
      126493
    ],
    "mapped",
    [
      1722
    ]
  ],
  [
    [
      126494,
      126494
    ],
    "mapped",
    [
      1697
    ]
  ],
  [
    [
      126495,
      126495
    ],
    "mapped",
    [
      1647
    ]
  ],
  [
    [
      126496,
      126496
    ],
    "disallowed"
  ],
  [
    [
      126497,
      126497
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126498,
      126498
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126499,
      126499
    ],
    "disallowed"
  ],
  [
    [
      126500,
      126500
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      126501,
      126502
    ],
    "disallowed"
  ],
  [
    [
      126503,
      126503
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126504,
      126504
    ],
    "disallowed"
  ],
  [
    [
      126505,
      126505
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126506,
      126506
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      126507,
      126507
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126508,
      126508
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126509,
      126509
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126510,
      126510
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126511,
      126511
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126512,
      126512
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126513,
      126513
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126514,
      126514
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126515,
      126515
    ],
    "disallowed"
  ],
  [
    [
      126516,
      126516
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126517,
      126517
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126518,
      126518
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126519,
      126519
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126520,
      126520
    ],
    "disallowed"
  ],
  [
    [
      126521,
      126521
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126522,
      126522
    ],
    "disallowed"
  ],
  [
    [
      126523,
      126523
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126524,
      126529
    ],
    "disallowed"
  ],
  [
    [
      126530,
      126530
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126531,
      126534
    ],
    "disallowed"
  ],
  [
    [
      126535,
      126535
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126536,
      126536
    ],
    "disallowed"
  ],
  [
    [
      126537,
      126537
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126538,
      126538
    ],
    "disallowed"
  ],
  [
    [
      126539,
      126539
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126540,
      126540
    ],
    "disallowed"
  ],
  [
    [
      126541,
      126541
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126542,
      126542
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126543,
      126543
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126544,
      126544
    ],
    "disallowed"
  ],
  [
    [
      126545,
      126545
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126546,
      126546
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126547,
      126547
    ],
    "disallowed"
  ],
  [
    [
      126548,
      126548
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126549,
      126550
    ],
    "disallowed"
  ],
  [
    [
      126551,
      126551
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126552,
      126552
    ],
    "disallowed"
  ],
  [
    [
      126553,
      126553
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126554,
      126554
    ],
    "disallowed"
  ],
  [
    [
      126555,
      126555
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126556,
      126556
    ],
    "disallowed"
  ],
  [
    [
      126557,
      126557
    ],
    "mapped",
    [
      1722
    ]
  ],
  [
    [
      126558,
      126558
    ],
    "disallowed"
  ],
  [
    [
      126559,
      126559
    ],
    "mapped",
    [
      1647
    ]
  ],
  [
    [
      126560,
      126560
    ],
    "disallowed"
  ],
  [
    [
      126561,
      126561
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126562,
      126562
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126563,
      126563
    ],
    "disallowed"
  ],
  [
    [
      126564,
      126564
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      126565,
      126566
    ],
    "disallowed"
  ],
  [
    [
      126567,
      126567
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126568,
      126568
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126569,
      126569
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126570,
      126570
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      126571,
      126571
    ],
    "disallowed"
  ],
  [
    [
      126572,
      126572
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126573,
      126573
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126574,
      126574
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126575,
      126575
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126576,
      126576
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126577,
      126577
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126578,
      126578
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126579,
      126579
    ],
    "disallowed"
  ],
  [
    [
      126580,
      126580
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126581,
      126581
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126582,
      126582
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126583,
      126583
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126584,
      126584
    ],
    "disallowed"
  ],
  [
    [
      126585,
      126585
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126586,
      126586
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126587,
      126587
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126588,
      126588
    ],
    "mapped",
    [
      1646
    ]
  ],
  [
    [
      126589,
      126589
    ],
    "disallowed"
  ],
  [
    [
      126590,
      126590
    ],
    "mapped",
    [
      1697
    ]
  ],
  [
    [
      126591,
      126591
    ],
    "disallowed"
  ],
  [
    [
      126592,
      126592
    ],
    "mapped",
    [
      1575
    ]
  ],
  [
    [
      126593,
      126593
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126594,
      126594
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126595,
      126595
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      126596,
      126596
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      126597,
      126597
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      126598,
      126598
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      126599,
      126599
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126600,
      126600
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126601,
      126601
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126602,
      126602
    ],
    "disallowed"
  ],
  [
    [
      126603,
      126603
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126604,
      126604
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126605,
      126605
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126606,
      126606
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126607,
      126607
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126608,
      126608
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126609,
      126609
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126610,
      126610
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126611,
      126611
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      126612,
      126612
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126613,
      126613
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126614,
      126614
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126615,
      126615
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126616,
      126616
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      126617,
      126617
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126618,
      126618
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126619,
      126619
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126620,
      126624
    ],
    "disallowed"
  ],
  [
    [
      126625,
      126625
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126626,
      126626
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126627,
      126627
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      126628,
      126628
    ],
    "disallowed"
  ],
  [
    [
      126629,
      126629
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      126630,
      126630
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      126631,
      126631
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126632,
      126632
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126633,
      126633
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126634,
      126634
    ],
    "disallowed"
  ],
  [
    [
      126635,
      126635
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126636,
      126636
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126637,
      126637
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126638,
      126638
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126639,
      126639
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126640,
      126640
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126641,
      126641
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126642,
      126642
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126643,
      126643
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      126644,
      126644
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126645,
      126645
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126646,
      126646
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126647,
      126647
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126648,
      126648
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      126649,
      126649
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126650,
      126650
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126651,
      126651
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126652,
      126703
    ],
    "disallowed"
  ],
  [
    [
      126704,
      126705
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      126706,
      126975
    ],
    "disallowed"
  ],
  [
    [
      126976,
      127019
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127020,
      127023
    ],
    "disallowed"
  ],
  [
    [
      127024,
      127123
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127124,
      127135
    ],
    "disallowed"
  ],
  [
    [
      127136,
      127150
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127151,
      127152
    ],
    "disallowed"
  ],
  [
    [
      127153,
      127166
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127167,
      127167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127168,
      127168
    ],
    "disallowed"
  ],
  [
    [
      127169,
      127183
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127184,
      127184
    ],
    "disallowed"
  ],
  [
    [
      127185,
      127199
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127200,
      127221
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127222,
      127231
    ],
    "disallowed"
  ],
  [
    [
      127232,
      127232
    ],
    "disallowed"
  ],
  [
    [
      127233,
      127233
    ],
    "disallowed_STD3_mapped",
    [
      48,
      44
    ]
  ],
  [
    [
      127234,
      127234
    ],
    "disallowed_STD3_mapped",
    [
      49,
      44
    ]
  ],
  [
    [
      127235,
      127235
    ],
    "disallowed_STD3_mapped",
    [
      50,
      44
    ]
  ],
  [
    [
      127236,
      127236
    ],
    "disallowed_STD3_mapped",
    [
      51,
      44
    ]
  ],
  [
    [
      127237,
      127237
    ],
    "disallowed_STD3_mapped",
    [
      52,
      44
    ]
  ],
  [
    [
      127238,
      127238
    ],
    "disallowed_STD3_mapped",
    [
      53,
      44
    ]
  ],
  [
    [
      127239,
      127239
    ],
    "disallowed_STD3_mapped",
    [
      54,
      44
    ]
  ],
  [
    [
      127240,
      127240
    ],
    "disallowed_STD3_mapped",
    [
      55,
      44
    ]
  ],
  [
    [
      127241,
      127241
    ],
    "disallowed_STD3_mapped",
    [
      56,
      44
    ]
  ],
  [
    [
      127242,
      127242
    ],
    "disallowed_STD3_mapped",
    [
      57,
      44
    ]
  ],
  [
    [
      127243,
      127244
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127245,
      127247
    ],
    "disallowed"
  ],
  [
    [
      127248,
      127248
    ],
    "disallowed_STD3_mapped",
    [
      40,
      97,
      41
    ]
  ],
  [
    [
      127249,
      127249
    ],
    "disallowed_STD3_mapped",
    [
      40,
      98,
      41
    ]
  ],
  [
    [
      127250,
      127250
    ],
    "disallowed_STD3_mapped",
    [
      40,
      99,
      41
    ]
  ],
  [
    [
      127251,
      127251
    ],
    "disallowed_STD3_mapped",
    [
      40,
      100,
      41
    ]
  ],
  [
    [
      127252,
      127252
    ],
    "disallowed_STD3_mapped",
    [
      40,
      101,
      41
    ]
  ],
  [
    [
      127253,
      127253
    ],
    "disallowed_STD3_mapped",
    [
      40,
      102,
      41
    ]
  ],
  [
    [
      127254,
      127254
    ],
    "disallowed_STD3_mapped",
    [
      40,
      103,
      41
    ]
  ],
  [
    [
      127255,
      127255
    ],
    "disallowed_STD3_mapped",
    [
      40,
      104,
      41
    ]
  ],
  [
    [
      127256,
      127256
    ],
    "disallowed_STD3_mapped",
    [
      40,
      105,
      41
    ]
  ],
  [
    [
      127257,
      127257
    ],
    "disallowed_STD3_mapped",
    [
      40,
      106,
      41
    ]
  ],
  [
    [
      127258,
      127258
    ],
    "disallowed_STD3_mapped",
    [
      40,
      107,
      41
    ]
  ],
  [
    [
      127259,
      127259
    ],
    "disallowed_STD3_mapped",
    [
      40,
      108,
      41
    ]
  ],
  [
    [
      127260,
      127260
    ],
    "disallowed_STD3_mapped",
    [
      40,
      109,
      41
    ]
  ],
  [
    [
      127261,
      127261
    ],
    "disallowed_STD3_mapped",
    [
      40,
      110,
      41
    ]
  ],
  [
    [
      127262,
      127262
    ],
    "disallowed_STD3_mapped",
    [
      40,
      111,
      41
    ]
  ],
  [
    [
      127263,
      127263
    ],
    "disallowed_STD3_mapped",
    [
      40,
      112,
      41
    ]
  ],
  [
    [
      127264,
      127264
    ],
    "disallowed_STD3_mapped",
    [
      40,
      113,
      41
    ]
  ],
  [
    [
      127265,
      127265
    ],
    "disallowed_STD3_mapped",
    [
      40,
      114,
      41
    ]
  ],
  [
    [
      127266,
      127266
    ],
    "disallowed_STD3_mapped",
    [
      40,
      115,
      41
    ]
  ],
  [
    [
      127267,
      127267
    ],
    "disallowed_STD3_mapped",
    [
      40,
      116,
      41
    ]
  ],
  [
    [
      127268,
      127268
    ],
    "disallowed_STD3_mapped",
    [
      40,
      117,
      41
    ]
  ],
  [
    [
      127269,
      127269
    ],
    "disallowed_STD3_mapped",
    [
      40,
      118,
      41
    ]
  ],
  [
    [
      127270,
      127270
    ],
    "disallowed_STD3_mapped",
    [
      40,
      119,
      41
    ]
  ],
  [
    [
      127271,
      127271
    ],
    "disallowed_STD3_mapped",
    [
      40,
      120,
      41
    ]
  ],
  [
    [
      127272,
      127272
    ],
    "disallowed_STD3_mapped",
    [
      40,
      121,
      41
    ]
  ],
  [
    [
      127273,
      127273
    ],
    "disallowed_STD3_mapped",
    [
      40,
      122,
      41
    ]
  ],
  [
    [
      127274,
      127274
    ],
    "mapped",
    [
      12308,
      115,
      12309
    ]
  ],
  [
    [
      127275,
      127275
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      127276,
      127276
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      127277,
      127277
    ],
    "mapped",
    [
      99,
      100
    ]
  ],
  [
    [
      127278,
      127278
    ],
    "mapped",
    [
      119,
      122
    ]
  ],
  [
    [
      127279,
      127279
    ],
    "disallowed"
  ],
  [
    [
      127280,
      127280
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      127281,
      127281
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      127282,
      127282
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      127283,
      127283
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      127284,
      127284
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      127285,
      127285
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      127286,
      127286
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      127287,
      127287
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      127288,
      127288
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      127289,
      127289
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      127290,
      127290
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      127291,
      127291
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      127292,
      127292
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      127293,
      127293
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      127294,
      127294
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      127295,
      127295
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      127296,
      127296
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      127297,
      127297
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      127298,
      127298
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      127299,
      127299
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      127300,
      127300
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      127301,
      127301
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      127302,
      127302
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      127303,
      127303
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      127304,
      127304
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      127305,
      127305
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      127306,
      127306
    ],
    "mapped",
    [
      104,
      118
    ]
  ],
  [
    [
      127307,
      127307
    ],
    "mapped",
    [
      109,
      118
    ]
  ],
  [
    [
      127308,
      127308
    ],
    "mapped",
    [
      115,
      100
    ]
  ],
  [
    [
      127309,
      127309
    ],
    "mapped",
    [
      115,
      115
    ]
  ],
  [
    [
      127310,
      127310
    ],
    "mapped",
    [
      112,
      112,
      118
    ]
  ],
  [
    [
      127311,
      127311
    ],
    "mapped",
    [
      119,
      99
    ]
  ],
  [
    [
      127312,
      127318
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127319,
      127319
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127320,
      127326
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127327,
      127327
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127328,
      127337
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127338,
      127338
    ],
    "mapped",
    [
      109,
      99
    ]
  ],
  [
    [
      127339,
      127339
    ],
    "mapped",
    [
      109,
      100
    ]
  ],
  [
    [
      127340,
      127343
    ],
    "disallowed"
  ],
  [
    [
      127344,
      127352
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127353,
      127353
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127354,
      127354
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127355,
      127356
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127357,
      127358
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127359,
      127359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127360,
      127369
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127370,
      127373
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127374,
      127375
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127376,
      127376
    ],
    "mapped",
    [
      100,
      106
    ]
  ],
  [
    [
      127377,
      127386
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127387,
      127461
    ],
    "disallowed"
  ],
  [
    [
      127462,
      127487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127488,
      127488
    ],
    "mapped",
    [
      12411,
      12363
    ]
  ],
  [
    [
      127489,
      127489
    ],
    "mapped",
    [
      12467,
      12467
    ]
  ],
  [
    [
      127490,
      127490
    ],
    "mapped",
    [
      12469
    ]
  ],
  [
    [
      127491,
      127503
    ],
    "disallowed"
  ],
  [
    [
      127504,
      127504
    ],
    "mapped",
    [
      25163
    ]
  ],
  [
    [
      127505,
      127505
    ],
    "mapped",
    [
      23383
    ]
  ],
  [
    [
      127506,
      127506
    ],
    "mapped",
    [
      21452
    ]
  ],
  [
    [
      127507,
      127507
    ],
    "mapped",
    [
      12487
    ]
  ],
  [
    [
      127508,
      127508
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      127509,
      127509
    ],
    "mapped",
    [
      22810
    ]
  ],
  [
    [
      127510,
      127510
    ],
    "mapped",
    [
      35299
    ]
  ],
  [
    [
      127511,
      127511
    ],
    "mapped",
    [
      22825
    ]
  ],
  [
    [
      127512,
      127512
    ],
    "mapped",
    [
      20132
    ]
  ],
  [
    [
      127513,
      127513
    ],
    "mapped",
    [
      26144
    ]
  ],
  [
    [
      127514,
      127514
    ],
    "mapped",
    [
      28961
    ]
  ],
  [
    [
      127515,
      127515
    ],
    "mapped",
    [
      26009
    ]
  ],
  [
    [
      127516,
      127516
    ],
    "mapped",
    [
      21069
    ]
  ],
  [
    [
      127517,
      127517
    ],
    "mapped",
    [
      24460
    ]
  ],
  [
    [
      127518,
      127518
    ],
    "mapped",
    [
      20877
    ]
  ],
  [
    [
      127519,
      127519
    ],
    "mapped",
    [
      26032
    ]
  ],
  [
    [
      127520,
      127520
    ],
    "mapped",
    [
      21021
    ]
  ],
  [
    [
      127521,
      127521
    ],
    "mapped",
    [
      32066
    ]
  ],
  [
    [
      127522,
      127522
    ],
    "mapped",
    [
      29983
    ]
  ],
  [
    [
      127523,
      127523
    ],
    "mapped",
    [
      36009
    ]
  ],
  [
    [
      127524,
      127524
    ],
    "mapped",
    [
      22768
    ]
  ],
  [
    [
      127525,
      127525
    ],
    "mapped",
    [
      21561
    ]
  ],
  [
    [
      127526,
      127526
    ],
    "mapped",
    [
      28436
    ]
  ],
  [
    [
      127527,
      127527
    ],
    "mapped",
    [
      25237
    ]
  ],
  [
    [
      127528,
      127528
    ],
    "mapped",
    [
      25429
    ]
  ],
  [
    [
      127529,
      127529
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      127530,
      127530
    ],
    "mapped",
    [
      19977
    ]
  ],
  [
    [
      127531,
      127531
    ],
    "mapped",
    [
      36938
    ]
  ],
  [
    [
      127532,
      127532
    ],
    "mapped",
    [
      24038
    ]
  ],
  [
    [
      127533,
      127533
    ],
    "mapped",
    [
      20013
    ]
  ],
  [
    [
      127534,
      127534
    ],
    "mapped",
    [
      21491
    ]
  ],
  [
    [
      127535,
      127535
    ],
    "mapped",
    [
      25351
    ]
  ],
  [
    [
      127536,
      127536
    ],
    "mapped",
    [
      36208
    ]
  ],
  [
    [
      127537,
      127537
    ],
    "mapped",
    [
      25171
    ]
  ],
  [
    [
      127538,
      127538
    ],
    "mapped",
    [
      31105
    ]
  ],
  [
    [
      127539,
      127539
    ],
    "mapped",
    [
      31354
    ]
  ],
  [
    [
      127540,
      127540
    ],
    "mapped",
    [
      21512
    ]
  ],
  [
    [
      127541,
      127541
    ],
    "mapped",
    [
      28288
    ]
  ],
  [
    [
      127542,
      127542
    ],
    "mapped",
    [
      26377
    ]
  ],
  [
    [
      127543,
      127543
    ],
    "mapped",
    [
      26376
    ]
  ],
  [
    [
      127544,
      127544
    ],
    "mapped",
    [
      30003
    ]
  ],
  [
    [
      127545,
      127545
    ],
    "mapped",
    [
      21106
    ]
  ],
  [
    [
      127546,
      127546
    ],
    "mapped",
    [
      21942
    ]
  ],
  [
    [
      127547,
      127551
    ],
    "disallowed"
  ],
  [
    [
      127552,
      127552
    ],
    "mapped",
    [
      12308,
      26412,
      12309
    ]
  ],
  [
    [
      127553,
      127553
    ],
    "mapped",
    [
      12308,
      19977,
      12309
    ]
  ],
  [
    [
      127554,
      127554
    ],
    "mapped",
    [
      12308,
      20108,
      12309
    ]
  ],
  [
    [
      127555,
      127555
    ],
    "mapped",
    [
      12308,
      23433,
      12309
    ]
  ],
  [
    [
      127556,
      127556
    ],
    "mapped",
    [
      12308,
      28857,
      12309
    ]
  ],
  [
    [
      127557,
      127557
    ],
    "mapped",
    [
      12308,
      25171,
      12309
    ]
  ],
  [
    [
      127558,
      127558
    ],
    "mapped",
    [
      12308,
      30423,
      12309
    ]
  ],
  [
    [
      127559,
      127559
    ],
    "mapped",
    [
      12308,
      21213,
      12309
    ]
  ],
  [
    [
      127560,
      127560
    ],
    "mapped",
    [
      12308,
      25943,
      12309
    ]
  ],
  [
    [
      127561,
      127567
    ],
    "disallowed"
  ],
  [
    [
      127568,
      127568
    ],
    "mapped",
    [
      24471
    ]
  ],
  [
    [
      127569,
      127569
    ],
    "mapped",
    [
      21487
    ]
  ],
  [
    [
      127570,
      127743
    ],
    "disallowed"
  ],
  [
    [
      127744,
      127776
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127777,
      127788
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127789,
      127791
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127792,
      127797
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127798,
      127798
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127799,
      127868
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127869,
      127869
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127870,
      127871
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127872,
      127891
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127892,
      127903
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127904,
      127940
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127941,
      127941
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127942,
      127946
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127947,
      127950
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127951,
      127955
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127956,
      127967
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127968,
      127984
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127985,
      127991
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127992,
      127999
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128e3,
      128062
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128063,
      128063
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128064,
      128064
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128065,
      128065
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128066,
      128247
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128248,
      128248
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128249,
      128252
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128253,
      128254
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128255,
      128255
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128256,
      128317
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128318,
      128319
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128320,
      128323
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128324,
      128330
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128331,
      128335
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128336,
      128359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128360,
      128377
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128378,
      128378
    ],
    "disallowed"
  ],
  [
    [
      128379,
      128419
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128420,
      128420
    ],
    "disallowed"
  ],
  [
    [
      128421,
      128506
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128507,
      128511
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128512,
      128512
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128513,
      128528
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128529,
      128529
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128530,
      128532
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128533,
      128533
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128534,
      128534
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128535,
      128535
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128536,
      128536
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128537,
      128537
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128538,
      128538
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128539,
      128539
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128540,
      128542
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128543,
      128543
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128544,
      128549
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128550,
      128551
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128552,
      128555
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128556,
      128556
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128557,
      128557
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128558,
      128559
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128560,
      128563
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128564,
      128564
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128565,
      128576
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128577,
      128578
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128579,
      128580
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128581,
      128591
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128592,
      128639
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128640,
      128709
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128710,
      128719
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128720,
      128720
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128721,
      128735
    ],
    "disallowed"
  ],
  [
    [
      128736,
      128748
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128749,
      128751
    ],
    "disallowed"
  ],
  [
    [
      128752,
      128755
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128756,
      128767
    ],
    "disallowed"
  ],
  [
    [
      128768,
      128883
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128884,
      128895
    ],
    "disallowed"
  ],
  [
    [
      128896,
      128980
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128981,
      129023
    ],
    "disallowed"
  ],
  [
    [
      129024,
      129035
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129036,
      129039
    ],
    "disallowed"
  ],
  [
    [
      129040,
      129095
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129096,
      129103
    ],
    "disallowed"
  ],
  [
    [
      129104,
      129113
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129114,
      129119
    ],
    "disallowed"
  ],
  [
    [
      129120,
      129159
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129160,
      129167
    ],
    "disallowed"
  ],
  [
    [
      129168,
      129197
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129198,
      129295
    ],
    "disallowed"
  ],
  [
    [
      129296,
      129304
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129305,
      129407
    ],
    "disallowed"
  ],
  [
    [
      129408,
      129412
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129413,
      129471
    ],
    "disallowed"
  ],
  [
    [
      129472,
      129472
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129473,
      131069
    ],
    "disallowed"
  ],
  [
    [
      131070,
      131071
    ],
    "disallowed"
  ],
  [
    [
      131072,
      173782
    ],
    "valid"
  ],
  [
    [
      173783,
      173823
    ],
    "disallowed"
  ],
  [
    [
      173824,
      177972
    ],
    "valid"
  ],
  [
    [
      177973,
      177983
    ],
    "disallowed"
  ],
  [
    [
      177984,
      178205
    ],
    "valid"
  ],
  [
    [
      178206,
      178207
    ],
    "disallowed"
  ],
  [
    [
      178208,
      183969
    ],
    "valid"
  ],
  [
    [
      183970,
      194559
    ],
    "disallowed"
  ],
  [
    [
      194560,
      194560
    ],
    "mapped",
    [
      20029
    ]
  ],
  [
    [
      194561,
      194561
    ],
    "mapped",
    [
      20024
    ]
  ],
  [
    [
      194562,
      194562
    ],
    "mapped",
    [
      20033
    ]
  ],
  [
    [
      194563,
      194563
    ],
    "mapped",
    [
      131362
    ]
  ],
  [
    [
      194564,
      194564
    ],
    "mapped",
    [
      20320
    ]
  ],
  [
    [
      194565,
      194565
    ],
    "mapped",
    [
      20398
    ]
  ],
  [
    [
      194566,
      194566
    ],
    "mapped",
    [
      20411
    ]
  ],
  [
    [
      194567,
      194567
    ],
    "mapped",
    [
      20482
    ]
  ],
  [
    [
      194568,
      194568
    ],
    "mapped",
    [
      20602
    ]
  ],
  [
    [
      194569,
      194569
    ],
    "mapped",
    [
      20633
    ]
  ],
  [
    [
      194570,
      194570
    ],
    "mapped",
    [
      20711
    ]
  ],
  [
    [
      194571,
      194571
    ],
    "mapped",
    [
      20687
    ]
  ],
  [
    [
      194572,
      194572
    ],
    "mapped",
    [
      13470
    ]
  ],
  [
    [
      194573,
      194573
    ],
    "mapped",
    [
      132666
    ]
  ],
  [
    [
      194574,
      194574
    ],
    "mapped",
    [
      20813
    ]
  ],
  [
    [
      194575,
      194575
    ],
    "mapped",
    [
      20820
    ]
  ],
  [
    [
      194576,
      194576
    ],
    "mapped",
    [
      20836
    ]
  ],
  [
    [
      194577,
      194577
    ],
    "mapped",
    [
      20855
    ]
  ],
  [
    [
      194578,
      194578
    ],
    "mapped",
    [
      132380
    ]
  ],
  [
    [
      194579,
      194579
    ],
    "mapped",
    [
      13497
    ]
  ],
  [
    [
      194580,
      194580
    ],
    "mapped",
    [
      20839
    ]
  ],
  [
    [
      194581,
      194581
    ],
    "mapped",
    [
      20877
    ]
  ],
  [
    [
      194582,
      194582
    ],
    "mapped",
    [
      132427
    ]
  ],
  [
    [
      194583,
      194583
    ],
    "mapped",
    [
      20887
    ]
  ],
  [
    [
      194584,
      194584
    ],
    "mapped",
    [
      20900
    ]
  ],
  [
    [
      194585,
      194585
    ],
    "mapped",
    [
      20172
    ]
  ],
  [
    [
      194586,
      194586
    ],
    "mapped",
    [
      20908
    ]
  ],
  [
    [
      194587,
      194587
    ],
    "mapped",
    [
      20917
    ]
  ],
  [
    [
      194588,
      194588
    ],
    "mapped",
    [
      168415
    ]
  ],
  [
    [
      194589,
      194589
    ],
    "mapped",
    [
      20981
    ]
  ],
  [
    [
      194590,
      194590
    ],
    "mapped",
    [
      20995
    ]
  ],
  [
    [
      194591,
      194591
    ],
    "mapped",
    [
      13535
    ]
  ],
  [
    [
      194592,
      194592
    ],
    "mapped",
    [
      21051
    ]
  ],
  [
    [
      194593,
      194593
    ],
    "mapped",
    [
      21062
    ]
  ],
  [
    [
      194594,
      194594
    ],
    "mapped",
    [
      21106
    ]
  ],
  [
    [
      194595,
      194595
    ],
    "mapped",
    [
      21111
    ]
  ],
  [
    [
      194596,
      194596
    ],
    "mapped",
    [
      13589
    ]
  ],
  [
    [
      194597,
      194597
    ],
    "mapped",
    [
      21191
    ]
  ],
  [
    [
      194598,
      194598
    ],
    "mapped",
    [
      21193
    ]
  ],
  [
    [
      194599,
      194599
    ],
    "mapped",
    [
      21220
    ]
  ],
  [
    [
      194600,
      194600
    ],
    "mapped",
    [
      21242
    ]
  ],
  [
    [
      194601,
      194601
    ],
    "mapped",
    [
      21253
    ]
  ],
  [
    [
      194602,
      194602
    ],
    "mapped",
    [
      21254
    ]
  ],
  [
    [
      194603,
      194603
    ],
    "mapped",
    [
      21271
    ]
  ],
  [
    [
      194604,
      194604
    ],
    "mapped",
    [
      21321
    ]
  ],
  [
    [
      194605,
      194605
    ],
    "mapped",
    [
      21329
    ]
  ],
  [
    [
      194606,
      194606
    ],
    "mapped",
    [
      21338
    ]
  ],
  [
    [
      194607,
      194607
    ],
    "mapped",
    [
      21363
    ]
  ],
  [
    [
      194608,
      194608
    ],
    "mapped",
    [
      21373
    ]
  ],
  [
    [
      194609,
      194611
    ],
    "mapped",
    [
      21375
    ]
  ],
  [
    [
      194612,
      194612
    ],
    "mapped",
    [
      133676
    ]
  ],
  [
    [
      194613,
      194613
    ],
    "mapped",
    [
      28784
    ]
  ],
  [
    [
      194614,
      194614
    ],
    "mapped",
    [
      21450
    ]
  ],
  [
    [
      194615,
      194615
    ],
    "mapped",
    [
      21471
    ]
  ],
  [
    [
      194616,
      194616
    ],
    "mapped",
    [
      133987
    ]
  ],
  [
    [
      194617,
      194617
    ],
    "mapped",
    [
      21483
    ]
  ],
  [
    [
      194618,
      194618
    ],
    "mapped",
    [
      21489
    ]
  ],
  [
    [
      194619,
      194619
    ],
    "mapped",
    [
      21510
    ]
  ],
  [
    [
      194620,
      194620
    ],
    "mapped",
    [
      21662
    ]
  ],
  [
    [
      194621,
      194621
    ],
    "mapped",
    [
      21560
    ]
  ],
  [
    [
      194622,
      194622
    ],
    "mapped",
    [
      21576
    ]
  ],
  [
    [
      194623,
      194623
    ],
    "mapped",
    [
      21608
    ]
  ],
  [
    [
      194624,
      194624
    ],
    "mapped",
    [
      21666
    ]
  ],
  [
    [
      194625,
      194625
    ],
    "mapped",
    [
      21750
    ]
  ],
  [
    [
      194626,
      194626
    ],
    "mapped",
    [
      21776
    ]
  ],
  [
    [
      194627,
      194627
    ],
    "mapped",
    [
      21843
    ]
  ],
  [
    [
      194628,
      194628
    ],
    "mapped",
    [
      21859
    ]
  ],
  [
    [
      194629,
      194630
    ],
    "mapped",
    [
      21892
    ]
  ],
  [
    [
      194631,
      194631
    ],
    "mapped",
    [
      21913
    ]
  ],
  [
    [
      194632,
      194632
    ],
    "mapped",
    [
      21931
    ]
  ],
  [
    [
      194633,
      194633
    ],
    "mapped",
    [
      21939
    ]
  ],
  [
    [
      194634,
      194634
    ],
    "mapped",
    [
      21954
    ]
  ],
  [
    [
      194635,
      194635
    ],
    "mapped",
    [
      22294
    ]
  ],
  [
    [
      194636,
      194636
    ],
    "mapped",
    [
      22022
    ]
  ],
  [
    [
      194637,
      194637
    ],
    "mapped",
    [
      22295
    ]
  ],
  [
    [
      194638,
      194638
    ],
    "mapped",
    [
      22097
    ]
  ],
  [
    [
      194639,
      194639
    ],
    "mapped",
    [
      22132
    ]
  ],
  [
    [
      194640,
      194640
    ],
    "mapped",
    [
      20999
    ]
  ],
  [
    [
      194641,
      194641
    ],
    "mapped",
    [
      22766
    ]
  ],
  [
    [
      194642,
      194642
    ],
    "mapped",
    [
      22478
    ]
  ],
  [
    [
      194643,
      194643
    ],
    "mapped",
    [
      22516
    ]
  ],
  [
    [
      194644,
      194644
    ],
    "mapped",
    [
      22541
    ]
  ],
  [
    [
      194645,
      194645
    ],
    "mapped",
    [
      22411
    ]
  ],
  [
    [
      194646,
      194646
    ],
    "mapped",
    [
      22578
    ]
  ],
  [
    [
      194647,
      194647
    ],
    "mapped",
    [
      22577
    ]
  ],
  [
    [
      194648,
      194648
    ],
    "mapped",
    [
      22700
    ]
  ],
  [
    [
      194649,
      194649
    ],
    "mapped",
    [
      136420
    ]
  ],
  [
    [
      194650,
      194650
    ],
    "mapped",
    [
      22770
    ]
  ],
  [
    [
      194651,
      194651
    ],
    "mapped",
    [
      22775
    ]
  ],
  [
    [
      194652,
      194652
    ],
    "mapped",
    [
      22790
    ]
  ],
  [
    [
      194653,
      194653
    ],
    "mapped",
    [
      22810
    ]
  ],
  [
    [
      194654,
      194654
    ],
    "mapped",
    [
      22818
    ]
  ],
  [
    [
      194655,
      194655
    ],
    "mapped",
    [
      22882
    ]
  ],
  [
    [
      194656,
      194656
    ],
    "mapped",
    [
      136872
    ]
  ],
  [
    [
      194657,
      194657
    ],
    "mapped",
    [
      136938
    ]
  ],
  [
    [
      194658,
      194658
    ],
    "mapped",
    [
      23020
    ]
  ],
  [
    [
      194659,
      194659
    ],
    "mapped",
    [
      23067
    ]
  ],
  [
    [
      194660,
      194660
    ],
    "mapped",
    [
      23079
    ]
  ],
  [
    [
      194661,
      194661
    ],
    "mapped",
    [
      23e3
    ]
  ],
  [
    [
      194662,
      194662
    ],
    "mapped",
    [
      23142
    ]
  ],
  [
    [
      194663,
      194663
    ],
    "mapped",
    [
      14062
    ]
  ],
  [
    [
      194664,
      194664
    ],
    "disallowed"
  ],
  [
    [
      194665,
      194665
    ],
    "mapped",
    [
      23304
    ]
  ],
  [
    [
      194666,
      194667
    ],
    "mapped",
    [
      23358
    ]
  ],
  [
    [
      194668,
      194668
    ],
    "mapped",
    [
      137672
    ]
  ],
  [
    [
      194669,
      194669
    ],
    "mapped",
    [
      23491
    ]
  ],
  [
    [
      194670,
      194670
    ],
    "mapped",
    [
      23512
    ]
  ],
  [
    [
      194671,
      194671
    ],
    "mapped",
    [
      23527
    ]
  ],
  [
    [
      194672,
      194672
    ],
    "mapped",
    [
      23539
    ]
  ],
  [
    [
      194673,
      194673
    ],
    "mapped",
    [
      138008
    ]
  ],
  [
    [
      194674,
      194674
    ],
    "mapped",
    [
      23551
    ]
  ],
  [
    [
      194675,
      194675
    ],
    "mapped",
    [
      23558
    ]
  ],
  [
    [
      194676,
      194676
    ],
    "disallowed"
  ],
  [
    [
      194677,
      194677
    ],
    "mapped",
    [
      23586
    ]
  ],
  [
    [
      194678,
      194678
    ],
    "mapped",
    [
      14209
    ]
  ],
  [
    [
      194679,
      194679
    ],
    "mapped",
    [
      23648
    ]
  ],
  [
    [
      194680,
      194680
    ],
    "mapped",
    [
      23662
    ]
  ],
  [
    [
      194681,
      194681
    ],
    "mapped",
    [
      23744
    ]
  ],
  [
    [
      194682,
      194682
    ],
    "mapped",
    [
      23693
    ]
  ],
  [
    [
      194683,
      194683
    ],
    "mapped",
    [
      138724
    ]
  ],
  [
    [
      194684,
      194684
    ],
    "mapped",
    [
      23875
    ]
  ],
  [
    [
      194685,
      194685
    ],
    "mapped",
    [
      138726
    ]
  ],
  [
    [
      194686,
      194686
    ],
    "mapped",
    [
      23918
    ]
  ],
  [
    [
      194687,
      194687
    ],
    "mapped",
    [
      23915
    ]
  ],
  [
    [
      194688,
      194688
    ],
    "mapped",
    [
      23932
    ]
  ],
  [
    [
      194689,
      194689
    ],
    "mapped",
    [
      24033
    ]
  ],
  [
    [
      194690,
      194690
    ],
    "mapped",
    [
      24034
    ]
  ],
  [
    [
      194691,
      194691
    ],
    "mapped",
    [
      14383
    ]
  ],
  [
    [
      194692,
      194692
    ],
    "mapped",
    [
      24061
    ]
  ],
  [
    [
      194693,
      194693
    ],
    "mapped",
    [
      24104
    ]
  ],
  [
    [
      194694,
      194694
    ],
    "mapped",
    [
      24125
    ]
  ],
  [
    [
      194695,
      194695
    ],
    "mapped",
    [
      24169
    ]
  ],
  [
    [
      194696,
      194696
    ],
    "mapped",
    [
      14434
    ]
  ],
  [
    [
      194697,
      194697
    ],
    "mapped",
    [
      139651
    ]
  ],
  [
    [
      194698,
      194698
    ],
    "mapped",
    [
      14460
    ]
  ],
  [
    [
      194699,
      194699
    ],
    "mapped",
    [
      24240
    ]
  ],
  [
    [
      194700,
      194700
    ],
    "mapped",
    [
      24243
    ]
  ],
  [
    [
      194701,
      194701
    ],
    "mapped",
    [
      24246
    ]
  ],
  [
    [
      194702,
      194702
    ],
    "mapped",
    [
      24266
    ]
  ],
  [
    [
      194703,
      194703
    ],
    "mapped",
    [
      172946
    ]
  ],
  [
    [
      194704,
      194704
    ],
    "mapped",
    [
      24318
    ]
  ],
  [
    [
      194705,
      194706
    ],
    "mapped",
    [
      140081
    ]
  ],
  [
    [
      194707,
      194707
    ],
    "mapped",
    [
      33281
    ]
  ],
  [
    [
      194708,
      194709
    ],
    "mapped",
    [
      24354
    ]
  ],
  [
    [
      194710,
      194710
    ],
    "mapped",
    [
      14535
    ]
  ],
  [
    [
      194711,
      194711
    ],
    "mapped",
    [
      144056
    ]
  ],
  [
    [
      194712,
      194712
    ],
    "mapped",
    [
      156122
    ]
  ],
  [
    [
      194713,
      194713
    ],
    "mapped",
    [
      24418
    ]
  ],
  [
    [
      194714,
      194714
    ],
    "mapped",
    [
      24427
    ]
  ],
  [
    [
      194715,
      194715
    ],
    "mapped",
    [
      14563
    ]
  ],
  [
    [
      194716,
      194716
    ],
    "mapped",
    [
      24474
    ]
  ],
  [
    [
      194717,
      194717
    ],
    "mapped",
    [
      24525
    ]
  ],
  [
    [
      194718,
      194718
    ],
    "mapped",
    [
      24535
    ]
  ],
  [
    [
      194719,
      194719
    ],
    "mapped",
    [
      24569
    ]
  ],
  [
    [
      194720,
      194720
    ],
    "mapped",
    [
      24705
    ]
  ],
  [
    [
      194721,
      194721
    ],
    "mapped",
    [
      14650
    ]
  ],
  [
    [
      194722,
      194722
    ],
    "mapped",
    [
      14620
    ]
  ],
  [
    [
      194723,
      194723
    ],
    "mapped",
    [
      24724
    ]
  ],
  [
    [
      194724,
      194724
    ],
    "mapped",
    [
      141012
    ]
  ],
  [
    [
      194725,
      194725
    ],
    "mapped",
    [
      24775
    ]
  ],
  [
    [
      194726,
      194726
    ],
    "mapped",
    [
      24904
    ]
  ],
  [
    [
      194727,
      194727
    ],
    "mapped",
    [
      24908
    ]
  ],
  [
    [
      194728,
      194728
    ],
    "mapped",
    [
      24910
    ]
  ],
  [
    [
      194729,
      194729
    ],
    "mapped",
    [
      24908
    ]
  ],
  [
    [
      194730,
      194730
    ],
    "mapped",
    [
      24954
    ]
  ],
  [
    [
      194731,
      194731
    ],
    "mapped",
    [
      24974
    ]
  ],
  [
    [
      194732,
      194732
    ],
    "mapped",
    [
      25010
    ]
  ],
  [
    [
      194733,
      194733
    ],
    "mapped",
    [
      24996
    ]
  ],
  [
    [
      194734,
      194734
    ],
    "mapped",
    [
      25007
    ]
  ],
  [
    [
      194735,
      194735
    ],
    "mapped",
    [
      25054
    ]
  ],
  [
    [
      194736,
      194736
    ],
    "mapped",
    [
      25074
    ]
  ],
  [
    [
      194737,
      194737
    ],
    "mapped",
    [
      25078
    ]
  ],
  [
    [
      194738,
      194738
    ],
    "mapped",
    [
      25104
    ]
  ],
  [
    [
      194739,
      194739
    ],
    "mapped",
    [
      25115
    ]
  ],
  [
    [
      194740,
      194740
    ],
    "mapped",
    [
      25181
    ]
  ],
  [
    [
      194741,
      194741
    ],
    "mapped",
    [
      25265
    ]
  ],
  [
    [
      194742,
      194742
    ],
    "mapped",
    [
      25300
    ]
  ],
  [
    [
      194743,
      194743
    ],
    "mapped",
    [
      25424
    ]
  ],
  [
    [
      194744,
      194744
    ],
    "mapped",
    [
      142092
    ]
  ],
  [
    [
      194745,
      194745
    ],
    "mapped",
    [
      25405
    ]
  ],
  [
    [
      194746,
      194746
    ],
    "mapped",
    [
      25340
    ]
  ],
  [
    [
      194747,
      194747
    ],
    "mapped",
    [
      25448
    ]
  ],
  [
    [
      194748,
      194748
    ],
    "mapped",
    [
      25475
    ]
  ],
  [
    [
      194749,
      194749
    ],
    "mapped",
    [
      25572
    ]
  ],
  [
    [
      194750,
      194750
    ],
    "mapped",
    [
      142321
    ]
  ],
  [
    [
      194751,
      194751
    ],
    "mapped",
    [
      25634
    ]
  ],
  [
    [
      194752,
      194752
    ],
    "mapped",
    [
      25541
    ]
  ],
  [
    [
      194753,
      194753
    ],
    "mapped",
    [
      25513
    ]
  ],
  [
    [
      194754,
      194754
    ],
    "mapped",
    [
      14894
    ]
  ],
  [
    [
      194755,
      194755
    ],
    "mapped",
    [
      25705
    ]
  ],
  [
    [
      194756,
      194756
    ],
    "mapped",
    [
      25726
    ]
  ],
  [
    [
      194757,
      194757
    ],
    "mapped",
    [
      25757
    ]
  ],
  [
    [
      194758,
      194758
    ],
    "mapped",
    [
      25719
    ]
  ],
  [
    [
      194759,
      194759
    ],
    "mapped",
    [
      14956
    ]
  ],
  [
    [
      194760,
      194760
    ],
    "mapped",
    [
      25935
    ]
  ],
  [
    [
      194761,
      194761
    ],
    "mapped",
    [
      25964
    ]
  ],
  [
    [
      194762,
      194762
    ],
    "mapped",
    [
      143370
    ]
  ],
  [
    [
      194763,
      194763
    ],
    "mapped",
    [
      26083
    ]
  ],
  [
    [
      194764,
      194764
    ],
    "mapped",
    [
      26360
    ]
  ],
  [
    [
      194765,
      194765
    ],
    "mapped",
    [
      26185
    ]
  ],
  [
    [
      194766,
      194766
    ],
    "mapped",
    [
      15129
    ]
  ],
  [
    [
      194767,
      194767
    ],
    "mapped",
    [
      26257
    ]
  ],
  [
    [
      194768,
      194768
    ],
    "mapped",
    [
      15112
    ]
  ],
  [
    [
      194769,
      194769
    ],
    "mapped",
    [
      15076
    ]
  ],
  [
    [
      194770,
      194770
    ],
    "mapped",
    [
      20882
    ]
  ],
  [
    [
      194771,
      194771
    ],
    "mapped",
    [
      20885
    ]
  ],
  [
    [
      194772,
      194772
    ],
    "mapped",
    [
      26368
    ]
  ],
  [
    [
      194773,
      194773
    ],
    "mapped",
    [
      26268
    ]
  ],
  [
    [
      194774,
      194774
    ],
    "mapped",
    [
      32941
    ]
  ],
  [
    [
      194775,
      194775
    ],
    "mapped",
    [
      17369
    ]
  ],
  [
    [
      194776,
      194776
    ],
    "mapped",
    [
      26391
    ]
  ],
  [
    [
      194777,
      194777
    ],
    "mapped",
    [
      26395
    ]
  ],
  [
    [
      194778,
      194778
    ],
    "mapped",
    [
      26401
    ]
  ],
  [
    [
      194779,
      194779
    ],
    "mapped",
    [
      26462
    ]
  ],
  [
    [
      194780,
      194780
    ],
    "mapped",
    [
      26451
    ]
  ],
  [
    [
      194781,
      194781
    ],
    "mapped",
    [
      144323
    ]
  ],
  [
    [
      194782,
      194782
    ],
    "mapped",
    [
      15177
    ]
  ],
  [
    [
      194783,
      194783
    ],
    "mapped",
    [
      26618
    ]
  ],
  [
    [
      194784,
      194784
    ],
    "mapped",
    [
      26501
    ]
  ],
  [
    [
      194785,
      194785
    ],
    "mapped",
    [
      26706
    ]
  ],
  [
    [
      194786,
      194786
    ],
    "mapped",
    [
      26757
    ]
  ],
  [
    [
      194787,
      194787
    ],
    "mapped",
    [
      144493
    ]
  ],
  [
    [
      194788,
      194788
    ],
    "mapped",
    [
      26766
    ]
  ],
  [
    [
      194789,
      194789
    ],
    "mapped",
    [
      26655
    ]
  ],
  [
    [
      194790,
      194790
    ],
    "mapped",
    [
      26900
    ]
  ],
  [
    [
      194791,
      194791
    ],
    "mapped",
    [
      15261
    ]
  ],
  [
    [
      194792,
      194792
    ],
    "mapped",
    [
      26946
    ]
  ],
  [
    [
      194793,
      194793
    ],
    "mapped",
    [
      27043
    ]
  ],
  [
    [
      194794,
      194794
    ],
    "mapped",
    [
      27114
    ]
  ],
  [
    [
      194795,
      194795
    ],
    "mapped",
    [
      27304
    ]
  ],
  [
    [
      194796,
      194796
    ],
    "mapped",
    [
      145059
    ]
  ],
  [
    [
      194797,
      194797
    ],
    "mapped",
    [
      27355
    ]
  ],
  [
    [
      194798,
      194798
    ],
    "mapped",
    [
      15384
    ]
  ],
  [
    [
      194799,
      194799
    ],
    "mapped",
    [
      27425
    ]
  ],
  [
    [
      194800,
      194800
    ],
    "mapped",
    [
      145575
    ]
  ],
  [
    [
      194801,
      194801
    ],
    "mapped",
    [
      27476
    ]
  ],
  [
    [
      194802,
      194802
    ],
    "mapped",
    [
      15438
    ]
  ],
  [
    [
      194803,
      194803
    ],
    "mapped",
    [
      27506
    ]
  ],
  [
    [
      194804,
      194804
    ],
    "mapped",
    [
      27551
    ]
  ],
  [
    [
      194805,
      194805
    ],
    "mapped",
    [
      27578
    ]
  ],
  [
    [
      194806,
      194806
    ],
    "mapped",
    [
      27579
    ]
  ],
  [
    [
      194807,
      194807
    ],
    "mapped",
    [
      146061
    ]
  ],
  [
    [
      194808,
      194808
    ],
    "mapped",
    [
      138507
    ]
  ],
  [
    [
      194809,
      194809
    ],
    "mapped",
    [
      146170
    ]
  ],
  [
    [
      194810,
      194810
    ],
    "mapped",
    [
      27726
    ]
  ],
  [
    [
      194811,
      194811
    ],
    "mapped",
    [
      146620
    ]
  ],
  [
    [
      194812,
      194812
    ],
    "mapped",
    [
      27839
    ]
  ],
  [
    [
      194813,
      194813
    ],
    "mapped",
    [
      27853
    ]
  ],
  [
    [
      194814,
      194814
    ],
    "mapped",
    [
      27751
    ]
  ],
  [
    [
      194815,
      194815
    ],
    "mapped",
    [
      27926
    ]
  ],
  [
    [
      194816,
      194816
    ],
    "mapped",
    [
      27966
    ]
  ],
  [
    [
      194817,
      194817
    ],
    "mapped",
    [
      28023
    ]
  ],
  [
    [
      194818,
      194818
    ],
    "mapped",
    [
      27969
    ]
  ],
  [
    [
      194819,
      194819
    ],
    "mapped",
    [
      28009
    ]
  ],
  [
    [
      194820,
      194820
    ],
    "mapped",
    [
      28024
    ]
  ],
  [
    [
      194821,
      194821
    ],
    "mapped",
    [
      28037
    ]
  ],
  [
    [
      194822,
      194822
    ],
    "mapped",
    [
      146718
    ]
  ],
  [
    [
      194823,
      194823
    ],
    "mapped",
    [
      27956
    ]
  ],
  [
    [
      194824,
      194824
    ],
    "mapped",
    [
      28207
    ]
  ],
  [
    [
      194825,
      194825
    ],
    "mapped",
    [
      28270
    ]
  ],
  [
    [
      194826,
      194826
    ],
    "mapped",
    [
      15667
    ]
  ],
  [
    [
      194827,
      194827
    ],
    "mapped",
    [
      28363
    ]
  ],
  [
    [
      194828,
      194828
    ],
    "mapped",
    [
      28359
    ]
  ],
  [
    [
      194829,
      194829
    ],
    "mapped",
    [
      147153
    ]
  ],
  [
    [
      194830,
      194830
    ],
    "mapped",
    [
      28153
    ]
  ],
  [
    [
      194831,
      194831
    ],
    "mapped",
    [
      28526
    ]
  ],
  [
    [
      194832,
      194832
    ],
    "mapped",
    [
      147294
    ]
  ],
  [
    [
      194833,
      194833
    ],
    "mapped",
    [
      147342
    ]
  ],
  [
    [
      194834,
      194834
    ],
    "mapped",
    [
      28614
    ]
  ],
  [
    [
      194835,
      194835
    ],
    "mapped",
    [
      28729
    ]
  ],
  [
    [
      194836,
      194836
    ],
    "mapped",
    [
      28702
    ]
  ],
  [
    [
      194837,
      194837
    ],
    "mapped",
    [
      28699
    ]
  ],
  [
    [
      194838,
      194838
    ],
    "mapped",
    [
      15766
    ]
  ],
  [
    [
      194839,
      194839
    ],
    "mapped",
    [
      28746
    ]
  ],
  [
    [
      194840,
      194840
    ],
    "mapped",
    [
      28797
    ]
  ],
  [
    [
      194841,
      194841
    ],
    "mapped",
    [
      28791
    ]
  ],
  [
    [
      194842,
      194842
    ],
    "mapped",
    [
      28845
    ]
  ],
  [
    [
      194843,
      194843
    ],
    "mapped",
    [
      132389
    ]
  ],
  [
    [
      194844,
      194844
    ],
    "mapped",
    [
      28997
    ]
  ],
  [
    [
      194845,
      194845
    ],
    "mapped",
    [
      148067
    ]
  ],
  [
    [
      194846,
      194846
    ],
    "mapped",
    [
      29084
    ]
  ],
  [
    [
      194847,
      194847
    ],
    "disallowed"
  ],
  [
    [
      194848,
      194848
    ],
    "mapped",
    [
      29224
    ]
  ],
  [
    [
      194849,
      194849
    ],
    "mapped",
    [
      29237
    ]
  ],
  [
    [
      194850,
      194850
    ],
    "mapped",
    [
      29264
    ]
  ],
  [
    [
      194851,
      194851
    ],
    "mapped",
    [
      149e3
    ]
  ],
  [
    [
      194852,
      194852
    ],
    "mapped",
    [
      29312
    ]
  ],
  [
    [
      194853,
      194853
    ],
    "mapped",
    [
      29333
    ]
  ],
  [
    [
      194854,
      194854
    ],
    "mapped",
    [
      149301
    ]
  ],
  [
    [
      194855,
      194855
    ],
    "mapped",
    [
      149524
    ]
  ],
  [
    [
      194856,
      194856
    ],
    "mapped",
    [
      29562
    ]
  ],
  [
    [
      194857,
      194857
    ],
    "mapped",
    [
      29579
    ]
  ],
  [
    [
      194858,
      194858
    ],
    "mapped",
    [
      16044
    ]
  ],
  [
    [
      194859,
      194859
    ],
    "mapped",
    [
      29605
    ]
  ],
  [
    [
      194860,
      194861
    ],
    "mapped",
    [
      16056
    ]
  ],
  [
    [
      194862,
      194862
    ],
    "mapped",
    [
      29767
    ]
  ],
  [
    [
      194863,
      194863
    ],
    "mapped",
    [
      29788
    ]
  ],
  [
    [
      194864,
      194864
    ],
    "mapped",
    [
      29809
    ]
  ],
  [
    [
      194865,
      194865
    ],
    "mapped",
    [
      29829
    ]
  ],
  [
    [
      194866,
      194866
    ],
    "mapped",
    [
      29898
    ]
  ],
  [
    [
      194867,
      194867
    ],
    "mapped",
    [
      16155
    ]
  ],
  [
    [
      194868,
      194868
    ],
    "mapped",
    [
      29988
    ]
  ],
  [
    [
      194869,
      194869
    ],
    "mapped",
    [
      150582
    ]
  ],
  [
    [
      194870,
      194870
    ],
    "mapped",
    [
      30014
    ]
  ],
  [
    [
      194871,
      194871
    ],
    "mapped",
    [
      150674
    ]
  ],
  [
    [
      194872,
      194872
    ],
    "mapped",
    [
      30064
    ]
  ],
  [
    [
      194873,
      194873
    ],
    "mapped",
    [
      139679
    ]
  ],
  [
    [
      194874,
      194874
    ],
    "mapped",
    [
      30224
    ]
  ],
  [
    [
      194875,
      194875
    ],
    "mapped",
    [
      151457
    ]
  ],
  [
    [
      194876,
      194876
    ],
    "mapped",
    [
      151480
    ]
  ],
  [
    [
      194877,
      194877
    ],
    "mapped",
    [
      151620
    ]
  ],
  [
    [
      194878,
      194878
    ],
    "mapped",
    [
      16380
    ]
  ],
  [
    [
      194879,
      194879
    ],
    "mapped",
    [
      16392
    ]
  ],
  [
    [
      194880,
      194880
    ],
    "mapped",
    [
      30452
    ]
  ],
  [
    [
      194881,
      194881
    ],
    "mapped",
    [
      151795
    ]
  ],
  [
    [
      194882,
      194882
    ],
    "mapped",
    [
      151794
    ]
  ],
  [
    [
      194883,
      194883
    ],
    "mapped",
    [
      151833
    ]
  ],
  [
    [
      194884,
      194884
    ],
    "mapped",
    [
      151859
    ]
  ],
  [
    [
      194885,
      194885
    ],
    "mapped",
    [
      30494
    ]
  ],
  [
    [
      194886,
      194887
    ],
    "mapped",
    [
      30495
    ]
  ],
  [
    [
      194888,
      194888
    ],
    "mapped",
    [
      30538
    ]
  ],
  [
    [
      194889,
      194889
    ],
    "mapped",
    [
      16441
    ]
  ],
  [
    [
      194890,
      194890
    ],
    "mapped",
    [
      30603
    ]
  ],
  [
    [
      194891,
      194891
    ],
    "mapped",
    [
      16454
    ]
  ],
  [
    [
      194892,
      194892
    ],
    "mapped",
    [
      16534
    ]
  ],
  [
    [
      194893,
      194893
    ],
    "mapped",
    [
      152605
    ]
  ],
  [
    [
      194894,
      194894
    ],
    "mapped",
    [
      30798
    ]
  ],
  [
    [
      194895,
      194895
    ],
    "mapped",
    [
      30860
    ]
  ],
  [
    [
      194896,
      194896
    ],
    "mapped",
    [
      30924
    ]
  ],
  [
    [
      194897,
      194897
    ],
    "mapped",
    [
      16611
    ]
  ],
  [
    [
      194898,
      194898
    ],
    "mapped",
    [
      153126
    ]
  ],
  [
    [
      194899,
      194899
    ],
    "mapped",
    [
      31062
    ]
  ],
  [
    [
      194900,
      194900
    ],
    "mapped",
    [
      153242
    ]
  ],
  [
    [
      194901,
      194901
    ],
    "mapped",
    [
      153285
    ]
  ],
  [
    [
      194902,
      194902
    ],
    "mapped",
    [
      31119
    ]
  ],
  [
    [
      194903,
      194903
    ],
    "mapped",
    [
      31211
    ]
  ],
  [
    [
      194904,
      194904
    ],
    "mapped",
    [
      16687
    ]
  ],
  [
    [
      194905,
      194905
    ],
    "mapped",
    [
      31296
    ]
  ],
  [
    [
      194906,
      194906
    ],
    "mapped",
    [
      31306
    ]
  ],
  [
    [
      194907,
      194907
    ],
    "mapped",
    [
      31311
    ]
  ],
  [
    [
      194908,
      194908
    ],
    "mapped",
    [
      153980
    ]
  ],
  [
    [
      194909,
      194910
    ],
    "mapped",
    [
      154279
    ]
  ],
  [
    [
      194911,
      194911
    ],
    "disallowed"
  ],
  [
    [
      194912,
      194912
    ],
    "mapped",
    [
      16898
    ]
  ],
  [
    [
      194913,
      194913
    ],
    "mapped",
    [
      154539
    ]
  ],
  [
    [
      194914,
      194914
    ],
    "mapped",
    [
      31686
    ]
  ],
  [
    [
      194915,
      194915
    ],
    "mapped",
    [
      31689
    ]
  ],
  [
    [
      194916,
      194916
    ],
    "mapped",
    [
      16935
    ]
  ],
  [
    [
      194917,
      194917
    ],
    "mapped",
    [
      154752
    ]
  ],
  [
    [
      194918,
      194918
    ],
    "mapped",
    [
      31954
    ]
  ],
  [
    [
      194919,
      194919
    ],
    "mapped",
    [
      17056
    ]
  ],
  [
    [
      194920,
      194920
    ],
    "mapped",
    [
      31976
    ]
  ],
  [
    [
      194921,
      194921
    ],
    "mapped",
    [
      31971
    ]
  ],
  [
    [
      194922,
      194922
    ],
    "mapped",
    [
      32e3
    ]
  ],
  [
    [
      194923,
      194923
    ],
    "mapped",
    [
      155526
    ]
  ],
  [
    [
      194924,
      194924
    ],
    "mapped",
    [
      32099
    ]
  ],
  [
    [
      194925,
      194925
    ],
    "mapped",
    [
      17153
    ]
  ],
  [
    [
      194926,
      194926
    ],
    "mapped",
    [
      32199
    ]
  ],
  [
    [
      194927,
      194927
    ],
    "mapped",
    [
      32258
    ]
  ],
  [
    [
      194928,
      194928
    ],
    "mapped",
    [
      32325
    ]
  ],
  [
    [
      194929,
      194929
    ],
    "mapped",
    [
      17204
    ]
  ],
  [
    [
      194930,
      194930
    ],
    "mapped",
    [
      156200
    ]
  ],
  [
    [
      194931,
      194931
    ],
    "mapped",
    [
      156231
    ]
  ],
  [
    [
      194932,
      194932
    ],
    "mapped",
    [
      17241
    ]
  ],
  [
    [
      194933,
      194933
    ],
    "mapped",
    [
      156377
    ]
  ],
  [
    [
      194934,
      194934
    ],
    "mapped",
    [
      32634
    ]
  ],
  [
    [
      194935,
      194935
    ],
    "mapped",
    [
      156478
    ]
  ],
  [
    [
      194936,
      194936
    ],
    "mapped",
    [
      32661
    ]
  ],
  [
    [
      194937,
      194937
    ],
    "mapped",
    [
      32762
    ]
  ],
  [
    [
      194938,
      194938
    ],
    "mapped",
    [
      32773
    ]
  ],
  [
    [
      194939,
      194939
    ],
    "mapped",
    [
      156890
    ]
  ],
  [
    [
      194940,
      194940
    ],
    "mapped",
    [
      156963
    ]
  ],
  [
    [
      194941,
      194941
    ],
    "mapped",
    [
      32864
    ]
  ],
  [
    [
      194942,
      194942
    ],
    "mapped",
    [
      157096
    ]
  ],
  [
    [
      194943,
      194943
    ],
    "mapped",
    [
      32880
    ]
  ],
  [
    [
      194944,
      194944
    ],
    "mapped",
    [
      144223
    ]
  ],
  [
    [
      194945,
      194945
    ],
    "mapped",
    [
      17365
    ]
  ],
  [
    [
      194946,
      194946
    ],
    "mapped",
    [
      32946
    ]
  ],
  [
    [
      194947,
      194947
    ],
    "mapped",
    [
      33027
    ]
  ],
  [
    [
      194948,
      194948
    ],
    "mapped",
    [
      17419
    ]
  ],
  [
    [
      194949,
      194949
    ],
    "mapped",
    [
      33086
    ]
  ],
  [
    [
      194950,
      194950
    ],
    "mapped",
    [
      23221
    ]
  ],
  [
    [
      194951,
      194951
    ],
    "mapped",
    [
      157607
    ]
  ],
  [
    [
      194952,
      194952
    ],
    "mapped",
    [
      157621
    ]
  ],
  [
    [
      194953,
      194953
    ],
    "mapped",
    [
      144275
    ]
  ],
  [
    [
      194954,
      194954
    ],
    "mapped",
    [
      144284
    ]
  ],
  [
    [
      194955,
      194955
    ],
    "mapped",
    [
      33281
    ]
  ],
  [
    [
      194956,
      194956
    ],
    "mapped",
    [
      33284
    ]
  ],
  [
    [
      194957,
      194957
    ],
    "mapped",
    [
      36766
    ]
  ],
  [
    [
      194958,
      194958
    ],
    "mapped",
    [
      17515
    ]
  ],
  [
    [
      194959,
      194959
    ],
    "mapped",
    [
      33425
    ]
  ],
  [
    [
      194960,
      194960
    ],
    "mapped",
    [
      33419
    ]
  ],
  [
    [
      194961,
      194961
    ],
    "mapped",
    [
      33437
    ]
  ],
  [
    [
      194962,
      194962
    ],
    "mapped",
    [
      21171
    ]
  ],
  [
    [
      194963,
      194963
    ],
    "mapped",
    [
      33457
    ]
  ],
  [
    [
      194964,
      194964
    ],
    "mapped",
    [
      33459
    ]
  ],
  [
    [
      194965,
      194965
    ],
    "mapped",
    [
      33469
    ]
  ],
  [
    [
      194966,
      194966
    ],
    "mapped",
    [
      33510
    ]
  ],
  [
    [
      194967,
      194967
    ],
    "mapped",
    [
      158524
    ]
  ],
  [
    [
      194968,
      194968
    ],
    "mapped",
    [
      33509
    ]
  ],
  [
    [
      194969,
      194969
    ],
    "mapped",
    [
      33565
    ]
  ],
  [
    [
      194970,
      194970
    ],
    "mapped",
    [
      33635
    ]
  ],
  [
    [
      194971,
      194971
    ],
    "mapped",
    [
      33709
    ]
  ],
  [
    [
      194972,
      194972
    ],
    "mapped",
    [
      33571
    ]
  ],
  [
    [
      194973,
      194973
    ],
    "mapped",
    [
      33725
    ]
  ],
  [
    [
      194974,
      194974
    ],
    "mapped",
    [
      33767
    ]
  ],
  [
    [
      194975,
      194975
    ],
    "mapped",
    [
      33879
    ]
  ],
  [
    [
      194976,
      194976
    ],
    "mapped",
    [
      33619
    ]
  ],
  [
    [
      194977,
      194977
    ],
    "mapped",
    [
      33738
    ]
  ],
  [
    [
      194978,
      194978
    ],
    "mapped",
    [
      33740
    ]
  ],
  [
    [
      194979,
      194979
    ],
    "mapped",
    [
      33756
    ]
  ],
  [
    [
      194980,
      194980
    ],
    "mapped",
    [
      158774
    ]
  ],
  [
    [
      194981,
      194981
    ],
    "mapped",
    [
      159083
    ]
  ],
  [
    [
      194982,
      194982
    ],
    "mapped",
    [
      158933
    ]
  ],
  [
    [
      194983,
      194983
    ],
    "mapped",
    [
      17707
    ]
  ],
  [
    [
      194984,
      194984
    ],
    "mapped",
    [
      34033
    ]
  ],
  [
    [
      194985,
      194985
    ],
    "mapped",
    [
      34035
    ]
  ],
  [
    [
      194986,
      194986
    ],
    "mapped",
    [
      34070
    ]
  ],
  [
    [
      194987,
      194987
    ],
    "mapped",
    [
      160714
    ]
  ],
  [
    [
      194988,
      194988
    ],
    "mapped",
    [
      34148
    ]
  ],
  [
    [
      194989,
      194989
    ],
    "mapped",
    [
      159532
    ]
  ],
  [
    [
      194990,
      194990
    ],
    "mapped",
    [
      17757
    ]
  ],
  [
    [
      194991,
      194991
    ],
    "mapped",
    [
      17761
    ]
  ],
  [
    [
      194992,
      194992
    ],
    "mapped",
    [
      159665
    ]
  ],
  [
    [
      194993,
      194993
    ],
    "mapped",
    [
      159954
    ]
  ],
  [
    [
      194994,
      194994
    ],
    "mapped",
    [
      17771
    ]
  ],
  [
    [
      194995,
      194995
    ],
    "mapped",
    [
      34384
    ]
  ],
  [
    [
      194996,
      194996
    ],
    "mapped",
    [
      34396
    ]
  ],
  [
    [
      194997,
      194997
    ],
    "mapped",
    [
      34407
    ]
  ],
  [
    [
      194998,
      194998
    ],
    "mapped",
    [
      34409
    ]
  ],
  [
    [
      194999,
      194999
    ],
    "mapped",
    [
      34473
    ]
  ],
  [
    [
      195e3,
      195e3
    ],
    "mapped",
    [
      34440
    ]
  ],
  [
    [
      195001,
      195001
    ],
    "mapped",
    [
      34574
    ]
  ],
  [
    [
      195002,
      195002
    ],
    "mapped",
    [
      34530
    ]
  ],
  [
    [
      195003,
      195003
    ],
    "mapped",
    [
      34681
    ]
  ],
  [
    [
      195004,
      195004
    ],
    "mapped",
    [
      34600
    ]
  ],
  [
    [
      195005,
      195005
    ],
    "mapped",
    [
      34667
    ]
  ],
  [
    [
      195006,
      195006
    ],
    "mapped",
    [
      34694
    ]
  ],
  [
    [
      195007,
      195007
    ],
    "disallowed"
  ],
  [
    [
      195008,
      195008
    ],
    "mapped",
    [
      34785
    ]
  ],
  [
    [
      195009,
      195009
    ],
    "mapped",
    [
      34817
    ]
  ],
  [
    [
      195010,
      195010
    ],
    "mapped",
    [
      17913
    ]
  ],
  [
    [
      195011,
      195011
    ],
    "mapped",
    [
      34912
    ]
  ],
  [
    [
      195012,
      195012
    ],
    "mapped",
    [
      34915
    ]
  ],
  [
    [
      195013,
      195013
    ],
    "mapped",
    [
      161383
    ]
  ],
  [
    [
      195014,
      195014
    ],
    "mapped",
    [
      35031
    ]
  ],
  [
    [
      195015,
      195015
    ],
    "mapped",
    [
      35038
    ]
  ],
  [
    [
      195016,
      195016
    ],
    "mapped",
    [
      17973
    ]
  ],
  [
    [
      195017,
      195017
    ],
    "mapped",
    [
      35066
    ]
  ],
  [
    [
      195018,
      195018
    ],
    "mapped",
    [
      13499
    ]
  ],
  [
    [
      195019,
      195019
    ],
    "mapped",
    [
      161966
    ]
  ],
  [
    [
      195020,
      195020
    ],
    "mapped",
    [
      162150
    ]
  ],
  [
    [
      195021,
      195021
    ],
    "mapped",
    [
      18110
    ]
  ],
  [
    [
      195022,
      195022
    ],
    "mapped",
    [
      18119
    ]
  ],
  [
    [
      195023,
      195023
    ],
    "mapped",
    [
      35488
    ]
  ],
  [
    [
      195024,
      195024
    ],
    "mapped",
    [
      35565
    ]
  ],
  [
    [
      195025,
      195025
    ],
    "mapped",
    [
      35722
    ]
  ],
  [
    [
      195026,
      195026
    ],
    "mapped",
    [
      35925
    ]
  ],
  [
    [
      195027,
      195027
    ],
    "mapped",
    [
      162984
    ]
  ],
  [
    [
      195028,
      195028
    ],
    "mapped",
    [
      36011
    ]
  ],
  [
    [
      195029,
      195029
    ],
    "mapped",
    [
      36033
    ]
  ],
  [
    [
      195030,
      195030
    ],
    "mapped",
    [
      36123
    ]
  ],
  [
    [
      195031,
      195031
    ],
    "mapped",
    [
      36215
    ]
  ],
  [
    [
      195032,
      195032
    ],
    "mapped",
    [
      163631
    ]
  ],
  [
    [
      195033,
      195033
    ],
    "mapped",
    [
      133124
    ]
  ],
  [
    [
      195034,
      195034
    ],
    "mapped",
    [
      36299
    ]
  ],
  [
    [
      195035,
      195035
    ],
    "mapped",
    [
      36284
    ]
  ],
  [
    [
      195036,
      195036
    ],
    "mapped",
    [
      36336
    ]
  ],
  [
    [
      195037,
      195037
    ],
    "mapped",
    [
      133342
    ]
  ],
  [
    [
      195038,
      195038
    ],
    "mapped",
    [
      36564
    ]
  ],
  [
    [
      195039,
      195039
    ],
    "mapped",
    [
      36664
    ]
  ],
  [
    [
      195040,
      195040
    ],
    "mapped",
    [
      165330
    ]
  ],
  [
    [
      195041,
      195041
    ],
    "mapped",
    [
      165357
    ]
  ],
  [
    [
      195042,
      195042
    ],
    "mapped",
    [
      37012
    ]
  ],
  [
    [
      195043,
      195043
    ],
    "mapped",
    [
      37105
    ]
  ],
  [
    [
      195044,
      195044
    ],
    "mapped",
    [
      37137
    ]
  ],
  [
    [
      195045,
      195045
    ],
    "mapped",
    [
      165678
    ]
  ],
  [
    [
      195046,
      195046
    ],
    "mapped",
    [
      37147
    ]
  ],
  [
    [
      195047,
      195047
    ],
    "mapped",
    [
      37432
    ]
  ],
  [
    [
      195048,
      195048
    ],
    "mapped",
    [
      37591
    ]
  ],
  [
    [
      195049,
      195049
    ],
    "mapped",
    [
      37592
    ]
  ],
  [
    [
      195050,
      195050
    ],
    "mapped",
    [
      37500
    ]
  ],
  [
    [
      195051,
      195051
    ],
    "mapped",
    [
      37881
    ]
  ],
  [
    [
      195052,
      195052
    ],
    "mapped",
    [
      37909
    ]
  ],
  [
    [
      195053,
      195053
    ],
    "mapped",
    [
      166906
    ]
  ],
  [
    [
      195054,
      195054
    ],
    "mapped",
    [
      38283
    ]
  ],
  [
    [
      195055,
      195055
    ],
    "mapped",
    [
      18837
    ]
  ],
  [
    [
      195056,
      195056
    ],
    "mapped",
    [
      38327
    ]
  ],
  [
    [
      195057,
      195057
    ],
    "mapped",
    [
      167287
    ]
  ],
  [
    [
      195058,
      195058
    ],
    "mapped",
    [
      18918
    ]
  ],
  [
    [
      195059,
      195059
    ],
    "mapped",
    [
      38595
    ]
  ],
  [
    [
      195060,
      195060
    ],
    "mapped",
    [
      23986
    ]
  ],
  [
    [
      195061,
      195061
    ],
    "mapped",
    [
      38691
    ]
  ],
  [
    [
      195062,
      195062
    ],
    "mapped",
    [
      168261
    ]
  ],
  [
    [
      195063,
      195063
    ],
    "mapped",
    [
      168474
    ]
  ],
  [
    [
      195064,
      195064
    ],
    "mapped",
    [
      19054
    ]
  ],
  [
    [
      195065,
      195065
    ],
    "mapped",
    [
      19062
    ]
  ],
  [
    [
      195066,
      195066
    ],
    "mapped",
    [
      38880
    ]
  ],
  [
    [
      195067,
      195067
    ],
    "mapped",
    [
      168970
    ]
  ],
  [
    [
      195068,
      195068
    ],
    "mapped",
    [
      19122
    ]
  ],
  [
    [
      195069,
      195069
    ],
    "mapped",
    [
      169110
    ]
  ],
  [
    [
      195070,
      195071
    ],
    "mapped",
    [
      38923
    ]
  ],
  [
    [
      195072,
      195072
    ],
    "mapped",
    [
      38953
    ]
  ],
  [
    [
      195073,
      195073
    ],
    "mapped",
    [
      169398
    ]
  ],
  [
    [
      195074,
      195074
    ],
    "mapped",
    [
      39138
    ]
  ],
  [
    [
      195075,
      195075
    ],
    "mapped",
    [
      19251
    ]
  ],
  [
    [
      195076,
      195076
    ],
    "mapped",
    [
      39209
    ]
  ],
  [
    [
      195077,
      195077
    ],
    "mapped",
    [
      39335
    ]
  ],
  [
    [
      195078,
      195078
    ],
    "mapped",
    [
      39362
    ]
  ],
  [
    [
      195079,
      195079
    ],
    "mapped",
    [
      39422
    ]
  ],
  [
    [
      195080,
      195080
    ],
    "mapped",
    [
      19406
    ]
  ],
  [
    [
      195081,
      195081
    ],
    "mapped",
    [
      170800
    ]
  ],
  [
    [
      195082,
      195082
    ],
    "mapped",
    [
      39698
    ]
  ],
  [
    [
      195083,
      195083
    ],
    "mapped",
    [
      4e4
    ]
  ],
  [
    [
      195084,
      195084
    ],
    "mapped",
    [
      40189
    ]
  ],
  [
    [
      195085,
      195085
    ],
    "mapped",
    [
      19662
    ]
  ],
  [
    [
      195086,
      195086
    ],
    "mapped",
    [
      19693
    ]
  ],
  [
    [
      195087,
      195087
    ],
    "mapped",
    [
      40295
    ]
  ],
  [
    [
      195088,
      195088
    ],
    "mapped",
    [
      172238
    ]
  ],
  [
    [
      195089,
      195089
    ],
    "mapped",
    [
      19704
    ]
  ],
  [
    [
      195090,
      195090
    ],
    "mapped",
    [
      172293
    ]
  ],
  [
    [
      195091,
      195091
    ],
    "mapped",
    [
      172558
    ]
  ],
  [
    [
      195092,
      195092
    ],
    "mapped",
    [
      172689
    ]
  ],
  [
    [
      195093,
      195093
    ],
    "mapped",
    [
      40635
    ]
  ],
  [
    [
      195094,
      195094
    ],
    "mapped",
    [
      19798
    ]
  ],
  [
    [
      195095,
      195095
    ],
    "mapped",
    [
      40697
    ]
  ],
  [
    [
      195096,
      195096
    ],
    "mapped",
    [
      40702
    ]
  ],
  [
    [
      195097,
      195097
    ],
    "mapped",
    [
      40709
    ]
  ],
  [
    [
      195098,
      195098
    ],
    "mapped",
    [
      40719
    ]
  ],
  [
    [
      195099,
      195099
    ],
    "mapped",
    [
      40726
    ]
  ],
  [
    [
      195100,
      195100
    ],
    "mapped",
    [
      40763
    ]
  ],
  [
    [
      195101,
      195101
    ],
    "mapped",
    [
      173568
    ]
  ],
  [
    [
      195102,
      196605
    ],
    "disallowed"
  ],
  [
    [
      196606,
      196607
    ],
    "disallowed"
  ],
  [
    [
      196608,
      262141
    ],
    "disallowed"
  ],
  [
    [
      262142,
      262143
    ],
    "disallowed"
  ],
  [
    [
      262144,
      327677
    ],
    "disallowed"
  ],
  [
    [
      327678,
      327679
    ],
    "disallowed"
  ],
  [
    [
      327680,
      393213
    ],
    "disallowed"
  ],
  [
    [
      393214,
      393215
    ],
    "disallowed"
  ],
  [
    [
      393216,
      458749
    ],
    "disallowed"
  ],
  [
    [
      458750,
      458751
    ],
    "disallowed"
  ],
  [
    [
      458752,
      524285
    ],
    "disallowed"
  ],
  [
    [
      524286,
      524287
    ],
    "disallowed"
  ],
  [
    [
      524288,
      589821
    ],
    "disallowed"
  ],
  [
    [
      589822,
      589823
    ],
    "disallowed"
  ],
  [
    [
      589824,
      655357
    ],
    "disallowed"
  ],
  [
    [
      655358,
      655359
    ],
    "disallowed"
  ],
  [
    [
      655360,
      720893
    ],
    "disallowed"
  ],
  [
    [
      720894,
      720895
    ],
    "disallowed"
  ],
  [
    [
      720896,
      786429
    ],
    "disallowed"
  ],
  [
    [
      786430,
      786431
    ],
    "disallowed"
  ],
  [
    [
      786432,
      851965
    ],
    "disallowed"
  ],
  [
    [
      851966,
      851967
    ],
    "disallowed"
  ],
  [
    [
      851968,
      917501
    ],
    "disallowed"
  ],
  [
    [
      917502,
      917503
    ],
    "disallowed"
  ],
  [
    [
      917504,
      917504
    ],
    "disallowed"
  ],
  [
    [
      917505,
      917505
    ],
    "disallowed"
  ],
  [
    [
      917506,
      917535
    ],
    "disallowed"
  ],
  [
    [
      917536,
      917631
    ],
    "disallowed"
  ],
  [
    [
      917632,
      917759
    ],
    "disallowed"
  ],
  [
    [
      917760,
      917999
    ],
    "ignored"
  ],
  [
    [
      918e3,
      983037
    ],
    "disallowed"
  ],
  [
    [
      983038,
      983039
    ],
    "disallowed"
  ],
  [
    [
      983040,
      1048573
    ],
    "disallowed"
  ],
  [
    [
      1048574,
      1048575
    ],
    "disallowed"
  ],
  [
    [
      1048576,
      1114109
    ],
    "disallowed"
  ],
  [
    [
      1114110,
      1114111
    ],
    "disallowed"
  ]
];
var punycode = require$$0$6;
var mappingTable = require$$1$1;
var PROCESSING_OPTIONS = {
  TRANSITIONAL: 0,
  NONTRANSITIONAL: 1
};
function normalize(str2) {
  return str2.split("\0").map(function(s) {
    return s.normalize("NFC");
  }).join("\0");
}
function findStatus(val) {
  var start = 0;
  var end = mappingTable.length - 1;
  while (start <= end) {
    var mid = Math.floor((start + end) / 2);
    var target = mappingTable[mid];
    if (target[0][0] <= val && target[0][1] >= val) {
      return target;
    } else if (target[0][0] > val) {
      end = mid - 1;
    } else {
      start = mid + 1;
    }
  }
  return null;
}
var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
function countSymbols(string2) {
  return string2.replace(regexAstralSymbols, "_").length;
}
function mapChars(domain_name, useSTD3, processing_option) {
  var hasError = false;
  var processed = "";
  var len = countSymbols(domain_name);
  for (var i = 0; i < len; ++i) {
    var codePoint = domain_name.codePointAt(i);
    var status = findStatus(codePoint);
    switch (status[1]) {
      case "disallowed":
        hasError = true;
        processed += String.fromCodePoint(codePoint);
        break;
      case "ignored":
        break;
      case "mapped":
        processed += String.fromCodePoint.apply(String, status[2]);
        break;
      case "deviation":
        if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
          processed += String.fromCodePoint.apply(String, status[2]);
        } else {
          processed += String.fromCodePoint(codePoint);
        }
        break;
      case "valid":
        processed += String.fromCodePoint(codePoint);
        break;
      case "disallowed_STD3_mapped":
        if (useSTD3) {
          hasError = true;
          processed += String.fromCodePoint(codePoint);
        } else {
          processed += String.fromCodePoint.apply(String, status[2]);
        }
        break;
      case "disallowed_STD3_valid":
        if (useSTD3) {
          hasError = true;
        }
        processed += String.fromCodePoint(codePoint);
        break;
    }
  }
  return {
    string: processed,
    error: hasError
  };
}
var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
function validateLabel(label, processing_option) {
  if (label.substr(0, 4) === "xn--") {
    label = punycode.toUnicode(label);
    PROCESSING_OPTIONS.NONTRANSITIONAL;
  }
  var error2 = false;
  if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
    error2 = true;
  }
  var len = countSymbols(label);
  for (var i = 0; i < len; ++i) {
    var status = findStatus(label.codePointAt(i));
    if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
      error2 = true;
      break;
    }
  }
  return {
    label,
    error: error2
  };
}
function processing(domain_name, useSTD3, processing_option) {
  var result = mapChars(domain_name, useSTD3, processing_option);
  result.string = normalize(result.string);
  var labels = result.string.split(".");
  for (var i = 0; i < labels.length; ++i) {
    try {
      var validation = validateLabel(labels[i]);
      labels[i] = validation.label;
      result.error = result.error || validation.error;
    } catch (e) {
      result.error = true;
    }
  }
  return {
    string: labels.join("."),
    error: result.error
  };
}
tr46.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
  var result = processing(domain_name, useSTD3, processing_option);
  var labels = result.string.split(".");
  labels = labels.map(function(l) {
    try {
      return punycode.toASCII(l);
    } catch (e) {
      result.error = true;
      return l;
    }
  });
  if (verifyDnsLength) {
    var total = labels.slice(0, labels.length - 1).join(".").length;
    if (total.length > 253 || total.length === 0) {
      result.error = true;
    }
    for (var i = 0; i < labels.length; ++i) {
      if (labels.length > 63 || labels.length === 0) {
        result.error = true;
        break;
      }
    }
  }
  if (result.error)
    return null;
  return labels.join(".");
};
tr46.toUnicode = function(domain_name, useSTD3) {
  var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
  return {
    domain: result.string,
    error: result.error
  };
};
tr46.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
(function(module) {
  const punycode2 = require$$0$6;
  const tr46$1 = tr46;
  const specialSchemes = {
    ftp: 21,
    file: null,
    gopher: 70,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
  };
  const failure = Symbol("failure");
  function countSymbols2(str2) {
    return punycode2.ucs2.decode(str2).length;
  }
  function at(input, idx) {
    const c = input[idx];
    return isNaN(c) ? void 0 : String.fromCodePoint(c);
  }
  function isASCIIDigit(c) {
    return c >= 48 && c <= 57;
  }
  function isASCIIAlpha(c) {
    return c >= 65 && c <= 90 || c >= 97 && c <= 122;
  }
  function isASCIIAlphanumeric(c) {
    return isASCIIAlpha(c) || isASCIIDigit(c);
  }
  function isASCIIHex(c) {
    return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
  }
  function isSingleDot(buffer2) {
    return buffer2 === "." || buffer2.toLowerCase() === "%2e";
  }
  function isDoubleDot(buffer2) {
    buffer2 = buffer2.toLowerCase();
    return buffer2 === ".." || buffer2 === "%2e." || buffer2 === ".%2e" || buffer2 === "%2e%2e";
  }
  function isWindowsDriveLetterCodePoints(cp1, cp2) {
    return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
  }
  function isWindowsDriveLetterString(string2) {
    return string2.length === 2 && isASCIIAlpha(string2.codePointAt(0)) && (string2[1] === ":" || string2[1] === "|");
  }
  function isNormalizedWindowsDriveLetterString(string2) {
    return string2.length === 2 && isASCIIAlpha(string2.codePointAt(0)) && string2[1] === ":";
  }
  function containsForbiddenHostCodePoint(string2) {
    return string2.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function containsForbiddenHostCodePointExcludingPercent(string2) {
    return string2.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function isSpecialScheme(scheme) {
    return specialSchemes[scheme] !== void 0;
  }
  function isSpecial(url) {
    return isSpecialScheme(url.scheme);
  }
  function defaultPort(scheme) {
    return specialSchemes[scheme];
  }
  function percentEncode(c) {
    let hex = c.toString(16).toUpperCase();
    if (hex.length === 1) {
      hex = "0" + hex;
    }
    return "%" + hex;
  }
  function utf8PercentEncode(c) {
    const buf = new Buffer(c);
    let str2 = "";
    for (let i = 0; i < buf.length; ++i) {
      str2 += percentEncode(buf[i]);
    }
    return str2;
  }
  function utf8PercentDecode(str2) {
    const input = new Buffer(str2);
    const output2 = [];
    for (let i = 0; i < input.length; ++i) {
      if (input[i] !== 37) {
        output2.push(input[i]);
      } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
        output2.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
        i += 2;
      } else {
        output2.push(input[i]);
      }
    }
    return new Buffer(output2).toString();
  }
  function isC0ControlPercentEncode(c) {
    return c <= 31 || c > 126;
  }
  const extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
  function isPathPercentEncode(c) {
    return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
  }
  const extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
  function isUserinfoPercentEncode(c) {
    return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
  }
  function percentEncodeChar(c, encodeSetPredicate) {
    const cStr = String.fromCodePoint(c);
    if (encodeSetPredicate(c)) {
      return utf8PercentEncode(cStr);
    }
    return cStr;
  }
  function parseIPv4Number(input) {
    let R = 10;
    if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
      input = input.substring(2);
      R = 16;
    } else if (input.length >= 2 && input.charAt(0) === "0") {
      input = input.substring(1);
      R = 8;
    }
    if (input === "") {
      return 0;
    }
    const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
    if (regex.test(input)) {
      return failure;
    }
    return parseInt(input, R);
  }
  function parseIPv4(input) {
    const parts = input.split(".");
    if (parts[parts.length - 1] === "") {
      if (parts.length > 1) {
        parts.pop();
      }
    }
    if (parts.length > 4) {
      return input;
    }
    const numbers = [];
    for (const part of parts) {
      if (part === "") {
        return input;
      }
      const n = parseIPv4Number(part);
      if (n === failure) {
        return input;
      }
      numbers.push(n);
    }
    for (let i = 0; i < numbers.length - 1; ++i) {
      if (numbers[i] > 255) {
        return failure;
      }
    }
    if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
      return failure;
    }
    let ipv4 = numbers.pop();
    let counter = 0;
    for (const n of numbers) {
      ipv4 += n * Math.pow(256, 3 - counter);
      ++counter;
    }
    return ipv4;
  }
  function serializeIPv4(address) {
    let output2 = "";
    let n = address;
    for (let i = 1; i <= 4; ++i) {
      output2 = String(n % 256) + output2;
      if (i !== 4) {
        output2 = "." + output2;
      }
      n = Math.floor(n / 256);
    }
    return output2;
  }
  function parseIPv6(input) {
    const address = [0, 0, 0, 0, 0, 0, 0, 0];
    let pieceIndex = 0;
    let compress = null;
    let pointer = 0;
    input = punycode2.ucs2.decode(input);
    if (input[pointer] === 58) {
      if (input[pointer + 1] !== 58) {
        return failure;
      }
      pointer += 2;
      ++pieceIndex;
      compress = pieceIndex;
    }
    while (pointer < input.length) {
      if (pieceIndex === 8) {
        return failure;
      }
      if (input[pointer] === 58) {
        if (compress !== null) {
          return failure;
        }
        ++pointer;
        ++pieceIndex;
        compress = pieceIndex;
        continue;
      }
      let value2 = 0;
      let length = 0;
      while (length < 4 && isASCIIHex(input[pointer])) {
        value2 = value2 * 16 + parseInt(at(input, pointer), 16);
        ++pointer;
        ++length;
      }
      if (input[pointer] === 46) {
        if (length === 0) {
          return failure;
        }
        pointer -= length;
        if (pieceIndex > 6) {
          return failure;
        }
        let numbersSeen = 0;
        while (input[pointer] !== void 0) {
          let ipv4Piece = null;
          if (numbersSeen > 0) {
            if (input[pointer] === 46 && numbersSeen < 4) {
              ++pointer;
            } else {
              return failure;
            }
          }
          if (!isASCIIDigit(input[pointer])) {
            return failure;
          }
          while (isASCIIDigit(input[pointer])) {
            const number = parseInt(at(input, pointer));
            if (ipv4Piece === null) {
              ipv4Piece = number;
            } else if (ipv4Piece === 0) {
              return failure;
            } else {
              ipv4Piece = ipv4Piece * 10 + number;
            }
            if (ipv4Piece > 255) {
              return failure;
            }
            ++pointer;
          }
          address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
          ++numbersSeen;
          if (numbersSeen === 2 || numbersSeen === 4) {
            ++pieceIndex;
          }
        }
        if (numbersSeen !== 4) {
          return failure;
        }
        break;
      } else if (input[pointer] === 58) {
        ++pointer;
        if (input[pointer] === void 0) {
          return failure;
        }
      } else if (input[pointer] !== void 0) {
        return failure;
      }
      address[pieceIndex] = value2;
      ++pieceIndex;
    }
    if (compress !== null) {
      let swaps = pieceIndex - compress;
      pieceIndex = 7;
      while (pieceIndex !== 0 && swaps > 0) {
        const temp = address[compress + swaps - 1];
        address[compress + swaps - 1] = address[pieceIndex];
        address[pieceIndex] = temp;
        --pieceIndex;
        --swaps;
      }
    } else if (compress === null && pieceIndex !== 8) {
      return failure;
    }
    return address;
  }
  function serializeIPv6(address) {
    let output2 = "";
    const seqResult = findLongestZeroSequence(address);
    const compress = seqResult.idx;
    let ignore0 = false;
    for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
      if (ignore0 && address[pieceIndex] === 0) {
        continue;
      } else if (ignore0) {
        ignore0 = false;
      }
      if (compress === pieceIndex) {
        const separator = pieceIndex === 0 ? "::" : ":";
        output2 += separator;
        ignore0 = true;
        continue;
      }
      output2 += address[pieceIndex].toString(16);
      if (pieceIndex !== 7) {
        output2 += ":";
      }
    }
    return output2;
  }
  function parseHost(input, isSpecialArg) {
    if (input[0] === "[") {
      if (input[input.length - 1] !== "]") {
        return failure;
      }
      return parseIPv6(input.substring(1, input.length - 1));
    }
    if (!isSpecialArg) {
      return parseOpaqueHost(input);
    }
    const domain2 = utf8PercentDecode(input);
    const asciiDomain = tr46$1.toASCII(domain2, false, tr46$1.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
    if (asciiDomain === null) {
      return failure;
    }
    if (containsForbiddenHostCodePoint(asciiDomain)) {
      return failure;
    }
    const ipv4Host = parseIPv4(asciiDomain);
    if (typeof ipv4Host === "number" || ipv4Host === failure) {
      return ipv4Host;
    }
    return asciiDomain;
  }
  function parseOpaqueHost(input) {
    if (containsForbiddenHostCodePointExcludingPercent(input)) {
      return failure;
    }
    let output2 = "";
    const decoded = punycode2.ucs2.decode(input);
    for (let i = 0; i < decoded.length; ++i) {
      output2 += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
    }
    return output2;
  }
  function findLongestZeroSequence(arr) {
    let maxIdx = null;
    let maxLen = 1;
    let currStart = null;
    let currLen = 0;
    for (let i = 0; i < arr.length; ++i) {
      if (arr[i] !== 0) {
        if (currLen > maxLen) {
          maxIdx = currStart;
          maxLen = currLen;
        }
        currStart = null;
        currLen = 0;
      } else {
        if (currStart === null) {
          currStart = i;
        }
        ++currLen;
      }
    }
    if (currLen > maxLen) {
      maxIdx = currStart;
      maxLen = currLen;
    }
    return {
      idx: maxIdx,
      len: maxLen
    };
  }
  function serializeHost(host) {
    if (typeof host === "number") {
      return serializeIPv4(host);
    }
    if (host instanceof Array) {
      return "[" + serializeIPv6(host) + "]";
    }
    return host;
  }
  function trimControlChars(url) {
    return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
  }
  function trimTabAndNewline(url) {
    return url.replace(/\u0009|\u000A|\u000D/g, "");
  }
  function shortenPath(url) {
    const path2 = url.path;
    if (path2.length === 0) {
      return;
    }
    if (url.scheme === "file" && path2.length === 1 && isNormalizedWindowsDriveLetter(path2[0])) {
      return;
    }
    path2.pop();
  }
  function includesCredentials(url) {
    return url.username !== "" || url.password !== "";
  }
  function cannotHaveAUsernamePasswordPort(url) {
    return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
  }
  function isNormalizedWindowsDriveLetter(string2) {
    return /^[A-Za-z]:$/.test(string2);
  }
  function URLStateMachine(input, base2, encodingOverride, url, stateOverride) {
    this.pointer = 0;
    this.input = input;
    this.base = base2 || null;
    this.encodingOverride = encodingOverride || "utf-8";
    this.stateOverride = stateOverride;
    this.url = url;
    this.failure = false;
    this.parseError = false;
    if (!this.url) {
      this.url = {
        scheme: "",
        username: "",
        password: "",
        host: null,
        port: null,
        path: [],
        query: null,
        fragment: null,
        cannotBeABaseURL: false
      };
      const res2 = trimControlChars(this.input);
      if (res2 !== this.input) {
        this.parseError = true;
      }
      this.input = res2;
    }
    const res = trimTabAndNewline(this.input);
    if (res !== this.input) {
      this.parseError = true;
    }
    this.input = res;
    this.state = stateOverride || "scheme start";
    this.buffer = "";
    this.atFlag = false;
    this.arrFlag = false;
    this.passwordTokenSeenFlag = false;
    this.input = punycode2.ucs2.decode(this.input);
    for (; this.pointer <= this.input.length; ++this.pointer) {
      const c = this.input[this.pointer];
      const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
      const ret = this["parse " + this.state](c, cStr);
      if (!ret) {
        break;
      } else if (ret === failure) {
        this.failure = true;
        break;
      }
    }
  }
  URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
    if (isASCIIAlpha(c)) {
      this.buffer += cStr.toLowerCase();
      this.state = "scheme";
    } else if (!this.stateOverride) {
      this.state = "no scheme";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
    if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
      this.buffer += cStr.toLowerCase();
    } else if (c === 58) {
      if (this.stateOverride) {
        if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
          return false;
        }
        if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
          return false;
        }
        if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
          return false;
        }
        if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
          return false;
        }
      }
      this.url.scheme = this.buffer;
      this.buffer = "";
      if (this.stateOverride) {
        return false;
      }
      if (this.url.scheme === "file") {
        if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
          this.parseError = true;
        }
        this.state = "file";
      } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
        this.state = "special relative or authority";
      } else if (isSpecial(this.url)) {
        this.state = "special authority slashes";
      } else if (this.input[this.pointer + 1] === 47) {
        this.state = "path or authority";
        ++this.pointer;
      } else {
        this.url.cannotBeABaseURL = true;
        this.url.path.push("");
        this.state = "cannot-be-a-base-URL path";
      }
    } else if (!this.stateOverride) {
      this.buffer = "";
      this.state = "no scheme";
      this.pointer = -1;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
    if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
      return failure;
    } else if (this.base.cannotBeABaseURL && c === 35) {
      this.url.scheme = this.base.scheme;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.url.cannotBeABaseURL = true;
      this.state = "fragment";
    } else if (this.base.scheme === "file") {
      this.state = "file";
      --this.pointer;
    } else {
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
    if (c === 47) {
      this.state = "authority";
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
    this.url.scheme = this.base.scheme;
    if (isNaN(c)) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
    } else if (c === 47) {
      this.state = "relative slash";
    } else if (c === 63) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.state = "fragment";
    } else if (isSpecial(this.url) && c === 92) {
      this.parseError = true;
      this.state = "relative slash";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice(0, this.base.path.length - 1);
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
    if (isSpecial(this.url) && (c === 47 || c === 92)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "special authority ignore slashes";
    } else if (c === 47) {
      this.state = "authority";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "special authority ignore slashes";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
    if (c !== 47 && c !== 92) {
      this.state = "authority";
      --this.pointer;
    } else {
      this.parseError = true;
    }
    return true;
  };
  URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
    if (c === 64) {
      this.parseError = true;
      if (this.atFlag) {
        this.buffer = "%40" + this.buffer;
      }
      this.atFlag = true;
      const len = countSymbols2(this.buffer);
      for (let pointer = 0; pointer < len; ++pointer) {
        const codePoint = this.buffer.codePointAt(pointer);
        if (codePoint === 58 && !this.passwordTokenSeenFlag) {
          this.passwordTokenSeenFlag = true;
          continue;
        }
        const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
        if (this.passwordTokenSeenFlag) {
          this.url.password += encodedCodePoints;
        } else {
          this.url.username += encodedCodePoints;
        }
      }
      this.buffer = "";
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
      if (this.atFlag && this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      this.pointer -= countSymbols2(this.buffer) + 1;
      this.buffer = "";
      this.state = "host";
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
    if (this.stateOverride && this.url.scheme === "file") {
      --this.pointer;
      this.state = "file host";
    } else if (c === 58 && !this.arrFlag) {
      if (this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      const host = parseHost(this.buffer, isSpecial(this.url));
      if (host === failure) {
        return failure;
      }
      this.url.host = host;
      this.buffer = "";
      this.state = "port";
      if (this.stateOverride === "hostname") {
        return false;
      }
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
      --this.pointer;
      if (isSpecial(this.url) && this.buffer === "") {
        this.parseError = true;
        return failure;
      } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
        this.parseError = true;
        return false;
      }
      const host = parseHost(this.buffer, isSpecial(this.url));
      if (host === failure) {
        return failure;
      }
      this.url.host = host;
      this.buffer = "";
      this.state = "path start";
      if (this.stateOverride) {
        return false;
      }
    } else {
      if (c === 91) {
        this.arrFlag = true;
      } else if (c === 93) {
        this.arrFlag = false;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
    if (isASCIIDigit(c)) {
      this.buffer += cStr;
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
      if (this.buffer !== "") {
        const port = parseInt(this.buffer);
        if (port > Math.pow(2, 16) - 1) {
          this.parseError = true;
          return failure;
        }
        this.url.port = port === defaultPort(this.url.scheme) ? null : port;
        this.buffer = "";
      }
      if (this.stateOverride) {
        return false;
      }
      this.state = "path start";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  const fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
  URLStateMachine.prototype["parse file"] = function parseFile(c) {
    this.url.scheme = "file";
    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file slash";
    } else if (this.base !== null && this.base.scheme === "file") {
      if (isNaN(c)) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 63) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
        !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
        !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          shortenPath(this.url);
        } else {
          this.parseError = true;
        }
        this.state = "path";
        --this.pointer;
      }
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file host";
    } else {
      if (this.base !== null && this.base.scheme === "file") {
        if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
          this.url.path.push(this.base.path[0]);
        } else {
          this.url.host = this.base.host;
        }
      }
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
    if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
      --this.pointer;
      if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
        this.parseError = true;
        this.state = "path";
      } else if (this.buffer === "") {
        this.url.host = "";
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
      } else {
        let host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        if (host === "localhost") {
          host = "";
        }
        this.url.host = host;
        if (this.stateOverride) {
          return false;
        }
        this.buffer = "";
        this.state = "path start";
      }
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
    if (isSpecial(this.url)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "path";
      if (c !== 47 && c !== 92) {
        --this.pointer;
      }
    } else if (!this.stateOverride && c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (!this.stateOverride && c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else if (c !== void 0) {
      this.state = "path";
      if (c !== 47) {
        --this.pointer;
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse path"] = function parsePath(c) {
    if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
      if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
      }
      if (isDoubleDot(this.buffer)) {
        shortenPath(this.url);
        if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        }
      } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
        this.url.path.push("");
      } else if (!isSingleDot(this.buffer)) {
        if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
          if (this.url.host !== "" && this.url.host !== null) {
            this.parseError = true;
            this.url.host = "";
          }
          this.buffer = this.buffer[0] + ":";
        }
        this.url.path.push(this.buffer);
      }
      this.buffer = "";
      if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
        while (this.url.path.length > 1 && this.url.path[0] === "") {
          this.parseError = true;
          this.url.path.shift();
        }
      }
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      }
      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += percentEncodeChar(c, isPathPercentEncode);
    }
    return true;
  };
  URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
    if (c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else {
      if (!isNaN(c) && c !== 37) {
        this.parseError = true;
      }
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      if (!isNaN(c)) {
        this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
    if (isNaN(c) || !this.stateOverride && c === 35) {
      if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
        this.encodingOverride = "utf-8";
      }
      const buffer2 = new Buffer(this.buffer);
      for (let i = 0; i < buffer2.length; ++i) {
        if (buffer2[i] < 33 || buffer2[i] > 126 || buffer2[i] === 34 || buffer2[i] === 35 || buffer2[i] === 60 || buffer2[i] === 62) {
          this.url.query += percentEncode(buffer2[i]);
        } else {
          this.url.query += String.fromCodePoint(buffer2[i]);
        }
      }
      this.buffer = "";
      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
    if (isNaN(c))
      ;
    else if (c === 0) {
      this.parseError = true;
    } else {
      if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
    }
    return true;
  };
  function serializeURL(url, excludeFragment) {
    let output2 = url.scheme + ":";
    if (url.host !== null) {
      output2 += "//";
      if (url.username !== "" || url.password !== "") {
        output2 += url.username;
        if (url.password !== "") {
          output2 += ":" + url.password;
        }
        output2 += "@";
      }
      output2 += serializeHost(url.host);
      if (url.port !== null) {
        output2 += ":" + url.port;
      }
    } else if (url.host === null && url.scheme === "file") {
      output2 += "//";
    }
    if (url.cannotBeABaseURL) {
      output2 += url.path[0];
    } else {
      for (const string2 of url.path) {
        output2 += "/" + string2;
      }
    }
    if (url.query !== null) {
      output2 += "?" + url.query;
    }
    if (!excludeFragment && url.fragment !== null) {
      output2 += "#" + url.fragment;
    }
    return output2;
  }
  function serializeOrigin(tuple) {
    let result = tuple.scheme + "://";
    result += serializeHost(tuple.host);
    if (tuple.port !== null) {
      result += ":" + tuple.port;
    }
    return result;
  }
  module.exports.serializeURL = serializeURL;
  module.exports.serializeURLOrigin = function(url) {
    switch (url.scheme) {
      case "blob":
        try {
          return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
        } catch (e) {
          return "null";
        }
      case "ftp":
      case "gopher":
      case "http":
      case "https":
      case "ws":
      case "wss":
        return serializeOrigin({
          scheme: url.scheme,
          host: url.host,
          port: url.port
        });
      case "file":
        return "file://";
      default:
        return "null";
    }
  };
  module.exports.basicURLParse = function(input, options) {
    if (options === void 0) {
      options = {};
    }
    const usm2 = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
    if (usm2.failure) {
      return "failure";
    }
    return usm2.url;
  };
  module.exports.setTheUsername = function(url, username) {
    url.username = "";
    const decoded = punycode2.ucs2.decode(username);
    for (let i = 0; i < decoded.length; ++i) {
      url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
  };
  module.exports.setThePassword = function(url, password) {
    url.password = "";
    const decoded = punycode2.ucs2.decode(password);
    for (let i = 0; i < decoded.length; ++i) {
      url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
  };
  module.exports.serializeHost = serializeHost;
  module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
  module.exports.serializeInteger = function(integer) {
    return String(integer);
  };
  module.exports.parseURL = function(input, options) {
    if (options === void 0) {
      options = {};
    }
    return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
  };
})(urlStateMachine);
var urlStateMachineExports = urlStateMachine.exports;
const usm = urlStateMachineExports;
URLImpl.implementation = class URLImpl2 {
  constructor(constructorArgs) {
    const url = constructorArgs[0];
    const base2 = constructorArgs[1];
    let parsedBase = null;
    if (base2 !== void 0) {
      parsedBase = usm.basicURLParse(base2);
      if (parsedBase === "failure") {
        throw new TypeError("Invalid base URL");
      }
    }
    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }
    this._url = parsedURL;
  }
  get href() {
    return usm.serializeURL(this._url);
  }
  set href(v) {
    const parsedURL = usm.basicURLParse(v);
    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }
    this._url = parsedURL;
  }
  get origin() {
    return usm.serializeURLOrigin(this._url);
  }
  get protocol() {
    return this._url.scheme + ":";
  }
  set protocol(v) {
    usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
  }
  get username() {
    return this._url.username;
  }
  set username(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }
    usm.setTheUsername(this._url, v);
  }
  get password() {
    return this._url.password;
  }
  set password(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }
    usm.setThePassword(this._url, v);
  }
  get host() {
    const url = this._url;
    if (url.host === null) {
      return "";
    }
    if (url.port === null) {
      return usm.serializeHost(url.host);
    }
    return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
  }
  set host(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }
    usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
  }
  get hostname() {
    if (this._url.host === null) {
      return "";
    }
    return usm.serializeHost(this._url.host);
  }
  set hostname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }
    usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
  }
  get port() {
    if (this._url.port === null) {
      return "";
    }
    return usm.serializeInteger(this._url.port);
  }
  set port(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }
    if (v === "") {
      this._url.port = null;
    } else {
      usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
    }
  }
  get pathname() {
    if (this._url.cannotBeABaseURL) {
      return this._url.path[0];
    }
    if (this._url.path.length === 0) {
      return "";
    }
    return "/" + this._url.path.join("/");
  }
  set pathname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }
    this._url.path = [];
    usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
  }
  get search() {
    if (this._url.query === null || this._url.query === "") {
      return "";
    }
    return "?" + this._url.query;
  }
  set search(v) {
    const url = this._url;
    if (v === "") {
      url.query = null;
      return;
    }
    const input = v[0] === "?" ? v.substring(1) : v;
    url.query = "";
    usm.basicURLParse(input, { url, stateOverride: "query" });
  }
  get hash() {
    if (this._url.fragment === null || this._url.fragment === "") {
      return "";
    }
    return "#" + this._url.fragment;
  }
  set hash(v) {
    if (v === "") {
      this._url.fragment = null;
      return;
    }
    const input = v[0] === "#" ? v.substring(1) : v;
    this._url.fragment = "";
    usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
  }
  toJSON() {
    return this.href;
  }
};
(function(module) {
  const conversions2 = lib$1;
  const utils2 = utilsExports;
  const Impl = URLImpl;
  const impl = utils2.implSymbol;
  function URL2(url) {
    if (!this || this[impl] || !(this instanceof URL2)) {
      throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
    }
    if (arguments.length < 1) {
      throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
    }
    const args = [];
    for (let i = 0; i < arguments.length && i < 2; ++i) {
      args[i] = arguments[i];
    }
    args[0] = conversions2["USVString"](args[0]);
    if (args[1] !== void 0) {
      args[1] = conversions2["USVString"](args[1]);
    }
    module.exports.setup(this, args);
  }
  URL2.prototype.toJSON = function toJSON() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }
    const args = [];
    for (let i = 0; i < arguments.length && i < 0; ++i) {
      args[i] = arguments[i];
    }
    return this[impl].toJSON.apply(this[impl], args);
  };
  Object.defineProperty(URL2.prototype, "href", {
    get() {
      return this[impl].href;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].href = V;
    },
    enumerable: true,
    configurable: true
  });
  URL2.prototype.toString = function() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }
    return this.href;
  };
  Object.defineProperty(URL2.prototype, "origin", {
    get() {
      return this[impl].origin;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "protocol", {
    get() {
      return this[impl].protocol;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].protocol = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "username", {
    get() {
      return this[impl].username;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].username = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "password", {
    get() {
      return this[impl].password;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].password = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "host", {
    get() {
      return this[impl].host;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].host = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "hostname", {
    get() {
      return this[impl].hostname;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].hostname = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "port", {
    get() {
      return this[impl].port;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].port = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "pathname", {
    get() {
      return this[impl].pathname;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].pathname = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "search", {
    get() {
      return this[impl].search;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].search = V;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(URL2.prototype, "hash", {
    get() {
      return this[impl].hash;
    },
    set(V) {
      V = conversions2["USVString"](V);
      this[impl].hash = V;
    },
    enumerable: true,
    configurable: true
  });
  module.exports = {
    is(obj) {
      return !!obj && obj[impl] instanceof Impl.implementation;
    },
    create(constructorArgs, privateData) {
      let obj = Object.create(URL2.prototype);
      this.setup(obj, constructorArgs, privateData);
      return obj;
    },
    setup(obj, constructorArgs, privateData) {
      if (!privateData)
        privateData = {};
      privateData.wrapper = obj;
      obj[impl] = new Impl.implementation(constructorArgs, privateData);
      obj[impl][utils2.wrapperSymbol] = obj;
    },
    interface: URL2,
    expose: {
      Window: { URL: URL2 },
      Worker: { URL: URL2 }
    }
  };
})(URL$2);
var URLExports = URL$2.exports;
publicApi.URL = URLExports.interface;
publicApi.serializeURL = urlStateMachineExports.serializeURL;
publicApi.serializeURLOrigin = urlStateMachineExports.serializeURLOrigin;
publicApi.basicURLParse = urlStateMachineExports.basicURLParse;
publicApi.setTheUsername = urlStateMachineExports.setTheUsername;
publicApi.setThePassword = urlStateMachineExports.setThePassword;
publicApi.serializeHost = urlStateMachineExports.serializeHost;
publicApi.serializeInteger = urlStateMachineExports.serializeInteger;
publicApi.parseURL = urlStateMachineExports.parseURL;
const Readable = Stream.Readable;
const BUFFER = Symbol("buffer");
const TYPE = Symbol("type");
class Blob {
  constructor() {
    this[TYPE] = "";
    const blobParts = arguments[0];
    const options = arguments[1];
    const buffers = [];
    let size = 0;
    if (blobParts) {
      const a = blobParts;
      const length = Number(a.length);
      for (let i = 0; i < length; i++) {
        const element = a[i];
        let buffer2;
        if (element instanceof Buffer) {
          buffer2 = element;
        } else if (ArrayBuffer.isView(element)) {
          buffer2 = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
        } else if (element instanceof ArrayBuffer) {
          buffer2 = Buffer.from(element);
        } else if (element instanceof Blob) {
          buffer2 = element[BUFFER];
        } else {
          buffer2 = Buffer.from(typeof element === "string" ? element : String(element));
        }
        size += buffer2.length;
        buffers.push(buffer2);
      }
    }
    this[BUFFER] = Buffer.concat(buffers);
    let type2 = options && options.type !== void 0 && String(options.type).toLowerCase();
    if (type2 && !/[^\u0020-\u007E]/.test(type2)) {
      this[TYPE] = type2;
    }
  }
  get size() {
    return this[BUFFER].length;
  }
  get type() {
    return this[TYPE];
  }
  text() {
    return Promise.resolve(this[BUFFER].toString());
  }
  arrayBuffer() {
    const buf = this[BUFFER];
    const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    return Promise.resolve(ab);
  }
  stream() {
    const readable = new Readable();
    readable._read = function() {
    };
    readable.push(this[BUFFER]);
    readable.push(null);
    return readable;
  }
  toString() {
    return "[object Blob]";
  }
  slice() {
    const size = this.size;
    const start = arguments[0];
    const end = arguments[1];
    let relativeStart, relativeEnd;
    if (start === void 0) {
      relativeStart = 0;
    } else if (start < 0) {
      relativeStart = Math.max(size + start, 0);
    } else {
      relativeStart = Math.min(start, size);
    }
    if (end === void 0) {
      relativeEnd = size;
    } else if (end < 0) {
      relativeEnd = Math.max(size + end, 0);
    } else {
      relativeEnd = Math.min(end, size);
    }
    const span = Math.max(relativeEnd - relativeStart, 0);
    const buffer2 = this[BUFFER];
    const slicedBuffer = buffer2.slice(relativeStart, relativeStart + span);
    const blob = new Blob([], { type: arguments[2] });
    blob[BUFFER] = slicedBuffer;
    return blob;
  }
}
Object.defineProperties(Blob.prototype, {
  size: { enumerable: true },
  type: { enumerable: true },
  slice: { enumerable: true }
});
Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
  value: "Blob",
  writable: false,
  enumerable: false,
  configurable: true
});
function FetchError(message, type2, systemError) {
  Error.call(this, message);
  this.message = message;
  this.type = type2;
  if (systemError) {
    this.code = this.errno = systemError.code;
  }
  Error.captureStackTrace(this, this.constructor);
}
FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = "FetchError";
let convert$2;
try {
  convert$2 = require("encoding").convert;
} catch (e) {
}
const INTERNALS = Symbol("Body internals");
const PassThrough = Stream.PassThrough;
function Body(body) {
  var _this = this;
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
  let size = _ref$size === void 0 ? 0 : _ref$size;
  var _ref$timeout = _ref.timeout;
  let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
  if (body == null) {
    body = null;
  } else if (isURLSearchParams(body)) {
    body = Buffer.from(body.toString());
  } else if (isBlob(body))
    ;
  else if (Buffer.isBuffer(body))
    ;
  else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    body = Buffer.from(body);
  } else if (ArrayBuffer.isView(body)) {
    body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
  } else if (body instanceof Stream)
    ;
  else {
    body = Buffer.from(String(body));
  }
  this[INTERNALS] = {
    body,
    disturbed: false,
    error: null
  };
  this.size = size;
  this.timeout = timeout;
  if (body instanceof Stream) {
    body.on("error", function(err) {
      const error2 = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
      _this[INTERNALS].error = error2;
    });
  }
}
Body.prototype = {
  get body() {
    return this[INTERNALS].body;
  },
  get bodyUsed() {
    return this[INTERNALS].disturbed;
  },
  /**
   * Decode response as ArrayBuffer
   *
   * @return  Promise
   */
  arrayBuffer() {
    return consumeBody.call(this).then(function(buf) {
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    });
  },
  /**
   * Return raw response as Blob
   *
   * @return Promise
   */
  blob() {
    let ct = this.headers && this.headers.get("content-type") || "";
    return consumeBody.call(this).then(function(buf) {
      return Object.assign(
        // Prevent copying
        new Blob([], {
          type: ct.toLowerCase()
        }),
        {
          [BUFFER]: buf
        }
      );
    });
  },
  /**
   * Decode response as json
   *
   * @return  Promise
   */
  json() {
    var _this2 = this;
    return consumeBody.call(this).then(function(buffer2) {
      try {
        return JSON.parse(buffer2.toString());
      } catch (err) {
        return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
      }
    });
  },
  /**
   * Decode response as text
   *
   * @return  Promise
   */
  text() {
    return consumeBody.call(this).then(function(buffer2) {
      return buffer2.toString();
    });
  },
  /**
   * Decode response as buffer (non-spec api)
   *
   * @return  Promise
   */
  buffer() {
    return consumeBody.call(this);
  },
  /**
   * Decode response as text, while automatically detecting the encoding and
   * trying to decode to UTF-8 (non-spec api)
   *
   * @return  Promise
   */
  textConverted() {
    var _this3 = this;
    return consumeBody.call(this).then(function(buffer2) {
      return convertBody(buffer2, _this3.headers);
    });
  }
};
Object.defineProperties(Body.prototype, {
  body: { enumerable: true },
  bodyUsed: { enumerable: true },
  arrayBuffer: { enumerable: true },
  blob: { enumerable: true },
  json: { enumerable: true },
  text: { enumerable: true }
});
Body.mixIn = function(proto) {
  for (const name of Object.getOwnPropertyNames(Body.prototype)) {
    if (!(name in proto)) {
      const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
      Object.defineProperty(proto, name, desc);
    }
  }
};
function consumeBody() {
  var _this4 = this;
  if (this[INTERNALS].disturbed) {
    return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  }
  this[INTERNALS].disturbed = true;
  if (this[INTERNALS].error) {
    return Body.Promise.reject(this[INTERNALS].error);
  }
  let body = this.body;
  if (body === null) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }
  if (isBlob(body)) {
    body = body.stream();
  }
  if (Buffer.isBuffer(body)) {
    return Body.Promise.resolve(body);
  }
  if (!(body instanceof Stream)) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }
  let accum = [];
  let accumBytes = 0;
  let abort = false;
  return new Body.Promise(function(resolve, reject) {
    let resTimeout;
    if (_this4.timeout) {
      resTimeout = setTimeout(function() {
        abort = true;
        reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
      }, _this4.timeout);
    }
    body.on("error", function(err) {
      if (err.name === "AbortError") {
        abort = true;
        reject(err);
      } else {
        reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
      }
    });
    body.on("data", function(chunk) {
      if (abort || chunk === null) {
        return;
      }
      if (_this4.size && accumBytes + chunk.length > _this4.size) {
        abort = true;
        reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
        return;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    });
    body.on("end", function() {
      if (abort) {
        return;
      }
      clearTimeout(resTimeout);
      try {
        resolve(Buffer.concat(accum, accumBytes));
      } catch (err) {
        reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
      }
    });
  });
}
function convertBody(buffer2, headers) {
  if (typeof convert$2 !== "function") {
    throw new Error("The package `encoding` must be installed to use the textConverted() function");
  }
  const ct = headers.get("content-type");
  let charset = "utf-8";
  let res, str2;
  if (ct) {
    res = /charset=([^;]*)/i.exec(ct);
  }
  str2 = buffer2.slice(0, 1024).toString();
  if (!res && str2) {
    res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str2);
  }
  if (!res && str2) {
    res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str2);
    if (!res) {
      res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str2);
      if (res) {
        res.pop();
      }
    }
    if (res) {
      res = /charset=(.*)/i.exec(res.pop());
    }
  }
  if (!res && str2) {
    res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str2);
  }
  if (res) {
    charset = res.pop();
    if (charset === "gb2312" || charset === "gbk") {
      charset = "gb18030";
    }
  }
  return convert$2(buffer2, "UTF-8", charset).toString();
}
function isURLSearchParams(obj) {
  if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
    return false;
  }
  return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
}
function isBlob(obj) {
  return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}
function clone(instance) {
  let p1, p2;
  let body = instance.body;
  if (instance.bodyUsed) {
    throw new Error("cannot clone body after it is used");
  }
  if (body instanceof Stream && typeof body.getBoundary !== "function") {
    p1 = new PassThrough();
    p2 = new PassThrough();
    body.pipe(p1);
    body.pipe(p2);
    instance[INTERNALS].body = p1;
    body = p2;
  }
  return body;
}
function extractContentType(body) {
  if (body === null) {
    return null;
  } else if (typeof body === "string") {
    return "text/plain;charset=UTF-8";
  } else if (isURLSearchParams(body)) {
    return "application/x-www-form-urlencoded;charset=UTF-8";
  } else if (isBlob(body)) {
    return body.type || null;
  } else if (Buffer.isBuffer(body)) {
    return null;
  } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    return null;
  } else if (ArrayBuffer.isView(body)) {
    return null;
  } else if (typeof body.getBoundary === "function") {
    return `multipart/form-data;boundary=${body.getBoundary()}`;
  } else if (body instanceof Stream) {
    return null;
  } else {
    return "text/plain;charset=UTF-8";
  }
}
function getTotalBytes(instance) {
  const body = instance.body;
  if (body === null) {
    return 0;
  } else if (isBlob(body)) {
    return body.size;
  } else if (Buffer.isBuffer(body)) {
    return body.length;
  } else if (body && typeof body.getLengthSync === "function") {
    if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
    body.hasKnownLength && body.hasKnownLength()) {
      return body.getLengthSync();
    }
    return null;
  } else {
    return null;
  }
}
function writeToStream(dest, instance) {
  const body = instance.body;
  if (body === null) {
    dest.end();
  } else if (isBlob(body)) {
    body.stream().pipe(dest);
  } else if (Buffer.isBuffer(body)) {
    dest.write(body);
    dest.end();
  } else {
    body.pipe(dest);
  }
}
Body.Promise = global.Promise;
const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
function validateName(name) {
  name = `${name}`;
  if (invalidTokenRegex.test(name) || name === "") {
    throw new TypeError(`${name} is not a legal HTTP header name`);
  }
}
function validateValue(value2) {
  value2 = `${value2}`;
  if (invalidHeaderCharRegex.test(value2)) {
    throw new TypeError(`${value2} is not a legal HTTP header value`);
  }
}
function find$1(map2, name) {
  name = name.toLowerCase();
  for (const key in map2) {
    if (key.toLowerCase() === name) {
      return key;
    }
  }
  return void 0;
}
const MAP = Symbol("map");
class Headers {
  /**
   * Headers class
   *
   * @param   Object  headers  Response headers
   * @return  Void
   */
  constructor() {
    let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
    this[MAP] = /* @__PURE__ */ Object.create(null);
    if (init instanceof Headers) {
      const rawHeaders = init.raw();
      const headerNames = Object.keys(rawHeaders);
      for (const headerName of headerNames) {
        for (const value2 of rawHeaders[headerName]) {
          this.append(headerName, value2);
        }
      }
      return;
    }
    if (init == null)
      ;
    else if (typeof init === "object") {
      const method = init[Symbol.iterator];
      if (method != null) {
        if (typeof method !== "function") {
          throw new TypeError("Header pairs must be iterable");
        }
        const pairs2 = [];
        for (const pair of init) {
          if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
            throw new TypeError("Each header pair must be iterable");
          }
          pairs2.push(Array.from(pair));
        }
        for (const pair of pairs2) {
          if (pair.length !== 2) {
            throw new TypeError("Each header pair must be a name/value tuple");
          }
          this.append(pair[0], pair[1]);
        }
      } else {
        for (const key of Object.keys(init)) {
          const value2 = init[key];
          this.append(key, value2);
        }
      }
    } else {
      throw new TypeError("Provided initializer must be an object");
    }
  }
  /**
   * Return combined header value given name
   *
   * @param   String  name  Header name
   * @return  Mixed
   */
  get(name) {
    name = `${name}`;
    validateName(name);
    const key = find$1(this[MAP], name);
    if (key === void 0) {
      return null;
    }
    return this[MAP][key].join(", ");
  }
  /**
   * Iterate over all headers
   *
   * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
   * @param   Boolean   thisArg   `this` context for callback function
   * @return  Void
   */
  forEach(callback) {
    let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
    let pairs2 = getHeaders(this);
    let i = 0;
    while (i < pairs2.length) {
      var _pairs$i = pairs2[i];
      const name = _pairs$i[0], value2 = _pairs$i[1];
      callback.call(thisArg, value2, name, this);
      pairs2 = getHeaders(this);
      i++;
    }
  }
  /**
   * Overwrite header values given name
   *
   * @param   String  name   Header name
   * @param   String  value  Header value
   * @return  Void
   */
  set(name, value2) {
    name = `${name}`;
    value2 = `${value2}`;
    validateName(name);
    validateValue(value2);
    const key = find$1(this[MAP], name);
    this[MAP][key !== void 0 ? key : name] = [value2];
  }
  /**
   * Append a value onto existing header
   *
   * @param   String  name   Header name
   * @param   String  value  Header value
   * @return  Void
   */
  append(name, value2) {
    name = `${name}`;
    value2 = `${value2}`;
    validateName(name);
    validateValue(value2);
    const key = find$1(this[MAP], name);
    if (key !== void 0) {
      this[MAP][key].push(value2);
    } else {
      this[MAP][name] = [value2];
    }
  }
  /**
   * Check for header name existence
   *
   * @param   String   name  Header name
   * @return  Boolean
   */
  has(name) {
    name = `${name}`;
    validateName(name);
    return find$1(this[MAP], name) !== void 0;
  }
  /**
   * Delete all header values given name
   *
   * @param   String  name  Header name
   * @return  Void
   */
  delete(name) {
    name = `${name}`;
    validateName(name);
    const key = find$1(this[MAP], name);
    if (key !== void 0) {
      delete this[MAP][key];
    }
  }
  /**
   * Return raw headers (non-spec api)
   *
   * @return  Object
   */
  raw() {
    return this[MAP];
  }
  /**
   * Get an iterator on keys.
   *
   * @return  Iterator
   */
  keys() {
    return createHeadersIterator(this, "key");
  }
  /**
   * Get an iterator on values.
   *
   * @return  Iterator
   */
  values() {
    return createHeadersIterator(this, "value");
  }
  /**
   * Get an iterator on entries.
   *
   * This is the default iterator of the Headers object.
   *
   * @return  Iterator
   */
  [Symbol.iterator]() {
    return createHeadersIterator(this, "key+value");
  }
}
Headers.prototype.entries = Headers.prototype[Symbol.iterator];
Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
  value: "Headers",
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(Headers.prototype, {
  get: { enumerable: true },
  forEach: { enumerable: true },
  set: { enumerable: true },
  append: { enumerable: true },
  has: { enumerable: true },
  delete: { enumerable: true },
  keys: { enumerable: true },
  values: { enumerable: true },
  entries: { enumerable: true }
});
function getHeaders(headers) {
  let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
  const keys2 = Object.keys(headers[MAP]).sort();
  return keys2.map(kind === "key" ? function(k) {
    return k.toLowerCase();
  } : kind === "value" ? function(k) {
    return headers[MAP][k].join(", ");
  } : function(k) {
    return [k.toLowerCase(), headers[MAP][k].join(", ")];
  });
}
const INTERNAL = Symbol("internal");
function createHeadersIterator(target, kind) {
  const iterator2 = Object.create(HeadersIteratorPrototype);
  iterator2[INTERNAL] = {
    target,
    kind,
    index: 0
  };
  return iterator2;
}
const HeadersIteratorPrototype = Object.setPrototypeOf({
  next() {
    if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
      throw new TypeError("Value of `this` is not a HeadersIterator");
    }
    var _INTERNAL = this[INTERNAL];
    const target = _INTERNAL.target, kind = _INTERNAL.kind, index2 = _INTERNAL.index;
    const values = getHeaders(target, kind);
    const len = values.length;
    if (index2 >= len) {
      return {
        value: void 0,
        done: true
      };
    }
    this[INTERNAL].index = index2 + 1;
    return {
      value: values[index2],
      done: false
    };
  }
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
  value: "HeadersIterator",
  writable: false,
  enumerable: false,
  configurable: true
});
function exportNodeCompatibleHeaders(headers) {
  const obj = Object.assign({ __proto__: null }, headers[MAP]);
  const hostHeaderKey = find$1(headers[MAP], "Host");
  if (hostHeaderKey !== void 0) {
    obj[hostHeaderKey] = obj[hostHeaderKey][0];
  }
  return obj;
}
function createHeadersLenient(obj) {
  const headers = new Headers();
  for (const name of Object.keys(obj)) {
    if (invalidTokenRegex.test(name)) {
      continue;
    }
    if (Array.isArray(obj[name])) {
      for (const val of obj[name]) {
        if (invalidHeaderCharRegex.test(val)) {
          continue;
        }
        if (headers[MAP][name] === void 0) {
          headers[MAP][name] = [val];
        } else {
          headers[MAP][name].push(val);
        }
      }
    } else if (!invalidHeaderCharRegex.test(obj[name])) {
      headers[MAP][name] = [obj[name]];
    }
  }
  return headers;
}
const INTERNALS$1 = Symbol("Response internals");
const STATUS_CODES = http$1.STATUS_CODES;
class Response {
  constructor() {
    let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Body.call(this, body, opts);
    const status = opts.status || 200;
    const headers = new Headers(opts.headers);
    if (body != null && !headers.has("Content-Type")) {
      const contentType = extractContentType(body);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    this[INTERNALS$1] = {
      url: opts.url,
      status,
      statusText: opts.statusText || STATUS_CODES[status],
      headers,
      counter: opts.counter
    };
  }
  get url() {
    return this[INTERNALS$1].url || "";
  }
  get status() {
    return this[INTERNALS$1].status;
  }
  /**
   * Convenience property representing if the request ended normally
   */
  get ok() {
    return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
  }
  get redirected() {
    return this[INTERNALS$1].counter > 0;
  }
  get statusText() {
    return this[INTERNALS$1].statusText;
  }
  get headers() {
    return this[INTERNALS$1].headers;
  }
  /**
   * Clone this response
   *
   * @return  Response
   */
  clone() {
    return new Response(clone(this), {
      url: this.url,
      status: this.status,
      statusText: this.statusText,
      headers: this.headers,
      ok: this.ok,
      redirected: this.redirected
    });
  }
}
Body.mixIn(Response.prototype);
Object.defineProperties(Response.prototype, {
  url: { enumerable: true },
  status: { enumerable: true },
  ok: { enumerable: true },
  redirected: { enumerable: true },
  statusText: { enumerable: true },
  headers: { enumerable: true },
  clone: { enumerable: true }
});
Object.defineProperty(Response.prototype, Symbol.toStringTag, {
  value: "Response",
  writable: false,
  enumerable: false,
  configurable: true
});
const INTERNALS$2 = Symbol("Request internals");
const URL$1 = Url.URL || publicApi.URL;
const parse_url = Url.parse;
const format_url = Url.format;
function parseURL(urlStr) {
  if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
    urlStr = new URL$1(urlStr).toString();
  }
  return parse_url(urlStr);
}
const streamDestructionSupported = "destroy" in Stream.Readable.prototype;
function isRequest(input) {
  return typeof input === "object" && typeof input[INTERNALS$2] === "object";
}
function isAbortSignal(signal) {
  const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
  return !!(proto && proto.constructor.name === "AbortSignal");
}
class Request {
  constructor(input) {
    let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let parsedURL;
    if (!isRequest(input)) {
      if (input && input.href) {
        parsedURL = parseURL(input.href);
      } else {
        parsedURL = parseURL(`${input}`);
      }
      input = {};
    } else {
      parsedURL = parseURL(input.url);
    }
    let method = init.method || input.method || "GET";
    method = method.toUpperCase();
    if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
      throw new TypeError("Request with GET/HEAD method cannot have body");
    }
    let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
    Body.call(this, inputBody, {
      timeout: init.timeout || input.timeout || 0,
      size: init.size || input.size || 0
    });
    const headers = new Headers(init.headers || input.headers || {});
    if (inputBody != null && !headers.has("Content-Type")) {
      const contentType = extractContentType(inputBody);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    let signal = isRequest(input) ? input.signal : null;
    if ("signal" in init)
      signal = init.signal;
    if (signal != null && !isAbortSignal(signal)) {
      throw new TypeError("Expected signal to be an instanceof AbortSignal");
    }
    this[INTERNALS$2] = {
      method,
      redirect: init.redirect || input.redirect || "follow",
      headers,
      parsedURL,
      signal
    };
    this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
    this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
    this.counter = init.counter || input.counter || 0;
    this.agent = init.agent || input.agent;
  }
  get method() {
    return this[INTERNALS$2].method;
  }
  get url() {
    return format_url(this[INTERNALS$2].parsedURL);
  }
  get headers() {
    return this[INTERNALS$2].headers;
  }
  get redirect() {
    return this[INTERNALS$2].redirect;
  }
  get signal() {
    return this[INTERNALS$2].signal;
  }
  /**
   * Clone this request
   *
   * @return  Request
   */
  clone() {
    return new Request(this);
  }
}
Body.mixIn(Request.prototype);
Object.defineProperty(Request.prototype, Symbol.toStringTag, {
  value: "Request",
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(Request.prototype, {
  method: { enumerable: true },
  url: { enumerable: true },
  headers: { enumerable: true },
  redirect: { enumerable: true },
  clone: { enumerable: true },
  signal: { enumerable: true }
});
function getNodeRequestOptions(request2) {
  const parsedURL = request2[INTERNALS$2].parsedURL;
  const headers = new Headers(request2[INTERNALS$2].headers);
  if (!headers.has("Accept")) {
    headers.set("Accept", "*/*");
  }
  if (!parsedURL.protocol || !parsedURL.hostname) {
    throw new TypeError("Only absolute URLs are supported");
  }
  if (!/^https?:$/.test(parsedURL.protocol)) {
    throw new TypeError("Only HTTP(S) protocols are supported");
  }
  if (request2.signal && request2.body instanceof Stream.Readable && !streamDestructionSupported) {
    throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
  }
  let contentLengthValue = null;
  if (request2.body == null && /^(POST|PUT)$/i.test(request2.method)) {
    contentLengthValue = "0";
  }
  if (request2.body != null) {
    const totalBytes = getTotalBytes(request2);
    if (typeof totalBytes === "number") {
      contentLengthValue = String(totalBytes);
    }
  }
  if (contentLengthValue) {
    headers.set("Content-Length", contentLengthValue);
  }
  if (!headers.has("User-Agent")) {
    headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
  }
  if (request2.compress && !headers.has("Accept-Encoding")) {
    headers.set("Accept-Encoding", "gzip,deflate");
  }
  let agent = request2.agent;
  if (typeof agent === "function") {
    agent = agent(parsedURL);
  }
  if (!headers.has("Connection") && !agent) {
    headers.set("Connection", "close");
  }
  return Object.assign({}, parsedURL, {
    method: request2.method,
    headers: exportNodeCompatibleHeaders(headers),
    agent
  });
}
function AbortError(message) {
  Error.call(this, message);
  this.type = "aborted";
  this.message = message;
  Error.captureStackTrace(this, this.constructor);
}
AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = "AbortError";
const URL$1$1 = Url.URL || publicApi.URL;
const PassThrough$1 = Stream.PassThrough;
const isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
  const orig = new URL$1$1(original).hostname;
  const dest = new URL$1$1(destination).hostname;
  return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
};
const isSameProtocol = function isSameProtocol2(destination, original) {
  const orig = new URL$1$1(original).protocol;
  const dest = new URL$1$1(destination).protocol;
  return orig === dest;
};
function fetch(url, opts) {
  if (!fetch.Promise) {
    throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
  }
  Body.Promise = fetch.Promise;
  return new fetch.Promise(function(resolve, reject) {
    const request2 = new Request(url, opts);
    const options = getNodeRequestOptions(request2);
    const send = (options.protocol === "https:" ? require$$3$1 : http$1).request;
    const signal = request2.signal;
    let response = null;
    const abort = function abort2() {
      let error2 = new AbortError("The user aborted a request.");
      reject(error2);
      if (request2.body && request2.body instanceof Stream.Readable) {
        destroyStream(request2.body, error2);
      }
      if (!response || !response.body)
        return;
      response.body.emit("error", error2);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = function abortAndFinalize2() {
      abort();
      finalize();
    };
    const req = send(options);
    let reqTimeout;
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    function finalize() {
      req.abort();
      if (signal)
        signal.removeEventListener("abort", abortAndFinalize);
      clearTimeout(reqTimeout);
    }
    if (request2.timeout) {
      req.once("socket", function(socket) {
        reqTimeout = setTimeout(function() {
          reject(new FetchError(`network timeout at: ${request2.url}`, "request-timeout"));
          finalize();
        }, request2.timeout);
      });
    }
    req.on("error", function(err) {
      reject(new FetchError(`request to ${request2.url} failed, reason: ${err.message}`, "system", err));
      if (response && response.body) {
        destroyStream(response.body, err);
      }
      finalize();
    });
    fixResponseChunkedTransferBadEnding(req, function(err) {
      if (signal && signal.aborted) {
        return;
      }
      if (response && response.body) {
        destroyStream(response.body, err);
      }
    });
    if (parseInt(process.version.substring(1)) < 14) {
      req.on("socket", function(s) {
        s.addListener("close", function(hadError) {
          const hasDataListener = s.listenerCount("data") > 0;
          if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
            const err = new Error("Premature close");
            err.code = "ERR_STREAM_PREMATURE_CLOSE";
            response.body.emit("error", err);
          }
        });
      });
    }
    req.on("response", function(res) {
      clearTimeout(reqTimeout);
      const headers = createHeadersLenient(res.headers);
      if (fetch.isRedirect(res.statusCode)) {
        const location = headers.get("Location");
        let locationURL = null;
        try {
          locationURL = location === null ? null : new URL$1$1(location, request2.url).toString();
        } catch (err) {
          if (request2.redirect !== "manual") {
            reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
            finalize();
            return;
          }
        }
        switch (request2.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request2.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            if (locationURL !== null) {
              try {
                headers.set("Location", locationURL);
              } catch (err) {
                reject(err);
              }
            }
            break;
          case "follow":
            if (locationURL === null) {
              break;
            }
            if (request2.counter >= request2.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request2.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOpts = {
              headers: new Headers(request2.headers),
              follow: request2.follow,
              counter: request2.counter + 1,
              agent: request2.agent,
              compress: request2.compress,
              method: request2.method,
              body: request2.body,
              signal: request2.signal,
              timeout: request2.timeout,
              size: request2.size
            };
            if (!isDomainOrSubdomain(request2.url, locationURL) || !isSameProtocol(request2.url, locationURL)) {
              for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                requestOpts.headers.delete(name);
              }
            }
            if (res.statusCode !== 303 && request2.body && getTotalBytes(request2) === null) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request2.method === "POST") {
              requestOpts.method = "GET";
              requestOpts.body = void 0;
              requestOpts.headers.delete("content-length");
            }
            resolve(fetch(new Request(locationURL, requestOpts)));
            finalize();
            return;
        }
      }
      res.once("end", function() {
        if (signal)
          signal.removeEventListener("abort", abortAndFinalize);
      });
      let body = res.pipe(new PassThrough$1());
      const response_options = {
        url: request2.url,
        status: res.statusCode,
        statusText: res.statusMessage,
        headers,
        size: request2.size,
        timeout: request2.timeout,
        counter: request2.counter
      };
      const codings = headers.get("Content-Encoding");
      if (!request2.compress || request2.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
        response = new Response(body, response_options);
        resolve(response);
        return;
      }
      const zlibOptions = {
        flush: zlib.Z_SYNC_FLUSH,
        finishFlush: zlib.Z_SYNC_FLUSH
      };
      if (codings == "gzip" || codings == "x-gzip") {
        body = body.pipe(zlib.createGunzip(zlibOptions));
        response = new Response(body, response_options);
        resolve(response);
        return;
      }
      if (codings == "deflate" || codings == "x-deflate") {
        const raw = res.pipe(new PassThrough$1());
        raw.once("data", function(chunk) {
          if ((chunk[0] & 15) === 8) {
            body = body.pipe(zlib.createInflate());
          } else {
            body = body.pipe(zlib.createInflateRaw());
          }
          response = new Response(body, response_options);
          resolve(response);
        });
        raw.on("end", function() {
          if (!response) {
            response = new Response(body, response_options);
            resolve(response);
          }
        });
        return;
      }
      if (codings == "br" && typeof zlib.createBrotliDecompress === "function") {
        body = body.pipe(zlib.createBrotliDecompress());
        response = new Response(body, response_options);
        resolve(response);
        return;
      }
      response = new Response(body, response_options);
      resolve(response);
    });
    writeToStream(req, request2);
  });
}
function fixResponseChunkedTransferBadEnding(request2, errorCallback) {
  let socket;
  request2.on("socket", function(s) {
    socket = s;
  });
  request2.on("response", function(response) {
    const headers = response.headers;
    if (headers["transfer-encoding"] === "chunked" && !headers["content-length"]) {
      response.once("close", function(hadError) {
        const hasDataListener = socket.listenerCount("data") > 0;
        if (hasDataListener && !hadError) {
          const err = new Error("Premature close");
          err.code = "ERR_STREAM_PREMATURE_CLOSE";
          errorCallback(err);
        }
      });
    }
  });
}
function destroyStream(stream2, err) {
  if (stream2.destroy) {
    stream2.destroy(err);
  } else {
    stream2.emit("error", err);
    stream2.end();
  }
}
fetch.isRedirect = function(code2) {
  return code2 === 301 || code2 === 302 || code2 === 303 || code2 === 307 || code2 === 308;
};
fetch.Promise = global.Promise;
class Deprecation extends Error {
  constructor(message) {
    super(message);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.name = "Deprecation";
  }
}
var once$2 = { exports: {} };
var wrappy_1 = wrappy$1;
function wrappy$1(fn, cb) {
  if (fn && cb)
    return wrappy$1(fn)(cb);
  if (typeof fn !== "function")
    throw new TypeError("need wrapper function");
  Object.keys(fn).forEach(function(k) {
    wrapper[k] = fn[k];
  });
  return wrapper;
  function wrapper() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    var ret = fn.apply(this, args);
    var cb2 = args[args.length - 1];
    if (typeof ret === "function" && ret !== cb2) {
      Object.keys(cb2).forEach(function(k) {
        ret[k] = cb2[k];
      });
    }
    return ret;
  }
}
var wrappy = wrappy_1;
once$2.exports = wrappy(once);
once$2.exports.strict = wrappy(onceStrict);
once.proto = once(function() {
  Object.defineProperty(Function.prototype, "once", {
    value: function() {
      return once(this);
    },
    configurable: true
  });
  Object.defineProperty(Function.prototype, "onceStrict", {
    value: function() {
      return onceStrict(this);
    },
    configurable: true
  });
});
function once(fn) {
  var f = function() {
    if (f.called)
      return f.value;
    f.called = true;
    return f.value = fn.apply(this, arguments);
  };
  f.called = false;
  return f;
}
function onceStrict(fn) {
  var f = function() {
    if (f.called)
      throw new Error(f.onceError);
    f.called = true;
    return f.value = fn.apply(this, arguments);
  };
  var name = fn.name || "Function wrapped with `once`";
  f.onceError = name + " shouldn't be called more than once";
  f.called = false;
  return f;
}
var onceExports = once$2.exports;
const once$1 = /* @__PURE__ */ getDefaultExportFromCjs(onceExports);
const logOnceCode = once$1((deprecation) => console.warn(deprecation));
const logOnceHeaders = once$1((deprecation) => console.warn(deprecation));
class RequestError extends Error {
  constructor(message, statusCode, options) {
    super(message);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.name = "HttpError";
    this.status = statusCode;
    let headers;
    if ("headers" in options && typeof options.headers !== "undefined") {
      headers = options.headers;
    }
    if ("response" in options) {
      this.response = options.response;
      headers = options.response.headers;
    }
    const requestCopy = Object.assign({}, options.request);
    if (options.request.headers.authorization) {
      requestCopy.headers = Object.assign({}, options.request.headers, {
        authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]")
      });
    }
    requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
    this.request = requestCopy;
    Object.defineProperty(this, "code", {
      get() {
        logOnceCode(new Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
        return statusCode;
      }
    });
    Object.defineProperty(this, "headers", {
      get() {
        logOnceHeaders(new Deprecation("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."));
        return headers || {};
      }
    });
  }
}
const VERSION$4 = "5.6.3";
function getBufferResponse(response) {
  return response.arrayBuffer();
}
function fetchWrapper(requestOptions) {
  const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
  if (isPlainObject$2(requestOptions.body) || Array.isArray(requestOptions.body)) {
    requestOptions.body = JSON.stringify(requestOptions.body);
  }
  let headers = {};
  let status;
  let url;
  const fetch$1 = requestOptions.request && requestOptions.request.fetch || fetch;
  return fetch$1(requestOptions.url, Object.assign(
    {
      method: requestOptions.method,
      body: requestOptions.body,
      headers: requestOptions.headers,
      redirect: requestOptions.redirect
    },
    // `requestOptions.request.agent` type is incompatible
    // see https://github.com/octokit/types.ts/pull/264
    requestOptions.request
  )).then(async (response) => {
    url = response.url;
    status = response.status;
    for (const keyAndValue of response.headers) {
      headers[keyAndValue[0]] = keyAndValue[1];
    }
    if ("deprecation" in headers) {
      const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
      const deprecationLink = matches && matches.pop();
      log.warn(`[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`);
    }
    if (status === 204 || status === 205) {
      return;
    }
    if (requestOptions.method === "HEAD") {
      if (status < 400) {
        return;
      }
      throw new RequestError(response.statusText, status, {
        response: {
          url,
          status,
          headers,
          data: void 0
        },
        request: requestOptions
      });
    }
    if (status === 304) {
      throw new RequestError("Not modified", status, {
        response: {
          url,
          status,
          headers,
          data: await getResponseData(response)
        },
        request: requestOptions
      });
    }
    if (status >= 400) {
      const data = await getResponseData(response);
      const error2 = new RequestError(toErrorMessage(data), status, {
        response: {
          url,
          status,
          headers,
          data
        },
        request: requestOptions
      });
      throw error2;
    }
    return getResponseData(response);
  }).then((data) => {
    return {
      status,
      url,
      headers,
      data
    };
  }).catch((error2) => {
    if (error2 instanceof RequestError)
      throw error2;
    throw new RequestError(error2.message, 500, {
      request: requestOptions
    });
  });
}
async function getResponseData(response) {
  const contentType = response.headers.get("content-type");
  if (/application\/json/.test(contentType)) {
    return response.json();
  }
  if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
    return response.text();
  }
  return getBufferResponse(response);
}
function toErrorMessage(data) {
  if (typeof data === "string")
    return data;
  if ("message" in data) {
    if (Array.isArray(data.errors)) {
      return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}`;
    }
    return data.message;
  }
  return `Unknown error: ${JSON.stringify(data)}`;
}
function withDefaults$1(oldEndpoint, newDefaults) {
  const endpoint2 = oldEndpoint.defaults(newDefaults);
  const newApi = function(route, parameters) {
    const endpointOptions = endpoint2.merge(route, parameters);
    if (!endpointOptions.request || !endpointOptions.request.hook) {
      return fetchWrapper(endpoint2.parse(endpointOptions));
    }
    const request2 = (route2, parameters2) => {
      return fetchWrapper(endpoint2.parse(endpoint2.merge(route2, parameters2)));
    };
    Object.assign(request2, {
      endpoint: endpoint2,
      defaults: withDefaults$1.bind(null, endpoint2)
    });
    return endpointOptions.request.hook(request2, endpointOptions);
  };
  return Object.assign(newApi, {
    endpoint: endpoint2,
    defaults: withDefaults$1.bind(null, endpoint2)
  });
}
const request = withDefaults$1(endpoint, {
  headers: {
    "user-agent": `octokit-request.js/${VERSION$4} ${getUserAgent()}`
  }
});
const VERSION$3 = "4.8.0";
function _buildMessageForResponseErrors(data) {
  return `Request failed due to following response errors:
` + data.errors.map((e) => ` - ${e.message}`).join("\n");
}
class GraphqlResponseError extends Error {
  constructor(request2, headers, response) {
    super(_buildMessageForResponseErrors(response));
    this.request = request2;
    this.headers = headers;
    this.response = response;
    this.name = "GraphqlResponseError";
    this.errors = response.errors;
    this.data = response.data;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }
}
const NON_VARIABLE_OPTIONS = [
  "method",
  "baseUrl",
  "url",
  "headers",
  "request",
  "query",
  "mediaType"
];
const FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
const GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
function graphql(request2, query, options) {
  if (options) {
    if (typeof query === "string" && "query" in options) {
      return Promise.reject(new Error(`[@octokit/graphql] "query" cannot be used as variable name`));
    }
    for (const key in options) {
      if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))
        continue;
      return Promise.reject(new Error(`[@octokit/graphql] "${key}" cannot be used as variable name`));
    }
  }
  const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
  const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {
    if (NON_VARIABLE_OPTIONS.includes(key)) {
      result[key] = parsedOptions[key];
      return result;
    }
    if (!result.variables) {
      result.variables = {};
    }
    result.variables[key] = parsedOptions[key];
    return result;
  }, {});
  const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
  }
  return request2(requestOptions).then((response) => {
    if (response.data.errors) {
      const headers = {};
      for (const key of Object.keys(response.headers)) {
        headers[key] = response.headers[key];
      }
      throw new GraphqlResponseError(requestOptions, headers, response.data);
    }
    return response.data.data;
  });
}
function withDefaults(request$1, newDefaults) {
  const newRequest = request$1.defaults(newDefaults);
  const newApi = (query, options) => {
    return graphql(newRequest, query, options);
  };
  return Object.assign(newApi, {
    defaults: withDefaults.bind(null, newRequest),
    endpoint: request.endpoint
  });
}
withDefaults(request, {
  headers: {
    "user-agent": `octokit-graphql.js/${VERSION$3} ${getUserAgent()}`
  },
  method: "POST",
  url: "/graphql"
});
function withCustomRequest(customRequest) {
  return withDefaults(customRequest, {
    method: "POST",
    url: "/graphql"
  });
}
const REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
const REGEX_IS_INSTALLATION = /^ghs_/;
const REGEX_IS_USER_TO_SERVER = /^ghu_/;
async function auth(token) {
  const isApp = token.split(/\./).length === 3;
  const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
  const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
  const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
  return {
    type: "token",
    token,
    tokenType
  };
}
function withAuthorizationPrefix(token) {
  if (token.split(/\./).length === 3) {
    return `bearer ${token}`;
  }
  return `token ${token}`;
}
async function hook(token, request2, route, parameters) {
  const endpoint2 = request2.endpoint.merge(route, parameters);
  endpoint2.headers.authorization = withAuthorizationPrefix(token);
  return request2(endpoint2);
}
const createTokenAuth = function createTokenAuth2(token) {
  if (!token) {
    throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
  }
  if (typeof token !== "string") {
    throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
  }
  token = token.replace(/^(token|bearer) +/i, "");
  return Object.assign(auth.bind(null, token), {
    hook: hook.bind(null, token)
  });
};
const VERSION$2 = "3.6.0";
class Octokit {
  constructor(options = {}) {
    const hook2 = new Collection();
    const requestDefaults = {
      baseUrl: request.endpoint.DEFAULTS.baseUrl,
      headers: {},
      request: Object.assign({}, options.request, {
        // @ts-ignore internal usage only, no need to type
        hook: hook2.bind(null, "request")
      }),
      mediaType: {
        previews: [],
        format: ""
      }
    };
    requestDefaults.headers["user-agent"] = [
      options.userAgent,
      `octokit-core.js/${VERSION$2} ${getUserAgent()}`
    ].filter(Boolean).join(" ");
    if (options.baseUrl) {
      requestDefaults.baseUrl = options.baseUrl;
    }
    if (options.previews) {
      requestDefaults.mediaType.previews = options.previews;
    }
    if (options.timeZone) {
      requestDefaults.headers["time-zone"] = options.timeZone;
    }
    this.request = request.defaults(requestDefaults);
    this.graphql = withCustomRequest(this.request).defaults(requestDefaults);
    this.log = Object.assign({
      debug: () => {
      },
      info: () => {
      },
      warn: console.warn.bind(console),
      error: console.error.bind(console)
    }, options.log);
    this.hook = hook2;
    if (!options.authStrategy) {
      if (!options.auth) {
        this.auth = async () => ({
          type: "unauthenticated"
        });
      } else {
        const auth2 = createTokenAuth(options.auth);
        hook2.wrap("request", auth2.hook);
        this.auth = auth2;
      }
    } else {
      const { authStrategy, ...otherOptions } = options;
      const auth2 = authStrategy(Object.assign({
        request: this.request,
        log: this.log,
        // we pass the current octokit instance as well as its constructor options
        // to allow for authentication strategies that return a new octokit instance
        // that shares the same internal state as the current one. The original
        // requirement for this was the "event-octokit" authentication strategy
        // of https://github.com/probot/octokit-auth-probot.
        octokit: this,
        octokitOptions: otherOptions
      }, options.auth));
      hook2.wrap("request", auth2.hook);
      this.auth = auth2;
    }
    const classConstructor = this.constructor;
    classConstructor.plugins.forEach((plugin) => {
      Object.assign(this, plugin(this, options));
    });
  }
  static defaults(defaults) {
    const OctokitWithDefaults = class extends this {
      constructor(...args) {
        const options = args[0] || {};
        if (typeof defaults === "function") {
          super(defaults(options));
          return;
        }
        super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? {
          userAgent: `${options.userAgent} ${defaults.userAgent}`
        } : null));
      }
    };
    return OctokitWithDefaults;
  }
  /**
   * Attach a plugin (or many) to your Octokit instance.
   *
   * @example
   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
   */
  static plugin(...newPlugins) {
    var _a;
    const currentPlugins = this.plugins;
    const NewOctokit = (_a = class extends this {
    }, _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))), _a);
    return NewOctokit;
  }
}
Octokit.VERSION = VERSION$2;
Octokit.plugins = [];
const distWeb$2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Octokit
}, Symbol.toStringTag, { value: "Module" }));
const require$$2 = /* @__PURE__ */ getAugmentedNamespace(distWeb$2);
const Endpoints = {
  actions: {
    addCustomLabelsToSelfHostedRunnerForOrg: [
      "POST /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    addCustomLabelsToSelfHostedRunnerForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    ],
    approveWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"
    ],
    cancelWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
    ],
    createOrUpdateEnvironmentSecret: [
      "PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"
    ],
    createRegistrationTokenForOrg: [
      "POST /orgs/{org}/actions/runners/registration-token"
    ],
    createRegistrationTokenForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/registration-token"
    ],
    createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
    createRemoveTokenForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/remove-token"
    ],
    createWorkflowDispatch: [
      "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
    ],
    deleteActionsCacheById: [
      "DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"
    ],
    deleteActionsCacheByKey: [
      "DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"
    ],
    deleteArtifact: [
      "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
    ],
    deleteEnvironmentSecret: [
      "DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"
    ],
    deleteSelfHostedRunnerFromOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}"
    ],
    deleteSelfHostedRunnerFromRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"
    ],
    deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
    deleteWorkflowRunLogs: [
      "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
    ],
    disableSelectedRepositoryGithubActionsOrganization: [
      "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"
    ],
    disableWorkflow: [
      "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
    ],
    downloadArtifact: [
      "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
    ],
    downloadJobLogsForWorkflowRun: [
      "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
    ],
    downloadWorkflowRunAttemptLogs: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
    ],
    downloadWorkflowRunLogs: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
    ],
    enableSelectedRepositoryGithubActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"
    ],
    enableWorkflow: [
      "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
    ],
    getActionsCacheList: ["GET /repos/{owner}/{repo}/actions/caches"],
    getActionsCacheUsage: ["GET /repos/{owner}/{repo}/actions/cache/usage"],
    getActionsCacheUsageByRepoForOrg: [
      "GET /orgs/{org}/actions/cache/usage-by-repository"
    ],
    getActionsCacheUsageForEnterprise: [
      "GET /enterprises/{enterprise}/actions/cache/usage"
    ],
    getActionsCacheUsageForOrg: ["GET /orgs/{org}/actions/cache/usage"],
    getAllowedActionsOrganization: [
      "GET /orgs/{org}/actions/permissions/selected-actions"
    ],
    getAllowedActionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/selected-actions"
    ],
    getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
    getEnvironmentPublicKey: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
    ],
    getEnvironmentSecret: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    getGithubActionsDefaultWorkflowPermissionsEnterprise: [
      "GET /enterprises/{enterprise}/actions/permissions/workflow"
    ],
    getGithubActionsDefaultWorkflowPermissionsOrganization: [
      "GET /orgs/{org}/actions/permissions/workflow"
    ],
    getGithubActionsDefaultWorkflowPermissionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/workflow"
    ],
    getGithubActionsPermissionsOrganization: [
      "GET /orgs/{org}/actions/permissions"
    ],
    getGithubActionsPermissionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions"
    ],
    getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
    getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
    getPendingDeploymentsForRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
    ],
    getRepoPermissions: [
      "GET /repos/{owner}/{repo}/actions/permissions",
      {},
      { renamed: ["actions", "getGithubActionsPermissionsRepository"] }
    ],
    getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
    getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
    getReviewsForRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
    ],
    getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
    getSelfHostedRunnerForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/{runner_id}"
    ],
    getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
    getWorkflowAccessToRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/access"
    ],
    getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
    getWorkflowRunAttempt: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
    ],
    getWorkflowRunUsage: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"
    ],
    getWorkflowUsage: [
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"
    ],
    listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
    listEnvironmentSecrets: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets"
    ],
    listJobsForWorkflowRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
    ],
    listJobsForWorkflowRunAttempt: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
    ],
    listLabelsForSelfHostedRunnerForOrg: [
      "GET /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    listLabelsForSelfHostedRunnerForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
    listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
    listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
    listRunnerApplicationsForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/downloads"
    ],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
    ],
    listSelectedRepositoriesEnabledGithubActionsOrganization: [
      "GET /orgs/{org}/actions/permissions/repositories"
    ],
    listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
    listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
    listWorkflowRunArtifacts: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
    ],
    listWorkflowRuns: [
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
    ],
    listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
    reRunJobForWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
    ],
    reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
    reRunWorkflowFailedJobs: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    removeCustomLabelFromSelfHostedRunnerForOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
    ],
    removeCustomLabelFromSelfHostedRunnerForRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    ],
    reviewPendingDeploymentsForRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
    ],
    setAllowedActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/selected-actions"
    ],
    setAllowedActionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"
    ],
    setCustomLabelsForSelfHostedRunnerForOrg: [
      "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    setCustomLabelsForSelfHostedRunnerForRepo: [
      "PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    setGithubActionsDefaultWorkflowPermissionsEnterprise: [
      "PUT /enterprises/{enterprise}/actions/permissions/workflow"
    ],
    setGithubActionsDefaultWorkflowPermissionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/workflow"
    ],
    setGithubActionsDefaultWorkflowPermissionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/workflow"
    ],
    setGithubActionsPermissionsOrganization: [
      "PUT /orgs/{org}/actions/permissions"
    ],
    setGithubActionsPermissionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
    ],
    setSelectedRepositoriesEnabledGithubActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/repositories"
    ],
    setWorkflowAccessToRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/access"
    ]
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
    deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
    deleteThreadSubscription: [
      "DELETE /notifications/threads/{thread_id}/subscription"
    ],
    getFeeds: ["GET /feeds"],
    getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
    getThread: ["GET /notifications/threads/{thread_id}"],
    getThreadSubscriptionForAuthenticatedUser: [
      "GET /notifications/threads/{thread_id}/subscription"
    ],
    listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
    listNotificationsForAuthenticatedUser: ["GET /notifications"],
    listOrgEventsForAuthenticatedUser: [
      "GET /users/{username}/events/orgs/{org}"
    ],
    listPublicEvents: ["GET /events"],
    listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
    listPublicEventsForUser: ["GET /users/{username}/events/public"],
    listPublicOrgEvents: ["GET /orgs/{org}/events"],
    listReceivedEventsForUser: ["GET /users/{username}/received_events"],
    listReceivedPublicEventsForUser: [
      "GET /users/{username}/received_events/public"
    ],
    listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
    listRepoNotificationsForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/notifications"
    ],
    listReposStarredByAuthenticatedUser: ["GET /user/starred"],
    listReposStarredByUser: ["GET /users/{username}/starred"],
    listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
    listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
    listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
    listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
    markNotificationsAsRead: ["PUT /notifications"],
    markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
    markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
    setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
    setThreadSubscription: [
      "PUT /notifications/threads/{thread_id}/subscription"
    ],
    starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
    unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
  },
  apps: {
    addRepoToInstallation: [
      "PUT /user/installations/{installation_id}/repositories/{repository_id}",
      {},
      { renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] }
    ],
    addRepoToInstallationForAuthenticatedUser: [
      "PUT /user/installations/{installation_id}/repositories/{repository_id}"
    ],
    checkToken: ["POST /applications/{client_id}/token"],
    createFromManifest: ["POST /app-manifests/{code}/conversions"],
    createInstallationAccessToken: [
      "POST /app/installations/{installation_id}/access_tokens"
    ],
    deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
    deleteInstallation: ["DELETE /app/installations/{installation_id}"],
    deleteToken: ["DELETE /applications/{client_id}/token"],
    getAuthenticated: ["GET /app"],
    getBySlug: ["GET /apps/{app_slug}"],
    getInstallation: ["GET /app/installations/{installation_id}"],
    getOrgInstallation: ["GET /orgs/{org}/installation"],
    getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
    getSubscriptionPlanForAccount: [
      "GET /marketplace_listing/accounts/{account_id}"
    ],
    getSubscriptionPlanForAccountStubbed: [
      "GET /marketplace_listing/stubbed/accounts/{account_id}"
    ],
    getUserInstallation: ["GET /users/{username}/installation"],
    getWebhookConfigForApp: ["GET /app/hook/config"],
    getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
    listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
    listAccountsForPlanStubbed: [
      "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"
    ],
    listInstallationReposForAuthenticatedUser: [
      "GET /user/installations/{installation_id}/repositories"
    ],
    listInstallations: ["GET /app/installations"],
    listInstallationsForAuthenticatedUser: ["GET /user/installations"],
    listPlans: ["GET /marketplace_listing/plans"],
    listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
    listReposAccessibleToInstallation: ["GET /installation/repositories"],
    listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
    listSubscriptionsForAuthenticatedUserStubbed: [
      "GET /user/marketplace_purchases/stubbed"
    ],
    listWebhookDeliveries: ["GET /app/hook/deliveries"],
    redeliverWebhookDelivery: [
      "POST /app/hook/deliveries/{delivery_id}/attempts"
    ],
    removeRepoFromInstallation: [
      "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
      {},
      { renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"] }
    ],
    removeRepoFromInstallationForAuthenticatedUser: [
      "DELETE /user/installations/{installation_id}/repositories/{repository_id}"
    ],
    resetToken: ["PATCH /applications/{client_id}/token"],
    revokeInstallationAccessToken: ["DELETE /installation/token"],
    scopeToken: ["POST /applications/{client_id}/token/scoped"],
    suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
    unsuspendInstallation: [
      "DELETE /app/installations/{installation_id}/suspended"
    ],
    updateWebhookConfigForApp: ["PATCH /app/hook/config"]
  },
  billing: {
    getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
    getGithubActionsBillingUser: [
      "GET /users/{username}/settings/billing/actions"
    ],
    getGithubAdvancedSecurityBillingGhe: [
      "GET /enterprises/{enterprise}/settings/billing/advanced-security"
    ],
    getGithubAdvancedSecurityBillingOrg: [
      "GET /orgs/{org}/settings/billing/advanced-security"
    ],
    getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
    getGithubPackagesBillingUser: [
      "GET /users/{username}/settings/billing/packages"
    ],
    getSharedStorageBillingOrg: [
      "GET /orgs/{org}/settings/billing/shared-storage"
    ],
    getSharedStorageBillingUser: [
      "GET /users/{username}/settings/billing/shared-storage"
    ]
  },
  checks: {
    create: ["POST /repos/{owner}/{repo}/check-runs"],
    createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
    get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
    getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
    listAnnotations: [
      "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"
    ],
    listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
    listForSuite: [
      "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"
    ],
    listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
    rerequestRun: [
      "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"
    ],
    rerequestSuite: [
      "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"
    ],
    setSuitesPreferences: [
      "PATCH /repos/{owner}/{repo}/check-suites/preferences"
    ],
    update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
  },
  codeScanning: {
    deleteAnalysis: [
      "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"
    ],
    getAlert: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
      {},
      { renamedParameters: { alert_id: "alert_number" } }
    ],
    getAnalysis: [
      "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
    ],
    getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
    listAlertInstances: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/code-scanning/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
    listAlertsInstances: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
      {},
      { renamed: ["codeScanning", "listAlertInstances"] }
    ],
    listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
    ],
    uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
  },
  codesOfConduct: {
    getAllCodesOfConduct: ["GET /codes_of_conduct"],
    getConductCode: ["GET /codes_of_conduct/{key}"]
  },
  codespaces: {
    addRepositoryForSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    codespaceMachinesForAuthenticatedUser: [
      "GET /user/codespaces/{codespace_name}/machines"
    ],
    createForAuthenticatedUser: ["POST /user/codespaces"],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    createOrUpdateSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}"
    ],
    createWithPrForAuthenticatedUser: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"
    ],
    createWithRepoForAuthenticatedUser: [
      "POST /repos/{owner}/{repo}/codespaces"
    ],
    deleteForAuthenticatedUser: ["DELETE /user/codespaces/{codespace_name}"],
    deleteFromOrganization: [
      "DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"
    ],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    deleteSecretForAuthenticatedUser: [
      "DELETE /user/codespaces/secrets/{secret_name}"
    ],
    exportForAuthenticatedUser: [
      "POST /user/codespaces/{codespace_name}/exports"
    ],
    getExportDetailsForAuthenticatedUser: [
      "GET /user/codespaces/{codespace_name}/exports/{export_id}"
    ],
    getForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}"],
    getPublicKeyForAuthenticatedUser: [
      "GET /user/codespaces/secrets/public-key"
    ],
    getRepoPublicKey: [
      "GET /repos/{owner}/{repo}/codespaces/secrets/public-key"
    ],
    getRepoSecret: [
      "GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    getSecretForAuthenticatedUser: [
      "GET /user/codespaces/secrets/{secret_name}"
    ],
    listDevcontainersInRepositoryForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/devcontainers"
    ],
    listForAuthenticatedUser: ["GET /user/codespaces"],
    listInOrganization: [
      "GET /orgs/{org}/codespaces",
      {},
      { renamedParameters: { org_id: "org" } }
    ],
    listInRepositoryForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces"
    ],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/codespaces/secrets"],
    listRepositoriesForSecretForAuthenticatedUser: [
      "GET /user/codespaces/secrets/{secret_name}/repositories"
    ],
    listSecretsForAuthenticatedUser: ["GET /user/codespaces/secrets"],
    removeRepositoryForSecretForAuthenticatedUser: [
      "DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    repoMachinesForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/machines"
    ],
    setRepositoriesForSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}/repositories"
    ],
    startForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/start"],
    stopForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/stop"],
    stopInOrganization: [
      "POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"
    ],
    updateForAuthenticatedUser: ["PATCH /user/codespaces/{codespace_name}"]
  },
  dependabot: {
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
    ],
    createOrUpdateOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}"
    ],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    getOrgPublicKey: ["GET /orgs/{org}/dependabot/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}"],
    getRepoPublicKey: [
      "GET /repos/{owner}/{repo}/dependabot/secrets/public-key"
    ],
    getRepoSecret: [
      "GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    listOrgSecrets: ["GET /orgs/{org}/dependabot/secrets"],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/dependabot/secrets"],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
    ]
  },
  dependencyGraph: {
    createRepositorySnapshot: [
      "POST /repos/{owner}/{repo}/dependency-graph/snapshots"
    ],
    diffRange: [
      "GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"
    ]
  },
  emojis: { get: ["GET /emojis"] },
  enterpriseAdmin: {
    addCustomLabelsToSelfHostedRunnerForEnterprise: [
      "POST /enterprises/{enterprise}/actions/runners/{runner_id}/labels"
    ],
    disableSelectedOrganizationGithubActionsEnterprise: [
      "DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
    ],
    enableSelectedOrganizationGithubActionsEnterprise: [
      "PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
    ],
    getAllowedActionsEnterprise: [
      "GET /enterprises/{enterprise}/actions/permissions/selected-actions"
    ],
    getGithubActionsPermissionsEnterprise: [
      "GET /enterprises/{enterprise}/actions/permissions"
    ],
    getServerStatistics: [
      "GET /enterprise-installation/{enterprise_or_org}/server-statistics"
    ],
    listLabelsForSelfHostedRunnerForEnterprise: [
      "GET /enterprises/{enterprise}/actions/runners/{runner_id}/labels"
    ],
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [
      "GET /enterprises/{enterprise}/actions/permissions/organizations"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [
      "DELETE /enterprises/{enterprise}/actions/runners/{runner_id}/labels"
    ],
    removeCustomLabelFromSelfHostedRunnerForEnterprise: [
      "DELETE /enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}"
    ],
    setAllowedActionsEnterprise: [
      "PUT /enterprises/{enterprise}/actions/permissions/selected-actions"
    ],
    setCustomLabelsForSelfHostedRunnerForEnterprise: [
      "PUT /enterprises/{enterprise}/actions/runners/{runner_id}/labels"
    ],
    setGithubActionsPermissionsEnterprise: [
      "PUT /enterprises/{enterprise}/actions/permissions"
    ],
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [
      "PUT /enterprises/{enterprise}/actions/permissions/organizations"
    ]
  },
  gists: {
    checkIsStarred: ["GET /gists/{gist_id}/star"],
    create: ["POST /gists"],
    createComment: ["POST /gists/{gist_id}/comments"],
    delete: ["DELETE /gists/{gist_id}"],
    deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
    fork: ["POST /gists/{gist_id}/forks"],
    get: ["GET /gists/{gist_id}"],
    getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
    getRevision: ["GET /gists/{gist_id}/{sha}"],
    list: ["GET /gists"],
    listComments: ["GET /gists/{gist_id}/comments"],
    listCommits: ["GET /gists/{gist_id}/commits"],
    listForUser: ["GET /users/{username}/gists"],
    listForks: ["GET /gists/{gist_id}/forks"],
    listPublic: ["GET /gists/public"],
    listStarred: ["GET /gists/starred"],
    star: ["PUT /gists/{gist_id}/star"],
    unstar: ["DELETE /gists/{gist_id}/star"],
    update: ["PATCH /gists/{gist_id}"],
    updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
  },
  git: {
    createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
    createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
    createRef: ["POST /repos/{owner}/{repo}/git/refs"],
    createTag: ["POST /repos/{owner}/{repo}/git/tags"],
    createTree: ["POST /repos/{owner}/{repo}/git/trees"],
    deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
    getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
    getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
    getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
    getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
    getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
    listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
    updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
  },
  gitignore: {
    getAllTemplates: ["GET /gitignore/templates"],
    getTemplate: ["GET /gitignore/templates/{name}"]
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
    getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
    getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
    getRestrictionsForYourPublicRepos: [
      "GET /user/interaction-limits",
      {},
      { renamed: ["interactions", "getRestrictionsForAuthenticatedUser"] }
    ],
    removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
    removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
    removeRestrictionsForRepo: [
      "DELETE /repos/{owner}/{repo}/interaction-limits"
    ],
    removeRestrictionsForYourPublicRepos: [
      "DELETE /user/interaction-limits",
      {},
      { renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"] }
    ],
    setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
    setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
    setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
    setRestrictionsForYourPublicRepos: [
      "PUT /user/interaction-limits",
      {},
      { renamed: ["interactions", "setRestrictionsForAuthenticatedUser"] }
    ]
  },
  issues: {
    addAssignees: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"
    ],
    addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
    create: ["POST /repos/{owner}/{repo}/issues"],
    createComment: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/comments"
    ],
    createLabel: ["POST /repos/{owner}/{repo}/labels"],
    createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
    deleteComment: [
      "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"
    ],
    deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
    deleteMilestone: [
      "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"
    ],
    get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
    getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
    getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
    getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
    list: ["GET /issues"],
    listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
    listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
    listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
    listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
    listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
    listEventsForTimeline: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"
    ],
    listForAuthenticatedUser: ["GET /user/issues"],
    listForOrg: ["GET /orgs/{org}/issues"],
    listForRepo: ["GET /repos/{owner}/{repo}/issues"],
    listLabelsForMilestone: [
      "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"
    ],
    listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
    listLabelsOnIssue: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/labels"
    ],
    listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
    lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    removeAllLabels: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"
    ],
    removeAssignees: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"
    ],
    removeLabel: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"
    ],
    setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
    updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
    updateMilestone: [
      "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"
    ]
  },
  licenses: {
    get: ["GET /licenses/{license}"],
    getAllCommonlyUsed: ["GET /licenses"],
    getForRepo: ["GET /repos/{owner}/{repo}/license"]
  },
  markdown: {
    render: ["POST /markdown"],
    renderRaw: [
      "POST /markdown/raw",
      { headers: { "content-type": "text/plain; charset=utf-8" } }
    ]
  },
  meta: {
    get: ["GET /meta"],
    getOctocat: ["GET /octocat"],
    getZen: ["GET /zen"],
    root: ["GET /"]
  },
  migrations: {
    cancelImport: ["DELETE /repos/{owner}/{repo}/import"],
    deleteArchiveForAuthenticatedUser: [
      "DELETE /user/migrations/{migration_id}/archive"
    ],
    deleteArchiveForOrg: [
      "DELETE /orgs/{org}/migrations/{migration_id}/archive"
    ],
    downloadArchiveForOrg: [
      "GET /orgs/{org}/migrations/{migration_id}/archive"
    ],
    getArchiveForAuthenticatedUser: [
      "GET /user/migrations/{migration_id}/archive"
    ],
    getCommitAuthors: ["GET /repos/{owner}/{repo}/import/authors"],
    getImportStatus: ["GET /repos/{owner}/{repo}/import"],
    getLargeFiles: ["GET /repos/{owner}/{repo}/import/large_files"],
    getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
    getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
    listForAuthenticatedUser: ["GET /user/migrations"],
    listForOrg: ["GET /orgs/{org}/migrations"],
    listReposForAuthenticatedUser: [
      "GET /user/migrations/{migration_id}/repositories"
    ],
    listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
    listReposForUser: [
      "GET /user/migrations/{migration_id}/repositories",
      {},
      { renamed: ["migrations", "listReposForAuthenticatedUser"] }
    ],
    mapCommitAuthor: ["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],
    setLfsPreference: ["PATCH /repos/{owner}/{repo}/import/lfs"],
    startForAuthenticatedUser: ["POST /user/migrations"],
    startForOrg: ["POST /orgs/{org}/migrations"],
    startImport: ["PUT /repos/{owner}/{repo}/import"],
    unlockRepoForAuthenticatedUser: [
      "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"
    ],
    unlockRepoForOrg: [
      "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"
    ],
    updateImport: ["PATCH /repos/{owner}/{repo}/import"]
  },
  orgs: {
    blockUser: ["PUT /orgs/{org}/blocks/{username}"],
    cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
    checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
    checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
    checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
    convertMemberToOutsideCollaborator: [
      "PUT /orgs/{org}/outside_collaborators/{username}"
    ],
    createInvitation: ["POST /orgs/{org}/invitations"],
    createWebhook: ["POST /orgs/{org}/hooks"],
    deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
    get: ["GET /orgs/{org}"],
    getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
    getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
    getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
    getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
    getWebhookDelivery: [
      "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"
    ],
    list: ["GET /organizations"],
    listAppInstallations: ["GET /orgs/{org}/installations"],
    listBlockedUsers: ["GET /orgs/{org}/blocks"],
    listCustomRoles: ["GET /organizations/{organization_id}/custom_roles"],
    listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
    listForAuthenticatedUser: ["GET /user/orgs"],
    listForUser: ["GET /users/{username}/orgs"],
    listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
    listMembers: ["GET /orgs/{org}/members"],
    listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
    listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
    listPendingInvitations: ["GET /orgs/{org}/invitations"],
    listPublicMembers: ["GET /orgs/{org}/public_members"],
    listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
    listWebhooks: ["GET /orgs/{org}/hooks"],
    pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
    redeliverWebhookDelivery: [
      "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    ],
    removeMember: ["DELETE /orgs/{org}/members/{username}"],
    removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
    removeOutsideCollaborator: [
      "DELETE /orgs/{org}/outside_collaborators/{username}"
    ],
    removePublicMembershipForAuthenticatedUser: [
      "DELETE /orgs/{org}/public_members/{username}"
    ],
    setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
    setPublicMembershipForAuthenticatedUser: [
      "PUT /orgs/{org}/public_members/{username}"
    ],
    unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
    update: ["PATCH /orgs/{org}"],
    updateMembershipForAuthenticatedUser: [
      "PATCH /user/memberships/orgs/{org}"
    ],
    updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
    updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
  },
  packages: {
    deletePackageForAuthenticatedUser: [
      "DELETE /user/packages/{package_type}/{package_name}"
    ],
    deletePackageForOrg: [
      "DELETE /orgs/{org}/packages/{package_type}/{package_name}"
    ],
    deletePackageForUser: [
      "DELETE /users/{username}/packages/{package_type}/{package_name}"
    ],
    deletePackageVersionForAuthenticatedUser: [
      "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    deletePackageVersionForOrg: [
      "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    deletePackageVersionForUser: [
      "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getAllPackageVersionsForAPackageOwnedByAnOrg: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
      {},
      { renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"] }
    ],
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions",
      {},
      {
        renamed: [
          "packages",
          "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"
        ]
      }
    ],
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions"
    ],
    getAllPackageVersionsForPackageOwnedByOrg: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions"
    ],
    getAllPackageVersionsForPackageOwnedByUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}/versions"
    ],
    getPackageForAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}"
    ],
    getPackageForOrganization: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}"
    ],
    getPackageForUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}"
    ],
    getPackageVersionForAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getPackageVersionForOrganization: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getPackageVersionForUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    listPackagesForAuthenticatedUser: ["GET /user/packages"],
    listPackagesForOrganization: ["GET /orgs/{org}/packages"],
    listPackagesForUser: ["GET /users/{username}/packages"],
    restorePackageForAuthenticatedUser: [
      "POST /user/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageForOrg: [
      "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageForUser: [
      "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageVersionForAuthenticatedUser: [
      "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ],
    restorePackageVersionForOrg: [
      "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ],
    restorePackageVersionForUser: [
      "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ]
  },
  projects: {
    addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
    createCard: ["POST /projects/columns/{column_id}/cards"],
    createColumn: ["POST /projects/{project_id}/columns"],
    createForAuthenticatedUser: ["POST /user/projects"],
    createForOrg: ["POST /orgs/{org}/projects"],
    createForRepo: ["POST /repos/{owner}/{repo}/projects"],
    delete: ["DELETE /projects/{project_id}"],
    deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
    deleteColumn: ["DELETE /projects/columns/{column_id}"],
    get: ["GET /projects/{project_id}"],
    getCard: ["GET /projects/columns/cards/{card_id}"],
    getColumn: ["GET /projects/columns/{column_id}"],
    getPermissionForUser: [
      "GET /projects/{project_id}/collaborators/{username}/permission"
    ],
    listCards: ["GET /projects/columns/{column_id}/cards"],
    listCollaborators: ["GET /projects/{project_id}/collaborators"],
    listColumns: ["GET /projects/{project_id}/columns"],
    listForOrg: ["GET /orgs/{org}/projects"],
    listForRepo: ["GET /repos/{owner}/{repo}/projects"],
    listForUser: ["GET /users/{username}/projects"],
    moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
    moveColumn: ["POST /projects/columns/{column_id}/moves"],
    removeCollaborator: [
      "DELETE /projects/{project_id}/collaborators/{username}"
    ],
    update: ["PATCH /projects/{project_id}"],
    updateCard: ["PATCH /projects/columns/cards/{card_id}"],
    updateColumn: ["PATCH /projects/columns/{column_id}"]
  },
  pulls: {
    checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    create: ["POST /repos/{owner}/{repo}/pulls"],
    createReplyForReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
    ],
    createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    createReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"
    ],
    deletePendingReview: [
      "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    deleteReviewComment: [
      "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"
    ],
    dismissReview: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
    ],
    get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
    getReview: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
    list: ["GET /repos/{owner}/{repo}/pulls"],
    listCommentsForReview: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
    ],
    listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
    listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
    listRequestedReviewers: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    listReviewComments: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"
    ],
    listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
    listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    removeRequestedReviewers: [
      "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    requestReviewers: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    submitReview: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
    ],
    update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
    updateBranch: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
    ],
    updateReview: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    updateReviewComment: [
      "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"
    ]
  },
  rateLimit: { get: ["GET /rate_limit"] },
  reactions: {
    createForCommitComment: [
      "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"
    ],
    createForIssue: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"
    ],
    createForIssueComment: [
      "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    ],
    createForPullRequestReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    ],
    createForRelease: [
      "POST /repos/{owner}/{repo}/releases/{release_id}/reactions"
    ],
    createForTeamDiscussionCommentInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
    ],
    createForTeamDiscussionInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
    ],
    deleteForCommitComment: [
      "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForIssue: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
    ],
    deleteForIssueComment: [
      "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForPullRequestComment: [
      "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForRelease: [
      "DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"
    ],
    deleteForTeamDiscussion: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
    ],
    deleteForTeamDiscussionComment: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
    ],
    listForCommitComment: [
      "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"
    ],
    listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
    listForIssueComment: [
      "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    ],
    listForPullRequestReviewComment: [
      "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    ],
    listForRelease: [
      "GET /repos/{owner}/{repo}/releases/{release_id}/reactions"
    ],
    listForTeamDiscussionCommentInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
    ],
    listForTeamDiscussionInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
    ]
  },
  repos: {
    acceptInvitation: [
      "PATCH /user/repository_invitations/{invitation_id}",
      {},
      { renamed: ["repos", "acceptInvitationForAuthenticatedUser"] }
    ],
    acceptInvitationForAuthenticatedUser: [
      "PATCH /user/repository_invitations/{invitation_id}"
    ],
    addAppAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
    addStatusCheckContexts: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    addTeamAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    addUserAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
    checkVulnerabilityAlerts: [
      "GET /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    codeownersErrors: ["GET /repos/{owner}/{repo}/codeowners/errors"],
    compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
    compareCommitsWithBasehead: [
      "GET /repos/{owner}/{repo}/compare/{basehead}"
    ],
    createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
    createCommitComment: [
      "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"
    ],
    createCommitSignatureProtection: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
    createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
    createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
    createDeploymentStatus: [
      "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
    ],
    createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
    createForAuthenticatedUser: ["POST /user/repos"],
    createFork: ["POST /repos/{owner}/{repo}/forks"],
    createInOrg: ["POST /orgs/{org}/repos"],
    createOrUpdateEnvironment: [
      "PUT /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
    createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
    createRelease: ["POST /repos/{owner}/{repo}/releases"],
    createTagProtection: ["POST /repos/{owner}/{repo}/tags/protection"],
    createUsingTemplate: [
      "POST /repos/{template_owner}/{template_repo}/generate"
    ],
    createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
    declineInvitation: [
      "DELETE /user/repository_invitations/{invitation_id}",
      {},
      { renamed: ["repos", "declineInvitationForAuthenticatedUser"] }
    ],
    declineInvitationForAuthenticatedUser: [
      "DELETE /user/repository_invitations/{invitation_id}"
    ],
    delete: ["DELETE /repos/{owner}/{repo}"],
    deleteAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
    ],
    deleteAdminBranchProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    deleteAnEnvironment: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
    deleteBranchProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
    deleteCommitSignatureProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
    deleteDeployment: [
      "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"
    ],
    deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
    deleteInvitation: [
      "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"
    ],
    deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
    deletePullRequestReviewProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
    deleteReleaseAsset: [
      "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"
    ],
    deleteTagProtection: [
      "DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"
    ],
    deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
    disableAutomatedSecurityFixes: [
      "DELETE /repos/{owner}/{repo}/automated-security-fixes"
    ],
    disableLfsForRepo: ["DELETE /repos/{owner}/{repo}/lfs"],
    disableVulnerabilityAlerts: [
      "DELETE /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    downloadArchive: [
      "GET /repos/{owner}/{repo}/zipball/{ref}",
      {},
      { renamed: ["repos", "downloadZipballArchive"] }
    ],
    downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
    downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
    enableAutomatedSecurityFixes: [
      "PUT /repos/{owner}/{repo}/automated-security-fixes"
    ],
    enableLfsForRepo: ["PUT /repos/{owner}/{repo}/lfs"],
    enableVulnerabilityAlerts: [
      "PUT /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    generateReleaseNotes: [
      "POST /repos/{owner}/{repo}/releases/generate-notes"
    ],
    get: ["GET /repos/{owner}/{repo}"],
    getAccessRestrictions: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
    ],
    getAdminBranchProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
    getAllStatusCheckContexts: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
    ],
    getAllTopics: ["GET /repos/{owner}/{repo}/topics"],
    getAppsWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
    ],
    getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
    getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
    getBranchProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
    getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
    getCollaboratorPermissionLevel: [
      "GET /repos/{owner}/{repo}/collaborators/{username}/permission"
    ],
    getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
    getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
    getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
    getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
    getCommitSignatureProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
    getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
    getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
    getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
    getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
    getDeploymentStatus: [
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
    ],
    getEnvironment: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
    getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
    getPages: ["GET /repos/{owner}/{repo}/pages"],
    getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
    getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
    getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
    getPullRequestReviewProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
    getReadme: ["GET /repos/{owner}/{repo}/readme"],
    getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
    getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
    getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
    getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
    getStatusChecksProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    getTeamsWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
    ],
    getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
    getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
    getUsersWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
    ],
    getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
    getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
    getWebhookConfigForRepo: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/config"
    ],
    getWebhookDelivery: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    ],
    listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
    listBranches: ["GET /repos/{owner}/{repo}/branches"],
    listBranchesForHeadCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
    ],
    listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
    listCommentsForCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"
    ],
    listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
    listCommitStatusesForRef: [
      "GET /repos/{owner}/{repo}/commits/{ref}/statuses"
    ],
    listCommits: ["GET /repos/{owner}/{repo}/commits"],
    listContributors: ["GET /repos/{owner}/{repo}/contributors"],
    listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
    listDeploymentStatuses: [
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
    ],
    listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
    listForAuthenticatedUser: ["GET /user/repos"],
    listForOrg: ["GET /orgs/{org}/repos"],
    listForUser: ["GET /users/{username}/repos"],
    listForks: ["GET /repos/{owner}/{repo}/forks"],
    listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
    listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
    listLanguages: ["GET /repos/{owner}/{repo}/languages"],
    listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
    listPublic: ["GET /repositories"],
    listPullRequestsAssociatedWithCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"
    ],
    listReleaseAssets: [
      "GET /repos/{owner}/{repo}/releases/{release_id}/assets"
    ],
    listReleases: ["GET /repos/{owner}/{repo}/releases"],
    listTagProtection: ["GET /repos/{owner}/{repo}/tags/protection"],
    listTags: ["GET /repos/{owner}/{repo}/tags"],
    listTeams: ["GET /repos/{owner}/{repo}/teams"],
    listWebhookDeliveries: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    ],
    listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
    merge: ["POST /repos/{owner}/{repo}/merges"],
    mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
    pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
    redeliverWebhookDelivery: [
      "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    ],
    removeAppAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    removeCollaborator: [
      "DELETE /repos/{owner}/{repo}/collaborators/{username}"
    ],
    removeStatusCheckContexts: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    removeStatusCheckProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    removeTeamAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    removeUserAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
    replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics"],
    requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
    setAdminBranchProtection: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    setAppAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    setStatusCheckContexts: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    setTeamAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    setUserAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
    transfer: ["POST /repos/{owner}/{repo}/transfer"],
    update: ["PATCH /repos/{owner}/{repo}"],
    updateBranchProtection: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
    updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
    updateInvitation: [
      "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"
    ],
    updatePullRequestReviewProtection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
    updateReleaseAsset: [
      "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"
    ],
    updateStatusCheckPotection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
      {},
      { renamed: ["repos", "updateStatusCheckProtection"] }
    ],
    updateStatusCheckProtection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
    updateWebhookConfigForRepo: [
      "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"
    ],
    uploadReleaseAsset: [
      "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
      { baseUrl: "https://uploads.github.com" }
    ]
  },
  search: {
    code: ["GET /search/code"],
    commits: ["GET /search/commits"],
    issuesAndPullRequests: ["GET /search/issues"],
    labels: ["GET /search/labels"],
    repos: ["GET /search/repositories"],
    topics: ["GET /search/topics"],
    users: ["GET /search/users"]
  },
  secretScanning: {
    getAlert: [
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    ],
    listAlertsForEnterprise: [
      "GET /enterprises/{enterprise}/secret-scanning/alerts"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
    listLocationsForAlert: [
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
    ],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    ]
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    addOrUpdateProjectPermissionsInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    addOrUpdateRepoPermissionsInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    checkPermissionsForProjectInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    checkPermissionsForRepoInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    create: ["POST /orgs/{org}/teams"],
    createDiscussionCommentInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
    ],
    createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
    deleteDiscussionCommentInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    deleteDiscussionInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
    getByName: ["GET /orgs/{org}/teams/{team_slug}"],
    getDiscussionCommentInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    getDiscussionInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    getMembershipForUserInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    list: ["GET /orgs/{org}/teams"],
    listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
    listDiscussionCommentsInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
    ],
    listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
    listForAuthenticatedUser: ["GET /user/teams"],
    listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
    listPendingInvitationsInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/invitations"
    ],
    listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
    listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
    removeMembershipForUserInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    removeProjectInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    removeRepoInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    updateDiscussionCommentInOrg: [
      "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    updateDiscussionInOrg: [
      "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
  },
  users: {
    addEmailForAuthenticated: [
      "POST /user/emails",
      {},
      { renamed: ["users", "addEmailForAuthenticatedUser"] }
    ],
    addEmailForAuthenticatedUser: ["POST /user/emails"],
    block: ["PUT /user/blocks/{username}"],
    checkBlocked: ["GET /user/blocks/{username}"],
    checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
    checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
    createGpgKeyForAuthenticated: [
      "POST /user/gpg_keys",
      {},
      { renamed: ["users", "createGpgKeyForAuthenticatedUser"] }
    ],
    createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
    createPublicSshKeyForAuthenticated: [
      "POST /user/keys",
      {},
      { renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] }
    ],
    createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
    deleteEmailForAuthenticated: [
      "DELETE /user/emails",
      {},
      { renamed: ["users", "deleteEmailForAuthenticatedUser"] }
    ],
    deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
    deleteGpgKeyForAuthenticated: [
      "DELETE /user/gpg_keys/{gpg_key_id}",
      {},
      { renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] }
    ],
    deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
    deletePublicSshKeyForAuthenticated: [
      "DELETE /user/keys/{key_id}",
      {},
      { renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] }
    ],
    deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
    follow: ["PUT /user/following/{username}"],
    getAuthenticated: ["GET /user"],
    getByUsername: ["GET /users/{username}"],
    getContextForUser: ["GET /users/{username}/hovercard"],
    getGpgKeyForAuthenticated: [
      "GET /user/gpg_keys/{gpg_key_id}",
      {},
      { renamed: ["users", "getGpgKeyForAuthenticatedUser"] }
    ],
    getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
    getPublicSshKeyForAuthenticated: [
      "GET /user/keys/{key_id}",
      {},
      { renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] }
    ],
    getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
    list: ["GET /users"],
    listBlockedByAuthenticated: [
      "GET /user/blocks",
      {},
      { renamed: ["users", "listBlockedByAuthenticatedUser"] }
    ],
    listBlockedByAuthenticatedUser: ["GET /user/blocks"],
    listEmailsForAuthenticated: [
      "GET /user/emails",
      {},
      { renamed: ["users", "listEmailsForAuthenticatedUser"] }
    ],
    listEmailsForAuthenticatedUser: ["GET /user/emails"],
    listFollowedByAuthenticated: [
      "GET /user/following",
      {},
      { renamed: ["users", "listFollowedByAuthenticatedUser"] }
    ],
    listFollowedByAuthenticatedUser: ["GET /user/following"],
    listFollowersForAuthenticatedUser: ["GET /user/followers"],
    listFollowersForUser: ["GET /users/{username}/followers"],
    listFollowingForUser: ["GET /users/{username}/following"],
    listGpgKeysForAuthenticated: [
      "GET /user/gpg_keys",
      {},
      { renamed: ["users", "listGpgKeysForAuthenticatedUser"] }
    ],
    listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
    listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
    listPublicEmailsForAuthenticated: [
      "GET /user/public_emails",
      {},
      { renamed: ["users", "listPublicEmailsForAuthenticatedUser"] }
    ],
    listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
    listPublicKeysForUser: ["GET /users/{username}/keys"],
    listPublicSshKeysForAuthenticated: [
      "GET /user/keys",
      {},
      { renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] }
    ],
    listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
    setPrimaryEmailVisibilityForAuthenticated: [
      "PATCH /user/email/visibility",
      {},
      { renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"] }
    ],
    setPrimaryEmailVisibilityForAuthenticatedUser: [
      "PATCH /user/email/visibility"
    ],
    unblock: ["DELETE /user/blocks/{username}"],
    unfollow: ["DELETE /user/following/{username}"],
    updateAuthenticated: ["PATCH /user"]
  }
};
const VERSION$1 = "5.16.2";
function endpointsToMethods(octokit, endpointsMap) {
  const newMethods = {};
  for (const [scope, endpoints] of Object.entries(endpointsMap)) {
    for (const [methodName, endpoint2] of Object.entries(endpoints)) {
      const [route, defaults, decorations] = endpoint2;
      const [method, url] = route.split(/ /);
      const endpointDefaults = Object.assign({ method, url }, defaults);
      if (!newMethods[scope]) {
        newMethods[scope] = {};
      }
      const scopeMethods = newMethods[scope];
      if (decorations) {
        scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);
        continue;
      }
      scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);
    }
  }
  return newMethods;
}
function decorate(octokit, scope, methodName, defaults, decorations) {
  const requestWithDefaults = octokit.request.defaults(defaults);
  function withDecorations(...args) {
    let options = requestWithDefaults.endpoint.merge(...args);
    if (decorations.mapToData) {
      options = Object.assign({}, options, {
        data: options[decorations.mapToData],
        [decorations.mapToData]: void 0
      });
      return requestWithDefaults(options);
    }
    if (decorations.renamed) {
      const [newScope, newMethodName] = decorations.renamed;
      octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);
    }
    if (decorations.deprecated) {
      octokit.log.warn(decorations.deprecated);
    }
    if (decorations.renamedParameters) {
      const options2 = requestWithDefaults.endpoint.merge(...args);
      for (const [name, alias] of Object.entries(decorations.renamedParameters)) {
        if (name in options2) {
          octokit.log.warn(`"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`);
          if (!(alias in options2)) {
            options2[alias] = options2[name];
          }
          delete options2[name];
        }
      }
      return requestWithDefaults(options2);
    }
    return requestWithDefaults(...args);
  }
  return Object.assign(withDecorations, requestWithDefaults);
}
function restEndpointMethods(octokit) {
  const api = endpointsToMethods(octokit, Endpoints);
  return {
    rest: api
  };
}
restEndpointMethods.VERSION = VERSION$1;
function legacyRestEndpointMethods(octokit) {
  const api = endpointsToMethods(octokit, Endpoints);
  return {
    ...api,
    rest: api
  };
}
legacyRestEndpointMethods.VERSION = VERSION$1;
const distWeb$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  legacyRestEndpointMethods,
  restEndpointMethods
}, Symbol.toStringTag, { value: "Module" }));
const require$$3 = /* @__PURE__ */ getAugmentedNamespace(distWeb$1);
const VERSION = "2.21.3";
function normalizePaginatedListResponse(response) {
  if (!response.data) {
    return {
      ...response,
      data: []
    };
  }
  const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
  if (!responseNeedsNormalization)
    return response;
  const incompleteResults = response.data.incomplete_results;
  const repositorySelection = response.data.repository_selection;
  const totalCount = response.data.total_count;
  delete response.data.incomplete_results;
  delete response.data.repository_selection;
  delete response.data.total_count;
  const namespaceKey = Object.keys(response.data)[0];
  const data = response.data[namespaceKey];
  response.data = data;
  if (typeof incompleteResults !== "undefined") {
    response.data.incomplete_results = incompleteResults;
  }
  if (typeof repositorySelection !== "undefined") {
    response.data.repository_selection = repositorySelection;
  }
  response.data.total_count = totalCount;
  return response;
}
function iterator(octokit, route, parameters) {
  const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
  const requestMethod = typeof route === "function" ? route : octokit.request;
  const method = options.method;
  const headers = options.headers;
  let url = options.url;
  return {
    [Symbol.asyncIterator]: () => ({
      async next() {
        if (!url)
          return { done: true };
        try {
          const response = await requestMethod({ method, url, headers });
          const normalizedResponse = normalizePaginatedListResponse(response);
          url = ((normalizedResponse.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1];
          return { value: normalizedResponse };
        } catch (error2) {
          if (error2.status !== 409)
            throw error2;
          url = "";
          return {
            value: {
              status: 200,
              headers: {},
              data: []
            }
          };
        }
      }
    })
  };
}
function paginate(octokit, route, parameters, mapFn) {
  if (typeof parameters === "function") {
    mapFn = parameters;
    parameters = void 0;
  }
  return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
}
function gather(octokit, results, iterator2, mapFn) {
  return iterator2.next().then((result) => {
    if (result.done) {
      return results;
    }
    let earlyExit = false;
    function done() {
      earlyExit = true;
    }
    results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);
    if (earlyExit) {
      return results;
    }
    return gather(octokit, results, iterator2, mapFn);
  });
}
const composePaginateRest = Object.assign(paginate, {
  iterator
});
const paginatingEndpoints = [
  "GET /app/hook/deliveries",
  "GET /app/installations",
  "GET /applications/grants",
  "GET /authorizations",
  "GET /enterprises/{enterprise}/actions/permissions/organizations",
  "GET /enterprises/{enterprise}/actions/runner-groups",
  "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations",
  "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
  "GET /enterprises/{enterprise}/actions/runners",
  "GET /enterprises/{enterprise}/audit-log",
  "GET /enterprises/{enterprise}/secret-scanning/alerts",
  "GET /enterprises/{enterprise}/settings/billing/advanced-security",
  "GET /events",
  "GET /gists",
  "GET /gists/public",
  "GET /gists/starred",
  "GET /gists/{gist_id}/comments",
  "GET /gists/{gist_id}/commits",
  "GET /gists/{gist_id}/forks",
  "GET /installation/repositories",
  "GET /issues",
  "GET /licenses",
  "GET /marketplace_listing/plans",
  "GET /marketplace_listing/plans/{plan_id}/accounts",
  "GET /marketplace_listing/stubbed/plans",
  "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
  "GET /networks/{owner}/{repo}/events",
  "GET /notifications",
  "GET /organizations",
  "GET /orgs/{org}/actions/cache/usage-by-repository",
  "GET /orgs/{org}/actions/permissions/repositories",
  "GET /orgs/{org}/actions/runner-groups",
  "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
  "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
  "GET /orgs/{org}/actions/runners",
  "GET /orgs/{org}/actions/secrets",
  "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/audit-log",
  "GET /orgs/{org}/blocks",
  "GET /orgs/{org}/code-scanning/alerts",
  "GET /orgs/{org}/codespaces",
  "GET /orgs/{org}/credential-authorizations",
  "GET /orgs/{org}/dependabot/secrets",
  "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/events",
  "GET /orgs/{org}/external-groups",
  "GET /orgs/{org}/failed_invitations",
  "GET /orgs/{org}/hooks",
  "GET /orgs/{org}/hooks/{hook_id}/deliveries",
  "GET /orgs/{org}/installations",
  "GET /orgs/{org}/invitations",
  "GET /orgs/{org}/invitations/{invitation_id}/teams",
  "GET /orgs/{org}/issues",
  "GET /orgs/{org}/members",
  "GET /orgs/{org}/migrations",
  "GET /orgs/{org}/migrations/{migration_id}/repositories",
  "GET /orgs/{org}/outside_collaborators",
  "GET /orgs/{org}/packages",
  "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
  "GET /orgs/{org}/projects",
  "GET /orgs/{org}/public_members",
  "GET /orgs/{org}/repos",
  "GET /orgs/{org}/secret-scanning/alerts",
  "GET /orgs/{org}/settings/billing/advanced-security",
  "GET /orgs/{org}/team-sync/groups",
  "GET /orgs/{org}/teams",
  "GET /orgs/{org}/teams/{team_slug}/discussions",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
  "GET /orgs/{org}/teams/{team_slug}/invitations",
  "GET /orgs/{org}/teams/{team_slug}/members",
  "GET /orgs/{org}/teams/{team_slug}/projects",
  "GET /orgs/{org}/teams/{team_slug}/repos",
  "GET /orgs/{org}/teams/{team_slug}/teams",
  "GET /projects/columns/{column_id}/cards",
  "GET /projects/{project_id}/collaborators",
  "GET /projects/{project_id}/columns",
  "GET /repos/{owner}/{repo}/actions/artifacts",
  "GET /repos/{owner}/{repo}/actions/caches",
  "GET /repos/{owner}/{repo}/actions/runners",
  "GET /repos/{owner}/{repo}/actions/runs",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
  "GET /repos/{owner}/{repo}/actions/secrets",
  "GET /repos/{owner}/{repo}/actions/workflows",
  "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
  "GET /repos/{owner}/{repo}/assignees",
  "GET /repos/{owner}/{repo}/branches",
  "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
  "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
  "GET /repos/{owner}/{repo}/code-scanning/alerts",
  "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
  "GET /repos/{owner}/{repo}/code-scanning/analyses",
  "GET /repos/{owner}/{repo}/codespaces",
  "GET /repos/{owner}/{repo}/codespaces/devcontainers",
  "GET /repos/{owner}/{repo}/codespaces/secrets",
  "GET /repos/{owner}/{repo}/collaborators",
  "GET /repos/{owner}/{repo}/comments",
  "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/commits",
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
  "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
  "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
  "GET /repos/{owner}/{repo}/commits/{ref}/status",
  "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
  "GET /repos/{owner}/{repo}/contributors",
  "GET /repos/{owner}/{repo}/dependabot/secrets",
  "GET /repos/{owner}/{repo}/deployments",
  "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
  "GET /repos/{owner}/{repo}/environments",
  "GET /repos/{owner}/{repo}/events",
  "GET /repos/{owner}/{repo}/forks",
  "GET /repos/{owner}/{repo}/git/matching-refs/{ref}",
  "GET /repos/{owner}/{repo}/hooks",
  "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
  "GET /repos/{owner}/{repo}/invitations",
  "GET /repos/{owner}/{repo}/issues",
  "GET /repos/{owner}/{repo}/issues/comments",
  "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/issues/events",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
  "GET /repos/{owner}/{repo}/keys",
  "GET /repos/{owner}/{repo}/labels",
  "GET /repos/{owner}/{repo}/milestones",
  "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
  "GET /repos/{owner}/{repo}/notifications",
  "GET /repos/{owner}/{repo}/pages/builds",
  "GET /repos/{owner}/{repo}/projects",
  "GET /repos/{owner}/{repo}/pulls",
  "GET /repos/{owner}/{repo}/pulls/comments",
  "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
  "GET /repos/{owner}/{repo}/releases",
  "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
  "GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
  "GET /repos/{owner}/{repo}/secret-scanning/alerts",
  "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
  "GET /repos/{owner}/{repo}/stargazers",
  "GET /repos/{owner}/{repo}/subscribers",
  "GET /repos/{owner}/{repo}/tags",
  "GET /repos/{owner}/{repo}/teams",
  "GET /repos/{owner}/{repo}/topics",
  "GET /repositories",
  "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
  "GET /search/code",
  "GET /search/commits",
  "GET /search/issues",
  "GET /search/labels",
  "GET /search/repositories",
  "GET /search/topics",
  "GET /search/users",
  "GET /teams/{team_id}/discussions",
  "GET /teams/{team_id}/discussions/{discussion_number}/comments",
  "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
  "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
  "GET /teams/{team_id}/invitations",
  "GET /teams/{team_id}/members",
  "GET /teams/{team_id}/projects",
  "GET /teams/{team_id}/repos",
  "GET /teams/{team_id}/teams",
  "GET /user/blocks",
  "GET /user/codespaces",
  "GET /user/codespaces/secrets",
  "GET /user/emails",
  "GET /user/followers",
  "GET /user/following",
  "GET /user/gpg_keys",
  "GET /user/installations",
  "GET /user/installations/{installation_id}/repositories",
  "GET /user/issues",
  "GET /user/keys",
  "GET /user/marketplace_purchases",
  "GET /user/marketplace_purchases/stubbed",
  "GET /user/memberships/orgs",
  "GET /user/migrations",
  "GET /user/migrations/{migration_id}/repositories",
  "GET /user/orgs",
  "GET /user/packages",
  "GET /user/packages/{package_type}/{package_name}/versions",
  "GET /user/public_emails",
  "GET /user/repos",
  "GET /user/repository_invitations",
  "GET /user/starred",
  "GET /user/subscriptions",
  "GET /user/teams",
  "GET /users",
  "GET /users/{username}/events",
  "GET /users/{username}/events/orgs/{org}",
  "GET /users/{username}/events/public",
  "GET /users/{username}/followers",
  "GET /users/{username}/following",
  "GET /users/{username}/gists",
  "GET /users/{username}/gpg_keys",
  "GET /users/{username}/keys",
  "GET /users/{username}/orgs",
  "GET /users/{username}/packages",
  "GET /users/{username}/projects",
  "GET /users/{username}/received_events",
  "GET /users/{username}/received_events/public",
  "GET /users/{username}/repos",
  "GET /users/{username}/starred",
  "GET /users/{username}/subscriptions"
];
function isPaginatingEndpoint(arg) {
  if (typeof arg === "string") {
    return paginatingEndpoints.includes(arg);
  } else {
    return false;
  }
}
function paginateRest(octokit) {
  return {
    paginate: Object.assign(paginate.bind(null, octokit), {
      iterator: iterator.bind(null, octokit)
    })
  };
}
paginateRest.VERSION = VERSION;
const distWeb = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  composePaginateRest,
  isPaginatingEndpoint,
  paginateRest,
  paginatingEndpoints
}, Symbol.toStringTag, { value: "Module" }));
const require$$4 = /* @__PURE__ */ getAugmentedNamespace(distWeb);
(function(exports) {
  var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault2 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar2 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.hasOwnProperty.call(mod, k))
          __createBinding2(result, mod, k);
    }
    __setModuleDefault2(result, mod);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getOctokitOptions = exports.GitHub = exports.defaults = exports.context = void 0;
  const Context3 = __importStar2(context$1);
  const Utils = __importStar2(utils$d);
  const core_1 = require$$2;
  const plugin_rest_endpoint_methods_1 = require$$3;
  const plugin_paginate_rest_1 = require$$4;
  exports.context = new Context3.Context();
  const baseUrl = Utils.getApiBaseUrl();
  exports.defaults = {
    baseUrl,
    request: {
      agent: Utils.getProxyAgent(baseUrl)
    }
  };
  exports.GitHub = core_1.Octokit.plugin(plugin_rest_endpoint_methods_1.restEndpointMethods, plugin_paginate_rest_1.paginateRest).defaults(exports.defaults);
  function getOctokitOptions(token, options) {
    const opts = Object.assign({}, options || {});
    const auth2 = Utils.getAuthString(token, opts);
    if (auth2) {
      opts.auth = auth2;
    }
    return opts;
  }
  exports.getOctokitOptions = getOctokitOptions;
})(utils$e);
var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  Object.defineProperty(o, k2, { enumerable: true, get: function() {
    return m[k];
  } });
} : function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function(o, v) {
  o["default"] = v;
});
var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(github, "__esModule", { value: true });
var getOctokit_1 = github.getOctokit = context = github.context = void 0;
const Context2 = __importStar(context$1);
const utils_1 = utils$e;
var context = github.context = new Context2.Context();
function getOctokit(token, options, ...additionalPlugins) {
  const GitHubWithPlugins = utils_1.GitHub.plugin(...additionalPlugins);
  return new GitHubWithPlugins(utils_1.getOctokitOptions(token, options));
}
getOctokit_1 = github.getOctokit = getOctokit;
var spawndamnit = { exports: {} };
var crossSpawn$1 = { exports: {} };
var windows;
var hasRequiredWindows;
function requireWindows() {
  if (hasRequiredWindows)
    return windows;
  hasRequiredWindows = 1;
  windows = isexe2;
  isexe2.sync = sync2;
  var fs2 = require$$0$1;
  function checkPathExt(path2, options) {
    var pathext = options.pathExt !== void 0 ? options.pathExt : process.env.PATHEXT;
    if (!pathext) {
      return true;
    }
    pathext = pathext.split(";");
    if (pathext.indexOf("") !== -1) {
      return true;
    }
    for (var i = 0; i < pathext.length; i++) {
      var p = pathext[i].toLowerCase();
      if (p && path2.substr(-p.length).toLowerCase() === p) {
        return true;
      }
    }
    return false;
  }
  function checkStat(stat2, path2, options) {
    if (!stat2.isSymbolicLink() && !stat2.isFile()) {
      return false;
    }
    return checkPathExt(path2, options);
  }
  function isexe2(path2, options, cb) {
    fs2.stat(path2, function(er, stat2) {
      cb(er, er ? false : checkStat(stat2, path2, options));
    });
  }
  function sync2(path2, options) {
    return checkStat(fs2.statSync(path2), path2, options);
  }
  return windows;
}
var mode;
var hasRequiredMode;
function requireMode() {
  if (hasRequiredMode)
    return mode;
  hasRequiredMode = 1;
  mode = isexe2;
  isexe2.sync = sync2;
  var fs2 = require$$0$1;
  function isexe2(path2, options, cb) {
    fs2.stat(path2, function(er, stat2) {
      cb(er, er ? false : checkStat(stat2, options));
    });
  }
  function sync2(path2, options) {
    return checkStat(fs2.statSync(path2), options);
  }
  function checkStat(stat2, options) {
    return stat2.isFile() && checkMode(stat2, options);
  }
  function checkMode(stat2, options) {
    var mod = stat2.mode;
    var uid = stat2.uid;
    var gid = stat2.gid;
    var myUid = options.uid !== void 0 ? options.uid : process.getuid && process.getuid();
    var myGid = options.gid !== void 0 ? options.gid : process.getgid && process.getgid();
    var u = parseInt("100", 8);
    var g = parseInt("010", 8);
    var o = parseInt("001", 8);
    var ug = u | g;
    var ret = mod & o || mod & g && gid === myGid || mod & u && uid === myUid || mod & ug && myUid === 0;
    return ret;
  }
  return mode;
}
var core$2;
if (process.platform === "win32" || commonjsGlobal.TESTING_WINDOWS) {
  core$2 = requireWindows();
} else {
  core$2 = requireMode();
}
var isexe_1 = isexe$1;
isexe$1.sync = sync$6;
function isexe$1(path2, options, cb) {
  if (typeof options === "function") {
    cb = options;
    options = {};
  }
  if (!cb) {
    if (typeof Promise !== "function") {
      throw new TypeError("callback not provided");
    }
    return new Promise(function(resolve, reject) {
      isexe$1(path2, options || {}, function(er, is) {
        if (er) {
          reject(er);
        } else {
          resolve(is);
        }
      });
    });
  }
  core$2(path2, options || {}, function(er, is) {
    if (er) {
      if (er.code === "EACCES" || options && options.ignoreErrors) {
        er = null;
        is = false;
      }
    }
    cb(er, is);
  });
}
function sync$6(path2, options) {
  try {
    return core$2.sync(path2, options || {});
  } catch (er) {
    if (options && options.ignoreErrors || er.code === "EACCES") {
      return false;
    } else {
      throw er;
    }
  }
}
var which_1 = which$1;
which$1.sync = whichSync;
var isWindows$2 = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
var path$8 = require$$0$3;
var COLON = isWindows$2 ? ";" : ":";
var isexe = isexe_1;
function getNotFoundError(cmd) {
  var er = new Error("not found: " + cmd);
  er.code = "ENOENT";
  return er;
}
function getPathInfo(cmd, opt) {
  var colon = opt.colon || COLON;
  var pathEnv = opt.path || process.env.PATH || "";
  var pathExt = [""];
  pathEnv = pathEnv.split(colon);
  var pathExtExe = "";
  if (isWindows$2) {
    pathEnv.unshift(process.cwd());
    pathExtExe = opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM";
    pathExt = pathExtExe.split(colon);
    if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
      pathExt.unshift("");
  }
  if (cmd.match(/\//) || isWindows$2 && cmd.match(/\\/))
    pathEnv = [""];
  return {
    env: pathEnv,
    ext: pathExt,
    extExe: pathExtExe
  };
}
function which$1(cmd, opt, cb) {
  if (typeof opt === "function") {
    cb = opt;
    opt = {};
  }
  var info = getPathInfo(cmd, opt);
  var pathEnv = info.env;
  var pathExt = info.ext;
  var pathExtExe = info.extExe;
  var found = [];
  (function F(i, l) {
    if (i === l) {
      if (opt.all && found.length)
        return cb(null, found);
      else
        return cb(getNotFoundError(cmd));
    }
    var pathPart = pathEnv[i];
    if (pathPart.charAt(0) === '"' && pathPart.slice(-1) === '"')
      pathPart = pathPart.slice(1, -1);
    var p = path$8.join(pathPart, cmd);
    if (!pathPart && /^\.[\\\/]/.test(cmd)) {
      p = cmd.slice(0, 2) + p;
    }
    (function E(ii, ll) {
      if (ii === ll)
        return F(i + 1, l);
      var ext = pathExt[ii];
      isexe(p + ext, { pathExt: pathExtExe }, function(er, is) {
        if (!er && is) {
          if (opt.all)
            found.push(p + ext);
          else
            return cb(null, p + ext);
        }
        return E(ii + 1, ll);
      });
    })(0, pathExt.length);
  })(0, pathEnv.length);
}
function whichSync(cmd, opt) {
  opt = opt || {};
  var info = getPathInfo(cmd, opt);
  var pathEnv = info.env;
  var pathExt = info.ext;
  var pathExtExe = info.extExe;
  var found = [];
  for (var i = 0, l = pathEnv.length; i < l; i++) {
    var pathPart = pathEnv[i];
    if (pathPart.charAt(0) === '"' && pathPart.slice(-1) === '"')
      pathPart = pathPart.slice(1, -1);
    var p = path$8.join(pathPart, cmd);
    if (!pathPart && /^\.[\\\/]/.test(cmd)) {
      p = cmd.slice(0, 2) + p;
    }
    for (var j = 0, ll = pathExt.length; j < ll; j++) {
      var cur = p + pathExt[j];
      var is;
      try {
        is = isexe.sync(cur, { pathExt: pathExtExe });
        if (is) {
          if (opt.all)
            found.push(cur);
          else
            return cur;
        }
      } catch (ex) {
      }
    }
  }
  if (opt.all && found.length)
    return found;
  if (opt.nothrow)
    return null;
  throw getNotFoundError(cmd);
}
var map$3 = { exports: {} };
var pseudomap;
var hasRequiredPseudomap;
function requirePseudomap() {
  if (hasRequiredPseudomap)
    return pseudomap;
  hasRequiredPseudomap = 1;
  var hasOwnProperty2 = Object.prototype.hasOwnProperty;
  pseudomap = PseudoMap;
  function PseudoMap(set3) {
    if (!(this instanceof PseudoMap))
      throw new TypeError("Constructor PseudoMap requires 'new'");
    this.clear();
    if (set3) {
      if (set3 instanceof PseudoMap || typeof Map === "function" && set3 instanceof Map)
        set3.forEach(function(value2, key) {
          this.set(key, value2);
        }, this);
      else if (Array.isArray(set3))
        set3.forEach(function(kv) {
          this.set(kv[0], kv[1]);
        }, this);
      else
        throw new TypeError("invalid argument");
    }
  }
  PseudoMap.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    Object.keys(this._data).forEach(function(k) {
      if (k !== "size")
        fn.call(thisp, this._data[k].value, this._data[k].key);
    }, this);
  };
  PseudoMap.prototype.has = function(k) {
    return !!find2(this._data, k);
  };
  PseudoMap.prototype.get = function(k) {
    var res = find2(this._data, k);
    return res && res.value;
  };
  PseudoMap.prototype.set = function(k, v) {
    set2(this._data, k, v);
  };
  PseudoMap.prototype.delete = function(k) {
    var res = find2(this._data, k);
    if (res) {
      delete this._data[res._index];
      this._data.size--;
    }
  };
  PseudoMap.prototype.clear = function() {
    var data = /* @__PURE__ */ Object.create(null);
    data.size = 0;
    Object.defineProperty(this, "_data", {
      value: data,
      enumerable: false,
      configurable: true,
      writable: false
    });
  };
  Object.defineProperty(PseudoMap.prototype, "size", {
    get: function() {
      return this._data.size;
    },
    set: function(n) {
    },
    enumerable: true,
    configurable: true
  });
  PseudoMap.prototype.values = PseudoMap.prototype.keys = PseudoMap.prototype.entries = function() {
    throw new Error("iterators are not implemented in this version");
  };
  function same(a, b) {
    return a === b || a !== a && b !== b;
  }
  function Entry2(k, v, i) {
    this.key = k;
    this.value = v;
    this._index = i;
  }
  function find2(data, k) {
    for (var i = 0, s = "_" + k, key = s; hasOwnProperty2.call(data, key); key = s + i++) {
      if (same(data[key].key, k))
        return data[key];
    }
  }
  function set2(data, k, v) {
    for (var i = 0, s = "_" + k, key = s; hasOwnProperty2.call(data, key); key = s + i++) {
      if (same(data[key].key, k)) {
        data[key].value = v;
        return;
      }
    }
    data.size++;
    data[key] = new Entry2(k, v, key);
  }
  return pseudomap;
}
if (process.env.npm_package_name === "pseudomap" && process.env.npm_lifecycle_script === "test")
  process.env.TEST_PSEUDOMAP = "true";
if (typeof Map === "function" && !process.env.TEST_PSEUDOMAP) {
  map$3.exports = Map;
} else {
  map$3.exports = requirePseudomap();
}
var mapExports = map$3.exports;
var yallist = Yallist$1;
Yallist$1.Node = Node;
Yallist$1.create = Yallist$1;
function Yallist$1(list2) {
  var self2 = this;
  if (!(self2 instanceof Yallist$1)) {
    self2 = new Yallist$1();
  }
  self2.tail = null;
  self2.head = null;
  self2.length = 0;
  if (list2 && typeof list2.forEach === "function") {
    list2.forEach(function(item) {
      self2.push(item);
    });
  } else if (arguments.length > 0) {
    for (var i = 0, l = arguments.length; i < l; i++) {
      self2.push(arguments[i]);
    }
  }
  return self2;
}
Yallist$1.prototype.removeNode = function(node2) {
  if (node2.list !== this) {
    throw new Error("removing node which does not belong to this list");
  }
  var next = node2.next;
  var prev = node2.prev;
  if (next) {
    next.prev = prev;
  }
  if (prev) {
    prev.next = next;
  }
  if (node2 === this.head) {
    this.head = next;
  }
  if (node2 === this.tail) {
    this.tail = prev;
  }
  node2.list.length--;
  node2.next = null;
  node2.prev = null;
  node2.list = null;
};
Yallist$1.prototype.unshiftNode = function(node2) {
  if (node2 === this.head) {
    return;
  }
  if (node2.list) {
    node2.list.removeNode(node2);
  }
  var head = this.head;
  node2.list = this;
  node2.next = head;
  if (head) {
    head.prev = node2;
  }
  this.head = node2;
  if (!this.tail) {
    this.tail = node2;
  }
  this.length++;
};
Yallist$1.prototype.pushNode = function(node2) {
  if (node2 === this.tail) {
    return;
  }
  if (node2.list) {
    node2.list.removeNode(node2);
  }
  var tail = this.tail;
  node2.list = this;
  node2.prev = tail;
  if (tail) {
    tail.next = node2;
  }
  this.tail = node2;
  if (!this.head) {
    this.head = node2;
  }
  this.length++;
};
Yallist$1.prototype.push = function() {
  for (var i = 0, l = arguments.length; i < l; i++) {
    push$1(this, arguments[i]);
  }
  return this.length;
};
Yallist$1.prototype.unshift = function() {
  for (var i = 0, l = arguments.length; i < l; i++) {
    unshift(this, arguments[i]);
  }
  return this.length;
};
Yallist$1.prototype.pop = function() {
  if (!this.tail) {
    return void 0;
  }
  var res = this.tail.value;
  this.tail = this.tail.prev;
  if (this.tail) {
    this.tail.next = null;
  } else {
    this.head = null;
  }
  this.length--;
  return res;
};
Yallist$1.prototype.shift = function() {
  if (!this.head) {
    return void 0;
  }
  var res = this.head.value;
  this.head = this.head.next;
  if (this.head) {
    this.head.prev = null;
  } else {
    this.tail = null;
  }
  this.length--;
  return res;
};
Yallist$1.prototype.forEach = function(fn, thisp) {
  thisp = thisp || this;
  for (var walker = this.head, i = 0; walker !== null; i++) {
    fn.call(thisp, walker.value, i, this);
    walker = walker.next;
  }
};
Yallist$1.prototype.forEachReverse = function(fn, thisp) {
  thisp = thisp || this;
  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
    fn.call(thisp, walker.value, i, this);
    walker = walker.prev;
  }
};
Yallist$1.prototype.get = function(n) {
  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
    walker = walker.next;
  }
  if (i === n && walker !== null) {
    return walker.value;
  }
};
Yallist$1.prototype.getReverse = function(n) {
  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
    walker = walker.prev;
  }
  if (i === n && walker !== null) {
    return walker.value;
  }
};
Yallist$1.prototype.map = function(fn, thisp) {
  thisp = thisp || this;
  var res = new Yallist$1();
  for (var walker = this.head; walker !== null; ) {
    res.push(fn.call(thisp, walker.value, this));
    walker = walker.next;
  }
  return res;
};
Yallist$1.prototype.mapReverse = function(fn, thisp) {
  thisp = thisp || this;
  var res = new Yallist$1();
  for (var walker = this.tail; walker !== null; ) {
    res.push(fn.call(thisp, walker.value, this));
    walker = walker.prev;
  }
  return res;
};
Yallist$1.prototype.reduce = function(fn, initial) {
  var acc;
  var walker = this.head;
  if (arguments.length > 1) {
    acc = initial;
  } else if (this.head) {
    walker = this.head.next;
    acc = this.head.value;
  } else {
    throw new TypeError("Reduce of empty list with no initial value");
  }
  for (var i = 0; walker !== null; i++) {
    acc = fn(acc, walker.value, i);
    walker = walker.next;
  }
  return acc;
};
Yallist$1.prototype.reduceReverse = function(fn, initial) {
  var acc;
  var walker = this.tail;
  if (arguments.length > 1) {
    acc = initial;
  } else if (this.tail) {
    walker = this.tail.prev;
    acc = this.tail.value;
  } else {
    throw new TypeError("Reduce of empty list with no initial value");
  }
  for (var i = this.length - 1; walker !== null; i--) {
    acc = fn(acc, walker.value, i);
    walker = walker.prev;
  }
  return acc;
};
Yallist$1.prototype.toArray = function() {
  var arr = new Array(this.length);
  for (var i = 0, walker = this.head; walker !== null; i++) {
    arr[i] = walker.value;
    walker = walker.next;
  }
  return arr;
};
Yallist$1.prototype.toArrayReverse = function() {
  var arr = new Array(this.length);
  for (var i = 0, walker = this.tail; walker !== null; i++) {
    arr[i] = walker.value;
    walker = walker.prev;
  }
  return arr;
};
Yallist$1.prototype.slice = function(from, to) {
  to = to || this.length;
  if (to < 0) {
    to += this.length;
  }
  from = from || 0;
  if (from < 0) {
    from += this.length;
  }
  var ret = new Yallist$1();
  if (to < from || to < 0) {
    return ret;
  }
  if (from < 0) {
    from = 0;
  }
  if (to > this.length) {
    to = this.length;
  }
  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
    walker = walker.next;
  }
  for (; walker !== null && i < to; i++, walker = walker.next) {
    ret.push(walker.value);
  }
  return ret;
};
Yallist$1.prototype.sliceReverse = function(from, to) {
  to = to || this.length;
  if (to < 0) {
    to += this.length;
  }
  from = from || 0;
  if (from < 0) {
    from += this.length;
  }
  var ret = new Yallist$1();
  if (to < from || to < 0) {
    return ret;
  }
  if (from < 0) {
    from = 0;
  }
  if (to > this.length) {
    to = this.length;
  }
  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
    walker = walker.prev;
  }
  for (; walker !== null && i > from; i--, walker = walker.prev) {
    ret.push(walker.value);
  }
  return ret;
};
Yallist$1.prototype.reverse = function() {
  var head = this.head;
  var tail = this.tail;
  for (var walker = head; walker !== null; walker = walker.prev) {
    var p = walker.prev;
    walker.prev = walker.next;
    walker.next = p;
  }
  this.head = tail;
  this.tail = head;
  return this;
};
function push$1(self2, item) {
  self2.tail = new Node(item, self2.tail, null, self2);
  if (!self2.head) {
    self2.head = self2.tail;
  }
  self2.length++;
}
function unshift(self2, item) {
  self2.head = new Node(item, null, self2.head, self2);
  if (!self2.tail) {
    self2.tail = self2.head;
  }
  self2.length++;
}
function Node(value2, prev, next, list2) {
  if (!(this instanceof Node)) {
    return new Node(value2, prev, next, list2);
  }
  this.list = list2;
  this.value = value2;
  if (prev) {
    prev.next = this;
    this.prev = prev;
  } else {
    this.prev = null;
  }
  if (next) {
    next.prev = this;
    this.next = next;
  } else {
    this.next = null;
  }
}
var lruCache = LRUCache;
var Map$1 = mapExports;
var util$2 = require$$0$2;
var Yallist = yallist;
var hasSymbol = typeof Symbol === "function" && process.env._nodeLRUCacheForceNoSymbol !== "1";
var makeSymbol;
if (hasSymbol) {
  makeSymbol = function(key) {
    return Symbol(key);
  };
} else {
  makeSymbol = function(key) {
    return "_" + key;
  };
}
var MAX = makeSymbol("max");
var LENGTH = makeSymbol("length");
var LENGTH_CALCULATOR = makeSymbol("lengthCalculator");
var ALLOW_STALE = makeSymbol("allowStale");
var MAX_AGE = makeSymbol("maxAge");
var DISPOSE = makeSymbol("dispose");
var NO_DISPOSE_ON_SET = makeSymbol("noDisposeOnSet");
var LRU_LIST = makeSymbol("lruList");
var CACHE = makeSymbol("cache");
function naiveLength() {
  return 1;
}
function LRUCache(options) {
  if (!(this instanceof LRUCache)) {
    return new LRUCache(options);
  }
  if (typeof options === "number") {
    options = { max: options };
  }
  if (!options) {
    options = {};
  }
  var max = this[MAX] = options.max;
  if (!max || !(typeof max === "number") || max <= 0) {
    this[MAX] = Infinity;
  }
  var lc = options.length || naiveLength;
  if (typeof lc !== "function") {
    lc = naiveLength;
  }
  this[LENGTH_CALCULATOR] = lc;
  this[ALLOW_STALE] = options.stale || false;
  this[MAX_AGE] = options.maxAge || 0;
  this[DISPOSE] = options.dispose;
  this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
  this.reset();
}
Object.defineProperty(LRUCache.prototype, "max", {
  set: function(mL) {
    if (!mL || !(typeof mL === "number") || mL <= 0) {
      mL = Infinity;
    }
    this[MAX] = mL;
    trim(this);
  },
  get: function() {
    return this[MAX];
  },
  enumerable: true
});
Object.defineProperty(LRUCache.prototype, "allowStale", {
  set: function(allowStale) {
    this[ALLOW_STALE] = !!allowStale;
  },
  get: function() {
    return this[ALLOW_STALE];
  },
  enumerable: true
});
Object.defineProperty(LRUCache.prototype, "maxAge", {
  set: function(mA) {
    if (!mA || !(typeof mA === "number") || mA < 0) {
      mA = 0;
    }
    this[MAX_AGE] = mA;
    trim(this);
  },
  get: function() {
    return this[MAX_AGE];
  },
  enumerable: true
});
Object.defineProperty(LRUCache.prototype, "lengthCalculator", {
  set: function(lC) {
    if (typeof lC !== "function") {
      lC = naiveLength;
    }
    if (lC !== this[LENGTH_CALCULATOR]) {
      this[LENGTH_CALCULATOR] = lC;
      this[LENGTH] = 0;
      this[LRU_LIST].forEach(function(hit) {
        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
        this[LENGTH] += hit.length;
      }, this);
    }
    trim(this);
  },
  get: function() {
    return this[LENGTH_CALCULATOR];
  },
  enumerable: true
});
Object.defineProperty(LRUCache.prototype, "length", {
  get: function() {
    return this[LENGTH];
  },
  enumerable: true
});
Object.defineProperty(LRUCache.prototype, "itemCount", {
  get: function() {
    return this[LRU_LIST].length;
  },
  enumerable: true
});
LRUCache.prototype.rforEach = function(fn, thisp) {
  thisp = thisp || this;
  for (var walker = this[LRU_LIST].tail; walker !== null; ) {
    var prev = walker.prev;
    forEachStep(this, fn, walker, thisp);
    walker = prev;
  }
};
function forEachStep(self2, fn, node2, thisp) {
  var hit = node2.value;
  if (isStale(self2, hit)) {
    del(self2, node2);
    if (!self2[ALLOW_STALE]) {
      hit = void 0;
    }
  }
  if (hit) {
    fn.call(thisp, hit.value, hit.key, self2);
  }
}
LRUCache.prototype.forEach = function(fn, thisp) {
  thisp = thisp || this;
  for (var walker = this[LRU_LIST].head; walker !== null; ) {
    var next = walker.next;
    forEachStep(this, fn, walker, thisp);
    walker = next;
  }
};
LRUCache.prototype.keys = function() {
  return this[LRU_LIST].toArray().map(function(k) {
    return k.key;
  }, this);
};
LRUCache.prototype.values = function() {
  return this[LRU_LIST].toArray().map(function(k) {
    return k.value;
  }, this);
};
LRUCache.prototype.reset = function() {
  if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
    this[LRU_LIST].forEach(function(hit) {
      this[DISPOSE](hit.key, hit.value);
    }, this);
  }
  this[CACHE] = new Map$1();
  this[LRU_LIST] = new Yallist();
  this[LENGTH] = 0;
};
LRUCache.prototype.dump = function() {
  return this[LRU_LIST].map(function(hit) {
    if (!isStale(this, hit)) {
      return {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      };
    }
  }, this).toArray().filter(function(h) {
    return h;
  });
};
LRUCache.prototype.dumpLru = function() {
  return this[LRU_LIST];
};
LRUCache.prototype.inspect = function(n, opts) {
  var str2 = "LRUCache {";
  var extras = false;
  var as = this[ALLOW_STALE];
  if (as) {
    str2 += "\n  allowStale: true";
    extras = true;
  }
  var max = this[MAX];
  if (max && max !== Infinity) {
    if (extras) {
      str2 += ",";
    }
    str2 += "\n  max: " + util$2.inspect(max, opts);
    extras = true;
  }
  var maxAge = this[MAX_AGE];
  if (maxAge) {
    if (extras) {
      str2 += ",";
    }
    str2 += "\n  maxAge: " + util$2.inspect(maxAge, opts);
    extras = true;
  }
  var lc = this[LENGTH_CALCULATOR];
  if (lc && lc !== naiveLength) {
    if (extras) {
      str2 += ",";
    }
    str2 += "\n  length: " + util$2.inspect(this[LENGTH], opts);
    extras = true;
  }
  var didFirst = false;
  this[LRU_LIST].forEach(function(item) {
    if (didFirst) {
      str2 += ",\n  ";
    } else {
      if (extras) {
        str2 += ",\n";
      }
      didFirst = true;
      str2 += "\n  ";
    }
    var key = util$2.inspect(item.key).split("\n").join("\n  ");
    var val = { value: item.value };
    if (item.maxAge !== maxAge) {
      val.maxAge = item.maxAge;
    }
    if (lc !== naiveLength) {
      val.length = item.length;
    }
    if (isStale(this, item)) {
      val.stale = true;
    }
    val = util$2.inspect(val, opts).split("\n").join("\n  ");
    str2 += key + " => " + val;
  });
  if (didFirst || extras) {
    str2 += "\n";
  }
  str2 += "}";
  return str2;
};
LRUCache.prototype.set = function(key, value2, maxAge) {
  maxAge = maxAge || this[MAX_AGE];
  var now = maxAge ? Date.now() : 0;
  var len = this[LENGTH_CALCULATOR](value2, key);
  if (this[CACHE].has(key)) {
    if (len > this[MAX]) {
      del(this, this[CACHE].get(key));
      return false;
    }
    var node2 = this[CACHE].get(key);
    var item = node2.value;
    if (this[DISPOSE]) {
      if (!this[NO_DISPOSE_ON_SET]) {
        this[DISPOSE](key, item.value);
      }
    }
    item.now = now;
    item.maxAge = maxAge;
    item.value = value2;
    this[LENGTH] += len - item.length;
    item.length = len;
    this.get(key);
    trim(this);
    return true;
  }
  var hit = new Entry(key, value2, len, now, maxAge);
  if (hit.length > this[MAX]) {
    if (this[DISPOSE]) {
      this[DISPOSE](key, value2);
    }
    return false;
  }
  this[LENGTH] += hit.length;
  this[LRU_LIST].unshift(hit);
  this[CACHE].set(key, this[LRU_LIST].head);
  trim(this);
  return true;
};
LRUCache.prototype.has = function(key) {
  if (!this[CACHE].has(key))
    return false;
  var hit = this[CACHE].get(key).value;
  if (isStale(this, hit)) {
    return false;
  }
  return true;
};
LRUCache.prototype.get = function(key) {
  return get(this, key, true);
};
LRUCache.prototype.peek = function(key) {
  return get(this, key, false);
};
LRUCache.prototype.pop = function() {
  var node2 = this[LRU_LIST].tail;
  if (!node2)
    return null;
  del(this, node2);
  return node2.value;
};
LRUCache.prototype.del = function(key) {
  del(this, this[CACHE].get(key));
};
LRUCache.prototype.load = function(arr) {
  this.reset();
  var now = Date.now();
  for (var l = arr.length - 1; l >= 0; l--) {
    var hit = arr[l];
    var expiresAt = hit.e || 0;
    if (expiresAt === 0) {
      this.set(hit.k, hit.v);
    } else {
      var maxAge = expiresAt - now;
      if (maxAge > 0) {
        this.set(hit.k, hit.v, maxAge);
      }
    }
  }
};
LRUCache.prototype.prune = function() {
  var self2 = this;
  this[CACHE].forEach(function(value2, key) {
    get(self2, key, false);
  });
};
function get(self2, key, doUse) {
  var node2 = self2[CACHE].get(key);
  if (node2) {
    var hit = node2.value;
    if (isStale(self2, hit)) {
      del(self2, node2);
      if (!self2[ALLOW_STALE])
        hit = void 0;
    } else {
      if (doUse) {
        self2[LRU_LIST].unshiftNode(node2);
      }
    }
    if (hit)
      hit = hit.value;
  }
  return hit;
}
function isStale(self2, hit) {
  if (!hit || !hit.maxAge && !self2[MAX_AGE]) {
    return false;
  }
  var stale = false;
  var diff = Date.now() - hit.now;
  if (hit.maxAge) {
    stale = diff > hit.maxAge;
  } else {
    stale = self2[MAX_AGE] && diff > self2[MAX_AGE];
  }
  return stale;
}
function trim(self2) {
  if (self2[LENGTH] > self2[MAX]) {
    for (var walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
      var prev = walker.prev;
      del(self2, walker);
      walker = prev;
    }
  }
}
function del(self2, node2) {
  if (node2) {
    var hit = node2.value;
    if (self2[DISPOSE]) {
      self2[DISPOSE](hit.key, hit.value);
    }
    self2[LENGTH] -= hit.length;
    self2[CACHE].delete(hit.key);
    self2[LRU_LIST].removeNode(node2);
  }
}
function Entry(key, value2, length, now, maxAge) {
  this.key = key;
  this.value = value2;
  this.length = length;
  this.now = now;
  this.maxAge = maxAge || 0;
}
var path$7 = require$$0$3;
var which = which_1;
var LRU$1 = lruCache;
var commandCache = new LRU$1({ max: 50, maxAge: 30 * 1e3 });
function resolveCommand$2(command2, noExtension) {
  var resolved;
  noExtension = !!noExtension;
  resolved = commandCache.get(command2 + "!" + noExtension);
  if (commandCache.has(command2)) {
    return commandCache.get(command2);
  }
  try {
    resolved = !noExtension ? which.sync(command2) : which.sync(command2, { pathExt: path$7.delimiter + (process.env.PATHEXT || "") });
  } catch (e) {
  }
  commandCache.set(command2 + "!" + noExtension, resolved);
  return resolved;
}
var resolveCommand_1 = resolveCommand$2;
function hasEmptyArgumentBug$1() {
  var nodeVer;
  if (process.platform !== "win32") {
    return false;
  }
  nodeVer = process.version.substr(1).split(".").map(function(num) {
    return parseInt(num, 10);
  });
  return nodeVer[0] === 0 && nodeVer[1] < 12;
}
var hasEmptyArgumentBug_1 = hasEmptyArgumentBug$1();
function escapeArgument$2(arg, quote) {
  arg = "" + arg;
  if (!quote) {
    arg = arg.replace(/([()%!^<>&|;,"'\s])/g, "^$1");
  } else {
    arg = arg.replace(/(\\*)"/g, '$1$1\\"');
    arg = arg.replace(/(\\*)$/, "$1$1");
    arg = '"' + arg + '"';
  }
  return arg;
}
var escapeArgument_1 = escapeArgument$2;
var escapeArgument$1 = escapeArgument_1;
function escapeCommand$1(command2) {
  return /^[a-z0-9_-]+$/i.test(command2) ? command2 : escapeArgument$1(command2, true);
}
var escapeCommand_1 = escapeCommand$1;
var shebangRegex$1 = /^#!.*/;
var shebangRegex = shebangRegex$1;
var shebangCommand$1 = function(str2) {
  var match = str2.match(shebangRegex);
  if (!match) {
    return null;
  }
  var arr = match[0].replace(/#! ?/, "").split(" ");
  var bin = arr[0].split("/").pop();
  var arg = arr[1];
  return bin === "env" ? arg : bin + (arg ? " " + arg : "");
};
var fs$8 = require$$0$1;
var LRU = lruCache;
var shebangCommand = shebangCommand$1;
var shebangCache = new LRU({ max: 50, maxAge: 30 * 1e3 });
function readShebang$1(command2) {
  var buffer2;
  var fd;
  var shebang;
  if (shebangCache.has(command2)) {
    return shebangCache.get(command2);
  }
  buffer2 = new Buffer(150);
  try {
    fd = fs$8.openSync(command2, "r");
    fs$8.readSync(fd, buffer2, 0, 150, 0);
    fs$8.closeSync(fd);
  } catch (e) {
  }
  shebang = shebangCommand(buffer2.toString());
  shebangCache.set(command2, shebang);
  return shebang;
}
var readShebang_1 = readShebang$1;
var resolveCommand$1 = resolveCommand_1;
var hasEmptyArgumentBug = hasEmptyArgumentBug_1;
var escapeArgument = escapeArgument_1;
var escapeCommand = escapeCommand_1;
var readShebang = readShebang_1;
var isWin$2 = process.platform === "win32";
var skipShellRegExp = /\.(?:com|exe)$/i;
var supportsShellOption = parseInt(process.version.substr(1).split(".")[0], 10) >= 6 || parseInt(process.version.substr(1).split(".")[0], 10) === 4 && parseInt(process.version.substr(1).split(".")[1], 10) >= 8;
function parseNonShell(parsed) {
  var shebang;
  var needsShell;
  var applyQuotes;
  if (!isWin$2) {
    return parsed;
  }
  parsed.file = resolveCommand$1(parsed.command);
  parsed.file = parsed.file || resolveCommand$1(parsed.command, true);
  shebang = parsed.file && readShebang(parsed.file);
  if (shebang) {
    parsed.args.unshift(parsed.file);
    parsed.command = shebang;
    needsShell = hasEmptyArgumentBug || !skipShellRegExp.test(resolveCommand$1(shebang) || resolveCommand$1(shebang, true));
  } else {
    needsShell = hasEmptyArgumentBug || !skipShellRegExp.test(parsed.file);
  }
  if (needsShell) {
    applyQuotes = parsed.command !== "echo";
    parsed.command = escapeCommand(parsed.command);
    parsed.args = parsed.args.map(function(arg) {
      return escapeArgument(arg, applyQuotes);
    });
    parsed.args = ["/d", "/s", "/c", '"' + parsed.command + (parsed.args.length ? " " + parsed.args.join(" ") : "") + '"'];
    parsed.command = process.env.comspec || "cmd.exe";
    parsed.options.windowsVerbatimArguments = true;
  }
  return parsed;
}
function parseShell(parsed) {
  var shellCommand;
  if (supportsShellOption) {
    return parsed;
  }
  shellCommand = [parsed.command].concat(parsed.args).join(" ");
  if (isWin$2) {
    parsed.command = typeof parsed.options.shell === "string" ? parsed.options.shell : process.env.comspec || "cmd.exe";
    parsed.args = ["/d", "/s", "/c", '"' + shellCommand + '"'];
    parsed.options.windowsVerbatimArguments = true;
  } else {
    if (typeof parsed.options.shell === "string") {
      parsed.command = parsed.options.shell;
    } else if (process.platform === "android") {
      parsed.command = "/system/bin/sh";
    } else {
      parsed.command = "/bin/sh";
    }
    parsed.args = ["-c", shellCommand];
  }
  return parsed;
}
function parse$7(command2, args, options) {
  var parsed;
  if (args && !Array.isArray(args)) {
    options = args;
    args = null;
  }
  args = args ? args.slice(0) : [];
  options = options || {};
  parsed = {
    command: command2,
    args,
    options,
    file: void 0,
    original: command2
  };
  return options.shell ? parseShell(parsed) : parseNonShell(parsed);
}
var parse_1$2 = parse$7;
var enoent$1 = {};
var isWin$1 = process.platform === "win32";
var resolveCommand = resolveCommand_1;
var isNode10 = process.version.indexOf("v0.10.") === 0;
function notFoundError(command2, syscall) {
  var err;
  err = new Error(syscall + " " + command2 + " ENOENT");
  err.code = err.errno = "ENOENT";
  err.syscall = syscall + " " + command2;
  return err;
}
function hookChildProcess(cp2, parsed) {
  var originalEmit;
  if (!isWin$1) {
    return;
  }
  originalEmit = cp2.emit;
  cp2.emit = function(name, arg1) {
    var err;
    if (name === "exit") {
      err = verifyENOENT(arg1, parsed);
      if (err) {
        return originalEmit.call(cp2, "error", err);
      }
    }
    return originalEmit.apply(cp2, arguments);
  };
}
function verifyENOENT(status, parsed) {
  if (isWin$1 && status === 1 && !parsed.file) {
    return notFoundError(parsed.original, "spawn");
  }
  return null;
}
function verifyENOENTSync(status, parsed) {
  if (isWin$1 && status === 1 && !parsed.file) {
    return notFoundError(parsed.original, "spawnSync");
  }
  if (isNode10 && status === -1) {
    parsed.file = isWin$1 ? parsed.file : resolveCommand(parsed.original);
    if (!parsed.file) {
      return notFoundError(parsed.original, "spawnSync");
    }
  }
  return null;
}
enoent$1.hookChildProcess = hookChildProcess;
enoent$1.verifyENOENT = verifyENOENT;
enoent$1.verifyENOENTSync = verifyENOENTSync;
enoent$1.notFoundError = notFoundError;
var cp = require$$1$3;
var parse$6 = parse_1$2;
var enoent = enoent$1;
var cpSpawnSync = cp.spawnSync;
function spawn$2(command2, args, options) {
  var parsed;
  var spawned;
  parsed = parse$6(command2, args, options);
  spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
  enoent.hookChildProcess(spawned, parsed);
  return spawned;
}
function spawnSync(command2, args, options) {
  var parsed;
  var result;
  if (!cpSpawnSync) {
    try {
      cpSpawnSync = require("spawn-sync");
    } catch (ex) {
      throw new Error(
        "In order to use spawnSync on node 0.10 or older, you must install spawn-sync:\n\n  npm install spawn-sync --save"
      );
    }
  }
  parsed = parse$6(command2, args, options);
  result = cpSpawnSync(parsed.command, parsed.args, parsed.options);
  result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
  return result;
}
crossSpawn$1.exports = spawn$2;
crossSpawn$1.exports.spawn = spawn$2;
crossSpawn$1.exports.sync = spawnSync;
crossSpawn$1.exports._parse = parse$6;
crossSpawn$1.exports._enoent = enoent;
var crossSpawnExports = crossSpawn$1.exports;
var signalExit = { exports: {} };
var signals$1 = { exports: {} };
var hasRequiredSignals;
function requireSignals() {
  if (hasRequiredSignals)
    return signals$1.exports;
  hasRequiredSignals = 1;
  (function(module) {
    module.exports = [
      "SIGABRT",
      "SIGALRM",
      "SIGHUP",
      "SIGINT",
      "SIGTERM"
    ];
    if (process.platform !== "win32") {
      module.exports.push(
        "SIGVTALRM",
        "SIGXCPU",
        "SIGXFSZ",
        "SIGUSR2",
        "SIGTRAP",
        "SIGSYS",
        "SIGQUIT",
        "SIGIOT"
        // should detect profiler and enable/disable accordingly.
        // see #21
        // 'SIGPROF'
      );
    }
    if (process.platform === "linux") {
      module.exports.push(
        "SIGIO",
        "SIGPOLL",
        "SIGPWR",
        "SIGSTKFLT",
        "SIGUNUSED"
      );
    }
  })(signals$1);
  return signals$1.exports;
}
var process$1 = commonjsGlobal.process;
const processOk = function(process2) {
  return process2 && typeof process2 === "object" && typeof process2.removeListener === "function" && typeof process2.emit === "function" && typeof process2.reallyExit === "function" && typeof process2.listeners === "function" && typeof process2.kill === "function" && typeof process2.pid === "number" && typeof process2.on === "function";
};
if (!processOk(process$1)) {
  signalExit.exports = function() {
    return function() {
    };
  };
} else {
  var assert = require$$0$4;
  var signals = requireSignals();
  var isWin = /^win/i.test(process$1.platform);
  var EE = require$$2$2;
  if (typeof EE !== "function") {
    EE = EE.EventEmitter;
  }
  var emitter;
  if (process$1.__signal_exit_emitter__) {
    emitter = process$1.__signal_exit_emitter__;
  } else {
    emitter = process$1.__signal_exit_emitter__ = new EE();
    emitter.count = 0;
    emitter.emitted = {};
  }
  if (!emitter.infinite) {
    emitter.setMaxListeners(Infinity);
    emitter.infinite = true;
  }
  signalExit.exports = function(cb, opts) {
    if (!processOk(commonjsGlobal.process)) {
      return function() {
      };
    }
    assert.equal(typeof cb, "function", "a callback must be provided for exit handler");
    if (loaded === false) {
      load$2();
    }
    var ev = "exit";
    if (opts && opts.alwaysLast) {
      ev = "afterexit";
    }
    var remove2 = function() {
      emitter.removeListener(ev, cb);
      if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
        unload();
      }
    };
    emitter.on(ev, cb);
    return remove2;
  };
  var unload = function unload2() {
    if (!loaded || !processOk(commonjsGlobal.process)) {
      return;
    }
    loaded = false;
    signals.forEach(function(sig) {
      try {
        process$1.removeListener(sig, sigListeners[sig]);
      } catch (er) {
      }
    });
    process$1.emit = originalProcessEmit;
    process$1.reallyExit = originalProcessReallyExit;
    emitter.count -= 1;
  };
  signalExit.exports.unload = unload;
  var emit = function emit2(event, code2, signal) {
    if (emitter.emitted[event]) {
      return;
    }
    emitter.emitted[event] = true;
    emitter.emit(event, code2, signal);
  };
  var sigListeners = {};
  signals.forEach(function(sig) {
    sigListeners[sig] = function listener() {
      if (!processOk(commonjsGlobal.process)) {
        return;
      }
      var listeners = process$1.listeners(sig);
      if (listeners.length === emitter.count) {
        unload();
        emit("exit", null, sig);
        emit("afterexit", null, sig);
        if (isWin && sig === "SIGHUP") {
          sig = "SIGINT";
        }
        process$1.kill(process$1.pid, sig);
      }
    };
  });
  signalExit.exports.signals = function() {
    return signals;
  };
  var loaded = false;
  var load$2 = function load2() {
    if (loaded || !processOk(commonjsGlobal.process)) {
      return;
    }
    loaded = true;
    emitter.count += 1;
    signals = signals.filter(function(sig) {
      try {
        process$1.on(sig, sigListeners[sig]);
        return true;
      } catch (er) {
        return false;
      }
    });
    process$1.emit = processEmit;
    process$1.reallyExit = processReallyExit;
  };
  signalExit.exports.load = load$2;
  var originalProcessReallyExit = process$1.reallyExit;
  var processReallyExit = function processReallyExit2(code2) {
    if (!processOk(commonjsGlobal.process)) {
      return;
    }
    process$1.exitCode = code2 || /* istanbul ignore next */
    0;
    emit("exit", process$1.exitCode, null);
    emit("afterexit", process$1.exitCode, null);
    originalProcessReallyExit.call(process$1, process$1.exitCode);
  };
  var originalProcessEmit = process$1.emit;
  var processEmit = function processEmit2(ev, arg) {
    if (ev === "exit" && processOk(commonjsGlobal.process)) {
      if (arg !== void 0) {
        process$1.exitCode = arg;
      }
      var ret = originalProcessEmit.apply(this, arguments);
      emit("exit", process$1.exitCode, null);
      emit("afterexit", process$1.exitCode, null);
      return ret;
    } else {
      return originalProcessEmit.apply(this, arguments);
    }
  };
}
var signalExitExports = signalExit.exports;
const EventEmitter = require$$2$2;
let ChildProcessPromise$1 = class ChildProcessPromise extends Promise {
  constructor(executer) {
    let resolve;
    let reject;
    super((res, rej) => {
      resolve = res;
      reject = rej;
    });
    executer(resolve, reject, this);
  }
};
Object.assign(ChildProcessPromise$1.prototype, EventEmitter.prototype);
var promise = ChildProcessPromise$1;
const crossSpawn = crossSpawnExports;
const onExit = signalExitExports;
const ChildProcessPromise2 = promise;
const activeProcesses = /* @__PURE__ */ new Set();
onExit(() => {
  for (let child2 of activeProcesses) {
    child2.kill("SIGTERM");
  }
});
function spawn(cmd, args, opts) {
  return new ChildProcessPromise2((resolve, reject, events2) => {
    let child2 = crossSpawn(cmd, args, opts);
    let stdout = Buffer.from("");
    let stderr = Buffer.from("");
    activeProcesses.add(child2);
    if (child2.stdout) {
      child2.stdout.on("data", (data) => {
        stdout = Buffer.concat([stdout, data]);
        events2.emit("stdout", data);
      });
    }
    if (child2.stderr) {
      child2.stderr.on("data", (data) => {
        stderr = Buffer.concat([stderr, data]);
        events2.emit("stderr", data);
      });
    }
    child2.on("error", (err) => {
      activeProcesses.delete(child2);
      reject(err);
    });
    child2.on("close", (code2) => {
      activeProcesses.delete(child2);
      resolve({ code: code2, stdout, stderr });
    });
  });
}
spawndamnit.exports = spawn;
spawndamnit.exports.ChildProcessPromise = ChildProcessPromise2;
var spawndamnitExports = spawndamnit.exports;
const spawn$1 = /* @__PURE__ */ getDefaultExportFromCjs(spawndamnitExports);
var getPackages_cjs = { exports: {} };
var getPackages_cjs_prod = {};
var regeneratorRuntime$1 = { exports: {} };
var _typeof$1 = { exports: {} };
var hasRequired_typeof;
function require_typeof() {
  if (hasRequired_typeof)
    return _typeof$1.exports;
  hasRequired_typeof = 1;
  (function(module) {
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      return module.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof2(obj);
    }
    module.exports = _typeof2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(_typeof$1);
  return _typeof$1.exports;
}
var hasRequiredRegeneratorRuntime;
function requireRegeneratorRuntime() {
  if (hasRequiredRegeneratorRuntime)
    return regeneratorRuntime$1.exports;
  hasRequiredRegeneratorRuntime = 1;
  (function(module) {
    var _typeof2 = require_typeof()["default"];
    function _regeneratorRuntime2() {
      module.exports = _regeneratorRuntime2 = function _regeneratorRuntime3() {
        return exports;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var exports = {}, Op = Object.prototype, hasOwn2 = Op.hasOwnProperty, defineProperty2 = Object.defineProperty || function(obj, key, desc) {
        obj[key] = desc.value;
      }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
      function define(obj, key, value2) {
        return Object.defineProperty(obj, key, {
          value: value2,
          enumerable: true,
          configurable: true,
          writable: true
        }), obj[key];
      }
      try {
        define({}, "");
      } catch (err) {
        define = function define2(obj, key, value2) {
          return obj[key] = value2;
        };
      }
      function wrap2(innerFn, outerFn, self2, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context2 = new Context3(tryLocsList || []);
        return defineProperty2(generator, "_invoke", {
          value: makeInvokeMethod(innerFn, self2, context2)
        }), generator;
      }
      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }
      exports.wrap = wrap2;
      var ContinueSentinel = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function() {
        return this;
      });
      var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn2.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }
      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if ("throw" !== record.type) {
            var result = record.arg, value2 = result.value;
            return value2 && "object" == _typeof2(value2) && hasOwn2.call(value2, "__await") ? PromiseImpl.resolve(value2.__await).then(function(value3) {
              invoke("next", value3, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value2).then(function(unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function(error2) {
              return invoke("throw", error2, resolve, reject);
            });
          }
          reject(record.arg);
        }
        var previousPromise;
        defineProperty2(this, "_invoke", {
          value: function value2(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function(resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(innerFn, self2, context2) {
        var state = "suspendedStart";
        return function(method, arg) {
          if ("executing" === state)
            throw new Error("Generator is already running");
          if ("completed" === state) {
            if ("throw" === method)
              throw arg;
            return doneResult();
          }
          for (context2.method = method, context2.arg = arg; ; ) {
            var delegate = context2.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context2);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel)
                  continue;
                return delegateResult;
              }
            }
            if ("next" === context2.method)
              context2.sent = context2._sent = context2.arg;
            else if ("throw" === context2.method) {
              if ("suspendedStart" === state)
                throw state = "completed", context2.arg;
              context2.dispatchException(context2.arg);
            } else
              "return" === context2.method && context2.abrupt("return", context2.arg);
            state = "executing";
            var record = tryCatch(innerFn, self2, context2);
            if ("normal" === record.type) {
              if (state = context2.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
                continue;
              return {
                value: record.arg,
                done: context2.done
              };
            }
            "throw" === record.type && (state = "completed", context2.method = "throw", context2.arg = record.arg);
          }
        };
      }
      function maybeInvokeDelegate(delegate, context2) {
        var methodName = context2.method, method = delegate.iterator[methodName];
        if (void 0 === method)
          return context2.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context2.method = "return", context2.arg = void 0, maybeInvokeDelegate(delegate, context2), "throw" === context2.method) || "return" !== methodName && (context2.method = "throw", context2.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
        var record = tryCatch(method, delegate.iterator, context2.arg);
        if ("throw" === record.type)
          return context2.method = "throw", context2.arg = record.arg, context2.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context2[delegate.resultName] = info.value, context2.next = delegate.nextLoc, "return" !== context2.method && (context2.method = "next", context2.arg = void 0), context2.delegate = null, ContinueSentinel) : info : (context2.method = "throw", context2.arg = new TypeError("iterator result is not an object"), context2.delegate = null, ContinueSentinel);
      }
      function pushTryEntry(locs) {
        var entry2 = {
          tryLoc: locs[0]
        };
        1 in locs && (entry2.catchLoc = locs[1]), 2 in locs && (entry2.finallyLoc = locs[2], entry2.afterLoc = locs[3]), this.tryEntries.push(entry2);
      }
      function resetTryEntry(entry2) {
        var record = entry2.completion || {};
        record.type = "normal", delete record.arg, entry2.completion = record;
      }
      function Context3(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
      }
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod)
            return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next)
            return iterable;
          if (!isNaN(iterable.length)) {
            var i = -1, next = function next2() {
              for (; ++i < iterable.length; )
                if (hasOwn2.call(iterable, i))
                  return next2.value = iterable[i], next2.done = false, next2;
              return next2.value = void 0, next2.done = true, next2;
            };
            return next.next = next;
          }
        }
        return {
          next: doneResult
        };
      }
      function doneResult() {
        return {
          value: void 0,
          done: true
        };
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty2(Gp, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
      }), defineProperty2(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
      }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function(genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function(genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function(arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap2(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
        return this;
      }), define(Gp, "toString", function() {
        return "[object Generator]";
      }), exports.keys = function(val) {
        var object = Object(val), keys2 = [];
        for (var key in object)
          keys2.push(key);
        return keys2.reverse(), function next() {
          for (; keys2.length; ) {
            var key2 = keys2.pop();
            if (key2 in object)
              return next.value = key2, next.done = false, next;
          }
          return next.done = true, next;
        };
      }, exports.values = values, Context3.prototype = {
        constructor: Context3,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
            for (var name in this)
              "t" === name.charAt(0) && hasOwn2.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
        },
        stop: function stop() {
          this.done = true;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type)
            throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception2) {
          if (this.done)
            throw exception2;
          var context2 = this;
          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception2, context2.next = loc, caught && (context2.method = "next", context2.arg = void 0), !!caught;
          }
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry2 = this.tryEntries[i], record = entry2.completion;
            if ("root" === entry2.tryLoc)
              return handle("end");
            if (entry2.tryLoc <= this.prev) {
              var hasCatch = hasOwn2.call(entry2, "catchLoc"), hasFinally = hasOwn2.call(entry2, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry2.catchLoc)
                  return handle(entry2.catchLoc, true);
                if (this.prev < entry2.finallyLoc)
                  return handle(entry2.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry2.catchLoc)
                  return handle(entry2.catchLoc, true);
              } else {
                if (!hasFinally)
                  throw new Error("try statement without catch or finally");
                if (this.prev < entry2.finallyLoc)
                  return handle(entry2.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type2, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry2 = this.tryEntries[i];
            if (entry2.tryLoc <= this.prev && hasOwn2.call(entry2, "finallyLoc") && this.prev < entry2.finallyLoc) {
              var finallyEntry = entry2;
              break;
            }
          }
          finallyEntry && ("break" === type2 || "continue" === type2) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type2, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type)
            throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry2 = this.tryEntries[i];
            if (entry2.finallyLoc === finallyLoc)
              return this.complete(entry2.completion, entry2.afterLoc), resetTryEntry(entry2), ContinueSentinel;
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry2 = this.tryEntries[i];
            if (entry2.tryLoc === tryLoc) {
              var record = entry2.completion;
              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry2);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName,
            nextLoc
          }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
        }
      }, exports;
    }
    module.exports = _regeneratorRuntime2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(regeneratorRuntime$1);
  return regeneratorRuntime$1.exports;
}
var regenerator;
var hasRequiredRegenerator;
function requireRegenerator() {
  if (hasRequiredRegenerator)
    return regenerator;
  hasRequiredRegenerator = 1;
  var runtime = requireRegeneratorRuntime()();
  regenerator = runtime;
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
  return regenerator;
}
var asyncToGenerator = { exports: {} };
var hasRequiredAsyncToGenerator;
function requireAsyncToGenerator() {
  if (hasRequiredAsyncToGenerator)
    return asyncToGenerator.exports;
  hasRequiredAsyncToGenerator = 1;
  (function(module) {
    function asyncGeneratorStep2(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value2 = info.value;
      } catch (error2) {
        reject(error2);
        return;
      }
      if (info.done) {
        resolve(value2);
      } else {
        Promise.resolve(value2).then(_next, _throw);
      }
    }
    function _asyncToGenerator2(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self2, args);
          function _next(value2) {
            asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "next", value2);
          }
          function _throw(err) {
            asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    module.exports = _asyncToGenerator2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(asyncToGenerator);
  return asyncToGenerator.exports;
}
var classCallCheck = { exports: {} };
var hasRequiredClassCallCheck;
function requireClassCallCheck() {
  if (hasRequiredClassCallCheck)
    return classCallCheck.exports;
  hasRequiredClassCallCheck = 1;
  (function(module) {
    function _classCallCheck2(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    module.exports = _classCallCheck2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(classCallCheck);
  return classCallCheck.exports;
}
var possibleConstructorReturn = { exports: {} };
var assertThisInitialized = { exports: {} };
var hasRequiredAssertThisInitialized;
function requireAssertThisInitialized() {
  if (hasRequiredAssertThisInitialized)
    return assertThisInitialized.exports;
  hasRequiredAssertThisInitialized = 1;
  (function(module) {
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    module.exports = _assertThisInitialized2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(assertThisInitialized);
  return assertThisInitialized.exports;
}
var hasRequiredPossibleConstructorReturn;
function requirePossibleConstructorReturn() {
  if (hasRequiredPossibleConstructorReturn)
    return possibleConstructorReturn.exports;
  hasRequiredPossibleConstructorReturn = 1;
  (function(module) {
    var _typeof2 = require_typeof()["default"];
    var assertThisInitialized2 = requireAssertThisInitialized();
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return assertThisInitialized2(self2);
    }
    module.exports = _possibleConstructorReturn2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(possibleConstructorReturn);
  return possibleConstructorReturn.exports;
}
var getPrototypeOf = { exports: {} };
var hasRequiredGetPrototypeOf;
function requireGetPrototypeOf() {
  if (hasRequiredGetPrototypeOf)
    return getPrototypeOf.exports;
  hasRequiredGetPrototypeOf = 1;
  (function(module) {
    function _getPrototypeOf2(o) {
      module.exports = _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _getPrototypeOf2(o);
    }
    module.exports = _getPrototypeOf2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(getPrototypeOf);
  return getPrototypeOf.exports;
}
var inherits = { exports: {} };
var setPrototypeOf = { exports: {} };
var hasRequiredSetPrototypeOf;
function requireSetPrototypeOf() {
  if (hasRequiredSetPrototypeOf)
    return setPrototypeOf.exports;
  hasRequiredSetPrototypeOf = 1;
  (function(module) {
    function _setPrototypeOf2(o, p) {
      module.exports = _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _setPrototypeOf2(o, p);
    }
    module.exports = _setPrototypeOf2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(setPrototypeOf);
  return setPrototypeOf.exports;
}
var hasRequiredInherits;
function requireInherits() {
  if (hasRequiredInherits)
    return inherits.exports;
  hasRequiredInherits = 1;
  (function(module) {
    var setPrototypeOf2 = requireSetPrototypeOf();
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass)
        setPrototypeOf2(subClass, superClass);
    }
    module.exports = _inherits2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(inherits);
  return inherits.exports;
}
var wrapNativeSuper = { exports: {} };
var isNativeFunction = { exports: {} };
var hasRequiredIsNativeFunction;
function requireIsNativeFunction() {
  if (hasRequiredIsNativeFunction)
    return isNativeFunction.exports;
  hasRequiredIsNativeFunction = 1;
  (function(module) {
    function _isNativeFunction2(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    module.exports = _isNativeFunction2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(isNativeFunction);
  return isNativeFunction.exports;
}
var construct = { exports: {} };
var isNativeReflectConstruct = { exports: {} };
var hasRequiredIsNativeReflectConstruct;
function requireIsNativeReflectConstruct() {
  if (hasRequiredIsNativeReflectConstruct)
    return isNativeReflectConstruct.exports;
  hasRequiredIsNativeReflectConstruct = 1;
  (function(module) {
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    module.exports = _isNativeReflectConstruct2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(isNativeReflectConstruct);
  return isNativeReflectConstruct.exports;
}
var hasRequiredConstruct;
function requireConstruct() {
  if (hasRequiredConstruct)
    return construct.exports;
  hasRequiredConstruct = 1;
  (function(module) {
    var setPrototypeOf2 = requireSetPrototypeOf();
    var isNativeReflectConstruct2 = requireIsNativeReflectConstruct();
    function _construct2(Parent, args, Class) {
      if (isNativeReflectConstruct2()) {
        module.exports = _construct2 = Reflect.construct.bind(), module.exports.__esModule = true, module.exports["default"] = module.exports;
      } else {
        module.exports = _construct2 = function _construct3(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2)
            setPrototypeOf2(instance, Class2.prototype);
          return instance;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      }
      return _construct2.apply(null, arguments);
    }
    module.exports = _construct2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(construct);
  return construct.exports;
}
var hasRequiredWrapNativeSuper;
function requireWrapNativeSuper() {
  if (hasRequiredWrapNativeSuper)
    return wrapNativeSuper.exports;
  hasRequiredWrapNativeSuper = 1;
  (function(module) {
    var getPrototypeOf2 = requireGetPrototypeOf();
    var setPrototypeOf2 = requireSetPrototypeOf();
    var isNativeFunction2 = requireIsNativeFunction();
    var construct2 = requireConstruct();
    function _wrapNativeSuper2(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      module.exports = _wrapNativeSuper2 = function _wrapNativeSuper3(Class2) {
        if (Class2 === null || !isNativeFunction2(Class2))
          return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2))
            return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return construct2(Class2, arguments, getPrototypeOf2(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return setPrototypeOf2(Wrapper, Class2);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _wrapNativeSuper2(Class);
    }
    module.exports = _wrapNativeSuper2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(wrapNativeSuper);
  return wrapNativeSuper.exports;
}
var lib = { exports: {} };
var fs$7 = {};
var universalify = {};
var hasRequiredUniversalify;
function requireUniversalify() {
  if (hasRequiredUniversalify)
    return universalify;
  hasRequiredUniversalify = 1;
  universalify.fromCallback = function(fn) {
    return Object.defineProperty(function() {
      if (typeof arguments[arguments.length - 1] === "function")
        fn.apply(this, arguments);
      else {
        return new Promise((resolve, reject) => {
          arguments[arguments.length] = (err, res) => {
            if (err)
              return reject(err);
            resolve(res);
          };
          arguments.length++;
          fn.apply(this, arguments);
        });
      }
    }, "name", { value: fn.name });
  };
  universalify.fromPromise = function(fn) {
    return Object.defineProperty(function() {
      const cb = arguments[arguments.length - 1];
      if (typeof cb !== "function")
        return fn.apply(this, arguments);
      else
        fn.apply(this, arguments).then((r) => cb(null, r), cb);
    }, "name", { value: fn.name });
  };
  return universalify;
}
var polyfills;
var hasRequiredPolyfills;
function requirePolyfills() {
  if (hasRequiredPolyfills)
    return polyfills;
  hasRequiredPolyfills = 1;
  var constants2 = require$$0$7;
  var origCwd = process.cwd;
  var cwd = null;
  var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
  process.cwd = function() {
    if (!cwd)
      cwd = origCwd.call(process);
    return cwd;
  };
  try {
    process.cwd();
  } catch (er) {
  }
  if (typeof process.chdir === "function") {
    var chdir = process.chdir;
    process.chdir = function(d) {
      cwd = null;
      chdir.call(process, d);
    };
    if (Object.setPrototypeOf)
      Object.setPrototypeOf(process.chdir, chdir);
  }
  polyfills = patch;
  function patch(fs2) {
    if (constants2.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
      patchLchmod(fs2);
    }
    if (!fs2.lutimes) {
      patchLutimes(fs2);
    }
    fs2.chown = chownFix(fs2.chown);
    fs2.fchown = chownFix(fs2.fchown);
    fs2.lchown = chownFix(fs2.lchown);
    fs2.chmod = chmodFix(fs2.chmod);
    fs2.fchmod = chmodFix(fs2.fchmod);
    fs2.lchmod = chmodFix(fs2.lchmod);
    fs2.chownSync = chownFixSync(fs2.chownSync);
    fs2.fchownSync = chownFixSync(fs2.fchownSync);
    fs2.lchownSync = chownFixSync(fs2.lchownSync);
    fs2.chmodSync = chmodFixSync(fs2.chmodSync);
    fs2.fchmodSync = chmodFixSync(fs2.fchmodSync);
    fs2.lchmodSync = chmodFixSync(fs2.lchmodSync);
    fs2.stat = statFix(fs2.stat);
    fs2.fstat = statFix(fs2.fstat);
    fs2.lstat = statFix(fs2.lstat);
    fs2.statSync = statFixSync(fs2.statSync);
    fs2.fstatSync = statFixSync(fs2.fstatSync);
    fs2.lstatSync = statFixSync(fs2.lstatSync);
    if (fs2.chmod && !fs2.lchmod) {
      fs2.lchmod = function(path2, mode2, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs2.lchmodSync = function() {
      };
    }
    if (fs2.chown && !fs2.lchown) {
      fs2.lchown = function(path2, uid, gid, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs2.lchownSync = function() {
      };
    }
    if (platform === "win32") {
      fs2.rename = typeof fs2.rename !== "function" ? fs2.rename : function(fs$rename) {
        function rename(from, to, cb) {
          var start = Date.now();
          var backoff = 0;
          fs$rename(from, to, function CB(er) {
            if (er && (er.code === "EACCES" || er.code === "EPERM" || er.code === "EBUSY") && Date.now() - start < 6e4) {
              setTimeout(function() {
                fs2.stat(to, function(stater, st) {
                  if (stater && stater.code === "ENOENT")
                    fs$rename(from, to, CB);
                  else
                    cb(er);
                });
              }, backoff);
              if (backoff < 100)
                backoff += 10;
              return;
            }
            if (cb)
              cb(er);
          });
        }
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(rename, fs$rename);
        return rename;
      }(fs2.rename);
    }
    fs2.read = typeof fs2.read !== "function" ? fs2.read : function(fs$read) {
      function read(fd, buffer2, offset, length, position2, callback_) {
        var callback;
        if (callback_ && typeof callback_ === "function") {
          var eagCounter = 0;
          callback = function(er, _, __) {
            if (er && er.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              return fs$read.call(fs2, fd, buffer2, offset, length, position2, callback);
            }
            callback_.apply(this, arguments);
          };
        }
        return fs$read.call(fs2, fd, buffer2, offset, length, position2, callback);
      }
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(read, fs$read);
      return read;
    }(fs2.read);
    fs2.readSync = typeof fs2.readSync !== "function" ? fs2.readSync : function(fs$readSync) {
      return function(fd, buffer2, offset, length, position2) {
        var eagCounter = 0;
        while (true) {
          try {
            return fs$readSync.call(fs2, fd, buffer2, offset, length, position2);
          } catch (er) {
            if (er.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              continue;
            }
            throw er;
          }
        }
      };
    }(fs2.readSync);
    function patchLchmod(fs3) {
      fs3.lchmod = function(path2, mode2, callback) {
        fs3.open(
          path2,
          constants2.O_WRONLY | constants2.O_SYMLINK,
          mode2,
          function(err, fd) {
            if (err) {
              if (callback)
                callback(err);
              return;
            }
            fs3.fchmod(fd, mode2, function(err2) {
              fs3.close(fd, function(err22) {
                if (callback)
                  callback(err2 || err22);
              });
            });
          }
        );
      };
      fs3.lchmodSync = function(path2, mode2) {
        var fd = fs3.openSync(path2, constants2.O_WRONLY | constants2.O_SYMLINK, mode2);
        var threw = true;
        var ret;
        try {
          ret = fs3.fchmodSync(fd, mode2);
          threw = false;
        } finally {
          if (threw) {
            try {
              fs3.closeSync(fd);
            } catch (er) {
            }
          } else {
            fs3.closeSync(fd);
          }
        }
        return ret;
      };
    }
    function patchLutimes(fs3) {
      if (constants2.hasOwnProperty("O_SYMLINK") && fs3.futimes) {
        fs3.lutimes = function(path2, at, mt, cb) {
          fs3.open(path2, constants2.O_SYMLINK, function(er, fd) {
            if (er) {
              if (cb)
                cb(er);
              return;
            }
            fs3.futimes(fd, at, mt, function(er2) {
              fs3.close(fd, function(er22) {
                if (cb)
                  cb(er2 || er22);
              });
            });
          });
        };
        fs3.lutimesSync = function(path2, at, mt) {
          var fd = fs3.openSync(path2, constants2.O_SYMLINK);
          var ret;
          var threw = true;
          try {
            ret = fs3.futimesSync(fd, at, mt);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs3.closeSync(fd);
              } catch (er) {
              }
            } else {
              fs3.closeSync(fd);
            }
          }
          return ret;
        };
      } else if (fs3.futimes) {
        fs3.lutimes = function(_a, _b, _c, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs3.lutimesSync = function() {
        };
      }
    }
    function chmodFix(orig) {
      if (!orig)
        return orig;
      return function(target, mode2, cb) {
        return orig.call(fs2, target, mode2, function(er) {
          if (chownErOk(er))
            er = null;
          if (cb)
            cb.apply(this, arguments);
        });
      };
    }
    function chmodFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, mode2) {
        try {
          return orig.call(fs2, target, mode2);
        } catch (er) {
          if (!chownErOk(er))
            throw er;
        }
      };
    }
    function chownFix(orig) {
      if (!orig)
        return orig;
      return function(target, uid, gid, cb) {
        return orig.call(fs2, target, uid, gid, function(er) {
          if (chownErOk(er))
            er = null;
          if (cb)
            cb.apply(this, arguments);
        });
      };
    }
    function chownFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, uid, gid) {
        try {
          return orig.call(fs2, target, uid, gid);
        } catch (er) {
          if (!chownErOk(er))
            throw er;
        }
      };
    }
    function statFix(orig) {
      if (!orig)
        return orig;
      return function(target, options, cb) {
        if (typeof options === "function") {
          cb = options;
          options = null;
        }
        function callback(er, stats) {
          if (stats) {
            if (stats.uid < 0)
              stats.uid += 4294967296;
            if (stats.gid < 0)
              stats.gid += 4294967296;
          }
          if (cb)
            cb.apply(this, arguments);
        }
        return options ? orig.call(fs2, target, options, callback) : orig.call(fs2, target, callback);
      };
    }
    function statFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, options) {
        var stats = options ? orig.call(fs2, target, options) : orig.call(fs2, target);
        if (stats) {
          if (stats.uid < 0)
            stats.uid += 4294967296;
          if (stats.gid < 0)
            stats.gid += 4294967296;
        }
        return stats;
      };
    }
    function chownErOk(er) {
      if (!er)
        return true;
      if (er.code === "ENOSYS")
        return true;
      var nonroot = !process.getuid || process.getuid() !== 0;
      if (nonroot) {
        if (er.code === "EINVAL" || er.code === "EPERM")
          return true;
      }
      return false;
    }
  }
  return polyfills;
}
var legacyStreams;
var hasRequiredLegacyStreams;
function requireLegacyStreams() {
  if (hasRequiredLegacyStreams)
    return legacyStreams;
  hasRequiredLegacyStreams = 1;
  var Stream$1 = Stream.Stream;
  legacyStreams = legacy;
  function legacy(fs2) {
    return {
      ReadStream,
      WriteStream
    };
    function ReadStream(path2, options) {
      if (!(this instanceof ReadStream))
        return new ReadStream(path2, options);
      Stream$1.call(this);
      var self2 = this;
      this.path = path2;
      this.fd = null;
      this.readable = true;
      this.paused = false;
      this.flags = "r";
      this.mode = 438;
      this.bufferSize = 64 * 1024;
      options = options || {};
      var keys2 = Object.keys(options);
      for (var index2 = 0, length = keys2.length; index2 < length; index2++) {
        var key = keys2[index2];
        this[key] = options[key];
      }
      if (this.encoding)
        this.setEncoding(this.encoding);
      if (this.start !== void 0) {
        if ("number" !== typeof this.start) {
          throw TypeError("start must be a Number");
        }
        if (this.end === void 0) {
          this.end = Infinity;
        } else if ("number" !== typeof this.end) {
          throw TypeError("end must be a Number");
        }
        if (this.start > this.end) {
          throw new Error("start must be <= end");
        }
        this.pos = this.start;
      }
      if (this.fd !== null) {
        process.nextTick(function() {
          self2._read();
        });
        return;
      }
      fs2.open(this.path, this.flags, this.mode, function(err, fd) {
        if (err) {
          self2.emit("error", err);
          self2.readable = false;
          return;
        }
        self2.fd = fd;
        self2.emit("open", fd);
        self2._read();
      });
    }
    function WriteStream(path2, options) {
      if (!(this instanceof WriteStream))
        return new WriteStream(path2, options);
      Stream$1.call(this);
      this.path = path2;
      this.fd = null;
      this.writable = true;
      this.flags = "w";
      this.encoding = "binary";
      this.mode = 438;
      this.bytesWritten = 0;
      options = options || {};
      var keys2 = Object.keys(options);
      for (var index2 = 0, length = keys2.length; index2 < length; index2++) {
        var key = keys2[index2];
        this[key] = options[key];
      }
      if (this.start !== void 0) {
        if ("number" !== typeof this.start) {
          throw TypeError("start must be a Number");
        }
        if (this.start < 0) {
          throw new Error("start must be >= zero");
        }
        this.pos = this.start;
      }
      this.busy = false;
      this._queue = [];
      if (this.fd === null) {
        this._open = fs2.open;
        this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
        this.flush();
      }
    }
  }
  return legacyStreams;
}
var clone_1;
var hasRequiredClone;
function requireClone() {
  if (hasRequiredClone)
    return clone_1;
  hasRequiredClone = 1;
  clone_1 = clone2;
  var getPrototypeOf2 = Object.getPrototypeOf || function(obj) {
    return obj.__proto__;
  };
  function clone2(obj) {
    if (obj === null || typeof obj !== "object")
      return obj;
    if (obj instanceof Object)
      var copy2 = { __proto__: getPrototypeOf2(obj) };
    else
      var copy2 = /* @__PURE__ */ Object.create(null);
    Object.getOwnPropertyNames(obj).forEach(function(key) {
      Object.defineProperty(copy2, key, Object.getOwnPropertyDescriptor(obj, key));
    });
    return copy2;
  }
  return clone_1;
}
var gracefulFs;
var hasRequiredGracefulFs;
function requireGracefulFs() {
  if (hasRequiredGracefulFs)
    return gracefulFs;
  hasRequiredGracefulFs = 1;
  var fs2 = require$$0$1;
  var polyfills2 = requirePolyfills();
  var legacy = requireLegacyStreams();
  var clone2 = requireClone();
  var util2 = require$$0$2;
  var gracefulQueue;
  var previousSymbol;
  if (typeof Symbol === "function" && typeof Symbol.for === "function") {
    gracefulQueue = Symbol.for("graceful-fs.queue");
    previousSymbol = Symbol.for("graceful-fs.previous");
  } else {
    gracefulQueue = "___graceful-fs.queue";
    previousSymbol = "___graceful-fs.previous";
  }
  function noop() {
  }
  function publishQueue(context2, queue3) {
    Object.defineProperty(context2, gracefulQueue, {
      get: function() {
        return queue3;
      }
    });
  }
  var debug2 = noop;
  if (util2.debuglog)
    debug2 = util2.debuglog("gfs4");
  else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
    debug2 = function() {
      var m = util2.format.apply(util2, arguments);
      m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
      console.error(m);
    };
  if (!fs2[gracefulQueue]) {
    var queue2 = commonjsGlobal[gracefulQueue] || [];
    publishQueue(fs2, queue2);
    fs2.close = function(fs$close) {
      function close2(fd, cb) {
        return fs$close.call(fs2, fd, function(err) {
          if (!err) {
            resetQueue();
          }
          if (typeof cb === "function")
            cb.apply(this, arguments);
        });
      }
      Object.defineProperty(close2, previousSymbol, {
        value: fs$close
      });
      return close2;
    }(fs2.close);
    fs2.closeSync = function(fs$closeSync) {
      function closeSync(fd) {
        fs$closeSync.apply(fs2, arguments);
        resetQueue();
      }
      Object.defineProperty(closeSync, previousSymbol, {
        value: fs$closeSync
      });
      return closeSync;
    }(fs2.closeSync);
    if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
      process.on("exit", function() {
        debug2(fs2[gracefulQueue]);
        require$$0$4.equal(fs2[gracefulQueue].length, 0);
      });
    }
  }
  if (!commonjsGlobal[gracefulQueue]) {
    publishQueue(commonjsGlobal, fs2[gracefulQueue]);
  }
  gracefulFs = patch(clone2(fs2));
  if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs2.__patched) {
    gracefulFs = patch(fs2);
    fs2.__patched = true;
  }
  function patch(fs3) {
    polyfills2(fs3);
    fs3.gracefulify = patch;
    fs3.createReadStream = createReadStream;
    fs3.createWriteStream = createWriteStream;
    var fs$readFile = fs3.readFile;
    fs3.readFile = readFile;
    function readFile(path2, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$readFile(path2, options, cb);
      function go$readFile(path3, options2, cb2, startTime) {
        return fs$readFile(path3, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$readFile, [path3, options2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$writeFile = fs3.writeFile;
    fs3.writeFile = writeFile;
    function writeFile(path2, data, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$writeFile(path2, data, options, cb);
      function go$writeFile(path3, data2, options2, cb2, startTime) {
        return fs$writeFile(path3, data2, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$writeFile, [path3, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$appendFile = fs3.appendFile;
    if (fs$appendFile)
      fs3.appendFile = appendFile;
    function appendFile(path2, data, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$appendFile(path2, data, options, cb);
      function go$appendFile(path3, data2, options2, cb2, startTime) {
        return fs$appendFile(path3, data2, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$appendFile, [path3, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$copyFile = fs3.copyFile;
    if (fs$copyFile)
      fs3.copyFile = copyFile2;
    function copyFile2(src, dest, flags, cb) {
      if (typeof flags === "function") {
        cb = flags;
        flags = 0;
      }
      return go$copyFile(src, dest, flags, cb);
      function go$copyFile(src2, dest2, flags2, cb2, startTime) {
        return fs$copyFile(src2, dest2, flags2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$readdir = fs3.readdir;
    fs3.readdir = readdir;
    var noReaddirOptionVersions = /^v[0-5]\./;
    function readdir(path2, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir2(path3, options2, cb2, startTime) {
        return fs$readdir(path3, fs$readdirCallback(
          path3,
          options2,
          cb2,
          startTime
        ));
      } : function go$readdir2(path3, options2, cb2, startTime) {
        return fs$readdir(path3, options2, fs$readdirCallback(
          path3,
          options2,
          cb2,
          startTime
        ));
      };
      return go$readdir(path2, options, cb);
      function fs$readdirCallback(path3, options2, cb2, startTime) {
        return function(err, files) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([
              go$readdir,
              [path3, options2, cb2],
              err,
              startTime || Date.now(),
              Date.now()
            ]);
          else {
            if (files && files.sort)
              files.sort();
            if (typeof cb2 === "function")
              cb2.call(this, err, files);
          }
        };
      }
    }
    if (process.version.substr(0, 4) === "v0.8") {
      var legStreams = legacy(fs3);
      ReadStream = legStreams.ReadStream;
      WriteStream = legStreams.WriteStream;
    }
    var fs$ReadStream = fs3.ReadStream;
    if (fs$ReadStream) {
      ReadStream.prototype = Object.create(fs$ReadStream.prototype);
      ReadStream.prototype.open = ReadStream$open;
    }
    var fs$WriteStream = fs3.WriteStream;
    if (fs$WriteStream) {
      WriteStream.prototype = Object.create(fs$WriteStream.prototype);
      WriteStream.prototype.open = WriteStream$open;
    }
    Object.defineProperty(fs3, "ReadStream", {
      get: function() {
        return ReadStream;
      },
      set: function(val) {
        ReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(fs3, "WriteStream", {
      get: function() {
        return WriteStream;
      },
      set: function(val) {
        WriteStream = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileReadStream = ReadStream;
    Object.defineProperty(fs3, "FileReadStream", {
      get: function() {
        return FileReadStream;
      },
      set: function(val) {
        FileReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileWriteStream = WriteStream;
    Object.defineProperty(fs3, "FileWriteStream", {
      get: function() {
        return FileWriteStream;
      },
      set: function(val) {
        FileWriteStream = val;
      },
      enumerable: true,
      configurable: true
    });
    function ReadStream(path2, options) {
      if (this instanceof ReadStream)
        return fs$ReadStream.apply(this, arguments), this;
      else
        return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
    }
    function ReadStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          if (that.autoClose)
            that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
          that.read();
        }
      });
    }
    function WriteStream(path2, options) {
      if (this instanceof WriteStream)
        return fs$WriteStream.apply(this, arguments), this;
      else
        return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
    }
    function WriteStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
        }
      });
    }
    function createReadStream(path2, options) {
      return new fs3.ReadStream(path2, options);
    }
    function createWriteStream(path2, options) {
      return new fs3.WriteStream(path2, options);
    }
    var fs$open = fs3.open;
    fs3.open = open;
    function open(path2, flags, mode2, cb) {
      if (typeof mode2 === "function")
        cb = mode2, mode2 = null;
      return go$open(path2, flags, mode2, cb);
      function go$open(path3, flags2, mode3, cb2, startTime) {
        return fs$open(path3, flags2, mode3, function(err, fd) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$open, [path3, flags2, mode3, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    return fs3;
  }
  function enqueue(elem) {
    debug2("ENQUEUE", elem[0].name, elem[1]);
    fs2[gracefulQueue].push(elem);
    retry();
  }
  var retryTimer;
  function resetQueue() {
    var now = Date.now();
    for (var i = 0; i < fs2[gracefulQueue].length; ++i) {
      if (fs2[gracefulQueue][i].length > 2) {
        fs2[gracefulQueue][i][3] = now;
        fs2[gracefulQueue][i][4] = now;
      }
    }
    retry();
  }
  function retry() {
    clearTimeout(retryTimer);
    retryTimer = void 0;
    if (fs2[gracefulQueue].length === 0)
      return;
    var elem = fs2[gracefulQueue].shift();
    var fn = elem[0];
    var args = elem[1];
    var err = elem[2];
    var startTime = elem[3];
    var lastTime = elem[4];
    if (startTime === void 0) {
      debug2("RETRY", fn.name, args);
      fn.apply(null, args);
    } else if (Date.now() - startTime >= 6e4) {
      debug2("TIMEOUT", fn.name, args);
      var cb = args.pop();
      if (typeof cb === "function")
        cb.call(null, err);
    } else {
      var sinceAttempt = Date.now() - lastTime;
      var sinceStart = Math.max(lastTime - startTime, 1);
      var desiredDelay = Math.min(sinceStart * 1.2, 100);
      if (sinceAttempt >= desiredDelay) {
        debug2("RETRY", fn.name, args);
        fn.apply(null, args.concat([startTime]));
      } else {
        fs2[gracefulQueue].push(elem);
      }
    }
    if (retryTimer === void 0) {
      retryTimer = setTimeout(retry, 0);
    }
  }
  return gracefulFs;
}
var hasRequiredFs$4;
function requireFs$4() {
  if (hasRequiredFs$4)
    return fs$7;
  hasRequiredFs$4 = 1;
  (function(exports) {
    const u = requireUniversalify().fromCallback;
    const fs2 = requireGracefulFs();
    const api = [
      "access",
      "appendFile",
      "chmod",
      "chown",
      "close",
      "copyFile",
      "fchmod",
      "fchown",
      "fdatasync",
      "fstat",
      "fsync",
      "ftruncate",
      "futimes",
      "lchown",
      "lchmod",
      "link",
      "lstat",
      "mkdir",
      "mkdtemp",
      "open",
      "readFile",
      "readdir",
      "readlink",
      "realpath",
      "rename",
      "rmdir",
      "stat",
      "symlink",
      "truncate",
      "unlink",
      "utimes",
      "writeFile"
    ].filter((key) => {
      return typeof fs2[key] === "function";
    });
    Object.keys(fs2).forEach((key) => {
      if (key === "promises") {
        return;
      }
      exports[key] = fs2[key];
    });
    api.forEach((method) => {
      exports[method] = u(fs2[method]);
    });
    exports.exists = function(filename, callback) {
      if (typeof callback === "function") {
        return fs2.exists(filename, callback);
      }
      return new Promise((resolve) => {
        return fs2.exists(filename, resolve);
      });
    };
    exports.read = function(fd, buffer2, offset, length, position2, callback) {
      if (typeof callback === "function") {
        return fs2.read(fd, buffer2, offset, length, position2, callback);
      }
      return new Promise((resolve, reject) => {
        fs2.read(fd, buffer2, offset, length, position2, (err, bytesRead, buffer3) => {
          if (err)
            return reject(err);
          resolve({ bytesRead, buffer: buffer3 });
        });
      });
    };
    exports.write = function(fd, buffer2, ...args) {
      if (typeof args[args.length - 1] === "function") {
        return fs2.write(fd, buffer2, ...args);
      }
      return new Promise((resolve, reject) => {
        fs2.write(fd, buffer2, ...args, (err, bytesWritten, buffer3) => {
          if (err)
            return reject(err);
          resolve({ bytesWritten, buffer: buffer3 });
        });
      });
    };
    if (typeof fs2.realpath.native === "function") {
      exports.realpath.native = u(fs2.realpath.native);
    }
  })(fs$7);
  return fs$7;
}
var win32;
var hasRequiredWin32;
function requireWin32() {
  if (hasRequiredWin32)
    return win32;
  hasRequiredWin32 = 1;
  const path2 = require$$0$3;
  function getRootPath(p) {
    p = path2.normalize(path2.resolve(p)).split(path2.sep);
    if (p.length > 0)
      return p[0];
    return null;
  }
  const INVALID_PATH_CHARS = /[<>:"|?*]/;
  function invalidWin32Path(p) {
    const rp = getRootPath(p);
    p = p.replace(rp, "");
    return INVALID_PATH_CHARS.test(p);
  }
  win32 = {
    getRootPath,
    invalidWin32Path
  };
  return win32;
}
var mkdirs_1$1;
var hasRequiredMkdirs$1;
function requireMkdirs$1() {
  if (hasRequiredMkdirs$1)
    return mkdirs_1$1;
  hasRequiredMkdirs$1 = 1;
  const fs2 = requireGracefulFs();
  const path2 = require$$0$3;
  const invalidWin32Path = requireWin32().invalidWin32Path;
  const o777 = parseInt("0777", 8);
  function mkdirs(p, opts, callback, made) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    } else if (!opts || typeof opts !== "object") {
      opts = { mode: opts };
    }
    if (process.platform === "win32" && invalidWin32Path(p)) {
      const errInval = new Error(p + " contains invalid WIN32 path characters.");
      errInval.code = "EINVAL";
      return callback(errInval);
    }
    let mode2 = opts.mode;
    const xfs = opts.fs || fs2;
    if (mode2 === void 0) {
      mode2 = o777 & ~process.umask();
    }
    if (!made)
      made = null;
    callback = callback || function() {
    };
    p = path2.resolve(p);
    xfs.mkdir(p, mode2, (er) => {
      if (!er) {
        made = made || p;
        return callback(null, made);
      }
      switch (er.code) {
        case "ENOENT":
          if (path2.dirname(p) === p)
            return callback(er);
          mkdirs(path2.dirname(p), opts, (er2, made2) => {
            if (er2)
              callback(er2, made2);
            else
              mkdirs(p, opts, callback, made2);
          });
          break;
        default:
          xfs.stat(p, (er2, stat2) => {
            if (er2 || !stat2.isDirectory())
              callback(er, made);
            else
              callback(null, made);
          });
          break;
      }
    });
  }
  mkdirs_1$1 = mkdirs;
  return mkdirs_1$1;
}
var mkdirsSync_1;
var hasRequiredMkdirsSync;
function requireMkdirsSync() {
  if (hasRequiredMkdirsSync)
    return mkdirsSync_1;
  hasRequiredMkdirsSync = 1;
  const fs2 = requireGracefulFs();
  const path2 = require$$0$3;
  const invalidWin32Path = requireWin32().invalidWin32Path;
  const o777 = parseInt("0777", 8);
  function mkdirsSync(p, opts, made) {
    if (!opts || typeof opts !== "object") {
      opts = { mode: opts };
    }
    let mode2 = opts.mode;
    const xfs = opts.fs || fs2;
    if (process.platform === "win32" && invalidWin32Path(p)) {
      const errInval = new Error(p + " contains invalid WIN32 path characters.");
      errInval.code = "EINVAL";
      throw errInval;
    }
    if (mode2 === void 0) {
      mode2 = o777 & ~process.umask();
    }
    if (!made)
      made = null;
    p = path2.resolve(p);
    try {
      xfs.mkdirSync(p, mode2);
      made = made || p;
    } catch (err0) {
      if (err0.code === "ENOENT") {
        if (path2.dirname(p) === p)
          throw err0;
        made = mkdirsSync(path2.dirname(p), opts, made);
        mkdirsSync(p, opts, made);
      } else {
        let stat2;
        try {
          stat2 = xfs.statSync(p);
        } catch (err1) {
          throw err0;
        }
        if (!stat2.isDirectory())
          throw err0;
      }
    }
    return made;
  }
  mkdirsSync_1 = mkdirsSync;
  return mkdirsSync_1;
}
var mkdirs_1;
var hasRequiredMkdirs;
function requireMkdirs() {
  if (hasRequiredMkdirs)
    return mkdirs_1;
  hasRequiredMkdirs = 1;
  const u = requireUniversalify().fromCallback;
  const mkdirs = u(requireMkdirs$1());
  const mkdirsSync = requireMkdirsSync();
  mkdirs_1 = {
    mkdirs,
    mkdirsSync,
    // alias
    mkdirp: mkdirs,
    mkdirpSync: mkdirsSync,
    ensureDir: mkdirs,
    ensureDirSync: mkdirsSync
  };
  return mkdirs_1;
}
var utimes;
var hasRequiredUtimes;
function requireUtimes() {
  if (hasRequiredUtimes)
    return utimes;
  hasRequiredUtimes = 1;
  const fs2 = requireGracefulFs();
  const os2 = require$$0;
  const path2 = require$$0$3;
  function hasMillisResSync() {
    let tmpfile = path2.join("millis-test-sync" + Date.now().toString() + Math.random().toString().slice(2));
    tmpfile = path2.join(os2.tmpdir(), tmpfile);
    const d = /* @__PURE__ */ new Date(1435410243862);
    fs2.writeFileSync(tmpfile, "https://github.com/jprichardson/node-fs-extra/pull/141");
    const fd = fs2.openSync(tmpfile, "r+");
    fs2.futimesSync(fd, d, d);
    fs2.closeSync(fd);
    return fs2.statSync(tmpfile).mtime > 1435410243e3;
  }
  function hasMillisRes(callback) {
    let tmpfile = path2.join("millis-test" + Date.now().toString() + Math.random().toString().slice(2));
    tmpfile = path2.join(os2.tmpdir(), tmpfile);
    const d = /* @__PURE__ */ new Date(1435410243862);
    fs2.writeFile(tmpfile, "https://github.com/jprichardson/node-fs-extra/pull/141", (err) => {
      if (err)
        return callback(err);
      fs2.open(tmpfile, "r+", (err2, fd) => {
        if (err2)
          return callback(err2);
        fs2.futimes(fd, d, d, (err3) => {
          if (err3)
            return callback(err3);
          fs2.close(fd, (err4) => {
            if (err4)
              return callback(err4);
            fs2.stat(tmpfile, (err5, stats) => {
              if (err5)
                return callback(err5);
              callback(null, stats.mtime > 1435410243e3);
            });
          });
        });
      });
    });
  }
  function timeRemoveMillis(timestamp2) {
    if (typeof timestamp2 === "number") {
      return Math.floor(timestamp2 / 1e3) * 1e3;
    } else if (timestamp2 instanceof Date) {
      return new Date(Math.floor(timestamp2.getTime() / 1e3) * 1e3);
    } else {
      throw new Error("fs-extra: timeRemoveMillis() unknown parameter type");
    }
  }
  function utimesMillis(path3, atime, mtime, callback) {
    fs2.open(path3, "r+", (err, fd) => {
      if (err)
        return callback(err);
      fs2.futimes(fd, atime, mtime, (futimesErr) => {
        fs2.close(fd, (closeErr) => {
          if (callback)
            callback(futimesErr || closeErr);
        });
      });
    });
  }
  function utimesMillisSync(path3, atime, mtime) {
    const fd = fs2.openSync(path3, "r+");
    fs2.futimesSync(fd, atime, mtime);
    return fs2.closeSync(fd);
  }
  utimes = {
    hasMillisRes,
    hasMillisResSync,
    timeRemoveMillis,
    utimesMillis,
    utimesMillisSync
  };
  return utimes;
}
var stat;
var hasRequiredStat;
function requireStat() {
  if (hasRequiredStat)
    return stat;
  hasRequiredStat = 1;
  const fs2 = requireGracefulFs();
  const path2 = require$$0$3;
  const NODE_VERSION_MAJOR_WITH_BIGINT = 10;
  const NODE_VERSION_MINOR_WITH_BIGINT = 5;
  const NODE_VERSION_PATCH_WITH_BIGINT = 0;
  const nodeVersion = process.versions.node.split(".");
  const nodeVersionMajor = Number.parseInt(nodeVersion[0], 10);
  const nodeVersionMinor = Number.parseInt(nodeVersion[1], 10);
  const nodeVersionPatch = Number.parseInt(nodeVersion[2], 10);
  function nodeSupportsBigInt() {
    if (nodeVersionMajor > NODE_VERSION_MAJOR_WITH_BIGINT) {
      return true;
    } else if (nodeVersionMajor === NODE_VERSION_MAJOR_WITH_BIGINT) {
      if (nodeVersionMinor > NODE_VERSION_MINOR_WITH_BIGINT) {
        return true;
      } else if (nodeVersionMinor === NODE_VERSION_MINOR_WITH_BIGINT) {
        if (nodeVersionPatch >= NODE_VERSION_PATCH_WITH_BIGINT) {
          return true;
        }
      }
    }
    return false;
  }
  function getStats(src, dest, cb) {
    if (nodeSupportsBigInt()) {
      fs2.stat(src, { bigint: true }, (err, srcStat) => {
        if (err)
          return cb(err);
        fs2.stat(dest, { bigint: true }, (err2, destStat) => {
          if (err2) {
            if (err2.code === "ENOENT")
              return cb(null, { srcStat, destStat: null });
            return cb(err2);
          }
          return cb(null, { srcStat, destStat });
        });
      });
    } else {
      fs2.stat(src, (err, srcStat) => {
        if (err)
          return cb(err);
        fs2.stat(dest, (err2, destStat) => {
          if (err2) {
            if (err2.code === "ENOENT")
              return cb(null, { srcStat, destStat: null });
            return cb(err2);
          }
          return cb(null, { srcStat, destStat });
        });
      });
    }
  }
  function getStatsSync(src, dest) {
    let srcStat, destStat;
    if (nodeSupportsBigInt()) {
      srcStat = fs2.statSync(src, { bigint: true });
    } else {
      srcStat = fs2.statSync(src);
    }
    try {
      if (nodeSupportsBigInt()) {
        destStat = fs2.statSync(dest, { bigint: true });
      } else {
        destStat = fs2.statSync(dest);
      }
    } catch (err) {
      if (err.code === "ENOENT")
        return { srcStat, destStat: null };
      throw err;
    }
    return { srcStat, destStat };
  }
  function checkPaths(src, dest, funcName, cb) {
    getStats(src, dest, (err, stats) => {
      if (err)
        return cb(err);
      const { srcStat, destStat } = stats;
      if (destStat && destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
        return cb(new Error("Source and destination must not be the same."));
      }
      if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
        return cb(new Error(errMsg(src, dest, funcName)));
      }
      return cb(null, { srcStat, destStat });
    });
  }
  function checkPathsSync(src, dest, funcName) {
    const { srcStat, destStat } = getStatsSync(src, dest);
    if (destStat && destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
      throw new Error("Source and destination must not be the same.");
    }
    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
      throw new Error(errMsg(src, dest, funcName));
    }
    return { srcStat, destStat };
  }
  function checkParentPaths(src, srcStat, dest, funcName, cb) {
    const srcParent = path2.resolve(path2.dirname(src));
    const destParent = path2.resolve(path2.dirname(dest));
    if (destParent === srcParent || destParent === path2.parse(destParent).root)
      return cb();
    if (nodeSupportsBigInt()) {
      fs2.stat(destParent, { bigint: true }, (err, destStat) => {
        if (err) {
          if (err.code === "ENOENT")
            return cb();
          return cb(err);
        }
        if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
          return cb(new Error(errMsg(src, dest, funcName)));
        }
        return checkParentPaths(src, srcStat, destParent, funcName, cb);
      });
    } else {
      fs2.stat(destParent, (err, destStat) => {
        if (err) {
          if (err.code === "ENOENT")
            return cb();
          return cb(err);
        }
        if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
          return cb(new Error(errMsg(src, dest, funcName)));
        }
        return checkParentPaths(src, srcStat, destParent, funcName, cb);
      });
    }
  }
  function checkParentPathsSync(src, srcStat, dest, funcName) {
    const srcParent = path2.resolve(path2.dirname(src));
    const destParent = path2.resolve(path2.dirname(dest));
    if (destParent === srcParent || destParent === path2.parse(destParent).root)
      return;
    let destStat;
    try {
      if (nodeSupportsBigInt()) {
        destStat = fs2.statSync(destParent, { bigint: true });
      } else {
        destStat = fs2.statSync(destParent);
      }
    } catch (err) {
      if (err.code === "ENOENT")
        return;
      throw err;
    }
    if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
      throw new Error(errMsg(src, dest, funcName));
    }
    return checkParentPathsSync(src, srcStat, destParent, funcName);
  }
  function isSrcSubdir(src, dest) {
    const srcArr = path2.resolve(src).split(path2.sep).filter((i) => i);
    const destArr = path2.resolve(dest).split(path2.sep).filter((i) => i);
    return srcArr.reduce((acc, cur, i) => acc && destArr[i] === cur, true);
  }
  function errMsg(src, dest, funcName) {
    return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
  }
  stat = {
    checkPaths,
    checkPathsSync,
    checkParentPaths,
    checkParentPathsSync,
    isSrcSubdir
  };
  return stat;
}
var buffer$1;
var hasRequiredBuffer;
function requireBuffer() {
  if (hasRequiredBuffer)
    return buffer$1;
  hasRequiredBuffer = 1;
  buffer$1 = function(size) {
    if (typeof Buffer.allocUnsafe === "function") {
      try {
        return Buffer.allocUnsafe(size);
      } catch (e) {
        return new Buffer(size);
      }
    }
    return new Buffer(size);
  };
  return buffer$1;
}
var copySync_1;
var hasRequiredCopySync$1;
function requireCopySync$1() {
  if (hasRequiredCopySync$1)
    return copySync_1;
  hasRequiredCopySync$1 = 1;
  const fs2 = requireGracefulFs();
  const path2 = require$$0$3;
  const mkdirpSync = requireMkdirs().mkdirsSync;
  const utimesSync = requireUtimes().utimesMillisSync;
  const stat2 = requireStat();
  function copySync2(src, dest, opts) {
    if (typeof opts === "function") {
      opts = { filter: opts };
    }
    opts = opts || {};
    opts.clobber = "clobber" in opts ? !!opts.clobber : true;
    opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
    if (opts.preserveTimestamps && process.arch === "ia32") {
      console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
    }
    const { srcStat, destStat } = stat2.checkPathsSync(src, dest, "copy");
    stat2.checkParentPathsSync(src, srcStat, dest, "copy");
    return handleFilterAndCopy(destStat, src, dest, opts);
  }
  function handleFilterAndCopy(destStat, src, dest, opts) {
    if (opts.filter && !opts.filter(src, dest))
      return;
    const destParent = path2.dirname(dest);
    if (!fs2.existsSync(destParent))
      mkdirpSync(destParent);
    return startCopy(destStat, src, dest, opts);
  }
  function startCopy(destStat, src, dest, opts) {
    if (opts.filter && !opts.filter(src, dest))
      return;
    return getStats(destStat, src, dest, opts);
  }
  function getStats(destStat, src, dest, opts) {
    const statSync = opts.dereference ? fs2.statSync : fs2.lstatSync;
    const srcStat = statSync(src);
    if (srcStat.isDirectory())
      return onDir(srcStat, destStat, src, dest, opts);
    else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
      return onFile(srcStat, destStat, src, dest, opts);
    else if (srcStat.isSymbolicLink())
      return onLink(destStat, src, dest, opts);
  }
  function onFile(srcStat, destStat, src, dest, opts) {
    if (!destStat)
      return copyFile2(srcStat, src, dest, opts);
    return mayCopyFile(srcStat, src, dest, opts);
  }
  function mayCopyFile(srcStat, src, dest, opts) {
    if (opts.overwrite) {
      fs2.unlinkSync(dest);
      return copyFile2(srcStat, src, dest, opts);
    } else if (opts.errorOnExist) {
      throw new Error(`'${dest}' already exists`);
    }
  }
  function copyFile2(srcStat, src, dest, opts) {
    if (typeof fs2.copyFileSync === "function") {
      fs2.copyFileSync(src, dest);
      fs2.chmodSync(dest, srcStat.mode);
      if (opts.preserveTimestamps) {
        return utimesSync(dest, srcStat.atime, srcStat.mtime);
      }
      return;
    }
    return copyFileFallback(srcStat, src, dest, opts);
  }
  function copyFileFallback(srcStat, src, dest, opts) {
    const BUF_LENGTH = 64 * 1024;
    const _buff = requireBuffer()(BUF_LENGTH);
    const fdr = fs2.openSync(src, "r");
    const fdw = fs2.openSync(dest, "w", srcStat.mode);
    let pos = 0;
    while (pos < srcStat.size) {
      const bytesRead = fs2.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
      fs2.writeSync(fdw, _buff, 0, bytesRead);
      pos += bytesRead;
    }
    if (opts.preserveTimestamps)
      fs2.futimesSync(fdw, srcStat.atime, srcStat.mtime);
    fs2.closeSync(fdr);
    fs2.closeSync(fdw);
  }
  function onDir(srcStat, destStat, src, dest, opts) {
    if (!destStat)
      return mkDirAndCopy(srcStat, src, dest, opts);
    if (destStat && !destStat.isDirectory()) {
      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
    }
    return copyDir(src, dest, opts);
  }
  function mkDirAndCopy(srcStat, src, dest, opts) {
    fs2.mkdirSync(dest);
    copyDir(src, dest, opts);
    return fs2.chmodSync(dest, srcStat.mode);
  }
  function copyDir(src, dest, opts) {
    fs2.readdirSync(src).forEach((item) => copyDirItem(item, src, dest, opts));
  }
  function copyDirItem(item, src, dest, opts) {
    const srcItem = path2.join(src, item);
    const destItem = path2.join(dest, item);
    const { destStat } = stat2.checkPathsSync(srcItem, destItem, "copy");
    return startCopy(destStat, srcItem, destItem, opts);
  }
  function onLink(destStat, src, dest, opts) {
    let resolvedSrc = fs2.readlinkSync(src);
    if (opts.dereference) {
      resolvedSrc = path2.resolve(process.cwd(), resolvedSrc);
    }
    if (!destStat) {
      return fs2.symlinkSync(resolvedSrc, dest);
    } else {
      let resolvedDest;
      try {
        resolvedDest = fs2.readlinkSync(dest);
      } catch (err) {
        if (err.code === "EINVAL" || err.code === "UNKNOWN")
          return fs2.symlinkSync(resolvedSrc, dest);
        throw err;
      }
      if (opts.dereference) {
        resolvedDest = path2.resolve(process.cwd(), resolvedDest);
      }
      if (stat2.isSrcSubdir(resolvedSrc, resolvedDest)) {
        throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
      }
      if (fs2.statSync(dest).isDirectory() && stat2.isSrcSubdir(resolvedDest, resolvedSrc)) {
        throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
      }
      return copyLink(resolvedSrc, dest);
    }
  }
  function copyLink(resolvedSrc, dest) {
    fs2.unlinkSync(dest);
    return fs2.symlinkSync(resolvedSrc, dest);
  }
  copySync_1 = copySync2;
  return copySync_1;
}
var copySync;
var hasRequiredCopySync;
function requireCopySync() {
  if (hasRequiredCopySync)
    return copySync;
  hasRequiredCopySync = 1;
  copySync = {
    copySync: requireCopySync$1()
  };
  return copySync;
}
var pathExists_1;
var hasRequiredPathExists;
function requirePathExists() {
  if (hasRequiredPathExists)
    return pathExists_1;
  hasRequiredPathExists = 1;
  const u = requireUniversalify().fromPromise;
  const fs2 = requireFs$4();
  function pathExists2(path2) {
    return fs2.access(path2).then(() => true).catch(() => false);
  }
  pathExists_1 = {
    pathExists: u(pathExists2),
    pathExistsSync: fs2.existsSync
  };
  return pathExists_1;
}
var copy_1;
var hasRequiredCopy$1;
function requireCopy$1() {
  if (hasRequiredCopy$1)
    return copy_1;
  hasRequiredCopy$1 = 1;
  const fs2 = requireGracefulFs();
  const path2 = require$$0$3;
  const mkdirp = requireMkdirs().mkdirs;
  const pathExists2 = requirePathExists().pathExists;
  const utimes2 = requireUtimes().utimesMillis;
  const stat2 = requireStat();
  function copy2(src, dest, opts, cb) {
    if (typeof opts === "function" && !cb) {
      cb = opts;
      opts = {};
    } else if (typeof opts === "function") {
      opts = { filter: opts };
    }
    cb = cb || function() {
    };
    opts = opts || {};
    opts.clobber = "clobber" in opts ? !!opts.clobber : true;
    opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
    if (opts.preserveTimestamps && process.arch === "ia32") {
      console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
    }
    stat2.checkPaths(src, dest, "copy", (err, stats) => {
      if (err)
        return cb(err);
      const { srcStat, destStat } = stats;
      stat2.checkParentPaths(src, srcStat, dest, "copy", (err2) => {
        if (err2)
          return cb(err2);
        if (opts.filter)
          return handleFilter(checkParentDir, destStat, src, dest, opts, cb);
        return checkParentDir(destStat, src, dest, opts, cb);
      });
    });
  }
  function checkParentDir(destStat, src, dest, opts, cb) {
    const destParent = path2.dirname(dest);
    pathExists2(destParent, (err, dirExists) => {
      if (err)
        return cb(err);
      if (dirExists)
        return startCopy(destStat, src, dest, opts, cb);
      mkdirp(destParent, (err2) => {
        if (err2)
          return cb(err2);
        return startCopy(destStat, src, dest, opts, cb);
      });
    });
  }
  function handleFilter(onInclude, destStat, src, dest, opts, cb) {
    Promise.resolve(opts.filter(src, dest)).then((include) => {
      if (include)
        return onInclude(destStat, src, dest, opts, cb);
      return cb();
    }, (error2) => cb(error2));
  }
  function startCopy(destStat, src, dest, opts, cb) {
    if (opts.filter)
      return handleFilter(getStats, destStat, src, dest, opts, cb);
    return getStats(destStat, src, dest, opts, cb);
  }
  function getStats(destStat, src, dest, opts, cb) {
    const stat3 = opts.dereference ? fs2.stat : fs2.lstat;
    stat3(src, (err, srcStat) => {
      if (err)
        return cb(err);
      if (srcStat.isDirectory())
        return onDir(srcStat, destStat, src, dest, opts, cb);
      else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
        return onFile(srcStat, destStat, src, dest, opts, cb);
      else if (srcStat.isSymbolicLink())
        return onLink(destStat, src, dest, opts, cb);
    });
  }
  function onFile(srcStat, destStat, src, dest, opts, cb) {
    if (!destStat)
      return copyFile2(srcStat, src, dest, opts, cb);
    return mayCopyFile(srcStat, src, dest, opts, cb);
  }
  function mayCopyFile(srcStat, src, dest, opts, cb) {
    if (opts.overwrite) {
      fs2.unlink(dest, (err) => {
        if (err)
          return cb(err);
        return copyFile2(srcStat, src, dest, opts, cb);
      });
    } else if (opts.errorOnExist) {
      return cb(new Error(`'${dest}' already exists`));
    } else
      return cb();
  }
  function copyFile2(srcStat, src, dest, opts, cb) {
    if (typeof fs2.copyFile === "function") {
      return fs2.copyFile(src, dest, (err) => {
        if (err)
          return cb(err);
        return setDestModeAndTimestamps(srcStat, dest, opts, cb);
      });
    }
    return copyFileFallback(srcStat, src, dest, opts, cb);
  }
  function copyFileFallback(srcStat, src, dest, opts, cb) {
    const rs = fs2.createReadStream(src);
    rs.on("error", (err) => cb(err)).once("open", () => {
      const ws = fs2.createWriteStream(dest, { mode: srcStat.mode });
      ws.on("error", (err) => cb(err)).on("open", () => rs.pipe(ws)).once("close", () => setDestModeAndTimestamps(srcStat, dest, opts, cb));
    });
  }
  function setDestModeAndTimestamps(srcStat, dest, opts, cb) {
    fs2.chmod(dest, srcStat.mode, (err) => {
      if (err)
        return cb(err);
      if (opts.preserveTimestamps) {
        return utimes2(dest, srcStat.atime, srcStat.mtime, cb);
      }
      return cb();
    });
  }
  function onDir(srcStat, destStat, src, dest, opts, cb) {
    if (!destStat)
      return mkDirAndCopy(srcStat, src, dest, opts, cb);
    if (destStat && !destStat.isDirectory()) {
      return cb(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`));
    }
    return copyDir(src, dest, opts, cb);
  }
  function mkDirAndCopy(srcStat, src, dest, opts, cb) {
    fs2.mkdir(dest, (err) => {
      if (err)
        return cb(err);
      copyDir(src, dest, opts, (err2) => {
        if (err2)
          return cb(err2);
        return fs2.chmod(dest, srcStat.mode, cb);
      });
    });
  }
  function copyDir(src, dest, opts, cb) {
    fs2.readdir(src, (err, items) => {
      if (err)
        return cb(err);
      return copyDirItems(items, src, dest, opts, cb);
    });
  }
  function copyDirItems(items, src, dest, opts, cb) {
    const item = items.pop();
    if (!item)
      return cb();
    return copyDirItem(items, item, src, dest, opts, cb);
  }
  function copyDirItem(items, item, src, dest, opts, cb) {
    const srcItem = path2.join(src, item);
    const destItem = path2.join(dest, item);
    stat2.checkPaths(srcItem, destItem, "copy", (err, stats) => {
      if (err)
        return cb(err);
      const { destStat } = stats;
      startCopy(destStat, srcItem, destItem, opts, (err2) => {
        if (err2)
          return cb(err2);
        return copyDirItems(items, src, dest, opts, cb);
      });
    });
  }
  function onLink(destStat, src, dest, opts, cb) {
    fs2.readlink(src, (err, resolvedSrc) => {
      if (err)
        return cb(err);
      if (opts.dereference) {
        resolvedSrc = path2.resolve(process.cwd(), resolvedSrc);
      }
      if (!destStat) {
        return fs2.symlink(resolvedSrc, dest, cb);
      } else {
        fs2.readlink(dest, (err2, resolvedDest) => {
          if (err2) {
            if (err2.code === "EINVAL" || err2.code === "UNKNOWN")
              return fs2.symlink(resolvedSrc, dest, cb);
            return cb(err2);
          }
          if (opts.dereference) {
            resolvedDest = path2.resolve(process.cwd(), resolvedDest);
          }
          if (stat2.isSrcSubdir(resolvedSrc, resolvedDest)) {
            return cb(new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`));
          }
          if (destStat.isDirectory() && stat2.isSrcSubdir(resolvedDest, resolvedSrc)) {
            return cb(new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`));
          }
          return copyLink(resolvedSrc, dest, cb);
        });
      }
    });
  }
  function copyLink(resolvedSrc, dest, cb) {
    fs2.unlink(dest, (err) => {
      if (err)
        return cb(err);
      return fs2.symlink(resolvedSrc, dest, cb);
    });
  }
  copy_1 = copy2;
  return copy_1;
}
var copy;
var hasRequiredCopy;
function requireCopy() {
  if (hasRequiredCopy)
    return copy;
  hasRequiredCopy = 1;
  const u = requireUniversalify().fromCallback;
  copy = {
    copy: u(requireCopy$1())
  };
  return copy;
}
var rimraf_1;
var hasRequiredRimraf;
function requireRimraf() {
  if (hasRequiredRimraf)
    return rimraf_1;
  hasRequiredRimraf = 1;
  const fs2 = requireGracefulFs();
  const path2 = require$$0$3;
  const assert = require$$0$4;
  const isWindows2 = process.platform === "win32";
  function defaults(options) {
    const methods = [
      "unlink",
      "chmod",
      "stat",
      "lstat",
      "rmdir",
      "readdir"
    ];
    methods.forEach((m) => {
      options[m] = options[m] || fs2[m];
      m = m + "Sync";
      options[m] = options[m] || fs2[m];
    });
    options.maxBusyTries = options.maxBusyTries || 3;
  }
  function rimraf(p, options, cb) {
    let busyTries = 0;
    if (typeof options === "function") {
      cb = options;
      options = {};
    }
    assert(p, "rimraf: missing path");
    assert.strictEqual(typeof p, "string", "rimraf: path should be a string");
    assert.strictEqual(typeof cb, "function", "rimraf: callback function required");
    assert(options, "rimraf: invalid options argument provided");
    assert.strictEqual(typeof options, "object", "rimraf: options should be object");
    defaults(options);
    rimraf_(p, options, function CB(er) {
      if (er) {
        if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options.maxBusyTries) {
          busyTries++;
          const time = busyTries * 100;
          return setTimeout(() => rimraf_(p, options, CB), time);
        }
        if (er.code === "ENOENT")
          er = null;
      }
      cb(er);
    });
  }
  function rimraf_(p, options, cb) {
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    options.lstat(p, (er, st) => {
      if (er && er.code === "ENOENT") {
        return cb(null);
      }
      if (er && er.code === "EPERM" && isWindows2) {
        return fixWinEPERM(p, options, er, cb);
      }
      if (st && st.isDirectory()) {
        return rmdir(p, options, er, cb);
      }
      options.unlink(p, (er2) => {
        if (er2) {
          if (er2.code === "ENOENT") {
            return cb(null);
          }
          if (er2.code === "EPERM") {
            return isWindows2 ? fixWinEPERM(p, options, er2, cb) : rmdir(p, options, er2, cb);
          }
          if (er2.code === "EISDIR") {
            return rmdir(p, options, er2, cb);
          }
        }
        return cb(er2);
      });
    });
  }
  function fixWinEPERM(p, options, er, cb) {
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    if (er) {
      assert(er instanceof Error);
    }
    options.chmod(p, 438, (er2) => {
      if (er2) {
        cb(er2.code === "ENOENT" ? null : er);
      } else {
        options.stat(p, (er3, stats) => {
          if (er3) {
            cb(er3.code === "ENOENT" ? null : er);
          } else if (stats.isDirectory()) {
            rmdir(p, options, er, cb);
          } else {
            options.unlink(p, cb);
          }
        });
      }
    });
  }
  function fixWinEPERMSync(p, options, er) {
    let stats;
    assert(p);
    assert(options);
    if (er) {
      assert(er instanceof Error);
    }
    try {
      options.chmodSync(p, 438);
    } catch (er2) {
      if (er2.code === "ENOENT") {
        return;
      } else {
        throw er;
      }
    }
    try {
      stats = options.statSync(p);
    } catch (er3) {
      if (er3.code === "ENOENT") {
        return;
      } else {
        throw er;
      }
    }
    if (stats.isDirectory()) {
      rmdirSync(p, options, er);
    } else {
      options.unlinkSync(p);
    }
  }
  function rmdir(p, options, originalEr, cb) {
    assert(p);
    assert(options);
    if (originalEr) {
      assert(originalEr instanceof Error);
    }
    assert(typeof cb === "function");
    options.rmdir(p, (er) => {
      if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) {
        rmkids(p, options, cb);
      } else if (er && er.code === "ENOTDIR") {
        cb(originalEr);
      } else {
        cb(er);
      }
    });
  }
  function rmkids(p, options, cb) {
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    options.readdir(p, (er, files) => {
      if (er)
        return cb(er);
      let n = files.length;
      let errState;
      if (n === 0)
        return options.rmdir(p, cb);
      files.forEach((f) => {
        rimraf(path2.join(p, f), options, (er2) => {
          if (errState) {
            return;
          }
          if (er2)
            return cb(errState = er2);
          if (--n === 0) {
            options.rmdir(p, cb);
          }
        });
      });
    });
  }
  function rimrafSync(p, options) {
    let st;
    options = options || {};
    defaults(options);
    assert(p, "rimraf: missing path");
    assert.strictEqual(typeof p, "string", "rimraf: path should be a string");
    assert(options, "rimraf: missing options");
    assert.strictEqual(typeof options, "object", "rimraf: options should be object");
    try {
      st = options.lstatSync(p);
    } catch (er) {
      if (er.code === "ENOENT") {
        return;
      }
      if (er.code === "EPERM" && isWindows2) {
        fixWinEPERMSync(p, options, er);
      }
    }
    try {
      if (st && st.isDirectory()) {
        rmdirSync(p, options, null);
      } else {
        options.unlinkSync(p);
      }
    } catch (er) {
      if (er.code === "ENOENT") {
        return;
      } else if (er.code === "EPERM") {
        return isWindows2 ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
      } else if (er.code !== "EISDIR") {
        throw er;
      }
      rmdirSync(p, options, er);
    }
  }
  function rmdirSync(p, options, originalEr) {
    assert(p);
    assert(options);
    if (originalEr) {
      assert(originalEr instanceof Error);
    }
    try {
      options.rmdirSync(p);
    } catch (er) {
      if (er.code === "ENOTDIR") {
        throw originalEr;
      } else if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") {
        rmkidsSync(p, options);
      } else if (er.code !== "ENOENT") {
        throw er;
      }
    }
  }
  function rmkidsSync(p, options) {
    assert(p);
    assert(options);
    options.readdirSync(p).forEach((f) => rimrafSync(path2.join(p, f), options));
    if (isWindows2) {
      const startTime = Date.now();
      do {
        try {
          const ret = options.rmdirSync(p, options);
          return ret;
        } catch (er) {
        }
      } while (Date.now() - startTime < 500);
    } else {
      const ret = options.rmdirSync(p, options);
      return ret;
    }
  }
  rimraf_1 = rimraf;
  rimraf.sync = rimrafSync;
  return rimraf_1;
}
var remove;
var hasRequiredRemove;
function requireRemove() {
  if (hasRequiredRemove)
    return remove;
  hasRequiredRemove = 1;
  const u = requireUniversalify().fromCallback;
  const rimraf = requireRimraf();
  remove = {
    remove: u(rimraf),
    removeSync: rimraf.sync
  };
  return remove;
}
var empty$1;
var hasRequiredEmpty;
function requireEmpty() {
  if (hasRequiredEmpty)
    return empty$1;
  hasRequiredEmpty = 1;
  const u = requireUniversalify().fromCallback;
  const fs2 = requireGracefulFs();
  const path2 = require$$0$3;
  const mkdir = requireMkdirs();
  const remove2 = requireRemove();
  const emptyDir = u(function emptyDir2(dir, callback) {
    callback = callback || function() {
    };
    fs2.readdir(dir, (err, items) => {
      if (err)
        return mkdir.mkdirs(dir, callback);
      items = items.map((item) => path2.join(dir, item));
      deleteItem();
      function deleteItem() {
        const item = items.pop();
        if (!item)
          return callback();
        remove2.remove(item, (err2) => {
          if (err2)
            return callback(err2);
          deleteItem();
        });
      }
    });
  });
  function emptyDirSync(dir) {
    let items;
    try {
      items = fs2.readdirSync(dir);
    } catch (err) {
      return mkdir.mkdirsSync(dir);
    }
    items.forEach((item) => {
      item = path2.join(dir, item);
      remove2.removeSync(item);
    });
  }
  empty$1 = {
    emptyDirSync,
    emptydirSync: emptyDirSync,
    emptyDir,
    emptydir: emptyDir
  };
  return empty$1;
}
var file;
var hasRequiredFile;
function requireFile() {
  if (hasRequiredFile)
    return file;
  hasRequiredFile = 1;
  const u = requireUniversalify().fromCallback;
  const path2 = require$$0$3;
  const fs2 = requireGracefulFs();
  const mkdir = requireMkdirs();
  const pathExists2 = requirePathExists().pathExists;
  function createFile(file2, callback) {
    function makeFile() {
      fs2.writeFile(file2, "", (err) => {
        if (err)
          return callback(err);
        callback();
      });
    }
    fs2.stat(file2, (err, stats) => {
      if (!err && stats.isFile())
        return callback();
      const dir = path2.dirname(file2);
      pathExists2(dir, (err2, dirExists) => {
        if (err2)
          return callback(err2);
        if (dirExists)
          return makeFile();
        mkdir.mkdirs(dir, (err3) => {
          if (err3)
            return callback(err3);
          makeFile();
        });
      });
    });
  }
  function createFileSync(file2) {
    let stats;
    try {
      stats = fs2.statSync(file2);
    } catch (e) {
    }
    if (stats && stats.isFile())
      return;
    const dir = path2.dirname(file2);
    if (!fs2.existsSync(dir)) {
      mkdir.mkdirsSync(dir);
    }
    fs2.writeFileSync(file2, "");
  }
  file = {
    createFile: u(createFile),
    createFileSync
  };
  return file;
}
var link;
var hasRequiredLink;
function requireLink() {
  if (hasRequiredLink)
    return link;
  hasRequiredLink = 1;
  const u = requireUniversalify().fromCallback;
  const path2 = require$$0$3;
  const fs2 = requireGracefulFs();
  const mkdir = requireMkdirs();
  const pathExists2 = requirePathExists().pathExists;
  function createLink(srcpath, dstpath, callback) {
    function makeLink(srcpath2, dstpath2) {
      fs2.link(srcpath2, dstpath2, (err) => {
        if (err)
          return callback(err);
        callback(null);
      });
    }
    pathExists2(dstpath, (err, destinationExists) => {
      if (err)
        return callback(err);
      if (destinationExists)
        return callback(null);
      fs2.lstat(srcpath, (err2) => {
        if (err2) {
          err2.message = err2.message.replace("lstat", "ensureLink");
          return callback(err2);
        }
        const dir = path2.dirname(dstpath);
        pathExists2(dir, (err3, dirExists) => {
          if (err3)
            return callback(err3);
          if (dirExists)
            return makeLink(srcpath, dstpath);
          mkdir.mkdirs(dir, (err4) => {
            if (err4)
              return callback(err4);
            makeLink(srcpath, dstpath);
          });
        });
      });
    });
  }
  function createLinkSync(srcpath, dstpath) {
    const destinationExists = fs2.existsSync(dstpath);
    if (destinationExists)
      return void 0;
    try {
      fs2.lstatSync(srcpath);
    } catch (err) {
      err.message = err.message.replace("lstat", "ensureLink");
      throw err;
    }
    const dir = path2.dirname(dstpath);
    const dirExists = fs2.existsSync(dir);
    if (dirExists)
      return fs2.linkSync(srcpath, dstpath);
    mkdir.mkdirsSync(dir);
    return fs2.linkSync(srcpath, dstpath);
  }
  link = {
    createLink: u(createLink),
    createLinkSync
  };
  return link;
}
var symlinkPaths_1;
var hasRequiredSymlinkPaths;
function requireSymlinkPaths() {
  if (hasRequiredSymlinkPaths)
    return symlinkPaths_1;
  hasRequiredSymlinkPaths = 1;
  const path2 = require$$0$3;
  const fs2 = requireGracefulFs();
  const pathExists2 = requirePathExists().pathExists;
  function symlinkPaths(srcpath, dstpath, callback) {
    if (path2.isAbsolute(srcpath)) {
      return fs2.lstat(srcpath, (err) => {
        if (err) {
          err.message = err.message.replace("lstat", "ensureSymlink");
          return callback(err);
        }
        return callback(null, {
          "toCwd": srcpath,
          "toDst": srcpath
        });
      });
    } else {
      const dstdir = path2.dirname(dstpath);
      const relativeToDst = path2.join(dstdir, srcpath);
      return pathExists2(relativeToDst, (err, exists) => {
        if (err)
          return callback(err);
        if (exists) {
          return callback(null, {
            "toCwd": relativeToDst,
            "toDst": srcpath
          });
        } else {
          return fs2.lstat(srcpath, (err2) => {
            if (err2) {
              err2.message = err2.message.replace("lstat", "ensureSymlink");
              return callback(err2);
            }
            return callback(null, {
              "toCwd": srcpath,
              "toDst": path2.relative(dstdir, srcpath)
            });
          });
        }
      });
    }
  }
  function symlinkPathsSync(srcpath, dstpath) {
    let exists;
    if (path2.isAbsolute(srcpath)) {
      exists = fs2.existsSync(srcpath);
      if (!exists)
        throw new Error("absolute srcpath does not exist");
      return {
        "toCwd": srcpath,
        "toDst": srcpath
      };
    } else {
      const dstdir = path2.dirname(dstpath);
      const relativeToDst = path2.join(dstdir, srcpath);
      exists = fs2.existsSync(relativeToDst);
      if (exists) {
        return {
          "toCwd": relativeToDst,
          "toDst": srcpath
        };
      } else {
        exists = fs2.existsSync(srcpath);
        if (!exists)
          throw new Error("relative srcpath does not exist");
        return {
          "toCwd": srcpath,
          "toDst": path2.relative(dstdir, srcpath)
        };
      }
    }
  }
  symlinkPaths_1 = {
    symlinkPaths,
    symlinkPathsSync
  };
  return symlinkPaths_1;
}
var symlinkType_1;
var hasRequiredSymlinkType;
function requireSymlinkType() {
  if (hasRequiredSymlinkType)
    return symlinkType_1;
  hasRequiredSymlinkType = 1;
  const fs2 = requireGracefulFs();
  function symlinkType(srcpath, type2, callback) {
    callback = typeof type2 === "function" ? type2 : callback;
    type2 = typeof type2 === "function" ? false : type2;
    if (type2)
      return callback(null, type2);
    fs2.lstat(srcpath, (err, stats) => {
      if (err)
        return callback(null, "file");
      type2 = stats && stats.isDirectory() ? "dir" : "file";
      callback(null, type2);
    });
  }
  function symlinkTypeSync(srcpath, type2) {
    let stats;
    if (type2)
      return type2;
    try {
      stats = fs2.lstatSync(srcpath);
    } catch (e) {
      return "file";
    }
    return stats && stats.isDirectory() ? "dir" : "file";
  }
  symlinkType_1 = {
    symlinkType,
    symlinkTypeSync
  };
  return symlinkType_1;
}
var symlink;
var hasRequiredSymlink;
function requireSymlink() {
  if (hasRequiredSymlink)
    return symlink;
  hasRequiredSymlink = 1;
  const u = requireUniversalify().fromCallback;
  const path2 = require$$0$3;
  const fs2 = requireGracefulFs();
  const _mkdirs = requireMkdirs();
  const mkdirs = _mkdirs.mkdirs;
  const mkdirsSync = _mkdirs.mkdirsSync;
  const _symlinkPaths = requireSymlinkPaths();
  const symlinkPaths = _symlinkPaths.symlinkPaths;
  const symlinkPathsSync = _symlinkPaths.symlinkPathsSync;
  const _symlinkType = requireSymlinkType();
  const symlinkType = _symlinkType.symlinkType;
  const symlinkTypeSync = _symlinkType.symlinkTypeSync;
  const pathExists2 = requirePathExists().pathExists;
  function createSymlink(srcpath, dstpath, type2, callback) {
    callback = typeof type2 === "function" ? type2 : callback;
    type2 = typeof type2 === "function" ? false : type2;
    pathExists2(dstpath, (err, destinationExists) => {
      if (err)
        return callback(err);
      if (destinationExists)
        return callback(null);
      symlinkPaths(srcpath, dstpath, (err2, relative) => {
        if (err2)
          return callback(err2);
        srcpath = relative.toDst;
        symlinkType(relative.toCwd, type2, (err3, type3) => {
          if (err3)
            return callback(err3);
          const dir = path2.dirname(dstpath);
          pathExists2(dir, (err4, dirExists) => {
            if (err4)
              return callback(err4);
            if (dirExists)
              return fs2.symlink(srcpath, dstpath, type3, callback);
            mkdirs(dir, (err5) => {
              if (err5)
                return callback(err5);
              fs2.symlink(srcpath, dstpath, type3, callback);
            });
          });
        });
      });
    });
  }
  function createSymlinkSync(srcpath, dstpath, type2) {
    const destinationExists = fs2.existsSync(dstpath);
    if (destinationExists)
      return void 0;
    const relative = symlinkPathsSync(srcpath, dstpath);
    srcpath = relative.toDst;
    type2 = symlinkTypeSync(relative.toCwd, type2);
    const dir = path2.dirname(dstpath);
    const exists = fs2.existsSync(dir);
    if (exists)
      return fs2.symlinkSync(srcpath, dstpath, type2);
    mkdirsSync(dir);
    return fs2.symlinkSync(srcpath, dstpath, type2);
  }
  symlink = {
    createSymlink: u(createSymlink),
    createSymlinkSync
  };
  return symlink;
}
var ensure;
var hasRequiredEnsure;
function requireEnsure() {
  if (hasRequiredEnsure)
    return ensure;
  hasRequiredEnsure = 1;
  const file2 = requireFile();
  const link2 = requireLink();
  const symlink2 = requireSymlink();
  ensure = {
    // file
    createFile: file2.createFile,
    createFileSync: file2.createFileSync,
    ensureFile: file2.createFile,
    ensureFileSync: file2.createFileSync,
    // link
    createLink: link2.createLink,
    createLinkSync: link2.createLinkSync,
    ensureLink: link2.createLink,
    ensureLinkSync: link2.createLinkSync,
    // symlink
    createSymlink: symlink2.createSymlink,
    createSymlinkSync: symlink2.createSymlinkSync,
    ensureSymlink: symlink2.createSymlink,
    ensureSymlinkSync: symlink2.createSymlinkSync
  };
  return ensure;
}
var jsonfile_1;
var hasRequiredJsonfile$1;
function requireJsonfile$1() {
  if (hasRequiredJsonfile$1)
    return jsonfile_1;
  hasRequiredJsonfile$1 = 1;
  var _fs;
  try {
    _fs = requireGracefulFs();
  } catch (_) {
    _fs = require$$0$1;
  }
  function readFile(file2, options, callback) {
    if (callback == null) {
      callback = options;
      options = {};
    }
    if (typeof options === "string") {
      options = { encoding: options };
    }
    options = options || {};
    var fs2 = options.fs || _fs;
    var shouldThrow = true;
    if ("throws" in options) {
      shouldThrow = options.throws;
    }
    fs2.readFile(file2, options, function(err, data) {
      if (err)
        return callback(err);
      data = stripBom2(data);
      var obj;
      try {
        obj = JSON.parse(data, options ? options.reviver : null);
      } catch (err2) {
        if (shouldThrow) {
          err2.message = file2 + ": " + err2.message;
          return callback(err2);
        } else {
          return callback(null, null);
        }
      }
      callback(null, obj);
    });
  }
  function readFileSync(file2, options) {
    options = options || {};
    if (typeof options === "string") {
      options = { encoding: options };
    }
    var fs2 = options.fs || _fs;
    var shouldThrow = true;
    if ("throws" in options) {
      shouldThrow = options.throws;
    }
    try {
      var content2 = fs2.readFileSync(file2, options);
      content2 = stripBom2(content2);
      return JSON.parse(content2, options.reviver);
    } catch (err) {
      if (shouldThrow) {
        err.message = file2 + ": " + err.message;
        throw err;
      } else {
        return null;
      }
    }
  }
  function stringify2(obj, options) {
    var spaces;
    var EOL = "\n";
    if (typeof options === "object" && options !== null) {
      if (options.spaces) {
        spaces = options.spaces;
      }
      if (options.EOL) {
        EOL = options.EOL;
      }
    }
    var str2 = JSON.stringify(obj, options ? options.replacer : null, spaces);
    return str2.replace(/\n/g, EOL) + EOL;
  }
  function writeFile(file2, obj, options, callback) {
    if (callback == null) {
      callback = options;
      options = {};
    }
    options = options || {};
    var fs2 = options.fs || _fs;
    var str2 = "";
    try {
      str2 = stringify2(obj, options);
    } catch (err) {
      if (callback)
        callback(err, null);
      return;
    }
    fs2.writeFile(file2, str2, options, callback);
  }
  function writeFileSync(file2, obj, options) {
    options = options || {};
    var fs2 = options.fs || _fs;
    var str2 = stringify2(obj, options);
    return fs2.writeFileSync(file2, str2, options);
  }
  function stripBom2(content2) {
    if (Buffer.isBuffer(content2))
      content2 = content2.toString("utf8");
    content2 = content2.replace(/^\uFEFF/, "");
    return content2;
  }
  var jsonfile2 = {
    readFile,
    readFileSync,
    writeFile,
    writeFileSync
  };
  jsonfile_1 = jsonfile2;
  return jsonfile_1;
}
var jsonfile;
var hasRequiredJsonfile;
function requireJsonfile() {
  if (hasRequiredJsonfile)
    return jsonfile;
  hasRequiredJsonfile = 1;
  const u = requireUniversalify().fromCallback;
  const jsonFile = requireJsonfile$1();
  jsonfile = {
    // jsonfile exports
    readJson: u(jsonFile.readFile),
    readJsonSync: jsonFile.readFileSync,
    writeJson: u(jsonFile.writeFile),
    writeJsonSync: jsonFile.writeFileSync
  };
  return jsonfile;
}
var outputJson_1;
var hasRequiredOutputJson;
function requireOutputJson() {
  if (hasRequiredOutputJson)
    return outputJson_1;
  hasRequiredOutputJson = 1;
  const path2 = require$$0$3;
  const mkdir = requireMkdirs();
  const pathExists2 = requirePathExists().pathExists;
  const jsonFile = requireJsonfile();
  function outputJson(file2, data, options, callback) {
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    const dir = path2.dirname(file2);
    pathExists2(dir, (err, itDoes) => {
      if (err)
        return callback(err);
      if (itDoes)
        return jsonFile.writeJson(file2, data, options, callback);
      mkdir.mkdirs(dir, (err2) => {
        if (err2)
          return callback(err2);
        jsonFile.writeJson(file2, data, options, callback);
      });
    });
  }
  outputJson_1 = outputJson;
  return outputJson_1;
}
var outputJsonSync_1;
var hasRequiredOutputJsonSync;
function requireOutputJsonSync() {
  if (hasRequiredOutputJsonSync)
    return outputJsonSync_1;
  hasRequiredOutputJsonSync = 1;
  const fs2 = requireGracefulFs();
  const path2 = require$$0$3;
  const mkdir = requireMkdirs();
  const jsonFile = requireJsonfile();
  function outputJsonSync(file2, data, options) {
    const dir = path2.dirname(file2);
    if (!fs2.existsSync(dir)) {
      mkdir.mkdirsSync(dir);
    }
    jsonFile.writeJsonSync(file2, data, options);
  }
  outputJsonSync_1 = outputJsonSync;
  return outputJsonSync_1;
}
var json$2;
var hasRequiredJson$1;
function requireJson$1() {
  if (hasRequiredJson$1)
    return json$2;
  hasRequiredJson$1 = 1;
  const u = requireUniversalify().fromCallback;
  const jsonFile = requireJsonfile();
  jsonFile.outputJson = u(requireOutputJson());
  jsonFile.outputJsonSync = requireOutputJsonSync();
  jsonFile.outputJSON = jsonFile.outputJson;
  jsonFile.outputJSONSync = jsonFile.outputJsonSync;
  jsonFile.writeJSON = jsonFile.writeJson;
  jsonFile.writeJSONSync = jsonFile.writeJsonSync;
  jsonFile.readJSON = jsonFile.readJson;
  jsonFile.readJSONSync = jsonFile.readJsonSync;
  json$2 = jsonFile;
  return json$2;
}
var moveSync_1;
var hasRequiredMoveSync$1;
function requireMoveSync$1() {
  if (hasRequiredMoveSync$1)
    return moveSync_1;
  hasRequiredMoveSync$1 = 1;
  const fs2 = requireGracefulFs();
  const path2 = require$$0$3;
  const copySync2 = requireCopySync().copySync;
  const removeSync = requireRemove().removeSync;
  const mkdirpSync = requireMkdirs().mkdirpSync;
  const stat2 = requireStat();
  function moveSync2(src, dest, opts) {
    opts = opts || {};
    const overwrite = opts.overwrite || opts.clobber || false;
    const { srcStat } = stat2.checkPathsSync(src, dest, "move");
    stat2.checkParentPathsSync(src, srcStat, dest, "move");
    mkdirpSync(path2.dirname(dest));
    return doRename(src, dest, overwrite);
  }
  function doRename(src, dest, overwrite) {
    if (overwrite) {
      removeSync(dest);
      return rename(src, dest, overwrite);
    }
    if (fs2.existsSync(dest))
      throw new Error("dest already exists.");
    return rename(src, dest, overwrite);
  }
  function rename(src, dest, overwrite) {
    try {
      fs2.renameSync(src, dest);
    } catch (err) {
      if (err.code !== "EXDEV")
        throw err;
      return moveAcrossDevice(src, dest, overwrite);
    }
  }
  function moveAcrossDevice(src, dest, overwrite) {
    const opts = {
      overwrite,
      errorOnExist: true
    };
    copySync2(src, dest, opts);
    return removeSync(src);
  }
  moveSync_1 = moveSync2;
  return moveSync_1;
}
var moveSync;
var hasRequiredMoveSync;
function requireMoveSync() {
  if (hasRequiredMoveSync)
    return moveSync;
  hasRequiredMoveSync = 1;
  moveSync = {
    moveSync: requireMoveSync$1()
  };
  return moveSync;
}
var move_1;
var hasRequiredMove$1;
function requireMove$1() {
  if (hasRequiredMove$1)
    return move_1;
  hasRequiredMove$1 = 1;
  const fs2 = requireGracefulFs();
  const path2 = require$$0$3;
  const copy2 = requireCopy().copy;
  const remove2 = requireRemove().remove;
  const mkdirp = requireMkdirs().mkdirp;
  const pathExists2 = requirePathExists().pathExists;
  const stat2 = requireStat();
  function move2(src, dest, opts, cb) {
    if (typeof opts === "function") {
      cb = opts;
      opts = {};
    }
    const overwrite = opts.overwrite || opts.clobber || false;
    stat2.checkPaths(src, dest, "move", (err, stats) => {
      if (err)
        return cb(err);
      const { srcStat } = stats;
      stat2.checkParentPaths(src, srcStat, dest, "move", (err2) => {
        if (err2)
          return cb(err2);
        mkdirp(path2.dirname(dest), (err3) => {
          if (err3)
            return cb(err3);
          return doRename(src, dest, overwrite, cb);
        });
      });
    });
  }
  function doRename(src, dest, overwrite, cb) {
    if (overwrite) {
      return remove2(dest, (err) => {
        if (err)
          return cb(err);
        return rename(src, dest, overwrite, cb);
      });
    }
    pathExists2(dest, (err, destExists) => {
      if (err)
        return cb(err);
      if (destExists)
        return cb(new Error("dest already exists."));
      return rename(src, dest, overwrite, cb);
    });
  }
  function rename(src, dest, overwrite, cb) {
    fs2.rename(src, dest, (err) => {
      if (!err)
        return cb();
      if (err.code !== "EXDEV")
        return cb(err);
      return moveAcrossDevice(src, dest, overwrite, cb);
    });
  }
  function moveAcrossDevice(src, dest, overwrite, cb) {
    const opts = {
      overwrite,
      errorOnExist: true
    };
    copy2(src, dest, opts, (err) => {
      if (err)
        return cb(err);
      return remove2(src, cb);
    });
  }
  move_1 = move2;
  return move_1;
}
var move;
var hasRequiredMove;
function requireMove() {
  if (hasRequiredMove)
    return move;
  hasRequiredMove = 1;
  const u = requireUniversalify().fromCallback;
  move = {
    move: u(requireMove$1())
  };
  return move;
}
var output;
var hasRequiredOutput;
function requireOutput() {
  if (hasRequiredOutput)
    return output;
  hasRequiredOutput = 1;
  const u = requireUniversalify().fromCallback;
  const fs2 = requireGracefulFs();
  const path2 = require$$0$3;
  const mkdir = requireMkdirs();
  const pathExists2 = requirePathExists().pathExists;
  function outputFile(file2, data, encoding, callback) {
    if (typeof encoding === "function") {
      callback = encoding;
      encoding = "utf8";
    }
    const dir = path2.dirname(file2);
    pathExists2(dir, (err, itDoes) => {
      if (err)
        return callback(err);
      if (itDoes)
        return fs2.writeFile(file2, data, encoding, callback);
      mkdir.mkdirs(dir, (err2) => {
        if (err2)
          return callback(err2);
        fs2.writeFile(file2, data, encoding, callback);
      });
    });
  }
  function outputFileSync(file2, ...args) {
    const dir = path2.dirname(file2);
    if (fs2.existsSync(dir)) {
      return fs2.writeFileSync(file2, ...args);
    }
    mkdir.mkdirsSync(dir);
    fs2.writeFileSync(file2, ...args);
  }
  output = {
    outputFile: u(outputFile),
    outputFileSync
  };
  return output;
}
var hasRequiredLib;
function requireLib() {
  if (hasRequiredLib)
    return lib.exports;
  hasRequiredLib = 1;
  (function(module) {
    module.exports = Object.assign(
      {},
      // Export promiseified graceful-fs:
      requireFs$4(),
      // Export extra methods:
      requireCopySync(),
      requireCopy(),
      requireEmpty(),
      requireEnsure(),
      requireJson$1(),
      requireMkdirs(),
      requireMoveSync(),
      requireMove(),
      requireOutput(),
      requirePathExists(),
      requireRemove()
    );
    const fs2 = require$$0$1;
    if (Object.getOwnPropertyDescriptor(fs2, "promises")) {
      Object.defineProperty(module.exports, "promises", {
        get() {
          return fs2.promises;
        }
      });
    }
  })(lib);
  return lib.exports;
}
var globby = { exports: {} };
var arrayUnion;
var hasRequiredArrayUnion;
function requireArrayUnion() {
  if (hasRequiredArrayUnion)
    return arrayUnion;
  hasRequiredArrayUnion = 1;
  arrayUnion = (...arguments_) => {
    return [...new Set([].concat(...arguments_))];
  };
  return arrayUnion;
}
var merge2_1;
var hasRequiredMerge2;
function requireMerge2() {
  if (hasRequiredMerge2)
    return merge2_1;
  hasRequiredMerge2 = 1;
  const Stream$1 = Stream;
  const PassThrough2 = Stream$1.PassThrough;
  const slice = Array.prototype.slice;
  merge2_1 = merge2;
  function merge2() {
    const streamsQueue = [];
    const args = slice.call(arguments);
    let merging = false;
    let options = args[args.length - 1];
    if (options && !Array.isArray(options) && options.pipe == null) {
      args.pop();
    } else {
      options = {};
    }
    const doEnd = options.end !== false;
    const doPipeError = options.pipeError === true;
    if (options.objectMode == null) {
      options.objectMode = true;
    }
    if (options.highWaterMark == null) {
      options.highWaterMark = 64 * 1024;
    }
    const mergedStream = PassThrough2(options);
    function addStream() {
      for (let i = 0, len = arguments.length; i < len; i++) {
        streamsQueue.push(pauseStreams(arguments[i], options));
      }
      mergeStream();
      return this;
    }
    function mergeStream() {
      if (merging) {
        return;
      }
      merging = true;
      let streams = streamsQueue.shift();
      if (!streams) {
        process.nextTick(endStream);
        return;
      }
      if (!Array.isArray(streams)) {
        streams = [streams];
      }
      let pipesCount = streams.length + 1;
      function next() {
        if (--pipesCount > 0) {
          return;
        }
        merging = false;
        mergeStream();
      }
      function pipe(stream2) {
        function onend() {
          stream2.removeListener("merge2UnpipeEnd", onend);
          stream2.removeListener("end", onend);
          if (doPipeError) {
            stream2.removeListener("error", onerror);
          }
          next();
        }
        function onerror(err) {
          mergedStream.emit("error", err);
        }
        if (stream2._readableState.endEmitted) {
          return next();
        }
        stream2.on("merge2UnpipeEnd", onend);
        stream2.on("end", onend);
        if (doPipeError) {
          stream2.on("error", onerror);
        }
        stream2.pipe(mergedStream, { end: false });
        stream2.resume();
      }
      for (let i = 0; i < streams.length; i++) {
        pipe(streams[i]);
      }
      next();
    }
    function endStream() {
      merging = false;
      mergedStream.emit("queueDrain");
      if (doEnd) {
        mergedStream.end();
      }
    }
    mergedStream.setMaxListeners(0);
    mergedStream.add = addStream;
    mergedStream.on("unpipe", function(stream2) {
      stream2.emit("merge2UnpipeEnd");
    });
    if (args.length) {
      addStream.apply(null, args);
    }
    return mergedStream;
  }
  function pauseStreams(streams, options) {
    if (!Array.isArray(streams)) {
      if (!streams._readableState && streams.pipe) {
        streams = streams.pipe(PassThrough2(options));
      }
      if (!streams._readableState || !streams.pause || !streams.pipe) {
        throw new Error("Only readable stream can be merged.");
      }
      streams.pause();
    } else {
      for (let i = 0, len = streams.length; i < len; i++) {
        streams[i] = pauseStreams(streams[i], options);
      }
    }
    return streams;
  }
  return merge2_1;
}
var tasks = {};
var utils$b = {};
var array = {};
var hasRequiredArray;
function requireArray() {
  if (hasRequiredArray)
    return array;
  hasRequiredArray = 1;
  Object.defineProperty(array, "__esModule", { value: true });
  array.splitWhen = array.flatten = void 0;
  function flatten(items) {
    return items.reduce((collection, item) => [].concat(collection, item), []);
  }
  array.flatten = flatten;
  function splitWhen(items, predicate) {
    const result = [[]];
    let groupIndex = 0;
    for (const item of items) {
      if (predicate(item)) {
        groupIndex++;
        result[groupIndex] = [];
      } else {
        result[groupIndex].push(item);
      }
    }
    return result;
  }
  array.splitWhen = splitWhen;
  return array;
}
var errno = {};
var hasRequiredErrno;
function requireErrno() {
  if (hasRequiredErrno)
    return errno;
  hasRequiredErrno = 1;
  Object.defineProperty(errno, "__esModule", { value: true });
  errno.isEnoentCodeError = void 0;
  function isEnoentCodeError(error2) {
    return error2.code === "ENOENT";
  }
  errno.isEnoentCodeError = isEnoentCodeError;
  return errno;
}
var fs$6 = {};
var hasRequiredFs$3;
function requireFs$3() {
  if (hasRequiredFs$3)
    return fs$6;
  hasRequiredFs$3 = 1;
  Object.defineProperty(fs$6, "__esModule", { value: true });
  fs$6.createDirentFromStats = void 0;
  class DirentFromStats {
    constructor(name, stats) {
      this.name = name;
      this.isBlockDevice = stats.isBlockDevice.bind(stats);
      this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
      this.isDirectory = stats.isDirectory.bind(stats);
      this.isFIFO = stats.isFIFO.bind(stats);
      this.isFile = stats.isFile.bind(stats);
      this.isSocket = stats.isSocket.bind(stats);
      this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
    }
  }
  function createDirentFromStats(name, stats) {
    return new DirentFromStats(name, stats);
  }
  fs$6.createDirentFromStats = createDirentFromStats;
  return fs$6;
}
var path$6 = {};
var hasRequiredPath;
function requirePath() {
  if (hasRequiredPath)
    return path$6;
  hasRequiredPath = 1;
  Object.defineProperty(path$6, "__esModule", { value: true });
  path$6.convertPosixPathToPattern = path$6.convertWindowsPathToPattern = path$6.convertPathToPattern = path$6.escapePosixPath = path$6.escapeWindowsPath = path$6.escape = path$6.removeLeadingDotSegment = path$6.makeAbsolute = path$6.unixify = void 0;
  const os2 = require$$0;
  const path2 = require$$0$3;
  const IS_WINDOWS_PLATFORM = os2.platform() === "win32";
  const LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
  const POSIX_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\()|\\(?![!()*+?@[\]{|}]))/g;
  const WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([(){}]|^!|[!+@](?=\())/g;
  const DOS_DEVICE_PATH_RE = /^\\\\([.?])/;
  const WINDOWS_BACKSLASHES_RE = /\\(?![!()+@{}])/g;
  function unixify(filepath) {
    return filepath.replace(/\\/g, "/");
  }
  path$6.unixify = unixify;
  function makeAbsolute(cwd, filepath) {
    return path2.resolve(cwd, filepath);
  }
  path$6.makeAbsolute = makeAbsolute;
  function removeLeadingDotSegment(entry2) {
    if (entry2.charAt(0) === ".") {
      const secondCharactery = entry2.charAt(1);
      if (secondCharactery === "/" || secondCharactery === "\\") {
        return entry2.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
      }
    }
    return entry2;
  }
  path$6.removeLeadingDotSegment = removeLeadingDotSegment;
  path$6.escape = IS_WINDOWS_PLATFORM ? escapeWindowsPath : escapePosixPath;
  function escapeWindowsPath(pattern2) {
    return pattern2.replace(WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
  }
  path$6.escapeWindowsPath = escapeWindowsPath;
  function escapePosixPath(pattern2) {
    return pattern2.replace(POSIX_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
  }
  path$6.escapePosixPath = escapePosixPath;
  path$6.convertPathToPattern = IS_WINDOWS_PLATFORM ? convertWindowsPathToPattern : convertPosixPathToPattern;
  function convertWindowsPathToPattern(filepath) {
    return escapeWindowsPath(filepath).replace(DOS_DEVICE_PATH_RE, "//$1").replace(WINDOWS_BACKSLASHES_RE, "/");
  }
  path$6.convertWindowsPathToPattern = convertWindowsPathToPattern;
  function convertPosixPathToPattern(filepath) {
    return escapePosixPath(filepath);
  }
  path$6.convertPosixPathToPattern = convertPosixPathToPattern;
  return path$6;
}
var pattern = {};
/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */
var isExtglob;
var hasRequiredIsExtglob;
function requireIsExtglob() {
  if (hasRequiredIsExtglob)
    return isExtglob;
  hasRequiredIsExtglob = 1;
  isExtglob = function isExtglob2(str2) {
    if (typeof str2 !== "string" || str2 === "") {
      return false;
    }
    var match;
    while (match = /(\\).|([@?!+*]\(.*\))/g.exec(str2)) {
      if (match[2])
        return true;
      str2 = str2.slice(match.index + match[0].length);
    }
    return false;
  };
  return isExtglob;
}
/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
var isGlob;
var hasRequiredIsGlob;
function requireIsGlob() {
  if (hasRequiredIsGlob)
    return isGlob;
  hasRequiredIsGlob = 1;
  var isExtglob2 = requireIsExtglob();
  var chars = { "{": "}", "(": ")", "[": "]" };
  var strictCheck = function(str2) {
    if (str2[0] === "!") {
      return true;
    }
    var index2 = 0;
    var pipeIndex = -2;
    var closeSquareIndex = -2;
    var closeCurlyIndex = -2;
    var closeParenIndex = -2;
    var backSlashIndex = -2;
    while (index2 < str2.length) {
      if (str2[index2] === "*") {
        return true;
      }
      if (str2[index2 + 1] === "?" && /[\].+)]/.test(str2[index2])) {
        return true;
      }
      if (closeSquareIndex !== -1 && str2[index2] === "[" && str2[index2 + 1] !== "]") {
        if (closeSquareIndex < index2) {
          closeSquareIndex = str2.indexOf("]", index2);
        }
        if (closeSquareIndex > index2) {
          if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
            return true;
          }
          backSlashIndex = str2.indexOf("\\", index2);
          if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
            return true;
          }
        }
      }
      if (closeCurlyIndex !== -1 && str2[index2] === "{" && str2[index2 + 1] !== "}") {
        closeCurlyIndex = str2.indexOf("}", index2);
        if (closeCurlyIndex > index2) {
          backSlashIndex = str2.indexOf("\\", index2);
          if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
            return true;
          }
        }
      }
      if (closeParenIndex !== -1 && str2[index2] === "(" && str2[index2 + 1] === "?" && /[:!=]/.test(str2[index2 + 2]) && str2[index2 + 3] !== ")") {
        closeParenIndex = str2.indexOf(")", index2);
        if (closeParenIndex > index2) {
          backSlashIndex = str2.indexOf("\\", index2);
          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
            return true;
          }
        }
      }
      if (pipeIndex !== -1 && str2[index2] === "(" && str2[index2 + 1] !== "|") {
        if (pipeIndex < index2) {
          pipeIndex = str2.indexOf("|", index2);
        }
        if (pipeIndex !== -1 && str2[pipeIndex + 1] !== ")") {
          closeParenIndex = str2.indexOf(")", pipeIndex);
          if (closeParenIndex > pipeIndex) {
            backSlashIndex = str2.indexOf("\\", pipeIndex);
            if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
              return true;
            }
          }
        }
      }
      if (str2[index2] === "\\") {
        var open = str2[index2 + 1];
        index2 += 2;
        var close2 = chars[open];
        if (close2) {
          var n = str2.indexOf(close2, index2);
          if (n !== -1) {
            index2 = n + 1;
          }
        }
        if (str2[index2] === "!") {
          return true;
        }
      } else {
        index2++;
      }
    }
    return false;
  };
  var relaxedCheck = function(str2) {
    if (str2[0] === "!") {
      return true;
    }
    var index2 = 0;
    while (index2 < str2.length) {
      if (/[*?{}()[\]]/.test(str2[index2])) {
        return true;
      }
      if (str2[index2] === "\\") {
        var open = str2[index2 + 1];
        index2 += 2;
        var close2 = chars[open];
        if (close2) {
          var n = str2.indexOf(close2, index2);
          if (n !== -1) {
            index2 = n + 1;
          }
        }
        if (str2[index2] === "!") {
          return true;
        }
      } else {
        index2++;
      }
    }
    return false;
  };
  isGlob = function isGlob2(str2, options) {
    if (typeof str2 !== "string" || str2 === "") {
      return false;
    }
    if (isExtglob2(str2)) {
      return true;
    }
    var check = strictCheck;
    if (options && options.strict === false) {
      check = relaxedCheck;
    }
    return check(str2);
  };
  return isGlob;
}
var globParent;
var hasRequiredGlobParent;
function requireGlobParent() {
  if (hasRequiredGlobParent)
    return globParent;
  hasRequiredGlobParent = 1;
  var isGlob2 = requireIsGlob();
  var pathPosixDirname = require$$0$3.posix.dirname;
  var isWin32 = require$$0.platform() === "win32";
  var slash2 = "/";
  var backslash = /\\/g;
  var enclosure = /[\{\[].*[\}\]]$/;
  var globby2 = /(^|[^\\])([\{\[]|\([^\)]+$)/;
  var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
  globParent = function globParent2(str2, opts) {
    var options = Object.assign({ flipBackslashes: true }, opts);
    if (options.flipBackslashes && isWin32 && str2.indexOf(slash2) < 0) {
      str2 = str2.replace(backslash, slash2);
    }
    if (enclosure.test(str2)) {
      str2 += slash2;
    }
    str2 += "a";
    do {
      str2 = pathPosixDirname(str2);
    } while (isGlob2(str2) || globby2.test(str2));
    return str2.replace(escaped, "$1");
  };
  return globParent;
}
var utils$a = {};
(function(exports) {
  exports.isInteger = (num) => {
    if (typeof num === "number") {
      return Number.isInteger(num);
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isInteger(Number(num));
    }
    return false;
  };
  exports.find = (node2, type2) => node2.nodes.find((node3) => node3.type === type2);
  exports.exceedsLimit = (min, max, step = 1, limit) => {
    if (limit === false)
      return false;
    if (!exports.isInteger(min) || !exports.isInteger(max))
      return false;
    return (Number(max) - Number(min)) / Number(step) >= limit;
  };
  exports.escapeNode = (block, n = 0, type2) => {
    let node2 = block.nodes[n];
    if (!node2)
      return;
    if (type2 && node2.type === type2 || node2.type === "open" || node2.type === "close") {
      if (node2.escaped !== true) {
        node2.value = "\\" + node2.value;
        node2.escaped = true;
      }
    }
  };
  exports.encloseBrace = (node2) => {
    if (node2.type !== "brace")
      return false;
    if (node2.commas >> 0 + node2.ranges >> 0 === 0) {
      node2.invalid = true;
      return true;
    }
    return false;
  };
  exports.isInvalidBrace = (block) => {
    if (block.type !== "brace")
      return false;
    if (block.invalid === true || block.dollar)
      return true;
    if (block.commas >> 0 + block.ranges >> 0 === 0) {
      block.invalid = true;
      return true;
    }
    if (block.open !== true || block.close !== true) {
      block.invalid = true;
      return true;
    }
    return false;
  };
  exports.isOpenOrClose = (node2) => {
    if (node2.type === "open" || node2.type === "close") {
      return true;
    }
    return node2.open === true || node2.close === true;
  };
  exports.reduce = (nodes) => nodes.reduce((acc, node2) => {
    if (node2.type === "text")
      acc.push(node2.value);
    if (node2.type === "range")
      node2.type = "text";
    return acc;
  }, []);
  exports.flatten = (...args) => {
    const result = [];
    const flat = (arr) => {
      for (let i = 0; i < arr.length; i++) {
        let ele = arr[i];
        Array.isArray(ele) ? flat(ele) : ele !== void 0 && result.push(ele);
      }
      return result;
    };
    flat(args);
    return result;
  };
})(utils$a);
const utils$9 = utils$a;
var stringify$5 = (ast, options = {}) => {
  let stringify2 = (node2, parent = {}) => {
    let invalidBlock = options.escapeInvalid && utils$9.isInvalidBrace(parent);
    let invalidNode = node2.invalid === true && options.escapeInvalid === true;
    let output2 = "";
    if (node2.value) {
      if ((invalidBlock || invalidNode) && utils$9.isOpenOrClose(node2)) {
        return "\\" + node2.value;
      }
      return node2.value;
    }
    if (node2.value) {
      return node2.value;
    }
    if (node2.nodes) {
      for (let child2 of node2.nodes) {
        output2 += stringify2(child2);
      }
    }
    return output2;
  };
  return stringify2(ast);
};
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
var isNumber$2 = function(num) {
  if (typeof num === "number") {
    return num - num === 0;
  }
  if (typeof num === "string" && num.trim() !== "") {
    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
  }
  return false;
};
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
const isNumber$1 = isNumber$2;
const toRegexRange$1 = (min, max, options) => {
  if (isNumber$1(min) === false) {
    throw new TypeError("toRegexRange: expected the first argument to be a number");
  }
  if (max === void 0 || min === max) {
    return String(min);
  }
  if (isNumber$1(max) === false) {
    throw new TypeError("toRegexRange: expected the second argument to be a number.");
  }
  let opts = { relaxZeros: true, ...options };
  if (typeof opts.strictZeros === "boolean") {
    opts.relaxZeros = opts.strictZeros === false;
  }
  let relax = String(opts.relaxZeros);
  let shorthand = String(opts.shorthand);
  let capture = String(opts.capture);
  let wrap2 = String(opts.wrap);
  let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap2;
  if (toRegexRange$1.cache.hasOwnProperty(cacheKey)) {
    return toRegexRange$1.cache[cacheKey].result;
  }
  let a = Math.min(min, max);
  let b = Math.max(min, max);
  if (Math.abs(a - b) === 1) {
    let result = min + "|" + max;
    if (opts.capture) {
      return `(${result})`;
    }
    if (opts.wrap === false) {
      return result;
    }
    return `(?:${result})`;
  }
  let isPadded = hasPadding(min) || hasPadding(max);
  let state = { min, max, a, b };
  let positives = [];
  let negatives = [];
  if (isPadded) {
    state.isPadded = isPadded;
    state.maxLen = String(state.max).length;
  }
  if (a < 0) {
    let newMin = b < 0 ? Math.abs(b) : 1;
    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
    a = state.a = 0;
  }
  if (b >= 0) {
    positives = splitToPatterns(a, b, state, opts);
  }
  state.negatives = negatives;
  state.positives = positives;
  state.result = collatePatterns(negatives, positives);
  if (opts.capture === true) {
    state.result = `(${state.result})`;
  } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
    state.result = `(?:${state.result})`;
  }
  toRegexRange$1.cache[cacheKey] = state;
  return state.result;
};
function collatePatterns(neg, pos, options) {
  let onlyNegative = filterPatterns(neg, pos, "-", false) || [];
  let onlyPositive = filterPatterns(pos, neg, "", false) || [];
  let intersected = filterPatterns(neg, pos, "-?", true) || [];
  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
  return subpatterns.join("|");
}
function splitToRanges(min, max) {
  let nines = 1;
  let zeros2 = 1;
  let stop = countNines(min, nines);
  let stops = /* @__PURE__ */ new Set([max]);
  while (min <= stop && stop <= max) {
    stops.add(stop);
    nines += 1;
    stop = countNines(min, nines);
  }
  stop = countZeros(max + 1, zeros2) - 1;
  while (min < stop && stop <= max) {
    stops.add(stop);
    zeros2 += 1;
    stop = countZeros(max + 1, zeros2) - 1;
  }
  stops = [...stops];
  stops.sort(compare);
  return stops;
}
function rangeToPattern(start, stop, options) {
  if (start === stop) {
    return { pattern: start, count: [], digits: 0 };
  }
  let zipped = zip(start, stop);
  let digits = zipped.length;
  let pattern2 = "";
  let count = 0;
  for (let i = 0; i < digits; i++) {
    let [startDigit, stopDigit] = zipped[i];
    if (startDigit === stopDigit) {
      pattern2 += startDigit;
    } else if (startDigit !== "0" || stopDigit !== "9") {
      pattern2 += toCharacterClass(startDigit, stopDigit);
    } else {
      count++;
    }
  }
  if (count) {
    pattern2 += options.shorthand === true ? "\\d" : "[0-9]";
  }
  return { pattern: pattern2, count: [count], digits };
}
function splitToPatterns(min, max, tok, options) {
  let ranges = splitToRanges(min, max);
  let tokens = [];
  let start = min;
  let prev;
  for (let i = 0; i < ranges.length; i++) {
    let max2 = ranges[i];
    let obj = rangeToPattern(String(start), String(max2), options);
    let zeros2 = "";
    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
      if (prev.count.length > 1) {
        prev.count.pop();
      }
      prev.count.push(obj.count[0]);
      prev.string = prev.pattern + toQuantifier(prev.count);
      start = max2 + 1;
      continue;
    }
    if (tok.isPadded) {
      zeros2 = padZeros(max2, tok, options);
    }
    obj.string = zeros2 + obj.pattern + toQuantifier(obj.count);
    tokens.push(obj);
    start = max2 + 1;
    prev = obj;
  }
  return tokens;
}
function filterPatterns(arr, comparison, prefix, intersection, options) {
  let result = [];
  for (let ele of arr) {
    let { string: string2 } = ele;
    if (!intersection && !contains(comparison, "string", string2)) {
      result.push(prefix + string2);
    }
    if (intersection && contains(comparison, "string", string2)) {
      result.push(prefix + string2);
    }
  }
  return result;
}
function zip(a, b) {
  let arr = [];
  for (let i = 0; i < a.length; i++)
    arr.push([a[i], b[i]]);
  return arr;
}
function compare(a, b) {
  return a > b ? 1 : b > a ? -1 : 0;
}
function contains(arr, key, val) {
  return arr.some((ele) => ele[key] === val);
}
function countNines(min, len) {
  return Number(String(min).slice(0, -len) + "9".repeat(len));
}
function countZeros(integer, zeros2) {
  return integer - integer % Math.pow(10, zeros2);
}
function toQuantifier(digits) {
  let [start = 0, stop = ""] = digits;
  if (stop || start > 1) {
    return `{${start + (stop ? "," + stop : "")}}`;
  }
  return "";
}
function toCharacterClass(a, b, options) {
  return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
}
function hasPadding(str2) {
  return /^-?(0+)\d/.test(str2);
}
function padZeros(value2, tok, options) {
  if (!tok.isPadded) {
    return value2;
  }
  let diff = Math.abs(tok.maxLen - String(value2).length);
  let relax = options.relaxZeros !== false;
  switch (diff) {
    case 0:
      return "";
    case 1:
      return relax ? "0?" : "0";
    case 2:
      return relax ? "0{0,2}" : "00";
    default: {
      return relax ? `0{0,${diff}}` : `0{${diff}}`;
    }
  }
}
toRegexRange$1.cache = {};
toRegexRange$1.clearCache = () => toRegexRange$1.cache = {};
var toRegexRange_1 = toRegexRange$1;
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */
const util$1 = require$$0$2;
const toRegexRange = toRegexRange_1;
const isObject$2 = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
const transform = (toNumber) => {
  return (value2) => toNumber === true ? Number(value2) : String(value2);
};
const isValidValue = (value2) => {
  return typeof value2 === "number" || typeof value2 === "string" && value2 !== "";
};
const isNumber = (num) => Number.isInteger(+num);
const zeros = (input) => {
  let value2 = `${input}`;
  let index2 = -1;
  if (value2[0] === "-")
    value2 = value2.slice(1);
  if (value2 === "0")
    return false;
  while (value2[++index2] === "0")
    ;
  return index2 > 0;
};
const stringify$4 = (start, end, options) => {
  if (typeof start === "string" || typeof end === "string") {
    return true;
  }
  return options.stringify === true;
};
const pad = (input, maxLength, toNumber) => {
  if (maxLength > 0) {
    let dash = input[0] === "-" ? "-" : "";
    if (dash)
      input = input.slice(1);
    input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
  }
  if (toNumber === false) {
    return String(input);
  }
  return input;
};
const toMaxLen = (input, maxLength) => {
  let negative = input[0] === "-" ? "-" : "";
  if (negative) {
    input = input.slice(1);
    maxLength--;
  }
  while (input.length < maxLength)
    input = "0" + input;
  return negative ? "-" + input : input;
};
const toSequence = (parts, options) => {
  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  let prefix = options.capture ? "" : "?:";
  let positives = "";
  let negatives = "";
  let result;
  if (parts.positives.length) {
    positives = parts.positives.join("|");
  }
  if (parts.negatives.length) {
    negatives = `-(${prefix}${parts.negatives.join("|")})`;
  }
  if (positives && negatives) {
    result = `${positives}|${negatives}`;
  } else {
    result = positives || negatives;
  }
  if (options.wrap) {
    return `(${prefix}${result})`;
  }
  return result;
};
const toRange = (a, b, isNumbers, options) => {
  if (isNumbers) {
    return toRegexRange(a, b, { wrap: false, ...options });
  }
  let start = String.fromCharCode(a);
  if (a === b)
    return start;
  let stop = String.fromCharCode(b);
  return `[${start}-${stop}]`;
};
const toRegex = (start, end, options) => {
  if (Array.isArray(start)) {
    let wrap2 = options.wrap === true;
    let prefix = options.capture ? "" : "?:";
    return wrap2 ? `(${prefix}${start.join("|")})` : start.join("|");
  }
  return toRegexRange(start, end, options);
};
const rangeError = (...args) => {
  return new RangeError("Invalid range arguments: " + util$1.inspect(...args));
};
const invalidRange = (start, end, options) => {
  if (options.strictRanges === true)
    throw rangeError([start, end]);
  return [];
};
const invalidStep = (step, options) => {
  if (options.strictRanges === true) {
    throw new TypeError(`Expected step "${step}" to be a number`);
  }
  return [];
};
const fillNumbers = (start, end, step = 1, options = {}) => {
  let a = Number(start);
  let b = Number(end);
  if (!Number.isInteger(a) || !Number.isInteger(b)) {
    if (options.strictRanges === true)
      throw rangeError([start, end]);
    return [];
  }
  if (a === 0)
    a = 0;
  if (b === 0)
    b = 0;
  let descending = a > b;
  let startString = String(start);
  let endString = String(end);
  let stepString = String(step);
  step = Math.max(Math.abs(step), 1);
  let padded = zeros(startString) || zeros(endString) || zeros(stepString);
  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
  let toNumber = padded === false && stringify$4(start, end, options) === false;
  let format2 = options.transform || transform(toNumber);
  if (options.toRegex && step === 1) {
    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
  }
  let parts = { negatives: [], positives: [] };
  let push2 = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
  let range = [];
  let index2 = 0;
  while (descending ? a >= b : a <= b) {
    if (options.toRegex === true && step > 1) {
      push2(a);
    } else {
      range.push(pad(format2(a, index2), maxLen, toNumber));
    }
    a = descending ? a - step : a + step;
    index2++;
  }
  if (options.toRegex === true) {
    return step > 1 ? toSequence(parts, options) : toRegex(range, null, { wrap: false, ...options });
  }
  return range;
};
const fillLetters = (start, end, step = 1, options = {}) => {
  if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
    return invalidRange(start, end, options);
  }
  let format2 = options.transform || ((val) => String.fromCharCode(val));
  let a = `${start}`.charCodeAt(0);
  let b = `${end}`.charCodeAt(0);
  let descending = a > b;
  let min = Math.min(a, b);
  let max = Math.max(a, b);
  if (options.toRegex && step === 1) {
    return toRange(min, max, false, options);
  }
  let range = [];
  let index2 = 0;
  while (descending ? a >= b : a <= b) {
    range.push(format2(a, index2));
    a = descending ? a - step : a + step;
    index2++;
  }
  if (options.toRegex === true) {
    return toRegex(range, null, { wrap: false, options });
  }
  return range;
};
const fill$2 = (start, end, step, options = {}) => {
  if (end == null && isValidValue(start)) {
    return [start];
  }
  if (!isValidValue(start) || !isValidValue(end)) {
    return invalidRange(start, end, options);
  }
  if (typeof step === "function") {
    return fill$2(start, end, 1, { transform: step });
  }
  if (isObject$2(step)) {
    return fill$2(start, end, 0, step);
  }
  let opts = { ...options };
  if (opts.capture === true)
    opts.wrap = true;
  step = step || opts.step || 1;
  if (!isNumber(step)) {
    if (step != null && !isObject$2(step))
      return invalidStep(step, opts);
    return fill$2(start, end, 1, step);
  }
  if (isNumber(start) && isNumber(end)) {
    return fillNumbers(start, end, step, opts);
  }
  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
};
var fillRange = fill$2;
const fill$1 = fillRange;
const utils$8 = utils$a;
const compile$1 = (ast, options = {}) => {
  let walk = (node2, parent = {}) => {
    let invalidBlock = utils$8.isInvalidBrace(parent);
    let invalidNode = node2.invalid === true && options.escapeInvalid === true;
    let invalid = invalidBlock === true || invalidNode === true;
    let prefix = options.escapeInvalid === true ? "\\" : "";
    let output2 = "";
    if (node2.isOpen === true) {
      return prefix + node2.value;
    }
    if (node2.isClose === true) {
      return prefix + node2.value;
    }
    if (node2.type === "open") {
      return invalid ? prefix + node2.value : "(";
    }
    if (node2.type === "close") {
      return invalid ? prefix + node2.value : ")";
    }
    if (node2.type === "comma") {
      return node2.prev.type === "comma" ? "" : invalid ? node2.value : "|";
    }
    if (node2.value) {
      return node2.value;
    }
    if (node2.nodes && node2.ranges > 0) {
      let args = utils$8.reduce(node2.nodes);
      let range = fill$1(...args, { ...options, wrap: false, toRegex: true });
      if (range.length !== 0) {
        return args.length > 1 && range.length > 1 ? `(${range})` : range;
      }
    }
    if (node2.nodes) {
      for (let child2 of node2.nodes) {
        output2 += walk(child2, node2);
      }
    }
    return output2;
  };
  return walk(ast);
};
var compile_1 = compile$1;
const fill = fillRange;
const stringify$3 = stringify$5;
const utils$7 = utils$a;
const append = (queue2 = "", stash = "", enclose = false) => {
  let result = [];
  queue2 = [].concat(queue2);
  stash = [].concat(stash);
  if (!stash.length)
    return queue2;
  if (!queue2.length) {
    return enclose ? utils$7.flatten(stash).map((ele) => `{${ele}}`) : stash;
  }
  for (let item of queue2) {
    if (Array.isArray(item)) {
      for (let value2 of item) {
        result.push(append(value2, stash, enclose));
      }
    } else {
      for (let ele of stash) {
        if (enclose === true && typeof ele === "string")
          ele = `{${ele}}`;
        result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
      }
    }
  }
  return utils$7.flatten(result);
};
const expand$1 = (ast, options = {}) => {
  let rangeLimit = options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
  let walk = (node2, parent = {}) => {
    node2.queue = [];
    let p = parent;
    let q = parent.queue;
    while (p.type !== "brace" && p.type !== "root" && p.parent) {
      p = p.parent;
      q = p.queue;
    }
    if (node2.invalid || node2.dollar) {
      q.push(append(q.pop(), stringify$3(node2, options)));
      return;
    }
    if (node2.type === "brace" && node2.invalid !== true && node2.nodes.length === 2) {
      q.push(append(q.pop(), ["{}"]));
      return;
    }
    if (node2.nodes && node2.ranges > 0) {
      let args = utils$7.reduce(node2.nodes);
      if (utils$7.exceedsLimit(...args, options.step, rangeLimit)) {
        throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
      }
      let range = fill(...args, options);
      if (range.length === 0) {
        range = stringify$3(node2, options);
      }
      q.push(append(q.pop(), range));
      node2.nodes = [];
      return;
    }
    let enclose = utils$7.encloseBrace(node2);
    let queue2 = node2.queue;
    let block = node2;
    while (block.type !== "brace" && block.type !== "root" && block.parent) {
      block = block.parent;
      queue2 = block.queue;
    }
    for (let i = 0; i < node2.nodes.length; i++) {
      let child2 = node2.nodes[i];
      if (child2.type === "comma" && node2.type === "brace") {
        if (i === 1)
          queue2.push("");
        queue2.push("");
        continue;
      }
      if (child2.type === "close") {
        q.push(append(q.pop(), queue2, enclose));
        continue;
      }
      if (child2.value && child2.type !== "open") {
        queue2.push(append(queue2.pop(), child2.value));
        continue;
      }
      if (child2.nodes) {
        walk(child2, node2);
      }
    }
    return queue2;
  };
  return utils$7.flatten(walk(ast));
};
var expand_1 = expand$1;
var constants$4 = {
  MAX_LENGTH: 1024 * 64,
  // Digits
  CHAR_0: "0",
  /* 0 */
  CHAR_9: "9",
  /* 9 */
  // Alphabet chars.
  CHAR_UPPERCASE_A: "A",
  /* A */
  CHAR_LOWERCASE_A: "a",
  /* a */
  CHAR_UPPERCASE_Z: "Z",
  /* Z */
  CHAR_LOWERCASE_Z: "z",
  /* z */
  CHAR_LEFT_PARENTHESES: "(",
  /* ( */
  CHAR_RIGHT_PARENTHESES: ")",
  /* ) */
  CHAR_ASTERISK: "*",
  /* * */
  // Non-alphabetic chars.
  CHAR_AMPERSAND: "&",
  /* & */
  CHAR_AT: "@",
  /* @ */
  CHAR_BACKSLASH: "\\",
  /* \ */
  CHAR_BACKTICK: "`",
  /* ` */
  CHAR_CARRIAGE_RETURN: "\r",
  /* \r */
  CHAR_CIRCUMFLEX_ACCENT: "^",
  /* ^ */
  CHAR_COLON: ":",
  /* : */
  CHAR_COMMA: ",",
  /* , */
  CHAR_DOLLAR: "$",
  /* . */
  CHAR_DOT: ".",
  /* . */
  CHAR_DOUBLE_QUOTE: '"',
  /* " */
  CHAR_EQUAL: "=",
  /* = */
  CHAR_EXCLAMATION_MARK: "!",
  /* ! */
  CHAR_FORM_FEED: "\f",
  /* \f */
  CHAR_FORWARD_SLASH: "/",
  /* / */
  CHAR_HASH: "#",
  /* # */
  CHAR_HYPHEN_MINUS: "-",
  /* - */
  CHAR_LEFT_ANGLE_BRACKET: "<",
  /* < */
  CHAR_LEFT_CURLY_BRACE: "{",
  /* { */
  CHAR_LEFT_SQUARE_BRACKET: "[",
  /* [ */
  CHAR_LINE_FEED: "\n",
  /* \n */
  CHAR_NO_BREAK_SPACE: " ",
  /* \u00A0 */
  CHAR_PERCENT: "%",
  /* % */
  CHAR_PLUS: "+",
  /* + */
  CHAR_QUESTION_MARK: "?",
  /* ? */
  CHAR_RIGHT_ANGLE_BRACKET: ">",
  /* > */
  CHAR_RIGHT_CURLY_BRACE: "}",
  /* } */
  CHAR_RIGHT_SQUARE_BRACKET: "]",
  /* ] */
  CHAR_SEMICOLON: ";",
  /* ; */
  CHAR_SINGLE_QUOTE: "'",
  /* ' */
  CHAR_SPACE: " ",
  /*   */
  CHAR_TAB: "	",
  /* \t */
  CHAR_UNDERSCORE: "_",
  /* _ */
  CHAR_VERTICAL_LINE: "|",
  /* | */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
  /* \uFEFF */
};
const stringify$2 = stringify$5;
const {
  MAX_LENGTH: MAX_LENGTH$1,
  CHAR_BACKSLASH,
  /* \ */
  CHAR_BACKTICK,
  /* ` */
  CHAR_COMMA: CHAR_COMMA$2,
  /* , */
  CHAR_DOT: CHAR_DOT$1,
  /* . */
  CHAR_LEFT_PARENTHESES: CHAR_LEFT_PARENTHESES$1,
  /* ( */
  CHAR_RIGHT_PARENTHESES: CHAR_RIGHT_PARENTHESES$1,
  /* ) */
  CHAR_LEFT_CURLY_BRACE: CHAR_LEFT_CURLY_BRACE$1,
  /* { */
  CHAR_RIGHT_CURLY_BRACE: CHAR_RIGHT_CURLY_BRACE$1,
  /* } */
  CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET$2,
  /* [ */
  CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET$2,
  /* ] */
  CHAR_DOUBLE_QUOTE: CHAR_DOUBLE_QUOTE$1,
  /* " */
  CHAR_SINGLE_QUOTE: CHAR_SINGLE_QUOTE$1,
  /* ' */
  CHAR_NO_BREAK_SPACE,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE
} = constants$4;
const parse$5 = (input, options = {}) => {
  if (typeof input !== "string") {
    throw new TypeError("Expected a string");
  }
  let opts = options || {};
  let max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH$1, opts.maxLength) : MAX_LENGTH$1;
  if (input.length > max) {
    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
  }
  let ast = { type: "root", input, nodes: [] };
  let stack = [ast];
  let block = ast;
  let prev = ast;
  let brackets = 0;
  let length = input.length;
  let index2 = 0;
  let depth2 = 0;
  let value2;
  const advance = () => input[index2++];
  const push2 = (node2) => {
    if (node2.type === "text" && prev.type === "dot") {
      prev.type = "text";
    }
    if (prev && prev.type === "text" && node2.type === "text") {
      prev.value += node2.value;
      return;
    }
    block.nodes.push(node2);
    node2.parent = block;
    node2.prev = prev;
    prev = node2;
    return node2;
  };
  push2({ type: "bos" });
  while (index2 < length) {
    block = stack[stack.length - 1];
    value2 = advance();
    if (value2 === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value2 === CHAR_NO_BREAK_SPACE) {
      continue;
    }
    if (value2 === CHAR_BACKSLASH) {
      push2({ type: "text", value: (options.keepEscaping ? value2 : "") + advance() });
      continue;
    }
    if (value2 === CHAR_RIGHT_SQUARE_BRACKET$2) {
      push2({ type: "text", value: "\\" + value2 });
      continue;
    }
    if (value2 === CHAR_LEFT_SQUARE_BRACKET$2) {
      brackets++;
      let next;
      while (index2 < length && (next = advance())) {
        value2 += next;
        if (next === CHAR_LEFT_SQUARE_BRACKET$2) {
          brackets++;
          continue;
        }
        if (next === CHAR_BACKSLASH) {
          value2 += advance();
          continue;
        }
        if (next === CHAR_RIGHT_SQUARE_BRACKET$2) {
          brackets--;
          if (brackets === 0) {
            break;
          }
        }
      }
      push2({ type: "text", value: value2 });
      continue;
    }
    if (value2 === CHAR_LEFT_PARENTHESES$1) {
      block = push2({ type: "paren", nodes: [] });
      stack.push(block);
      push2({ type: "text", value: value2 });
      continue;
    }
    if (value2 === CHAR_RIGHT_PARENTHESES$1) {
      if (block.type !== "paren") {
        push2({ type: "text", value: value2 });
        continue;
      }
      block = stack.pop();
      push2({ type: "text", value: value2 });
      block = stack[stack.length - 1];
      continue;
    }
    if (value2 === CHAR_DOUBLE_QUOTE$1 || value2 === CHAR_SINGLE_QUOTE$1 || value2 === CHAR_BACKTICK) {
      let open = value2;
      let next;
      if (options.keepQuotes !== true) {
        value2 = "";
      }
      while (index2 < length && (next = advance())) {
        if (next === CHAR_BACKSLASH) {
          value2 += next + advance();
          continue;
        }
        if (next === open) {
          if (options.keepQuotes === true)
            value2 += next;
          break;
        }
        value2 += next;
      }
      push2({ type: "text", value: value2 });
      continue;
    }
    if (value2 === CHAR_LEFT_CURLY_BRACE$1) {
      depth2++;
      let dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
      let brace = {
        type: "brace",
        open: true,
        close: false,
        dollar,
        depth: depth2,
        commas: 0,
        ranges: 0,
        nodes: []
      };
      block = push2(brace);
      stack.push(block);
      push2({ type: "open", value: value2 });
      continue;
    }
    if (value2 === CHAR_RIGHT_CURLY_BRACE$1) {
      if (block.type !== "brace") {
        push2({ type: "text", value: value2 });
        continue;
      }
      let type2 = "close";
      block = stack.pop();
      block.close = true;
      push2({ type: type2, value: value2 });
      depth2--;
      block = stack[stack.length - 1];
      continue;
    }
    if (value2 === CHAR_COMMA$2 && depth2 > 0) {
      if (block.ranges > 0) {
        block.ranges = 0;
        let open = block.nodes.shift();
        block.nodes = [open, { type: "text", value: stringify$2(block) }];
      }
      push2({ type: "comma", value: value2 });
      block.commas++;
      continue;
    }
    if (value2 === CHAR_DOT$1 && depth2 > 0 && block.commas === 0) {
      let siblings = block.nodes;
      if (depth2 === 0 || siblings.length === 0) {
        push2({ type: "text", value: value2 });
        continue;
      }
      if (prev.type === "dot") {
        block.range = [];
        prev.value += value2;
        prev.type = "range";
        if (block.nodes.length !== 3 && block.nodes.length !== 5) {
          block.invalid = true;
          block.ranges = 0;
          prev.type = "text";
          continue;
        }
        block.ranges++;
        block.args = [];
        continue;
      }
      if (prev.type === "range") {
        siblings.pop();
        let before = siblings[siblings.length - 1];
        before.value += prev.value + value2;
        prev = before;
        block.ranges--;
        continue;
      }
      push2({ type: "dot", value: value2 });
      continue;
    }
    push2({ type: "text", value: value2 });
  }
  do {
    block = stack.pop();
    if (block.type !== "root") {
      block.nodes.forEach((node2) => {
        if (!node2.nodes) {
          if (node2.type === "open")
            node2.isOpen = true;
          if (node2.type === "close")
            node2.isClose = true;
          if (!node2.nodes)
            node2.type = "text";
          node2.invalid = true;
        }
      });
      let parent = stack[stack.length - 1];
      let index3 = parent.nodes.indexOf(block);
      parent.nodes.splice(index3, 1, ...block.nodes);
    }
  } while (stack.length > 0);
  push2({ type: "eos" });
  return ast;
};
var parse_1$1 = parse$5;
const stringify$1 = stringify$5;
const compile = compile_1;
const expand = expand_1;
const parse$4 = parse_1$1;
const braces$1 = (input, options = {}) => {
  let output2 = [];
  if (Array.isArray(input)) {
    for (let pattern2 of input) {
      let result = braces$1.create(pattern2, options);
      if (Array.isArray(result)) {
        output2.push(...result);
      } else {
        output2.push(result);
      }
    }
  } else {
    output2 = [].concat(braces$1.create(input, options));
  }
  if (options && options.expand === true && options.nodupes === true) {
    output2 = [...new Set(output2)];
  }
  return output2;
};
braces$1.parse = (input, options = {}) => parse$4(input, options);
braces$1.stringify = (input, options = {}) => {
  if (typeof input === "string") {
    return stringify$1(braces$1.parse(input, options), options);
  }
  return stringify$1(input, options);
};
braces$1.compile = (input, options = {}) => {
  if (typeof input === "string") {
    input = braces$1.parse(input, options);
  }
  return compile(input, options);
};
braces$1.expand = (input, options = {}) => {
  if (typeof input === "string") {
    input = braces$1.parse(input, options);
  }
  let result = expand(input, options);
  if (options.noempty === true) {
    result = result.filter(Boolean);
  }
  if (options.nodupes === true) {
    result = [...new Set(result)];
  }
  return result;
};
braces$1.create = (input, options = {}) => {
  if (input === "" || input.length < 3) {
    return [input];
  }
  return options.expand !== true ? braces$1.compile(input, options) : braces$1.expand(input, options);
};
var braces_1 = braces$1;
var utils$6 = {};
const path$5 = require$$0$3;
const WIN_SLASH = "\\\\/";
const WIN_NO_SLASH = `[^${WIN_SLASH}]`;
const DOT_LITERAL = "\\.";
const PLUS_LITERAL = "\\+";
const QMARK_LITERAL = "\\?";
const SLASH_LITERAL = "\\/";
const ONE_CHAR = "(?=.)";
const QMARK = "[^/]";
const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
const NO_DOT = `(?!${DOT_LITERAL})`;
const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
const STAR = `${QMARK}*?`;
const POSIX_CHARS = {
  DOT_LITERAL,
  PLUS_LITERAL,
  QMARK_LITERAL,
  SLASH_LITERAL,
  ONE_CHAR,
  QMARK,
  END_ANCHOR,
  DOTS_SLASH,
  NO_DOT,
  NO_DOTS,
  NO_DOT_SLASH,
  NO_DOTS_SLASH,
  QMARK_NO_DOT,
  STAR,
  START_ANCHOR
};
const WINDOWS_CHARS = {
  ...POSIX_CHARS,
  SLASH_LITERAL: `[${WIN_SLASH}]`,
  QMARK: WIN_NO_SLASH,
  STAR: `${WIN_NO_SLASH}*?`,
  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
  NO_DOT: `(?!${DOT_LITERAL})`,
  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
};
const POSIX_REGEX_SOURCE$1 = {
  alnum: "a-zA-Z0-9",
  alpha: "a-zA-Z",
  ascii: "\\x00-\\x7F",
  blank: " \\t",
  cntrl: "\\x00-\\x1F\\x7F",
  digit: "0-9",
  graph: "\\x21-\\x7E",
  lower: "a-z",
  print: "\\x20-\\x7E ",
  punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
  space: " \\t\\r\\n\\v\\f",
  upper: "A-Z",
  word: "A-Za-z0-9_",
  xdigit: "A-Fa-f0-9"
};
var constants$3 = {
  MAX_LENGTH: 1024 * 64,
  POSIX_REGEX_SOURCE: POSIX_REGEX_SOURCE$1,
  // regular expressions
  REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
  REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
  REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
  REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
  // Replace globs with equivalent patterns to reduce parsing time.
  REPLACEMENTS: {
    "***": "*",
    "**/**": "**",
    "**/**/**": "**"
  },
  // Digits
  CHAR_0: 48,
  /* 0 */
  CHAR_9: 57,
  /* 9 */
  // Alphabet chars.
  CHAR_UPPERCASE_A: 65,
  /* A */
  CHAR_LOWERCASE_A: 97,
  /* a */
  CHAR_UPPERCASE_Z: 90,
  /* Z */
  CHAR_LOWERCASE_Z: 122,
  /* z */
  CHAR_LEFT_PARENTHESES: 40,
  /* ( */
  CHAR_RIGHT_PARENTHESES: 41,
  /* ) */
  CHAR_ASTERISK: 42,
  /* * */
  // Non-alphabetic chars.
  CHAR_AMPERSAND: 38,
  /* & */
  CHAR_AT: 64,
  /* @ */
  CHAR_BACKWARD_SLASH: 92,
  /* \ */
  CHAR_CARRIAGE_RETURN: 13,
  /* \r */
  CHAR_CIRCUMFLEX_ACCENT: 94,
  /* ^ */
  CHAR_COLON: 58,
  /* : */
  CHAR_COMMA: 44,
  /* , */
  CHAR_DOT: 46,
  /* . */
  CHAR_DOUBLE_QUOTE: 34,
  /* " */
  CHAR_EQUAL: 61,
  /* = */
  CHAR_EXCLAMATION_MARK: 33,
  /* ! */
  CHAR_FORM_FEED: 12,
  /* \f */
  CHAR_FORWARD_SLASH: 47,
  /* / */
  CHAR_GRAVE_ACCENT: 96,
  /* ` */
  CHAR_HASH: 35,
  /* # */
  CHAR_HYPHEN_MINUS: 45,
  /* - */
  CHAR_LEFT_ANGLE_BRACKET: 60,
  /* < */
  CHAR_LEFT_CURLY_BRACE: 123,
  /* { */
  CHAR_LEFT_SQUARE_BRACKET: 91,
  /* [ */
  CHAR_LINE_FEED: 10,
  /* \n */
  CHAR_NO_BREAK_SPACE: 160,
  /* \u00A0 */
  CHAR_PERCENT: 37,
  /* % */
  CHAR_PLUS: 43,
  /* + */
  CHAR_QUESTION_MARK: 63,
  /* ? */
  CHAR_RIGHT_ANGLE_BRACKET: 62,
  /* > */
  CHAR_RIGHT_CURLY_BRACE: 125,
  /* } */
  CHAR_RIGHT_SQUARE_BRACKET: 93,
  /* ] */
  CHAR_SEMICOLON: 59,
  /* ; */
  CHAR_SINGLE_QUOTE: 39,
  /* ' */
  CHAR_SPACE: 32,
  /*   */
  CHAR_TAB: 9,
  /* \t */
  CHAR_UNDERSCORE: 95,
  /* _ */
  CHAR_VERTICAL_LINE: 124,
  /* | */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
  /* \uFEFF */
  SEP: path$5.sep,
  /**
   * Create EXTGLOB_CHARS
   */
  extglobChars(chars) {
    return {
      "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
      "?": { type: "qmark", open: "(?:", close: ")?" },
      "+": { type: "plus", open: "(?:", close: ")+" },
      "*": { type: "star", open: "(?:", close: ")*" },
      "@": { type: "at", open: "(?:", close: ")" }
    };
  },
  /**
   * Create GLOB_CHARS
   */
  globChars(win322) {
    return win322 === true ? WINDOWS_CHARS : POSIX_CHARS;
  }
};
(function(exports) {
  const path2 = require$$0$3;
  const win322 = process.platform === "win32";
  const {
    REGEX_BACKSLASH,
    REGEX_REMOVE_BACKSLASH,
    REGEX_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_GLOBAL
  } = constants$3;
  exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
  exports.hasRegexChars = (str2) => REGEX_SPECIAL_CHARS.test(str2);
  exports.isRegexChar = (str2) => str2.length === 1 && exports.hasRegexChars(str2);
  exports.escapeRegex = (str2) => str2.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
  exports.toPosixSlashes = (str2) => str2.replace(REGEX_BACKSLASH, "/");
  exports.removeBackslashes = (str2) => {
    return str2.replace(REGEX_REMOVE_BACKSLASH, (match) => {
      return match === "\\" ? "" : match;
    });
  };
  exports.supportsLookbehinds = () => {
    const segs = process.version.slice(1).split(".").map(Number);
    if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
      return true;
    }
    return false;
  };
  exports.isWindows = (options) => {
    if (options && typeof options.windows === "boolean") {
      return options.windows;
    }
    return win322 === true || path2.sep === "\\";
  };
  exports.escapeLast = (input, char, lastIdx) => {
    const idx = input.lastIndexOf(char, lastIdx);
    if (idx === -1)
      return input;
    if (input[idx - 1] === "\\")
      return exports.escapeLast(input, char, idx - 1);
    return `${input.slice(0, idx)}\\${input.slice(idx)}`;
  };
  exports.removePrefix = (input, state = {}) => {
    let output2 = input;
    if (output2.startsWith("./")) {
      output2 = output2.slice(2);
      state.prefix = "./";
    }
    return output2;
  };
  exports.wrapOutput = (input, state = {}, options = {}) => {
    const prepend = options.contains ? "" : "^";
    const append2 = options.contains ? "" : "$";
    let output2 = `${prepend}(?:${input})${append2}`;
    if (state.negated === true) {
      output2 = `(?:^(?!${output2}).*$)`;
    }
    return output2;
  };
})(utils$6);
const utils$5 = utils$6;
const {
  CHAR_ASTERISK: CHAR_ASTERISK$1,
  /* * */
  CHAR_AT,
  /* @ */
  CHAR_BACKWARD_SLASH,
  /* \ */
  CHAR_COMMA: CHAR_COMMA$1,
  /* , */
  CHAR_DOT,
  /* . */
  CHAR_EXCLAMATION_MARK,
  /* ! */
  CHAR_FORWARD_SLASH,
  /* / */
  CHAR_LEFT_CURLY_BRACE,
  /* { */
  CHAR_LEFT_PARENTHESES,
  /* ( */
  CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET$1,
  /* [ */
  CHAR_PLUS,
  /* + */
  CHAR_QUESTION_MARK,
  /* ? */
  CHAR_RIGHT_CURLY_BRACE,
  /* } */
  CHAR_RIGHT_PARENTHESES,
  /* ) */
  CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET$1
  /* ] */
} = constants$3;
const isPathSeparator = (code2) => {
  return code2 === CHAR_FORWARD_SLASH || code2 === CHAR_BACKWARD_SLASH;
};
const depth = (token) => {
  if (token.isPrefix !== true) {
    token.depth = token.isGlobstar ? Infinity : 1;
  }
};
const scan$1 = (input, options) => {
  const opts = options || {};
  const length = input.length - 1;
  const scanToEnd = opts.parts === true || opts.scanToEnd === true;
  const slashes = [];
  const tokens = [];
  const parts = [];
  let str2 = input;
  let index2 = -1;
  let start = 0;
  let lastIndex = 0;
  let isBrace = false;
  let isBracket = false;
  let isGlob2 = false;
  let isExtglob2 = false;
  let isGlobstar = false;
  let braceEscaped = false;
  let backslashes = false;
  let negated = false;
  let negatedExtglob = false;
  let finished = false;
  let braces2 = 0;
  let prev;
  let code2;
  let token = { value: "", depth: 0, isGlob: false };
  const eos = () => index2 >= length;
  const peek = () => str2.charCodeAt(index2 + 1);
  const advance = () => {
    prev = code2;
    return str2.charCodeAt(++index2);
  };
  while (index2 < length) {
    code2 = advance();
    let next;
    if (code2 === CHAR_BACKWARD_SLASH) {
      backslashes = token.backslashes = true;
      code2 = advance();
      if (code2 === CHAR_LEFT_CURLY_BRACE) {
        braceEscaped = true;
      }
      continue;
    }
    if (braceEscaped === true || code2 === CHAR_LEFT_CURLY_BRACE) {
      braces2++;
      while (eos() !== true && (code2 = advance())) {
        if (code2 === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }
        if (code2 === CHAR_LEFT_CURLY_BRACE) {
          braces2++;
          continue;
        }
        if (braceEscaped !== true && code2 === CHAR_DOT && (code2 = advance()) === CHAR_DOT) {
          isBrace = token.isBrace = true;
          isGlob2 = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (braceEscaped !== true && code2 === CHAR_COMMA$1) {
          isBrace = token.isBrace = true;
          isGlob2 = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code2 === CHAR_RIGHT_CURLY_BRACE) {
          braces2--;
          if (braces2 === 0) {
            braceEscaped = false;
            isBrace = token.isBrace = true;
            finished = true;
            break;
          }
        }
      }
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (code2 === CHAR_FORWARD_SLASH) {
      slashes.push(index2);
      tokens.push(token);
      token = { value: "", depth: 0, isGlob: false };
      if (finished === true)
        continue;
      if (prev === CHAR_DOT && index2 === start + 1) {
        start += 2;
        continue;
      }
      lastIndex = index2 + 1;
      continue;
    }
    if (opts.noext !== true) {
      const isExtglobChar = code2 === CHAR_PLUS || code2 === CHAR_AT || code2 === CHAR_ASTERISK$1 || code2 === CHAR_QUESTION_MARK || code2 === CHAR_EXCLAMATION_MARK;
      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
        isGlob2 = token.isGlob = true;
        isExtglob2 = token.isExtglob = true;
        finished = true;
        if (code2 === CHAR_EXCLAMATION_MARK && index2 === start) {
          negatedExtglob = true;
        }
        if (scanToEnd === true) {
          while (eos() !== true && (code2 = advance())) {
            if (code2 === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              code2 = advance();
              continue;
            }
            if (code2 === CHAR_RIGHT_PARENTHESES) {
              isGlob2 = token.isGlob = true;
              finished = true;
              break;
            }
          }
          continue;
        }
        break;
      }
    }
    if (code2 === CHAR_ASTERISK$1) {
      if (prev === CHAR_ASTERISK$1)
        isGlobstar = token.isGlobstar = true;
      isGlob2 = token.isGlob = true;
      finished = true;
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (code2 === CHAR_QUESTION_MARK) {
      isGlob2 = token.isGlob = true;
      finished = true;
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (code2 === CHAR_LEFT_SQUARE_BRACKET$1) {
      while (eos() !== true && (next = advance())) {
        if (next === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }
        if (next === CHAR_RIGHT_SQUARE_BRACKET$1) {
          isBracket = token.isBracket = true;
          isGlob2 = token.isGlob = true;
          finished = true;
          break;
        }
      }
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
    if (opts.nonegate !== true && code2 === CHAR_EXCLAMATION_MARK && index2 === start) {
      negated = token.negated = true;
      start++;
      continue;
    }
    if (opts.noparen !== true && code2 === CHAR_LEFT_PARENTHESES) {
      isGlob2 = token.isGlob = true;
      if (scanToEnd === true) {
        while (eos() !== true && (code2 = advance())) {
          if (code2 === CHAR_LEFT_PARENTHESES) {
            backslashes = token.backslashes = true;
            code2 = advance();
            continue;
          }
          if (code2 === CHAR_RIGHT_PARENTHESES) {
            finished = true;
            break;
          }
        }
        continue;
      }
      break;
    }
    if (isGlob2 === true) {
      finished = true;
      if (scanToEnd === true) {
        continue;
      }
      break;
    }
  }
  if (opts.noext === true) {
    isExtglob2 = false;
    isGlob2 = false;
  }
  let base2 = str2;
  let prefix = "";
  let glob = "";
  if (start > 0) {
    prefix = str2.slice(0, start);
    str2 = str2.slice(start);
    lastIndex -= start;
  }
  if (base2 && isGlob2 === true && lastIndex > 0) {
    base2 = str2.slice(0, lastIndex);
    glob = str2.slice(lastIndex);
  } else if (isGlob2 === true) {
    base2 = "";
    glob = str2;
  } else {
    base2 = str2;
  }
  if (base2 && base2 !== "" && base2 !== "/" && base2 !== str2) {
    if (isPathSeparator(base2.charCodeAt(base2.length - 1))) {
      base2 = base2.slice(0, -1);
    }
  }
  if (opts.unescape === true) {
    if (glob)
      glob = utils$5.removeBackslashes(glob);
    if (base2 && backslashes === true) {
      base2 = utils$5.removeBackslashes(base2);
    }
  }
  const state = {
    prefix,
    input,
    start,
    base: base2,
    glob,
    isBrace,
    isBracket,
    isGlob: isGlob2,
    isExtglob: isExtglob2,
    isGlobstar,
    negated,
    negatedExtglob
  };
  if (opts.tokens === true) {
    state.maxDepth = 0;
    if (!isPathSeparator(code2)) {
      tokens.push(token);
    }
    state.tokens = tokens;
  }
  if (opts.parts === true || opts.tokens === true) {
    let prevIndex;
    for (let idx = 0; idx < slashes.length; idx++) {
      const n = prevIndex ? prevIndex + 1 : start;
      const i = slashes[idx];
      const value2 = input.slice(n, i);
      if (opts.tokens) {
        if (idx === 0 && start !== 0) {
          tokens[idx].isPrefix = true;
          tokens[idx].value = prefix;
        } else {
          tokens[idx].value = value2;
        }
        depth(tokens[idx]);
        state.maxDepth += tokens[idx].depth;
      }
      if (idx !== 0 || value2 !== "") {
        parts.push(value2);
      }
      prevIndex = i;
    }
    if (prevIndex && prevIndex + 1 < input.length) {
      const value2 = input.slice(prevIndex + 1);
      parts.push(value2);
      if (opts.tokens) {
        tokens[tokens.length - 1].value = value2;
        depth(tokens[tokens.length - 1]);
        state.maxDepth += tokens[tokens.length - 1].depth;
      }
    }
    state.slashes = slashes;
    state.parts = parts;
  }
  return state;
};
var scan_1 = scan$1;
const constants$2 = constants$3;
const utils$4 = utils$6;
const {
  MAX_LENGTH,
  POSIX_REGEX_SOURCE,
  REGEX_NON_SPECIAL_CHARS,
  REGEX_SPECIAL_CHARS_BACKREF,
  REPLACEMENTS
} = constants$2;
const expandRange = (args, options) => {
  if (typeof options.expandRange === "function") {
    return options.expandRange(...args, options);
  }
  args.sort();
  const value2 = `[${args.join("-")}]`;
  try {
    new RegExp(value2);
  } catch (ex) {
    return args.map((v) => utils$4.escapeRegex(v)).join("..");
  }
  return value2;
};
const syntaxError = (type2, char) => {
  return `Missing ${type2}: "${char}" - use "\\\\${char}" to match literal characters`;
};
const parse$3 = (input, options) => {
  if (typeof input !== "string") {
    throw new TypeError("Expected a string");
  }
  input = REPLACEMENTS[input] || input;
  const opts = { ...options };
  const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  let len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }
  const bos = { type: "bos", value: "", output: opts.prepend || "" };
  const tokens = [bos];
  const capture = opts.capture ? "" : "?:";
  const win322 = utils$4.isWindows(options);
  const PLATFORM_CHARS = constants$2.globChars(win322);
  const EXTGLOB_CHARS = constants$2.extglobChars(PLATFORM_CHARS);
  const {
    DOT_LITERAL: DOT_LITERAL2,
    PLUS_LITERAL: PLUS_LITERAL2,
    SLASH_LITERAL: SLASH_LITERAL2,
    ONE_CHAR: ONE_CHAR2,
    DOTS_SLASH: DOTS_SLASH2,
    NO_DOT: NO_DOT2,
    NO_DOT_SLASH: NO_DOT_SLASH2,
    NO_DOTS_SLASH: NO_DOTS_SLASH2,
    QMARK: QMARK2,
    QMARK_NO_DOT: QMARK_NO_DOT2,
    STAR: STAR2,
    START_ANCHOR: START_ANCHOR2
  } = PLATFORM_CHARS;
  const globstar = (opts2) => {
    return `(${capture}(?:(?!${START_ANCHOR2}${opts2.dot ? DOTS_SLASH2 : DOT_LITERAL2}).)*?)`;
  };
  const nodot = opts.dot ? "" : NO_DOT2;
  const qmarkNoDot = opts.dot ? QMARK2 : QMARK_NO_DOT2;
  let star = opts.bash === true ? globstar(opts) : STAR2;
  if (opts.capture) {
    star = `(${star})`;
  }
  if (typeof opts.noext === "boolean") {
    opts.noextglob = opts.noext;
  }
  const state = {
    input,
    index: -1,
    start: 0,
    dot: opts.dot === true,
    consumed: "",
    output: "",
    prefix: "",
    backtrack: false,
    negated: false,
    brackets: 0,
    braces: 0,
    parens: 0,
    quotes: 0,
    globstar: false,
    tokens
  };
  input = utils$4.removePrefix(input, state);
  len = input.length;
  const extglobs = [];
  const braces2 = [];
  const stack = [];
  let prev = bos;
  let value2;
  const eos = () => state.index === len - 1;
  const peek = state.peek = (n = 1) => input[state.index + n];
  const advance = state.advance = () => input[++state.index] || "";
  const remaining = () => input.slice(state.index + 1);
  const consume = (value3 = "", num = 0) => {
    state.consumed += value3;
    state.index += num;
  };
  const append2 = (token) => {
    state.output += token.output != null ? token.output : token.value;
    consume(token.value);
  };
  const negate = () => {
    let count = 1;
    while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
      advance();
      state.start++;
      count++;
    }
    if (count % 2 === 0) {
      return false;
    }
    state.negated = true;
    state.start++;
    return true;
  };
  const increment = (type2) => {
    state[type2]++;
    stack.push(type2);
  };
  const decrement = (type2) => {
    state[type2]--;
    stack.pop();
  };
  const push2 = (tok) => {
    if (prev.type === "globstar") {
      const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
      const isExtglob2 = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
      if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob2) {
        state.output = state.output.slice(0, -prev.output.length);
        prev.type = "star";
        prev.value = "*";
        prev.output = star;
        state.output += prev.output;
      }
    }
    if (extglobs.length && tok.type !== "paren") {
      extglobs[extglobs.length - 1].inner += tok.value;
    }
    if (tok.value || tok.output)
      append2(tok);
    if (prev && prev.type === "text" && tok.type === "text") {
      prev.value += tok.value;
      prev.output = (prev.output || "") + tok.value;
      return;
    }
    tok.prev = prev;
    tokens.push(tok);
    prev = tok;
  };
  const extglobOpen = (type2, value3) => {
    const token = { ...EXTGLOB_CHARS[value3], conditions: 1, inner: "" };
    token.prev = prev;
    token.parens = state.parens;
    token.output = state.output;
    const output2 = (opts.capture ? "(" : "") + token.open;
    increment("parens");
    push2({ type: type2, value: value3, output: state.output ? "" : ONE_CHAR2 });
    push2({ type: "paren", extglob: true, value: advance(), output: output2 });
    extglobs.push(token);
  };
  const extglobClose = (token) => {
    let output2 = token.close + (opts.capture ? ")" : "");
    let rest;
    if (token.type === "negate") {
      let extglobStar = star;
      if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
        extglobStar = globstar(opts);
      }
      if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
        output2 = token.close = `)$))${extglobStar}`;
      }
      if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
        const expression = parse$3(rest, { ...options, fastpaths: false }).output;
        output2 = token.close = `)${expression})${extglobStar})`;
      }
      if (token.prev.type === "bos") {
        state.negatedExtglob = true;
      }
    }
    push2({ type: "paren", extglob: true, value: value2, output: output2 });
    decrement("parens");
  };
  if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
    let backslashes = false;
    let output2 = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index2) => {
      if (first === "\\") {
        backslashes = true;
        return m;
      }
      if (first === "?") {
        if (esc) {
          return esc + first + (rest ? QMARK2.repeat(rest.length) : "");
        }
        if (index2 === 0) {
          return qmarkNoDot + (rest ? QMARK2.repeat(rest.length) : "");
        }
        return QMARK2.repeat(chars.length);
      }
      if (first === ".") {
        return DOT_LITERAL2.repeat(chars.length);
      }
      if (first === "*") {
        if (esc) {
          return esc + first + (rest ? star : "");
        }
        return star;
      }
      return esc ? m : `\\${m}`;
    });
    if (backslashes === true) {
      if (opts.unescape === true) {
        output2 = output2.replace(/\\/g, "");
      } else {
        output2 = output2.replace(/\\+/g, (m) => {
          return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
        });
      }
    }
    if (output2 === input && opts.contains === true) {
      state.output = input;
      return state;
    }
    state.output = utils$4.wrapOutput(output2, state, options);
    return state;
  }
  while (!eos()) {
    value2 = advance();
    if (value2 === "\0") {
      continue;
    }
    if (value2 === "\\") {
      const next = peek();
      if (next === "/" && opts.bash !== true) {
        continue;
      }
      if (next === "." || next === ";") {
        continue;
      }
      if (!next) {
        value2 += "\\";
        push2({ type: "text", value: value2 });
        continue;
      }
      const match = /^\\+/.exec(remaining());
      let slashes = 0;
      if (match && match[0].length > 2) {
        slashes = match[0].length;
        state.index += slashes;
        if (slashes % 2 !== 0) {
          value2 += "\\";
        }
      }
      if (opts.unescape === true) {
        value2 = advance();
      } else {
        value2 += advance();
      }
      if (state.brackets === 0) {
        push2({ type: "text", value: value2 });
        continue;
      }
    }
    if (state.brackets > 0 && (value2 !== "]" || prev.value === "[" || prev.value === "[^")) {
      if (opts.posix !== false && value2 === ":") {
        const inner = prev.value.slice(1);
        if (inner.includes("[")) {
          prev.posix = true;
          if (inner.includes(":")) {
            const idx = prev.value.lastIndexOf("[");
            const pre = prev.value.slice(0, idx);
            const rest2 = prev.value.slice(idx + 2);
            const posix = POSIX_REGEX_SOURCE[rest2];
            if (posix) {
              prev.value = pre + posix;
              state.backtrack = true;
              advance();
              if (!bos.output && tokens.indexOf(prev) === 1) {
                bos.output = ONE_CHAR2;
              }
              continue;
            }
          }
        }
      }
      if (value2 === "[" && peek() !== ":" || value2 === "-" && peek() === "]") {
        value2 = `\\${value2}`;
      }
      if (value2 === "]" && (prev.value === "[" || prev.value === "[^")) {
        value2 = `\\${value2}`;
      }
      if (opts.posix === true && value2 === "!" && prev.value === "[") {
        value2 = "^";
      }
      prev.value += value2;
      append2({ value: value2 });
      continue;
    }
    if (state.quotes === 1 && value2 !== '"') {
      value2 = utils$4.escapeRegex(value2);
      prev.value += value2;
      append2({ value: value2 });
      continue;
    }
    if (value2 === '"') {
      state.quotes = state.quotes === 1 ? 0 : 1;
      if (opts.keepQuotes === true) {
        push2({ type: "text", value: value2 });
      }
      continue;
    }
    if (value2 === "(") {
      increment("parens");
      push2({ type: "paren", value: value2 });
      continue;
    }
    if (value2 === ")") {
      if (state.parens === 0 && opts.strictBrackets === true) {
        throw new SyntaxError(syntaxError("opening", "("));
      }
      const extglob = extglobs[extglobs.length - 1];
      if (extglob && state.parens === extglob.parens + 1) {
        extglobClose(extglobs.pop());
        continue;
      }
      push2({ type: "paren", value: value2, output: state.parens ? ")" : "\\)" });
      decrement("parens");
      continue;
    }
    if (value2 === "[") {
      if (opts.nobracket === true || !remaining().includes("]")) {
        if (opts.nobracket !== true && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError("closing", "]"));
        }
        value2 = `\\${value2}`;
      } else {
        increment("brackets");
      }
      push2({ type: "bracket", value: value2 });
      continue;
    }
    if (value2 === "]") {
      if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
        push2({ type: "text", value: value2, output: `\\${value2}` });
        continue;
      }
      if (state.brackets === 0) {
        if (opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError("opening", "["));
        }
        push2({ type: "text", value: value2, output: `\\${value2}` });
        continue;
      }
      decrement("brackets");
      const prevValue = prev.value.slice(1);
      if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
        value2 = `/${value2}`;
      }
      prev.value += value2;
      append2({ value: value2 });
      if (opts.literalBrackets === false || utils$4.hasRegexChars(prevValue)) {
        continue;
      }
      const escaped = utils$4.escapeRegex(prev.value);
      state.output = state.output.slice(0, -prev.value.length);
      if (opts.literalBrackets === true) {
        state.output += escaped;
        prev.value = escaped;
        continue;
      }
      prev.value = `(${capture}${escaped}|${prev.value})`;
      state.output += prev.value;
      continue;
    }
    if (value2 === "{" && opts.nobrace !== true) {
      increment("braces");
      const open = {
        type: "brace",
        value: value2,
        output: "(",
        outputIndex: state.output.length,
        tokensIndex: state.tokens.length
      };
      braces2.push(open);
      push2(open);
      continue;
    }
    if (value2 === "}") {
      const brace = braces2[braces2.length - 1];
      if (opts.nobrace === true || !brace) {
        push2({ type: "text", value: value2, output: value2 });
        continue;
      }
      let output2 = ")";
      if (brace.dots === true) {
        const arr = tokens.slice();
        const range = [];
        for (let i = arr.length - 1; i >= 0; i--) {
          tokens.pop();
          if (arr[i].type === "brace") {
            break;
          }
          if (arr[i].type !== "dots") {
            range.unshift(arr[i].value);
          }
        }
        output2 = expandRange(range, opts);
        state.backtrack = true;
      }
      if (brace.comma !== true && brace.dots !== true) {
        const out2 = state.output.slice(0, brace.outputIndex);
        const toks = state.tokens.slice(brace.tokensIndex);
        brace.value = brace.output = "\\{";
        value2 = output2 = "\\}";
        state.output = out2;
        for (const t of toks) {
          state.output += t.output || t.value;
        }
      }
      push2({ type: "brace", value: value2, output: output2 });
      decrement("braces");
      braces2.pop();
      continue;
    }
    if (value2 === "|") {
      if (extglobs.length > 0) {
        extglobs[extglobs.length - 1].conditions++;
      }
      push2({ type: "text", value: value2 });
      continue;
    }
    if (value2 === ",") {
      let output2 = value2;
      const brace = braces2[braces2.length - 1];
      if (brace && stack[stack.length - 1] === "braces") {
        brace.comma = true;
        output2 = "|";
      }
      push2({ type: "comma", value: value2, output: output2 });
      continue;
    }
    if (value2 === "/") {
      if (prev.type === "dot" && state.index === state.start + 1) {
        state.start = state.index + 1;
        state.consumed = "";
        state.output = "";
        tokens.pop();
        prev = bos;
        continue;
      }
      push2({ type: "slash", value: value2, output: SLASH_LITERAL2 });
      continue;
    }
    if (value2 === ".") {
      if (state.braces > 0 && prev.type === "dot") {
        if (prev.value === ".")
          prev.output = DOT_LITERAL2;
        const brace = braces2[braces2.length - 1];
        prev.type = "dots";
        prev.output += value2;
        prev.value += value2;
        brace.dots = true;
        continue;
      }
      if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
        push2({ type: "text", value: value2, output: DOT_LITERAL2 });
        continue;
      }
      push2({ type: "dot", value: value2, output: DOT_LITERAL2 });
      continue;
    }
    if (value2 === "?") {
      const isGroup = prev && prev.value === "(";
      if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
        extglobOpen("qmark", value2);
        continue;
      }
      if (prev && prev.type === "paren") {
        const next = peek();
        let output2 = value2;
        if (next === "<" && !utils$4.supportsLookbehinds()) {
          throw new Error("Node.js v10 or higher is required for regex lookbehinds");
        }
        if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
          output2 = `\\${value2}`;
        }
        push2({ type: "text", value: value2, output: output2 });
        continue;
      }
      if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
        push2({ type: "qmark", value: value2, output: QMARK_NO_DOT2 });
        continue;
      }
      push2({ type: "qmark", value: value2, output: QMARK2 });
      continue;
    }
    if (value2 === "!") {
      if (opts.noextglob !== true && peek() === "(") {
        if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
          extglobOpen("negate", value2);
          continue;
        }
      }
      if (opts.nonegate !== true && state.index === 0) {
        negate();
        continue;
      }
    }
    if (value2 === "+") {
      if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
        extglobOpen("plus", value2);
        continue;
      }
      if (prev && prev.value === "(" || opts.regex === false) {
        push2({ type: "plus", value: value2, output: PLUS_LITERAL2 });
        continue;
      }
      if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
        push2({ type: "plus", value: value2 });
        continue;
      }
      push2({ type: "plus", value: PLUS_LITERAL2 });
      continue;
    }
    if (value2 === "@") {
      if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
        push2({ type: "at", extglob: true, value: value2, output: "" });
        continue;
      }
      push2({ type: "text", value: value2 });
      continue;
    }
    if (value2 !== "*") {
      if (value2 === "$" || value2 === "^") {
        value2 = `\\${value2}`;
      }
      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
      if (match) {
        value2 += match[0];
        state.index += match[0].length;
      }
      push2({ type: "text", value: value2 });
      continue;
    }
    if (prev && (prev.type === "globstar" || prev.star === true)) {
      prev.type = "star";
      prev.star = true;
      prev.value += value2;
      prev.output = star;
      state.backtrack = true;
      state.globstar = true;
      consume(value2);
      continue;
    }
    let rest = remaining();
    if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
      extglobOpen("star", value2);
      continue;
    }
    if (prev.type === "star") {
      if (opts.noglobstar === true) {
        consume(value2);
        continue;
      }
      const prior = prev.prev;
      const before = prior.prev;
      const isStart = prior.type === "slash" || prior.type === "bos";
      const afterStar = before && (before.type === "star" || before.type === "globstar");
      if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
        push2({ type: "star", value: value2, output: "" });
        continue;
      }
      const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
      const isExtglob2 = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
      if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob2) {
        push2({ type: "star", value: value2, output: "" });
        continue;
      }
      while (rest.slice(0, 3) === "/**") {
        const after = input[state.index + 4];
        if (after && after !== "/") {
          break;
        }
        rest = rest.slice(3);
        consume("/**", 3);
      }
      if (prior.type === "bos" && eos()) {
        prev.type = "globstar";
        prev.value += value2;
        prev.output = globstar(opts);
        state.output = prev.output;
        state.globstar = true;
        consume(value2);
        continue;
      }
      if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;
        prev.type = "globstar";
        prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
        prev.value += value2;
        state.globstar = true;
        state.output += prior.output + prev.output;
        consume(value2);
        continue;
      }
      if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
        const end = rest[1] !== void 0 ? "|$" : "";
        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;
        prev.type = "globstar";
        prev.output = `${globstar(opts)}${SLASH_LITERAL2}|${SLASH_LITERAL2}${end})`;
        prev.value += value2;
        state.output += prior.output + prev.output;
        state.globstar = true;
        consume(value2 + advance());
        push2({ type: "slash", value: "/", output: "" });
        continue;
      }
      if (prior.type === "bos" && rest[0] === "/") {
        prev.type = "globstar";
        prev.value += value2;
        prev.output = `(?:^|${SLASH_LITERAL2}|${globstar(opts)}${SLASH_LITERAL2})`;
        state.output = prev.output;
        state.globstar = true;
        consume(value2 + advance());
        push2({ type: "slash", value: "/", output: "" });
        continue;
      }
      state.output = state.output.slice(0, -prev.output.length);
      prev.type = "globstar";
      prev.output = globstar(opts);
      prev.value += value2;
      state.output += prev.output;
      state.globstar = true;
      consume(value2);
      continue;
    }
    const token = { type: "star", value: value2, output: star };
    if (opts.bash === true) {
      token.output = ".*?";
      if (prev.type === "bos" || prev.type === "slash") {
        token.output = nodot + token.output;
      }
      push2(token);
      continue;
    }
    if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
      token.output = value2;
      push2(token);
      continue;
    }
    if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
      if (prev.type === "dot") {
        state.output += NO_DOT_SLASH2;
        prev.output += NO_DOT_SLASH2;
      } else if (opts.dot === true) {
        state.output += NO_DOTS_SLASH2;
        prev.output += NO_DOTS_SLASH2;
      } else {
        state.output += nodot;
        prev.output += nodot;
      }
      if (peek() !== "*") {
        state.output += ONE_CHAR2;
        prev.output += ONE_CHAR2;
      }
    }
    push2(token);
  }
  while (state.brackets > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError("closing", "]"));
    state.output = utils$4.escapeLast(state.output, "[");
    decrement("brackets");
  }
  while (state.parens > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError("closing", ")"));
    state.output = utils$4.escapeLast(state.output, "(");
    decrement("parens");
  }
  while (state.braces > 0) {
    if (opts.strictBrackets === true)
      throw new SyntaxError(syntaxError("closing", "}"));
    state.output = utils$4.escapeLast(state.output, "{");
    decrement("braces");
  }
  if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
    push2({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL2}?` });
  }
  if (state.backtrack === true) {
    state.output = "";
    for (const token of state.tokens) {
      state.output += token.output != null ? token.output : token.value;
      if (token.suffix) {
        state.output += token.suffix;
      }
    }
  }
  return state;
};
parse$3.fastpaths = (input, options) => {
  const opts = { ...options };
  const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  const len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }
  input = REPLACEMENTS[input] || input;
  const win322 = utils$4.isWindows(options);
  const {
    DOT_LITERAL: DOT_LITERAL2,
    SLASH_LITERAL: SLASH_LITERAL2,
    ONE_CHAR: ONE_CHAR2,
    DOTS_SLASH: DOTS_SLASH2,
    NO_DOT: NO_DOT2,
    NO_DOTS: NO_DOTS2,
    NO_DOTS_SLASH: NO_DOTS_SLASH2,
    STAR: STAR2,
    START_ANCHOR: START_ANCHOR2
  } = constants$2.globChars(win322);
  const nodot = opts.dot ? NO_DOTS2 : NO_DOT2;
  const slashDot = opts.dot ? NO_DOTS_SLASH2 : NO_DOT2;
  const capture = opts.capture ? "" : "?:";
  const state = { negated: false, prefix: "" };
  let star = opts.bash === true ? ".*?" : STAR2;
  if (opts.capture) {
    star = `(${star})`;
  }
  const globstar = (opts2) => {
    if (opts2.noglobstar === true)
      return star;
    return `(${capture}(?:(?!${START_ANCHOR2}${opts2.dot ? DOTS_SLASH2 : DOT_LITERAL2}).)*?)`;
  };
  const create2 = (str2) => {
    switch (str2) {
      case "*":
        return `${nodot}${ONE_CHAR2}${star}`;
      case ".*":
        return `${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      case "*.*":
        return `${nodot}${star}${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      case "*/*":
        return `${nodot}${star}${SLASH_LITERAL2}${ONE_CHAR2}${slashDot}${star}`;
      case "**":
        return nodot + globstar(opts);
      case "**/*":
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL2})?${slashDot}${ONE_CHAR2}${star}`;
      case "**/*.*":
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL2})?${slashDot}${star}${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      case "**/.*":
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL2})?${DOT_LITERAL2}${ONE_CHAR2}${star}`;
      default: {
        const match = /^(.*?)\.(\w+)$/.exec(str2);
        if (!match)
          return;
        const source2 = create2(match[1]);
        if (!source2)
          return;
        return source2 + DOT_LITERAL2 + match[2];
      }
    }
  };
  const output2 = utils$4.removePrefix(input, state);
  let source = create2(output2);
  if (source && opts.strictSlashes !== true) {
    source += `${SLASH_LITERAL2}?`;
  }
  return source;
};
var parse_1 = parse$3;
const path$4 = require$$0$3;
const scan = scan_1;
const parse$2 = parse_1;
const utils$3 = utils$6;
const constants$1 = constants$3;
const isObject$1 = (val) => val && typeof val === "object" && !Array.isArray(val);
const picomatch$2 = (glob, options, returnState = false) => {
  if (Array.isArray(glob)) {
    const fns = glob.map((input) => picomatch$2(input, options, returnState));
    const arrayMatcher = (str2) => {
      for (const isMatch of fns) {
        const state2 = isMatch(str2);
        if (state2)
          return state2;
      }
      return false;
    };
    return arrayMatcher;
  }
  const isState = isObject$1(glob) && glob.tokens && glob.input;
  if (glob === "" || typeof glob !== "string" && !isState) {
    throw new TypeError("Expected pattern to be a non-empty string");
  }
  const opts = options || {};
  const posix = utils$3.isWindows(options);
  const regex = isState ? picomatch$2.compileRe(glob, options) : picomatch$2.makeRe(glob, options, false, true);
  const state = regex.state;
  delete regex.state;
  let isIgnored = () => false;
  if (opts.ignore) {
    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
    isIgnored = picomatch$2(opts.ignore, ignoreOpts, returnState);
  }
  const matcher2 = (input, returnObject = false) => {
    const { isMatch, match, output: output2 } = picomatch$2.test(input, regex, options, { glob, posix });
    const result = { glob, state, regex, posix, input, output: output2, match, isMatch };
    if (typeof opts.onResult === "function") {
      opts.onResult(result);
    }
    if (isMatch === false) {
      result.isMatch = false;
      return returnObject ? result : false;
    }
    if (isIgnored(input)) {
      if (typeof opts.onIgnore === "function") {
        opts.onIgnore(result);
      }
      result.isMatch = false;
      return returnObject ? result : false;
    }
    if (typeof opts.onMatch === "function") {
      opts.onMatch(result);
    }
    return returnObject ? result : true;
  };
  if (returnState) {
    matcher2.state = state;
  }
  return matcher2;
};
picomatch$2.test = (input, regex, options, { glob, posix } = {}) => {
  if (typeof input !== "string") {
    throw new TypeError("Expected input to be a string");
  }
  if (input === "") {
    return { isMatch: false, output: "" };
  }
  const opts = options || {};
  const format2 = opts.format || (posix ? utils$3.toPosixSlashes : null);
  let match = input === glob;
  let output2 = match && format2 ? format2(input) : input;
  if (match === false) {
    output2 = format2 ? format2(input) : input;
    match = output2 === glob;
  }
  if (match === false || opts.capture === true) {
    if (opts.matchBase === true || opts.basename === true) {
      match = picomatch$2.matchBase(input, regex, options, posix);
    } else {
      match = regex.exec(output2);
    }
  }
  return { isMatch: Boolean(match), match, output: output2 };
};
picomatch$2.matchBase = (input, glob, options, posix = utils$3.isWindows(options)) => {
  const regex = glob instanceof RegExp ? glob : picomatch$2.makeRe(glob, options);
  return regex.test(path$4.basename(input));
};
picomatch$2.isMatch = (str2, patterns, options) => picomatch$2(patterns, options)(str2);
picomatch$2.parse = (pattern2, options) => {
  if (Array.isArray(pattern2))
    return pattern2.map((p) => picomatch$2.parse(p, options));
  return parse$2(pattern2, { ...options, fastpaths: false });
};
picomatch$2.scan = (input, options) => scan(input, options);
picomatch$2.compileRe = (state, options, returnOutput = false, returnState = false) => {
  if (returnOutput === true) {
    return state.output;
  }
  const opts = options || {};
  const prepend = opts.contains ? "" : "^";
  const append2 = opts.contains ? "" : "$";
  let source = `${prepend}(?:${state.output})${append2}`;
  if (state && state.negated === true) {
    source = `^(?!${source}).*$`;
  }
  const regex = picomatch$2.toRegex(source, options);
  if (returnState === true) {
    regex.state = state;
  }
  return regex;
};
picomatch$2.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
  if (!input || typeof input !== "string") {
    throw new TypeError("Expected a non-empty string");
  }
  let parsed = { negated: false, fastpaths: true };
  if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
    parsed.output = parse$2.fastpaths(input, options);
  }
  if (!parsed.output) {
    parsed = parse$2(input, options);
  }
  return picomatch$2.compileRe(parsed, options, returnOutput, returnState);
};
picomatch$2.toRegex = (source, options) => {
  try {
    const opts = options || {};
    return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
  } catch (err) {
    if (options && options.debug === true)
      throw err;
    return /$^/;
  }
};
picomatch$2.constants = constants$1;
var picomatch_1 = picomatch$2;
var picomatch$1 = picomatch_1;
const util = require$$0$2;
const braces = braces_1;
const picomatch = picomatch$1;
const utils$2 = utils$6;
const isEmptyString = (val) => val === "" || val === "./";
const micromatch = (list2, patterns, options) => {
  patterns = [].concat(patterns);
  list2 = [].concat(list2);
  let omit2 = /* @__PURE__ */ new Set();
  let keep = /* @__PURE__ */ new Set();
  let items = /* @__PURE__ */ new Set();
  let negatives = 0;
  let onResult = (state) => {
    items.add(state.output);
    if (options && options.onResult) {
      options.onResult(state);
    }
  };
  for (let i = 0; i < patterns.length; i++) {
    let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
    if (negated)
      negatives++;
    for (let item of list2) {
      let matched = isMatch(item, true);
      let match = negated ? !matched.isMatch : matched.isMatch;
      if (!match)
        continue;
      if (negated) {
        omit2.add(matched.output);
      } else {
        omit2.delete(matched.output);
        keep.add(matched.output);
      }
    }
  }
  let result = negatives === patterns.length ? [...items] : [...keep];
  let matches = result.filter((item) => !omit2.has(item));
  if (options && matches.length === 0) {
    if (options.failglob === true) {
      throw new Error(`No matches found for "${patterns.join(", ")}"`);
    }
    if (options.nonull === true || options.nullglob === true) {
      return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
    }
  }
  return matches;
};
micromatch.match = micromatch;
micromatch.matcher = (pattern2, options) => picomatch(pattern2, options);
micromatch.isMatch = (str2, patterns, options) => picomatch(patterns, options)(str2);
micromatch.any = micromatch.isMatch;
micromatch.not = (list2, patterns, options = {}) => {
  patterns = [].concat(patterns).map(String);
  let result = /* @__PURE__ */ new Set();
  let items = [];
  let onResult = (state) => {
    if (options.onResult)
      options.onResult(state);
    items.push(state.output);
  };
  let matches = new Set(micromatch(list2, patterns, { ...options, onResult }));
  for (let item of items) {
    if (!matches.has(item)) {
      result.add(item);
    }
  }
  return [...result];
};
micromatch.contains = (str2, pattern2, options) => {
  if (typeof str2 !== "string") {
    throw new TypeError(`Expected a string: "${util.inspect(str2)}"`);
  }
  if (Array.isArray(pattern2)) {
    return pattern2.some((p) => micromatch.contains(str2, p, options));
  }
  if (typeof pattern2 === "string") {
    if (isEmptyString(str2) || isEmptyString(pattern2)) {
      return false;
    }
    if (str2.includes(pattern2) || str2.startsWith("./") && str2.slice(2).includes(pattern2)) {
      return true;
    }
  }
  return micromatch.isMatch(str2, pattern2, { ...options, contains: true });
};
micromatch.matchKeys = (obj, patterns, options) => {
  if (!utils$2.isObject(obj)) {
    throw new TypeError("Expected the first argument to be an object");
  }
  let keys2 = micromatch(Object.keys(obj), patterns, options);
  let res = {};
  for (let key of keys2)
    res[key] = obj[key];
  return res;
};
micromatch.some = (list2, patterns, options) => {
  let items = [].concat(list2);
  for (let pattern2 of [].concat(patterns)) {
    let isMatch = picomatch(String(pattern2), options);
    if (items.some((item) => isMatch(item))) {
      return true;
    }
  }
  return false;
};
micromatch.every = (list2, patterns, options) => {
  let items = [].concat(list2);
  for (let pattern2 of [].concat(patterns)) {
    let isMatch = picomatch(String(pattern2), options);
    if (!items.every((item) => isMatch(item))) {
      return false;
    }
  }
  return true;
};
micromatch.all = (str2, patterns, options) => {
  if (typeof str2 !== "string") {
    throw new TypeError(`Expected a string: "${util.inspect(str2)}"`);
  }
  return [].concat(patterns).every((p) => picomatch(p, options)(str2));
};
micromatch.capture = (glob, input, options) => {
  let posix = utils$2.isWindows(options);
  let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
  let match = regex.exec(posix ? utils$2.toPosixSlashes(input) : input);
  if (match) {
    return match.slice(1).map((v) => v === void 0 ? "" : v);
  }
};
micromatch.makeRe = (...args) => picomatch.makeRe(...args);
micromatch.scan = (...args) => picomatch.scan(...args);
micromatch.parse = (patterns, options) => {
  let res = [];
  for (let pattern2 of [].concat(patterns || [])) {
    for (let str2 of braces(String(pattern2), options)) {
      res.push(picomatch.parse(str2, options));
    }
  }
  return res;
};
micromatch.braces = (pattern2, options) => {
  if (typeof pattern2 !== "string")
    throw new TypeError("Expected a string");
  if (options && options.nobrace === true || !/\{.*\}/.test(pattern2)) {
    return [pattern2];
  }
  return braces(pattern2, options);
};
micromatch.braceExpand = (pattern2, options) => {
  if (typeof pattern2 !== "string")
    throw new TypeError("Expected a string");
  return micromatch.braces(pattern2, { ...options, expand: true });
};
var micromatch_1 = micromatch;
const micromatch$1 = /* @__PURE__ */ getDefaultExportFromCjs(micromatch_1);
var hasRequiredPattern;
function requirePattern() {
  if (hasRequiredPattern)
    return pattern;
  hasRequiredPattern = 1;
  Object.defineProperty(pattern, "__esModule", { value: true });
  pattern.removeDuplicateSlashes = pattern.matchAny = pattern.convertPatternsToRe = pattern.makeRe = pattern.getPatternParts = pattern.expandBraceExpansion = pattern.expandPatternsWithBraceExpansion = pattern.isAffectDepthOfReadingPattern = pattern.endsWithSlashGlobStar = pattern.hasGlobStar = pattern.getBaseDirectory = pattern.isPatternRelatedToParentDirectory = pattern.getPatternsOutsideCurrentDirectory = pattern.getPatternsInsideCurrentDirectory = pattern.getPositivePatterns = pattern.getNegativePatterns = pattern.isPositivePattern = pattern.isNegativePattern = pattern.convertToNegativePattern = pattern.convertToPositivePattern = pattern.isDynamicPattern = pattern.isStaticPattern = void 0;
  const path2 = require$$0$3;
  const globParent2 = requireGlobParent();
  const micromatch2 = micromatch_1;
  const GLOBSTAR = "**";
  const ESCAPE_SYMBOL = "\\";
  const COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
  const REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
  const REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
  const GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
  const BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
  const DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
  function isStaticPattern(pattern2, options = {}) {
    return !isDynamicPattern(pattern2, options);
  }
  pattern.isStaticPattern = isStaticPattern;
  function isDynamicPattern(pattern2, options = {}) {
    if (pattern2 === "") {
      return false;
    }
    if (options.caseSensitiveMatch === false || pattern2.includes(ESCAPE_SYMBOL)) {
      return true;
    }
    if (COMMON_GLOB_SYMBOLS_RE.test(pattern2) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern2) || REGEX_GROUP_SYMBOLS_RE.test(pattern2)) {
      return true;
    }
    if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern2)) {
      return true;
    }
    if (options.braceExpansion !== false && hasBraceExpansion(pattern2)) {
      return true;
    }
    return false;
  }
  pattern.isDynamicPattern = isDynamicPattern;
  function hasBraceExpansion(pattern2) {
    const openingBraceIndex = pattern2.indexOf("{");
    if (openingBraceIndex === -1) {
      return false;
    }
    const closingBraceIndex = pattern2.indexOf("}", openingBraceIndex + 1);
    if (closingBraceIndex === -1) {
      return false;
    }
    const braceContent = pattern2.slice(openingBraceIndex, closingBraceIndex);
    return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
  }
  function convertToPositivePattern(pattern2) {
    return isNegativePattern(pattern2) ? pattern2.slice(1) : pattern2;
  }
  pattern.convertToPositivePattern = convertToPositivePattern;
  function convertToNegativePattern(pattern2) {
    return "!" + pattern2;
  }
  pattern.convertToNegativePattern = convertToNegativePattern;
  function isNegativePattern(pattern2) {
    return pattern2.startsWith("!") && pattern2[1] !== "(";
  }
  pattern.isNegativePattern = isNegativePattern;
  function isPositivePattern(pattern2) {
    return !isNegativePattern(pattern2);
  }
  pattern.isPositivePattern = isPositivePattern;
  function getNegativePatterns(patterns) {
    return patterns.filter(isNegativePattern);
  }
  pattern.getNegativePatterns = getNegativePatterns;
  function getPositivePatterns(patterns) {
    return patterns.filter(isPositivePattern);
  }
  pattern.getPositivePatterns = getPositivePatterns;
  function getPatternsInsideCurrentDirectory(patterns) {
    return patterns.filter((pattern2) => !isPatternRelatedToParentDirectory(pattern2));
  }
  pattern.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
  function getPatternsOutsideCurrentDirectory(patterns) {
    return patterns.filter(isPatternRelatedToParentDirectory);
  }
  pattern.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
  function isPatternRelatedToParentDirectory(pattern2) {
    return pattern2.startsWith("..") || pattern2.startsWith("./..");
  }
  pattern.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
  function getBaseDirectory(pattern2) {
    return globParent2(pattern2, { flipBackslashes: false });
  }
  pattern.getBaseDirectory = getBaseDirectory;
  function hasGlobStar(pattern2) {
    return pattern2.includes(GLOBSTAR);
  }
  pattern.hasGlobStar = hasGlobStar;
  function endsWithSlashGlobStar(pattern2) {
    return pattern2.endsWith("/" + GLOBSTAR);
  }
  pattern.endsWithSlashGlobStar = endsWithSlashGlobStar;
  function isAffectDepthOfReadingPattern(pattern2) {
    const basename = path2.basename(pattern2);
    return endsWithSlashGlobStar(pattern2) || isStaticPattern(basename);
  }
  pattern.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
  function expandPatternsWithBraceExpansion(patterns) {
    return patterns.reduce((collection, pattern2) => {
      return collection.concat(expandBraceExpansion(pattern2));
    }, []);
  }
  pattern.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
  function expandBraceExpansion(pattern2) {
    const patterns = micromatch2.braces(pattern2, { expand: true, nodupes: true });
    patterns.sort((a, b) => a.length - b.length);
    return patterns.filter((pattern3) => pattern3 !== "");
  }
  pattern.expandBraceExpansion = expandBraceExpansion;
  function getPatternParts(pattern2, options) {
    let { parts } = micromatch2.scan(pattern2, Object.assign(Object.assign({}, options), { parts: true }));
    if (parts.length === 0) {
      parts = [pattern2];
    }
    if (parts[0].startsWith("/")) {
      parts[0] = parts[0].slice(1);
      parts.unshift("");
    }
    return parts;
  }
  pattern.getPatternParts = getPatternParts;
  function makeRe(pattern2, options) {
    return micromatch2.makeRe(pattern2, options);
  }
  pattern.makeRe = makeRe;
  function convertPatternsToRe(patterns, options) {
    return patterns.map((pattern2) => makeRe(pattern2, options));
  }
  pattern.convertPatternsToRe = convertPatternsToRe;
  function matchAny(entry2, patternsRe) {
    return patternsRe.some((patternRe) => patternRe.test(entry2));
  }
  pattern.matchAny = matchAny;
  function removeDuplicateSlashes(pattern2) {
    return pattern2.replace(DOUBLE_SLASH_RE, "/");
  }
  pattern.removeDuplicateSlashes = removeDuplicateSlashes;
  return pattern;
}
var stream$3 = {};
var hasRequiredStream$3;
function requireStream$3() {
  if (hasRequiredStream$3)
    return stream$3;
  hasRequiredStream$3 = 1;
  Object.defineProperty(stream$3, "__esModule", { value: true });
  stream$3.merge = void 0;
  const merge2 = requireMerge2();
  function merge3(streams) {
    const mergedStream = merge2(streams);
    streams.forEach((stream2) => {
      stream2.once("error", (error2) => mergedStream.emit("error", error2));
    });
    mergedStream.once("close", () => propagateCloseEventToSources(streams));
    mergedStream.once("end", () => propagateCloseEventToSources(streams));
    return mergedStream;
  }
  stream$3.merge = merge3;
  function propagateCloseEventToSources(streams) {
    streams.forEach((stream2) => stream2.emit("close"));
  }
  return stream$3;
}
var string$2 = {};
var hasRequiredString;
function requireString() {
  if (hasRequiredString)
    return string$2;
  hasRequiredString = 1;
  Object.defineProperty(string$2, "__esModule", { value: true });
  string$2.isEmpty = string$2.isString = void 0;
  function isString(input) {
    return typeof input === "string";
  }
  string$2.isString = isString;
  function isEmpty(input) {
    return input === "";
  }
  string$2.isEmpty = isEmpty;
  return string$2;
}
var hasRequiredUtils$2;
function requireUtils$2() {
  if (hasRequiredUtils$2)
    return utils$b;
  hasRequiredUtils$2 = 1;
  Object.defineProperty(utils$b, "__esModule", { value: true });
  utils$b.string = utils$b.stream = utils$b.pattern = utils$b.path = utils$b.fs = utils$b.errno = utils$b.array = void 0;
  const array2 = requireArray();
  utils$b.array = array2;
  const errno2 = requireErrno();
  utils$b.errno = errno2;
  const fs2 = requireFs$3();
  utils$b.fs = fs2;
  const path2 = requirePath();
  utils$b.path = path2;
  const pattern2 = requirePattern();
  utils$b.pattern = pattern2;
  const stream2 = requireStream$3();
  utils$b.stream = stream2;
  const string2 = requireString();
  utils$b.string = string2;
  return utils$b;
}
var hasRequiredTasks;
function requireTasks() {
  if (hasRequiredTasks)
    return tasks;
  hasRequiredTasks = 1;
  Object.defineProperty(tasks, "__esModule", { value: true });
  tasks.convertPatternGroupToTask = tasks.convertPatternGroupsToTasks = tasks.groupPatternsByBaseDirectory = tasks.getNegativePatternsAsPositive = tasks.getPositivePatterns = tasks.convertPatternsToTasks = tasks.generate = void 0;
  const utils2 = requireUtils$2();
  function generate(input, settings2) {
    const patterns = processPatterns(input, settings2);
    const ignore2 = processPatterns(settings2.ignore, settings2);
    const positivePatterns = getPositivePatterns(patterns);
    const negativePatterns = getNegativePatternsAsPositive(patterns, ignore2);
    const staticPatterns = positivePatterns.filter((pattern2) => utils2.pattern.isStaticPattern(pattern2, settings2));
    const dynamicPatterns = positivePatterns.filter((pattern2) => utils2.pattern.isDynamicPattern(pattern2, settings2));
    const staticTasks = convertPatternsToTasks(
      staticPatterns,
      negativePatterns,
      /* dynamic */
      false
    );
    const dynamicTasks = convertPatternsToTasks(
      dynamicPatterns,
      negativePatterns,
      /* dynamic */
      true
    );
    return staticTasks.concat(dynamicTasks);
  }
  tasks.generate = generate;
  function processPatterns(input, settings2) {
    let patterns = input;
    if (settings2.braceExpansion) {
      patterns = utils2.pattern.expandPatternsWithBraceExpansion(patterns);
    }
    if (settings2.baseNameMatch) {
      patterns = patterns.map((pattern2) => pattern2.includes("/") ? pattern2 : `**/${pattern2}`);
    }
    return patterns.map((pattern2) => utils2.pattern.removeDuplicateSlashes(pattern2));
  }
  function convertPatternsToTasks(positive, negative, dynamic) {
    const tasks2 = [];
    const patternsOutsideCurrentDirectory = utils2.pattern.getPatternsOutsideCurrentDirectory(positive);
    const patternsInsideCurrentDirectory = utils2.pattern.getPatternsInsideCurrentDirectory(positive);
    const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
    const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
    tasks2.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
    if ("." in insideCurrentDirectoryGroup) {
      tasks2.push(convertPatternGroupToTask(".", patternsInsideCurrentDirectory, negative, dynamic));
    } else {
      tasks2.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
    }
    return tasks2;
  }
  tasks.convertPatternsToTasks = convertPatternsToTasks;
  function getPositivePatterns(patterns) {
    return utils2.pattern.getPositivePatterns(patterns);
  }
  tasks.getPositivePatterns = getPositivePatterns;
  function getNegativePatternsAsPositive(patterns, ignore2) {
    const negative = utils2.pattern.getNegativePatterns(patterns).concat(ignore2);
    const positive = negative.map(utils2.pattern.convertToPositivePattern);
    return positive;
  }
  tasks.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
  function groupPatternsByBaseDirectory(patterns) {
    const group = {};
    return patterns.reduce((collection, pattern2) => {
      const base2 = utils2.pattern.getBaseDirectory(pattern2);
      if (base2 in collection) {
        collection[base2].push(pattern2);
      } else {
        collection[base2] = [pattern2];
      }
      return collection;
    }, group);
  }
  tasks.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
  function convertPatternGroupsToTasks(positive, negative, dynamic) {
    return Object.keys(positive).map((base2) => {
      return convertPatternGroupToTask(base2, positive[base2], negative, dynamic);
    });
  }
  tasks.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
  function convertPatternGroupToTask(base2, positive, negative, dynamic) {
    return {
      dynamic,
      positive,
      negative,
      base: base2,
      patterns: [].concat(positive, negative.map(utils2.pattern.convertToNegativePattern))
    };
  }
  tasks.convertPatternGroupToTask = convertPatternGroupToTask;
  return tasks;
}
var async$5 = {};
var async$4 = {};
var out$3 = {};
var async$3 = {};
var async$2 = {};
var out$2 = {};
var async$1 = {};
var out$1 = {};
var async = {};
var hasRequiredAsync$5;
function requireAsync$5() {
  if (hasRequiredAsync$5)
    return async;
  hasRequiredAsync$5 = 1;
  Object.defineProperty(async, "__esModule", { value: true });
  async.read = void 0;
  function read(path2, settings2, callback) {
    settings2.fs.lstat(path2, (lstatError, lstat) => {
      if (lstatError !== null) {
        callFailureCallback(callback, lstatError);
        return;
      }
      if (!lstat.isSymbolicLink() || !settings2.followSymbolicLink) {
        callSuccessCallback(callback, lstat);
        return;
      }
      settings2.fs.stat(path2, (statError, stat2) => {
        if (statError !== null) {
          if (settings2.throwErrorOnBrokenSymbolicLink) {
            callFailureCallback(callback, statError);
            return;
          }
          callSuccessCallback(callback, lstat);
          return;
        }
        if (settings2.markSymbolicLink) {
          stat2.isSymbolicLink = () => true;
        }
        callSuccessCallback(callback, stat2);
      });
    });
  }
  async.read = read;
  function callFailureCallback(callback, error2) {
    callback(error2);
  }
  function callSuccessCallback(callback, result) {
    callback(null, result);
  }
  return async;
}
var sync$5 = {};
var hasRequiredSync$5;
function requireSync$5() {
  if (hasRequiredSync$5)
    return sync$5;
  hasRequiredSync$5 = 1;
  Object.defineProperty(sync$5, "__esModule", { value: true });
  sync$5.read = void 0;
  function read(path2, settings2) {
    const lstat = settings2.fs.lstatSync(path2);
    if (!lstat.isSymbolicLink() || !settings2.followSymbolicLink) {
      return lstat;
    }
    try {
      const stat2 = settings2.fs.statSync(path2);
      if (settings2.markSymbolicLink) {
        stat2.isSymbolicLink = () => true;
      }
      return stat2;
    } catch (error2) {
      if (!settings2.throwErrorOnBrokenSymbolicLink) {
        return lstat;
      }
      throw error2;
    }
  }
  sync$5.read = read;
  return sync$5;
}
var settings$3 = {};
var fs$5 = {};
var hasRequiredFs$2;
function requireFs$2() {
  if (hasRequiredFs$2)
    return fs$5;
  hasRequiredFs$2 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
    const fs2 = require$$0$1;
    exports.FILE_SYSTEM_ADAPTER = {
      lstat: fs2.lstat,
      stat: fs2.stat,
      lstatSync: fs2.lstatSync,
      statSync: fs2.statSync
    };
    function createFileSystemAdapter(fsMethods) {
      if (fsMethods === void 0) {
        return exports.FILE_SYSTEM_ADAPTER;
      }
      return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
    }
    exports.createFileSystemAdapter = createFileSystemAdapter;
  })(fs$5);
  return fs$5;
}
var hasRequiredSettings$3;
function requireSettings$3() {
  if (hasRequiredSettings$3)
    return settings$3;
  hasRequiredSettings$3 = 1;
  Object.defineProperty(settings$3, "__esModule", { value: true });
  const fs2 = requireFs$2();
  class Settings {
    constructor(_options = {}) {
      this._options = _options;
      this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
      this.fs = fs2.createFileSystemAdapter(this._options.fs);
      this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
      this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
    }
    _getValue(option, value2) {
      return option !== null && option !== void 0 ? option : value2;
    }
  }
  settings$3.default = Settings;
  return settings$3;
}
var hasRequiredOut$3;
function requireOut$3() {
  if (hasRequiredOut$3)
    return out$1;
  hasRequiredOut$3 = 1;
  Object.defineProperty(out$1, "__esModule", { value: true });
  out$1.statSync = out$1.stat = out$1.Settings = void 0;
  const async2 = requireAsync$5();
  const sync2 = requireSync$5();
  const settings_1 = requireSettings$3();
  out$1.Settings = settings_1.default;
  function stat2(path2, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === "function") {
      async2.read(path2, getSettings(), optionsOrSettingsOrCallback);
      return;
    }
    async2.read(path2, getSettings(optionsOrSettingsOrCallback), callback);
  }
  out$1.stat = stat2;
  function statSync(path2, optionsOrSettings) {
    const settings2 = getSettings(optionsOrSettings);
    return sync2.read(path2, settings2);
  }
  out$1.statSync = statSync;
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
      return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
  }
  return out$1;
}
/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var queueMicrotask_1;
var hasRequiredQueueMicrotask;
function requireQueueMicrotask() {
  if (hasRequiredQueueMicrotask)
    return queueMicrotask_1;
  hasRequiredQueueMicrotask = 1;
  let promise2;
  queueMicrotask_1 = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : commonjsGlobal) : (cb) => (promise2 || (promise2 = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
    throw err;
  }, 0));
  return queueMicrotask_1;
}
/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var runParallel_1;
var hasRequiredRunParallel;
function requireRunParallel() {
  if (hasRequiredRunParallel)
    return runParallel_1;
  hasRequiredRunParallel = 1;
  runParallel_1 = runParallel;
  const queueMicrotask2 = requireQueueMicrotask();
  function runParallel(tasks2, cb) {
    let results, pending, keys2;
    let isSync = true;
    if (Array.isArray(tasks2)) {
      results = [];
      pending = tasks2.length;
    } else {
      keys2 = Object.keys(tasks2);
      results = {};
      pending = keys2.length;
    }
    function done(err) {
      function end() {
        if (cb)
          cb(err, results);
        cb = null;
      }
      if (isSync)
        queueMicrotask2(end);
      else
        end();
    }
    function each(i, err, result) {
      results[i] = result;
      if (--pending === 0 || err) {
        done(err);
      }
    }
    if (!pending) {
      done(null);
    } else if (keys2) {
      keys2.forEach(function(key) {
        tasks2[key](function(err, result) {
          each(key, err, result);
        });
      });
    } else {
      tasks2.forEach(function(task, i) {
        task(function(err, result) {
          each(i, err, result);
        });
      });
    }
    isSync = false;
  }
  return runParallel_1;
}
var constants = {};
var hasRequiredConstants;
function requireConstants() {
  if (hasRequiredConstants)
    return constants;
  hasRequiredConstants = 1;
  Object.defineProperty(constants, "__esModule", { value: true });
  constants.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
  const NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
  if (NODE_PROCESS_VERSION_PARTS[0] === void 0 || NODE_PROCESS_VERSION_PARTS[1] === void 0) {
    throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
  }
  const MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
  const MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
  const SUPPORTED_MAJOR_VERSION = 10;
  const SUPPORTED_MINOR_VERSION = 10;
  const IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
  const IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
  constants.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
  return constants;
}
var utils$1 = {};
var fs$4 = {};
var hasRequiredFs$1;
function requireFs$1() {
  if (hasRequiredFs$1)
    return fs$4;
  hasRequiredFs$1 = 1;
  Object.defineProperty(fs$4, "__esModule", { value: true });
  fs$4.createDirentFromStats = void 0;
  class DirentFromStats {
    constructor(name, stats) {
      this.name = name;
      this.isBlockDevice = stats.isBlockDevice.bind(stats);
      this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
      this.isDirectory = stats.isDirectory.bind(stats);
      this.isFIFO = stats.isFIFO.bind(stats);
      this.isFile = stats.isFile.bind(stats);
      this.isSocket = stats.isSocket.bind(stats);
      this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
    }
  }
  function createDirentFromStats(name, stats) {
    return new DirentFromStats(name, stats);
  }
  fs$4.createDirentFromStats = createDirentFromStats;
  return fs$4;
}
var hasRequiredUtils$1;
function requireUtils$1() {
  if (hasRequiredUtils$1)
    return utils$1;
  hasRequiredUtils$1 = 1;
  Object.defineProperty(utils$1, "__esModule", { value: true });
  utils$1.fs = void 0;
  const fs2 = requireFs$1();
  utils$1.fs = fs2;
  return utils$1;
}
var common$3 = {};
var hasRequiredCommon$2;
function requireCommon$2() {
  if (hasRequiredCommon$2)
    return common$3;
  hasRequiredCommon$2 = 1;
  Object.defineProperty(common$3, "__esModule", { value: true });
  common$3.joinPathSegments = void 0;
  function joinPathSegments(a, b, separator) {
    if (a.endsWith(separator)) {
      return a + b;
    }
    return a + separator + b;
  }
  common$3.joinPathSegments = joinPathSegments;
  return common$3;
}
var hasRequiredAsync$4;
function requireAsync$4() {
  if (hasRequiredAsync$4)
    return async$1;
  hasRequiredAsync$4 = 1;
  Object.defineProperty(async$1, "__esModule", { value: true });
  async$1.readdir = async$1.readdirWithFileTypes = async$1.read = void 0;
  const fsStat2 = requireOut$3();
  const rpl = requireRunParallel();
  const constants_1 = requireConstants();
  const utils2 = requireUtils$1();
  const common2 = requireCommon$2();
  function read(directory, settings2, callback) {
    if (!settings2.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
      readdirWithFileTypes(directory, settings2, callback);
      return;
    }
    readdir(directory, settings2, callback);
  }
  async$1.read = read;
  function readdirWithFileTypes(directory, settings2, callback) {
    settings2.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
      if (readdirError !== null) {
        callFailureCallback(callback, readdirError);
        return;
      }
      const entries = dirents.map((dirent) => ({
        dirent,
        name: dirent.name,
        path: common2.joinPathSegments(directory, dirent.name, settings2.pathSegmentSeparator)
      }));
      if (!settings2.followSymbolicLinks) {
        callSuccessCallback(callback, entries);
        return;
      }
      const tasks2 = entries.map((entry2) => makeRplTaskEntry(entry2, settings2));
      rpl(tasks2, (rplError, rplEntries) => {
        if (rplError !== null) {
          callFailureCallback(callback, rplError);
          return;
        }
        callSuccessCallback(callback, rplEntries);
      });
    });
  }
  async$1.readdirWithFileTypes = readdirWithFileTypes;
  function makeRplTaskEntry(entry2, settings2) {
    return (done) => {
      if (!entry2.dirent.isSymbolicLink()) {
        done(null, entry2);
        return;
      }
      settings2.fs.stat(entry2.path, (statError, stats) => {
        if (statError !== null) {
          if (settings2.throwErrorOnBrokenSymbolicLink) {
            done(statError);
            return;
          }
          done(null, entry2);
          return;
        }
        entry2.dirent = utils2.fs.createDirentFromStats(entry2.name, stats);
        done(null, entry2);
      });
    };
  }
  function readdir(directory, settings2, callback) {
    settings2.fs.readdir(directory, (readdirError, names) => {
      if (readdirError !== null) {
        callFailureCallback(callback, readdirError);
        return;
      }
      const tasks2 = names.map((name) => {
        const path2 = common2.joinPathSegments(directory, name, settings2.pathSegmentSeparator);
        return (done) => {
          fsStat2.stat(path2, settings2.fsStatSettings, (error2, stats) => {
            if (error2 !== null) {
              done(error2);
              return;
            }
            const entry2 = {
              name,
              path: path2,
              dirent: utils2.fs.createDirentFromStats(name, stats)
            };
            if (settings2.stats) {
              entry2.stats = stats;
            }
            done(null, entry2);
          });
        };
      });
      rpl(tasks2, (rplError, entries) => {
        if (rplError !== null) {
          callFailureCallback(callback, rplError);
          return;
        }
        callSuccessCallback(callback, entries);
      });
    });
  }
  async$1.readdir = readdir;
  function callFailureCallback(callback, error2) {
    callback(error2);
  }
  function callSuccessCallback(callback, result) {
    callback(null, result);
  }
  return async$1;
}
var sync$4 = {};
var hasRequiredSync$4;
function requireSync$4() {
  if (hasRequiredSync$4)
    return sync$4;
  hasRequiredSync$4 = 1;
  Object.defineProperty(sync$4, "__esModule", { value: true });
  sync$4.readdir = sync$4.readdirWithFileTypes = sync$4.read = void 0;
  const fsStat2 = requireOut$3();
  const constants_1 = requireConstants();
  const utils2 = requireUtils$1();
  const common2 = requireCommon$2();
  function read(directory, settings2) {
    if (!settings2.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
      return readdirWithFileTypes(directory, settings2);
    }
    return readdir(directory, settings2);
  }
  sync$4.read = read;
  function readdirWithFileTypes(directory, settings2) {
    const dirents = settings2.fs.readdirSync(directory, { withFileTypes: true });
    return dirents.map((dirent) => {
      const entry2 = {
        dirent,
        name: dirent.name,
        path: common2.joinPathSegments(directory, dirent.name, settings2.pathSegmentSeparator)
      };
      if (entry2.dirent.isSymbolicLink() && settings2.followSymbolicLinks) {
        try {
          const stats = settings2.fs.statSync(entry2.path);
          entry2.dirent = utils2.fs.createDirentFromStats(entry2.name, stats);
        } catch (error2) {
          if (settings2.throwErrorOnBrokenSymbolicLink) {
            throw error2;
          }
        }
      }
      return entry2;
    });
  }
  sync$4.readdirWithFileTypes = readdirWithFileTypes;
  function readdir(directory, settings2) {
    const names = settings2.fs.readdirSync(directory);
    return names.map((name) => {
      const entryPath = common2.joinPathSegments(directory, name, settings2.pathSegmentSeparator);
      const stats = fsStat2.statSync(entryPath, settings2.fsStatSettings);
      const entry2 = {
        name,
        path: entryPath,
        dirent: utils2.fs.createDirentFromStats(name, stats)
      };
      if (settings2.stats) {
        entry2.stats = stats;
      }
      return entry2;
    });
  }
  sync$4.readdir = readdir;
  return sync$4;
}
var settings$2 = {};
var fs$3 = {};
var hasRequiredFs;
function requireFs() {
  if (hasRequiredFs)
    return fs$3;
  hasRequiredFs = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
    const fs2 = require$$0$1;
    exports.FILE_SYSTEM_ADAPTER = {
      lstat: fs2.lstat,
      stat: fs2.stat,
      lstatSync: fs2.lstatSync,
      statSync: fs2.statSync,
      readdir: fs2.readdir,
      readdirSync: fs2.readdirSync
    };
    function createFileSystemAdapter(fsMethods) {
      if (fsMethods === void 0) {
        return exports.FILE_SYSTEM_ADAPTER;
      }
      return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
    }
    exports.createFileSystemAdapter = createFileSystemAdapter;
  })(fs$3);
  return fs$3;
}
var hasRequiredSettings$2;
function requireSettings$2() {
  if (hasRequiredSettings$2)
    return settings$2;
  hasRequiredSettings$2 = 1;
  Object.defineProperty(settings$2, "__esModule", { value: true });
  const path2 = require$$0$3;
  const fsStat2 = requireOut$3();
  const fs2 = requireFs();
  class Settings {
    constructor(_options = {}) {
      this._options = _options;
      this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
      this.fs = fs2.createFileSystemAdapter(this._options.fs);
      this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path2.sep);
      this.stats = this._getValue(this._options.stats, false);
      this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
      this.fsStatSettings = new fsStat2.Settings({
        followSymbolicLink: this.followSymbolicLinks,
        fs: this.fs,
        throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
      });
    }
    _getValue(option, value2) {
      return option !== null && option !== void 0 ? option : value2;
    }
  }
  settings$2.default = Settings;
  return settings$2;
}
var hasRequiredOut$2;
function requireOut$2() {
  if (hasRequiredOut$2)
    return out$2;
  hasRequiredOut$2 = 1;
  Object.defineProperty(out$2, "__esModule", { value: true });
  out$2.Settings = out$2.scandirSync = out$2.scandir = void 0;
  const async2 = requireAsync$4();
  const sync2 = requireSync$4();
  const settings_1 = requireSettings$2();
  out$2.Settings = settings_1.default;
  function scandir(path2, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === "function") {
      async2.read(path2, getSettings(), optionsOrSettingsOrCallback);
      return;
    }
    async2.read(path2, getSettings(optionsOrSettingsOrCallback), callback);
  }
  out$2.scandir = scandir;
  function scandirSync(path2, optionsOrSettings) {
    const settings2 = getSettings(optionsOrSettings);
    return sync2.read(path2, settings2);
  }
  out$2.scandirSync = scandirSync;
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
      return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
  }
  return out$2;
}
var queue = { exports: {} };
var reusify_1;
var hasRequiredReusify;
function requireReusify() {
  if (hasRequiredReusify)
    return reusify_1;
  hasRequiredReusify = 1;
  function reusify(Constructor) {
    var head = new Constructor();
    var tail = head;
    function get2() {
      var current = head;
      if (current.next) {
        head = current.next;
      } else {
        head = new Constructor();
        tail = head;
      }
      current.next = null;
      return current;
    }
    function release(obj) {
      tail.next = obj;
      tail = obj;
    }
    return {
      get: get2,
      release
    };
  }
  reusify_1 = reusify;
  return reusify_1;
}
var hasRequiredQueue;
function requireQueue() {
  if (hasRequiredQueue)
    return queue.exports;
  hasRequiredQueue = 1;
  var reusify = requireReusify();
  function fastqueue(context2, worker, concurrency) {
    if (typeof context2 === "function") {
      concurrency = worker;
      worker = context2;
      context2 = null;
    }
    if (concurrency < 1) {
      throw new Error("fastqueue concurrency must be greater than 1");
    }
    var cache = reusify(Task);
    var queueHead = null;
    var queueTail = null;
    var _running = 0;
    var errorHandler = null;
    var self2 = {
      push: push2,
      drain: noop,
      saturated: noop,
      pause,
      paused: false,
      concurrency,
      running,
      resume,
      idle,
      length,
      getQueue,
      unshift: unshift2,
      empty: noop,
      kill,
      killAndDrain,
      error: error2
    };
    return self2;
    function running() {
      return _running;
    }
    function pause() {
      self2.paused = true;
    }
    function length() {
      var current = queueHead;
      var counter = 0;
      while (current) {
        current = current.next;
        counter++;
      }
      return counter;
    }
    function getQueue() {
      var current = queueHead;
      var tasks2 = [];
      while (current) {
        tasks2.push(current.value);
        current = current.next;
      }
      return tasks2;
    }
    function resume() {
      if (!self2.paused)
        return;
      self2.paused = false;
      for (var i = 0; i < self2.concurrency; i++) {
        _running++;
        release();
      }
    }
    function idle() {
      return _running === 0 && self2.length() === 0;
    }
    function push2(value2, done) {
      var current = cache.get();
      current.context = context2;
      current.release = release;
      current.value = value2;
      current.callback = done || noop;
      current.errorHandler = errorHandler;
      if (_running === self2.concurrency || self2.paused) {
        if (queueTail) {
          queueTail.next = current;
          queueTail = current;
        } else {
          queueHead = current;
          queueTail = current;
          self2.saturated();
        }
      } else {
        _running++;
        worker.call(context2, current.value, current.worked);
      }
    }
    function unshift2(value2, done) {
      var current = cache.get();
      current.context = context2;
      current.release = release;
      current.value = value2;
      current.callback = done || noop;
      if (_running === self2.concurrency || self2.paused) {
        if (queueHead) {
          current.next = queueHead;
          queueHead = current;
        } else {
          queueHead = current;
          queueTail = current;
          self2.saturated();
        }
      } else {
        _running++;
        worker.call(context2, current.value, current.worked);
      }
    }
    function release(holder) {
      if (holder) {
        cache.release(holder);
      }
      var next = queueHead;
      if (next) {
        if (!self2.paused) {
          if (queueTail === queueHead) {
            queueTail = null;
          }
          queueHead = next.next;
          next.next = null;
          worker.call(context2, next.value, next.worked);
          if (queueTail === null) {
            self2.empty();
          }
        } else {
          _running--;
        }
      } else if (--_running === 0) {
        self2.drain();
      }
    }
    function kill() {
      queueHead = null;
      queueTail = null;
      self2.drain = noop;
    }
    function killAndDrain() {
      queueHead = null;
      queueTail = null;
      self2.drain();
      self2.drain = noop;
    }
    function error2(handler2) {
      errorHandler = handler2;
    }
  }
  function noop() {
  }
  function Task() {
    this.value = null;
    this.callback = noop;
    this.next = null;
    this.release = noop;
    this.context = null;
    this.errorHandler = null;
    var self2 = this;
    this.worked = function worked(err, result) {
      var callback = self2.callback;
      var errorHandler = self2.errorHandler;
      var val = self2.value;
      self2.value = null;
      self2.callback = noop;
      if (self2.errorHandler) {
        errorHandler(err, val);
      }
      callback.call(self2.context, err, result);
      self2.release(self2);
    };
  }
  function queueAsPromised(context2, worker, concurrency) {
    if (typeof context2 === "function") {
      concurrency = worker;
      worker = context2;
      context2 = null;
    }
    function asyncWrapper(arg, cb) {
      worker.call(this, arg).then(function(res) {
        cb(null, res);
      }, cb);
    }
    var queue2 = fastqueue(context2, asyncWrapper, concurrency);
    var pushCb = queue2.push;
    var unshiftCb = queue2.unshift;
    queue2.push = push2;
    queue2.unshift = unshift2;
    queue2.drained = drained;
    return queue2;
    function push2(value2) {
      var p = new Promise(function(resolve, reject) {
        pushCb(value2, function(err, result) {
          if (err) {
            reject(err);
            return;
          }
          resolve(result);
        });
      });
      p.catch(noop);
      return p;
    }
    function unshift2(value2) {
      var p = new Promise(function(resolve, reject) {
        unshiftCb(value2, function(err, result) {
          if (err) {
            reject(err);
            return;
          }
          resolve(result);
        });
      });
      p.catch(noop);
      return p;
    }
    function drained() {
      if (queue2.idle()) {
        return new Promise(function(resolve) {
          resolve();
        });
      }
      var previousDrain = queue2.drain;
      var p = new Promise(function(resolve) {
        queue2.drain = function() {
          previousDrain();
          resolve();
        };
      });
      return p;
    }
  }
  queue.exports = fastqueue;
  queue.exports.promise = queueAsPromised;
  return queue.exports;
}
var common$2 = {};
var hasRequiredCommon$1;
function requireCommon$1() {
  if (hasRequiredCommon$1)
    return common$2;
  hasRequiredCommon$1 = 1;
  Object.defineProperty(common$2, "__esModule", { value: true });
  common$2.joinPathSegments = common$2.replacePathSegmentSeparator = common$2.isAppliedFilter = common$2.isFatalError = void 0;
  function isFatalError(settings2, error2) {
    if (settings2.errorFilter === null) {
      return true;
    }
    return !settings2.errorFilter(error2);
  }
  common$2.isFatalError = isFatalError;
  function isAppliedFilter(filter, value2) {
    return filter === null || filter(value2);
  }
  common$2.isAppliedFilter = isAppliedFilter;
  function replacePathSegmentSeparator(filepath, separator) {
    return filepath.split(/[/\\]/).join(separator);
  }
  common$2.replacePathSegmentSeparator = replacePathSegmentSeparator;
  function joinPathSegments(a, b, separator) {
    if (a === "") {
      return b;
    }
    if (a.endsWith(separator)) {
      return a + b;
    }
    return a + separator + b;
  }
  common$2.joinPathSegments = joinPathSegments;
  return common$2;
}
var reader$1 = {};
var hasRequiredReader$1;
function requireReader$1() {
  if (hasRequiredReader$1)
    return reader$1;
  hasRequiredReader$1 = 1;
  Object.defineProperty(reader$1, "__esModule", { value: true });
  const common2 = requireCommon$1();
  class Reader {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._root = common2.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
    }
  }
  reader$1.default = Reader;
  return reader$1;
}
var hasRequiredAsync$3;
function requireAsync$3() {
  if (hasRequiredAsync$3)
    return async$2;
  hasRequiredAsync$3 = 1;
  Object.defineProperty(async$2, "__esModule", { value: true });
  const events_1 = require$$2$2;
  const fsScandir = requireOut$2();
  const fastq = requireQueue();
  const common2 = requireCommon$1();
  const reader_1 = requireReader$1();
  class AsyncReader extends reader_1.default {
    constructor(_root, _settings) {
      super(_root, _settings);
      this._settings = _settings;
      this._scandir = fsScandir.scandir;
      this._emitter = new events_1.EventEmitter();
      this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
      this._isFatalError = false;
      this._isDestroyed = false;
      this._queue.drain = () => {
        if (!this._isFatalError) {
          this._emitter.emit("end");
        }
      };
    }
    read() {
      this._isFatalError = false;
      this._isDestroyed = false;
      setImmediate(() => {
        this._pushToQueue(this._root, this._settings.basePath);
      });
      return this._emitter;
    }
    get isDestroyed() {
      return this._isDestroyed;
    }
    destroy() {
      if (this._isDestroyed) {
        throw new Error("The reader is already destroyed");
      }
      this._isDestroyed = true;
      this._queue.killAndDrain();
    }
    onEntry(callback) {
      this._emitter.on("entry", callback);
    }
    onError(callback) {
      this._emitter.once("error", callback);
    }
    onEnd(callback) {
      this._emitter.once("end", callback);
    }
    _pushToQueue(directory, base2) {
      const queueItem = { directory, base: base2 };
      this._queue.push(queueItem, (error2) => {
        if (error2 !== null) {
          this._handleError(error2);
        }
      });
    }
    _worker(item, done) {
      this._scandir(item.directory, this._settings.fsScandirSettings, (error2, entries) => {
        if (error2 !== null) {
          done(error2, void 0);
          return;
        }
        for (const entry2 of entries) {
          this._handleEntry(entry2, item.base);
        }
        done(null, void 0);
      });
    }
    _handleError(error2) {
      if (this._isDestroyed || !common2.isFatalError(this._settings, error2)) {
        return;
      }
      this._isFatalError = true;
      this._isDestroyed = true;
      this._emitter.emit("error", error2);
    }
    _handleEntry(entry2, base2) {
      if (this._isDestroyed || this._isFatalError) {
        return;
      }
      const fullpath = entry2.path;
      if (base2 !== void 0) {
        entry2.path = common2.joinPathSegments(base2, entry2.name, this._settings.pathSegmentSeparator);
      }
      if (common2.isAppliedFilter(this._settings.entryFilter, entry2)) {
        this._emitEntry(entry2);
      }
      if (entry2.dirent.isDirectory() && common2.isAppliedFilter(this._settings.deepFilter, entry2)) {
        this._pushToQueue(fullpath, base2 === void 0 ? void 0 : entry2.path);
      }
    }
    _emitEntry(entry2) {
      this._emitter.emit("entry", entry2);
    }
  }
  async$2.default = AsyncReader;
  return async$2;
}
var hasRequiredAsync$2;
function requireAsync$2() {
  if (hasRequiredAsync$2)
    return async$3;
  hasRequiredAsync$2 = 1;
  Object.defineProperty(async$3, "__esModule", { value: true });
  const async_1 = requireAsync$3();
  class AsyncProvider {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._reader = new async_1.default(this._root, this._settings);
      this._storage = [];
    }
    read(callback) {
      this._reader.onError((error2) => {
        callFailureCallback(callback, error2);
      });
      this._reader.onEntry((entry2) => {
        this._storage.push(entry2);
      });
      this._reader.onEnd(() => {
        callSuccessCallback(callback, this._storage);
      });
      this._reader.read();
    }
  }
  async$3.default = AsyncProvider;
  function callFailureCallback(callback, error2) {
    callback(error2);
  }
  function callSuccessCallback(callback, entries) {
    callback(null, entries);
  }
  return async$3;
}
var stream$2 = {};
var hasRequiredStream$2;
function requireStream$2() {
  if (hasRequiredStream$2)
    return stream$2;
  hasRequiredStream$2 = 1;
  Object.defineProperty(stream$2, "__esModule", { value: true });
  const stream_1 = Stream;
  const async_1 = requireAsync$3();
  class StreamProvider {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._reader = new async_1.default(this._root, this._settings);
      this._stream = new stream_1.Readable({
        objectMode: true,
        read: () => {
        },
        destroy: () => {
          if (!this._reader.isDestroyed) {
            this._reader.destroy();
          }
        }
      });
    }
    read() {
      this._reader.onError((error2) => {
        this._stream.emit("error", error2);
      });
      this._reader.onEntry((entry2) => {
        this._stream.push(entry2);
      });
      this._reader.onEnd(() => {
        this._stream.push(null);
      });
      this._reader.read();
      return this._stream;
    }
  }
  stream$2.default = StreamProvider;
  return stream$2;
}
var sync$3 = {};
var sync$2 = {};
var hasRequiredSync$3;
function requireSync$3() {
  if (hasRequiredSync$3)
    return sync$2;
  hasRequiredSync$3 = 1;
  Object.defineProperty(sync$2, "__esModule", { value: true });
  const fsScandir = requireOut$2();
  const common2 = requireCommon$1();
  const reader_1 = requireReader$1();
  class SyncReader extends reader_1.default {
    constructor() {
      super(...arguments);
      this._scandir = fsScandir.scandirSync;
      this._storage = [];
      this._queue = /* @__PURE__ */ new Set();
    }
    read() {
      this._pushToQueue(this._root, this._settings.basePath);
      this._handleQueue();
      return this._storage;
    }
    _pushToQueue(directory, base2) {
      this._queue.add({ directory, base: base2 });
    }
    _handleQueue() {
      for (const item of this._queue.values()) {
        this._handleDirectory(item.directory, item.base);
      }
    }
    _handleDirectory(directory, base2) {
      try {
        const entries = this._scandir(directory, this._settings.fsScandirSettings);
        for (const entry2 of entries) {
          this._handleEntry(entry2, base2);
        }
      } catch (error2) {
        this._handleError(error2);
      }
    }
    _handleError(error2) {
      if (!common2.isFatalError(this._settings, error2)) {
        return;
      }
      throw error2;
    }
    _handleEntry(entry2, base2) {
      const fullpath = entry2.path;
      if (base2 !== void 0) {
        entry2.path = common2.joinPathSegments(base2, entry2.name, this._settings.pathSegmentSeparator);
      }
      if (common2.isAppliedFilter(this._settings.entryFilter, entry2)) {
        this._pushToStorage(entry2);
      }
      if (entry2.dirent.isDirectory() && common2.isAppliedFilter(this._settings.deepFilter, entry2)) {
        this._pushToQueue(fullpath, base2 === void 0 ? void 0 : entry2.path);
      }
    }
    _pushToStorage(entry2) {
      this._storage.push(entry2);
    }
  }
  sync$2.default = SyncReader;
  return sync$2;
}
var hasRequiredSync$2;
function requireSync$2() {
  if (hasRequiredSync$2)
    return sync$3;
  hasRequiredSync$2 = 1;
  Object.defineProperty(sync$3, "__esModule", { value: true });
  const sync_1 = requireSync$3();
  class SyncProvider {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._reader = new sync_1.default(this._root, this._settings);
    }
    read() {
      return this._reader.read();
    }
  }
  sync$3.default = SyncProvider;
  return sync$3;
}
var settings$1 = {};
var hasRequiredSettings$1;
function requireSettings$1() {
  if (hasRequiredSettings$1)
    return settings$1;
  hasRequiredSettings$1 = 1;
  Object.defineProperty(settings$1, "__esModule", { value: true });
  const path2 = require$$0$3;
  const fsScandir = requireOut$2();
  class Settings {
    constructor(_options = {}) {
      this._options = _options;
      this.basePath = this._getValue(this._options.basePath, void 0);
      this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
      this.deepFilter = this._getValue(this._options.deepFilter, null);
      this.entryFilter = this._getValue(this._options.entryFilter, null);
      this.errorFilter = this._getValue(this._options.errorFilter, null);
      this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path2.sep);
      this.fsScandirSettings = new fsScandir.Settings({
        followSymbolicLinks: this._options.followSymbolicLinks,
        fs: this._options.fs,
        pathSegmentSeparator: this._options.pathSegmentSeparator,
        stats: this._options.stats,
        throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
      });
    }
    _getValue(option, value2) {
      return option !== null && option !== void 0 ? option : value2;
    }
  }
  settings$1.default = Settings;
  return settings$1;
}
var hasRequiredOut$1;
function requireOut$1() {
  if (hasRequiredOut$1)
    return out$3;
  hasRequiredOut$1 = 1;
  Object.defineProperty(out$3, "__esModule", { value: true });
  out$3.Settings = out$3.walkStream = out$3.walkSync = out$3.walk = void 0;
  const async_1 = requireAsync$2();
  const stream_1 = requireStream$2();
  const sync_1 = requireSync$2();
  const settings_1 = requireSettings$1();
  out$3.Settings = settings_1.default;
  function walk(directory, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === "function") {
      new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
      return;
    }
    new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
  }
  out$3.walk = walk;
  function walkSync(directory, optionsOrSettings) {
    const settings2 = getSettings(optionsOrSettings);
    const provider2 = new sync_1.default(directory, settings2);
    return provider2.read();
  }
  out$3.walkSync = walkSync;
  function walkStream(directory, optionsOrSettings) {
    const settings2 = getSettings(optionsOrSettings);
    const provider2 = new stream_1.default(directory, settings2);
    return provider2.read();
  }
  out$3.walkStream = walkStream;
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
      return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
  }
  return out$3;
}
var reader = {};
var hasRequiredReader;
function requireReader() {
  if (hasRequiredReader)
    return reader;
  hasRequiredReader = 1;
  Object.defineProperty(reader, "__esModule", { value: true });
  const path2 = require$$0$3;
  const fsStat2 = requireOut$3();
  const utils2 = requireUtils$2();
  class Reader {
    constructor(_settings) {
      this._settings = _settings;
      this._fsStatSettings = new fsStat2.Settings({
        followSymbolicLink: this._settings.followSymbolicLinks,
        fs: this._settings.fs,
        throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
      });
    }
    _getFullEntryPath(filepath) {
      return path2.resolve(this._settings.cwd, filepath);
    }
    _makeEntry(stats, pattern2) {
      const entry2 = {
        name: pattern2,
        path: pattern2,
        dirent: utils2.fs.createDirentFromStats(pattern2, stats)
      };
      if (this._settings.stats) {
        entry2.stats = stats;
      }
      return entry2;
    }
    _isFatalError(error2) {
      return !utils2.errno.isEnoentCodeError(error2) && !this._settings.suppressErrors;
    }
  }
  reader.default = Reader;
  return reader;
}
var stream$1 = {};
var hasRequiredStream$1;
function requireStream$1() {
  if (hasRequiredStream$1)
    return stream$1;
  hasRequiredStream$1 = 1;
  Object.defineProperty(stream$1, "__esModule", { value: true });
  const stream_1 = Stream;
  const fsStat2 = requireOut$3();
  const fsWalk = requireOut$1();
  const reader_1 = requireReader();
  class ReaderStream extends reader_1.default {
    constructor() {
      super(...arguments);
      this._walkStream = fsWalk.walkStream;
      this._stat = fsStat2.stat;
    }
    dynamic(root, options) {
      return this._walkStream(root, options);
    }
    static(patterns, options) {
      const filepaths = patterns.map(this._getFullEntryPath, this);
      const stream2 = new stream_1.PassThrough({ objectMode: true });
      stream2._write = (index2, _enc, done) => {
        return this._getEntry(filepaths[index2], patterns[index2], options).then((entry2) => {
          if (entry2 !== null && options.entryFilter(entry2)) {
            stream2.push(entry2);
          }
          if (index2 === filepaths.length - 1) {
            stream2.end();
          }
          done();
        }).catch(done);
      };
      for (let i = 0; i < filepaths.length; i++) {
        stream2.write(i);
      }
      return stream2;
    }
    _getEntry(filepath, pattern2, options) {
      return this._getStat(filepath).then((stats) => this._makeEntry(stats, pattern2)).catch((error2) => {
        if (options.errorFilter(error2)) {
          return null;
        }
        throw error2;
      });
    }
    _getStat(filepath) {
      return new Promise((resolve, reject) => {
        this._stat(filepath, this._fsStatSettings, (error2, stats) => {
          return error2 === null ? resolve(stats) : reject(error2);
        });
      });
    }
  }
  stream$1.default = ReaderStream;
  return stream$1;
}
var hasRequiredAsync$1;
function requireAsync$1() {
  if (hasRequiredAsync$1)
    return async$4;
  hasRequiredAsync$1 = 1;
  Object.defineProperty(async$4, "__esModule", { value: true });
  const fsWalk = requireOut$1();
  const reader_1 = requireReader();
  const stream_1 = requireStream$1();
  class ReaderAsync extends reader_1.default {
    constructor() {
      super(...arguments);
      this._walkAsync = fsWalk.walk;
      this._readerStream = new stream_1.default(this._settings);
    }
    dynamic(root, options) {
      return new Promise((resolve, reject) => {
        this._walkAsync(root, options, (error2, entries) => {
          if (error2 === null) {
            resolve(entries);
          } else {
            reject(error2);
          }
        });
      });
    }
    async static(patterns, options) {
      const entries = [];
      const stream2 = this._readerStream.static(patterns, options);
      return new Promise((resolve, reject) => {
        stream2.once("error", reject);
        stream2.on("data", (entry2) => entries.push(entry2));
        stream2.once("end", () => resolve(entries));
      });
    }
  }
  async$4.default = ReaderAsync;
  return async$4;
}
var provider = {};
var deep = {};
var partial = {};
var matcher = {};
var hasRequiredMatcher;
function requireMatcher() {
  if (hasRequiredMatcher)
    return matcher;
  hasRequiredMatcher = 1;
  Object.defineProperty(matcher, "__esModule", { value: true });
  const utils2 = requireUtils$2();
  class Matcher {
    constructor(_patterns, _settings, _micromatchOptions) {
      this._patterns = _patterns;
      this._settings = _settings;
      this._micromatchOptions = _micromatchOptions;
      this._storage = [];
      this._fillStorage();
    }
    _fillStorage() {
      for (const pattern2 of this._patterns) {
        const segments = this._getPatternSegments(pattern2);
        const sections = this._splitSegmentsIntoSections(segments);
        this._storage.push({
          complete: sections.length <= 1,
          pattern: pattern2,
          segments,
          sections
        });
      }
    }
    _getPatternSegments(pattern2) {
      const parts = utils2.pattern.getPatternParts(pattern2, this._micromatchOptions);
      return parts.map((part) => {
        const dynamic = utils2.pattern.isDynamicPattern(part, this._settings);
        if (!dynamic) {
          return {
            dynamic: false,
            pattern: part
          };
        }
        return {
          dynamic: true,
          pattern: part,
          patternRe: utils2.pattern.makeRe(part, this._micromatchOptions)
        };
      });
    }
    _splitSegmentsIntoSections(segments) {
      return utils2.array.splitWhen(segments, (segment) => segment.dynamic && utils2.pattern.hasGlobStar(segment.pattern));
    }
  }
  matcher.default = Matcher;
  return matcher;
}
var hasRequiredPartial;
function requirePartial() {
  if (hasRequiredPartial)
    return partial;
  hasRequiredPartial = 1;
  Object.defineProperty(partial, "__esModule", { value: true });
  const matcher_1 = requireMatcher();
  class PartialMatcher extends matcher_1.default {
    match(filepath) {
      const parts = filepath.split("/");
      const levels = parts.length;
      const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
      for (const pattern2 of patterns) {
        const section = pattern2.sections[0];
        if (!pattern2.complete && levels > section.length) {
          return true;
        }
        const match = parts.every((part, index2) => {
          const segment = pattern2.segments[index2];
          if (segment.dynamic && segment.patternRe.test(part)) {
            return true;
          }
          if (!segment.dynamic && segment.pattern === part) {
            return true;
          }
          return false;
        });
        if (match) {
          return true;
        }
      }
      return false;
    }
  }
  partial.default = PartialMatcher;
  return partial;
}
var hasRequiredDeep;
function requireDeep() {
  if (hasRequiredDeep)
    return deep;
  hasRequiredDeep = 1;
  Object.defineProperty(deep, "__esModule", { value: true });
  const utils2 = requireUtils$2();
  const partial_1 = requirePartial();
  class DeepFilter {
    constructor(_settings, _micromatchOptions) {
      this._settings = _settings;
      this._micromatchOptions = _micromatchOptions;
    }
    getFilter(basePath, positive, negative) {
      const matcher2 = this._getMatcher(positive);
      const negativeRe = this._getNegativePatternsRe(negative);
      return (entry2) => this._filter(basePath, entry2, matcher2, negativeRe);
    }
    _getMatcher(patterns) {
      return new partial_1.default(patterns, this._settings, this._micromatchOptions);
    }
    _getNegativePatternsRe(patterns) {
      const affectDepthOfReadingPatterns = patterns.filter(utils2.pattern.isAffectDepthOfReadingPattern);
      return utils2.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
    }
    _filter(basePath, entry2, matcher2, negativeRe) {
      if (this._isSkippedByDeep(basePath, entry2.path)) {
        return false;
      }
      if (this._isSkippedSymbolicLink(entry2)) {
        return false;
      }
      const filepath = utils2.path.removeLeadingDotSegment(entry2.path);
      if (this._isSkippedByPositivePatterns(filepath, matcher2)) {
        return false;
      }
      return this._isSkippedByNegativePatterns(filepath, negativeRe);
    }
    _isSkippedByDeep(basePath, entryPath) {
      if (this._settings.deep === Infinity) {
        return false;
      }
      return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
    }
    _getEntryLevel(basePath, entryPath) {
      const entryPathDepth = entryPath.split("/").length;
      if (basePath === "") {
        return entryPathDepth;
      }
      const basePathDepth = basePath.split("/").length;
      return entryPathDepth - basePathDepth;
    }
    _isSkippedSymbolicLink(entry2) {
      return !this._settings.followSymbolicLinks && entry2.dirent.isSymbolicLink();
    }
    _isSkippedByPositivePatterns(entryPath, matcher2) {
      return !this._settings.baseNameMatch && !matcher2.match(entryPath);
    }
    _isSkippedByNegativePatterns(entryPath, patternsRe) {
      return !utils2.pattern.matchAny(entryPath, patternsRe);
    }
  }
  deep.default = DeepFilter;
  return deep;
}
var entry$1 = {};
var hasRequiredEntry$1;
function requireEntry$1() {
  if (hasRequiredEntry$1)
    return entry$1;
  hasRequiredEntry$1 = 1;
  Object.defineProperty(entry$1, "__esModule", { value: true });
  const utils2 = requireUtils$2();
  class EntryFilter {
    constructor(_settings, _micromatchOptions) {
      this._settings = _settings;
      this._micromatchOptions = _micromatchOptions;
      this.index = /* @__PURE__ */ new Map();
    }
    getFilter(positive, negative) {
      const positiveRe = utils2.pattern.convertPatternsToRe(positive, this._micromatchOptions);
      const negativeRe = utils2.pattern.convertPatternsToRe(negative, Object.assign(Object.assign({}, this._micromatchOptions), { dot: true }));
      return (entry2) => this._filter(entry2, positiveRe, negativeRe);
    }
    _filter(entry2, positiveRe, negativeRe) {
      const filepath = utils2.path.removeLeadingDotSegment(entry2.path);
      if (this._settings.unique && this._isDuplicateEntry(filepath)) {
        return false;
      }
      if (this._onlyFileFilter(entry2) || this._onlyDirectoryFilter(entry2)) {
        return false;
      }
      if (this._isSkippedByAbsoluteNegativePatterns(filepath, negativeRe)) {
        return false;
      }
      const isDirectory = entry2.dirent.isDirectory();
      const isMatched = this._isMatchToPatterns(filepath, positiveRe, isDirectory) && !this._isMatchToPatterns(filepath, negativeRe, isDirectory);
      if (this._settings.unique && isMatched) {
        this._createIndexRecord(filepath);
      }
      return isMatched;
    }
    _isDuplicateEntry(filepath) {
      return this.index.has(filepath);
    }
    _createIndexRecord(filepath) {
      this.index.set(filepath, void 0);
    }
    _onlyFileFilter(entry2) {
      return this._settings.onlyFiles && !entry2.dirent.isFile();
    }
    _onlyDirectoryFilter(entry2) {
      return this._settings.onlyDirectories && !entry2.dirent.isDirectory();
    }
    _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
      if (!this._settings.absolute) {
        return false;
      }
      const fullpath = utils2.path.makeAbsolute(this._settings.cwd, entryPath);
      return utils2.pattern.matchAny(fullpath, patternsRe);
    }
    _isMatchToPatterns(filepath, patternsRe, isDirectory) {
      const isMatched = utils2.pattern.matchAny(filepath, patternsRe);
      if (!isMatched && isDirectory) {
        return utils2.pattern.matchAny(filepath + "/", patternsRe);
      }
      return isMatched;
    }
  }
  entry$1.default = EntryFilter;
  return entry$1;
}
var error = {};
var hasRequiredError;
function requireError() {
  if (hasRequiredError)
    return error;
  hasRequiredError = 1;
  Object.defineProperty(error, "__esModule", { value: true });
  const utils2 = requireUtils$2();
  class ErrorFilter {
    constructor(_settings) {
      this._settings = _settings;
    }
    getFilter() {
      return (error2) => this._isNonFatalError(error2);
    }
    _isNonFatalError(error2) {
      return utils2.errno.isEnoentCodeError(error2) || this._settings.suppressErrors;
    }
  }
  error.default = ErrorFilter;
  return error;
}
var entry = {};
var hasRequiredEntry;
function requireEntry() {
  if (hasRequiredEntry)
    return entry;
  hasRequiredEntry = 1;
  Object.defineProperty(entry, "__esModule", { value: true });
  const utils2 = requireUtils$2();
  class EntryTransformer {
    constructor(_settings) {
      this._settings = _settings;
    }
    getTransformer() {
      return (entry2) => this._transform(entry2);
    }
    _transform(entry2) {
      let filepath = entry2.path;
      if (this._settings.absolute) {
        filepath = utils2.path.makeAbsolute(this._settings.cwd, filepath);
        filepath = utils2.path.unixify(filepath);
      }
      if (this._settings.markDirectories && entry2.dirent.isDirectory()) {
        filepath += "/";
      }
      if (!this._settings.objectMode) {
        return filepath;
      }
      return Object.assign(Object.assign({}, entry2), { path: filepath });
    }
  }
  entry.default = EntryTransformer;
  return entry;
}
var hasRequiredProvider;
function requireProvider() {
  if (hasRequiredProvider)
    return provider;
  hasRequiredProvider = 1;
  Object.defineProperty(provider, "__esModule", { value: true });
  const path2 = require$$0$3;
  const deep_1 = requireDeep();
  const entry_1 = requireEntry$1();
  const error_1 = requireError();
  const entry_2 = requireEntry();
  class Provider {
    constructor(_settings) {
      this._settings = _settings;
      this.errorFilter = new error_1.default(this._settings);
      this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
      this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
      this.entryTransformer = new entry_2.default(this._settings);
    }
    _getRootDirectory(task) {
      return path2.resolve(this._settings.cwd, task.base);
    }
    _getReaderOptions(task) {
      const basePath = task.base === "." ? "" : task.base;
      return {
        basePath,
        pathSegmentSeparator: "/",
        concurrency: this._settings.concurrency,
        deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
        entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
        errorFilter: this.errorFilter.getFilter(),
        followSymbolicLinks: this._settings.followSymbolicLinks,
        fs: this._settings.fs,
        stats: this._settings.stats,
        throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
        transform: this.entryTransformer.getTransformer()
      };
    }
    _getMicromatchOptions() {
      return {
        dot: this._settings.dot,
        matchBase: this._settings.baseNameMatch,
        nobrace: !this._settings.braceExpansion,
        nocase: !this._settings.caseSensitiveMatch,
        noext: !this._settings.extglob,
        noglobstar: !this._settings.globstar,
        posix: true,
        strictSlashes: false
      };
    }
  }
  provider.default = Provider;
  return provider;
}
var hasRequiredAsync;
function requireAsync() {
  if (hasRequiredAsync)
    return async$5;
  hasRequiredAsync = 1;
  Object.defineProperty(async$5, "__esModule", { value: true });
  const async_1 = requireAsync$1();
  const provider_1 = requireProvider();
  class ProviderAsync extends provider_1.default {
    constructor() {
      super(...arguments);
      this._reader = new async_1.default(this._settings);
    }
    async read(task) {
      const root = this._getRootDirectory(task);
      const options = this._getReaderOptions(task);
      const entries = await this.api(root, task, options);
      return entries.map((entry2) => options.transform(entry2));
    }
    api(root, task, options) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options);
      }
      return this._reader.static(task.patterns, options);
    }
  }
  async$5.default = ProviderAsync;
  return async$5;
}
var stream = {};
var hasRequiredStream;
function requireStream() {
  if (hasRequiredStream)
    return stream;
  hasRequiredStream = 1;
  Object.defineProperty(stream, "__esModule", { value: true });
  const stream_1 = Stream;
  const stream_2 = requireStream$1();
  const provider_1 = requireProvider();
  class ProviderStream extends provider_1.default {
    constructor() {
      super(...arguments);
      this._reader = new stream_2.default(this._settings);
    }
    read(task) {
      const root = this._getRootDirectory(task);
      const options = this._getReaderOptions(task);
      const source = this.api(root, task, options);
      const destination = new stream_1.Readable({ objectMode: true, read: () => {
      } });
      source.once("error", (error2) => destination.emit("error", error2)).on("data", (entry2) => destination.emit("data", options.transform(entry2))).once("end", () => destination.emit("end"));
      destination.once("close", () => source.destroy());
      return destination;
    }
    api(root, task, options) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options);
      }
      return this._reader.static(task.patterns, options);
    }
  }
  stream.default = ProviderStream;
  return stream;
}
var sync$1 = {};
var sync = {};
var hasRequiredSync$1;
function requireSync$1() {
  if (hasRequiredSync$1)
    return sync;
  hasRequiredSync$1 = 1;
  Object.defineProperty(sync, "__esModule", { value: true });
  const fsStat2 = requireOut$3();
  const fsWalk = requireOut$1();
  const reader_1 = requireReader();
  class ReaderSync extends reader_1.default {
    constructor() {
      super(...arguments);
      this._walkSync = fsWalk.walkSync;
      this._statSync = fsStat2.statSync;
    }
    dynamic(root, options) {
      return this._walkSync(root, options);
    }
    static(patterns, options) {
      const entries = [];
      for (const pattern2 of patterns) {
        const filepath = this._getFullEntryPath(pattern2);
        const entry2 = this._getEntry(filepath, pattern2, options);
        if (entry2 === null || !options.entryFilter(entry2)) {
          continue;
        }
        entries.push(entry2);
      }
      return entries;
    }
    _getEntry(filepath, pattern2, options) {
      try {
        const stats = this._getStat(filepath);
        return this._makeEntry(stats, pattern2);
      } catch (error2) {
        if (options.errorFilter(error2)) {
          return null;
        }
        throw error2;
      }
    }
    _getStat(filepath) {
      return this._statSync(filepath, this._fsStatSettings);
    }
  }
  sync.default = ReaderSync;
  return sync;
}
var hasRequiredSync;
function requireSync() {
  if (hasRequiredSync)
    return sync$1;
  hasRequiredSync = 1;
  Object.defineProperty(sync$1, "__esModule", { value: true });
  const sync_1 = requireSync$1();
  const provider_1 = requireProvider();
  class ProviderSync extends provider_1.default {
    constructor() {
      super(...arguments);
      this._reader = new sync_1.default(this._settings);
    }
    read(task) {
      const root = this._getRootDirectory(task);
      const options = this._getReaderOptions(task);
      const entries = this.api(root, task, options);
      return entries.map(options.transform);
    }
    api(root, task, options) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options);
      }
      return this._reader.static(task.patterns, options);
    }
  }
  sync$1.default = ProviderSync;
  return sync$1;
}
var settings = {};
var hasRequiredSettings;
function requireSettings() {
  if (hasRequiredSettings)
    return settings;
  hasRequiredSettings = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
    const fs2 = require$$0$1;
    const os2 = require$$0;
    const CPU_COUNT = Math.max(os2.cpus().length, 1);
    exports.DEFAULT_FILE_SYSTEM_ADAPTER = {
      lstat: fs2.lstat,
      lstatSync: fs2.lstatSync,
      stat: fs2.stat,
      statSync: fs2.statSync,
      readdir: fs2.readdir,
      readdirSync: fs2.readdirSync
    };
    class Settings {
      constructor(_options = {}) {
        this._options = _options;
        this.absolute = this._getValue(this._options.absolute, false);
        this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
        this.braceExpansion = this._getValue(this._options.braceExpansion, true);
        this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
        this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
        this.cwd = this._getValue(this._options.cwd, process.cwd());
        this.deep = this._getValue(this._options.deep, Infinity);
        this.dot = this._getValue(this._options.dot, false);
        this.extglob = this._getValue(this._options.extglob, true);
        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
        this.fs = this._getFileSystemMethods(this._options.fs);
        this.globstar = this._getValue(this._options.globstar, true);
        this.ignore = this._getValue(this._options.ignore, []);
        this.markDirectories = this._getValue(this._options.markDirectories, false);
        this.objectMode = this._getValue(this._options.objectMode, false);
        this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
        this.onlyFiles = this._getValue(this._options.onlyFiles, true);
        this.stats = this._getValue(this._options.stats, false);
        this.suppressErrors = this._getValue(this._options.suppressErrors, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
        this.unique = this._getValue(this._options.unique, true);
        if (this.onlyDirectories) {
          this.onlyFiles = false;
        }
        if (this.stats) {
          this.objectMode = true;
        }
      }
      _getValue(option, value2) {
        return option === void 0 ? value2 : option;
      }
      _getFileSystemMethods(methods = {}) {
        return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
      }
    }
    exports.default = Settings;
  })(settings);
  return settings;
}
var out;
var hasRequiredOut;
function requireOut() {
  if (hasRequiredOut)
    return out;
  hasRequiredOut = 1;
  const taskManager = requireTasks();
  const async_1 = requireAsync();
  const stream_1 = requireStream();
  const sync_1 = requireSync();
  const settings_1 = requireSettings();
  const utils2 = requireUtils$2();
  async function FastGlob(source, options) {
    assertPatternsInput(source);
    const works = getWorks(source, async_1.default, options);
    const result = await Promise.all(works);
    return utils2.array.flatten(result);
  }
  (function(FastGlob2) {
    FastGlob2.glob = FastGlob2;
    FastGlob2.globSync = sync2;
    FastGlob2.globStream = stream2;
    FastGlob2.async = FastGlob2;
    function sync2(source, options) {
      assertPatternsInput(source);
      const works = getWorks(source, sync_1.default, options);
      return utils2.array.flatten(works);
    }
    FastGlob2.sync = sync2;
    function stream2(source, options) {
      assertPatternsInput(source);
      const works = getWorks(source, stream_1.default, options);
      return utils2.stream.merge(works);
    }
    FastGlob2.stream = stream2;
    function generateTasks(source, options) {
      assertPatternsInput(source);
      const patterns = [].concat(source);
      const settings2 = new settings_1.default(options);
      return taskManager.generate(patterns, settings2);
    }
    FastGlob2.generateTasks = generateTasks;
    function isDynamicPattern(source, options) {
      assertPatternsInput(source);
      const settings2 = new settings_1.default(options);
      return utils2.pattern.isDynamicPattern(source, settings2);
    }
    FastGlob2.isDynamicPattern = isDynamicPattern;
    function escapePath(source) {
      assertPatternsInput(source);
      return utils2.path.escape(source);
    }
    FastGlob2.escapePath = escapePath;
    function convertPathToPattern(source) {
      assertPatternsInput(source);
      return utils2.path.convertPathToPattern(source);
    }
    FastGlob2.convertPathToPattern = convertPathToPattern;
    (function(posix) {
      function escapePath2(source) {
        assertPatternsInput(source);
        return utils2.path.escapePosixPath(source);
      }
      posix.escapePath = escapePath2;
      function convertPathToPattern2(source) {
        assertPatternsInput(source);
        return utils2.path.convertPosixPathToPattern(source);
      }
      posix.convertPathToPattern = convertPathToPattern2;
    })(FastGlob2.posix || (FastGlob2.posix = {}));
    (function(win322) {
      function escapePath2(source) {
        assertPatternsInput(source);
        return utils2.path.escapeWindowsPath(source);
      }
      win322.escapePath = escapePath2;
      function convertPathToPattern2(source) {
        assertPatternsInput(source);
        return utils2.path.convertWindowsPathToPattern(source);
      }
      win322.convertPathToPattern = convertPathToPattern2;
    })(FastGlob2.win32 || (FastGlob2.win32 = {}));
  })(FastGlob || (FastGlob = {}));
  function getWorks(source, _Provider, options) {
    const patterns = [].concat(source);
    const settings2 = new settings_1.default(options);
    const tasks2 = taskManager.generate(patterns, settings2);
    const provider2 = new _Provider(settings2);
    return tasks2.map(provider2.read, provider2);
  }
  function assertPatternsInput(input) {
    const source = [].concat(input);
    const isValidSource = source.every((item) => utils2.string.isString(item) && !utils2.string.isEmpty(item));
    if (!isValidSource) {
      throw new TypeError("Patterns must be a string (non empty) or an array of strings");
    }
  }
  out = FastGlob;
  return out;
}
var dirGlob = { exports: {} };
var pathType = {};
var hasRequiredPathType;
function requirePathType() {
  if (hasRequiredPathType)
    return pathType;
  hasRequiredPathType = 1;
  const { promisify: promisify2 } = require$$0$2;
  const fs2 = require$$0$1;
  async function isType(fsStatType, statsMethodName, filePath) {
    if (typeof filePath !== "string") {
      throw new TypeError(`Expected a string, got ${typeof filePath}`);
    }
    try {
      const stats = await promisify2(fs2[fsStatType])(filePath);
      return stats[statsMethodName]();
    } catch (error2) {
      if (error2.code === "ENOENT") {
        return false;
      }
      throw error2;
    }
  }
  function isTypeSync(fsStatType, statsMethodName, filePath) {
    if (typeof filePath !== "string") {
      throw new TypeError(`Expected a string, got ${typeof filePath}`);
    }
    try {
      return fs2[fsStatType](filePath)[statsMethodName]();
    } catch (error2) {
      if (error2.code === "ENOENT") {
        return false;
      }
      throw error2;
    }
  }
  pathType.isFile = isType.bind(null, "stat", "isFile");
  pathType.isDirectory = isType.bind(null, "stat", "isDirectory");
  pathType.isSymlink = isType.bind(null, "lstat", "isSymbolicLink");
  pathType.isFileSync = isTypeSync.bind(null, "statSync", "isFile");
  pathType.isDirectorySync = isTypeSync.bind(null, "statSync", "isDirectory");
  pathType.isSymlinkSync = isTypeSync.bind(null, "lstatSync", "isSymbolicLink");
  return pathType;
}
var hasRequiredDirGlob;
function requireDirGlob() {
  if (hasRequiredDirGlob)
    return dirGlob.exports;
  hasRequiredDirGlob = 1;
  const path2 = require$$0$3;
  const pathType2 = requirePathType();
  const getExtensions = (extensions) => extensions.length > 1 ? `{${extensions.join(",")}}` : extensions[0];
  const getPath = (filepath, cwd) => {
    const pth = filepath[0] === "!" ? filepath.slice(1) : filepath;
    return path2.isAbsolute(pth) ? pth : path2.join(cwd, pth);
  };
  const addExtensions = (file2, extensions) => {
    if (path2.extname(file2)) {
      return `**/${file2}`;
    }
    return `**/${file2}.${getExtensions(extensions)}`;
  };
  const getGlob = (directory, options) => {
    if (options.files && !Array.isArray(options.files)) {
      throw new TypeError(`Expected \`files\` to be of type \`Array\` but received type \`${typeof options.files}\``);
    }
    if (options.extensions && !Array.isArray(options.extensions)) {
      throw new TypeError(`Expected \`extensions\` to be of type \`Array\` but received type \`${typeof options.extensions}\``);
    }
    if (options.files && options.extensions) {
      return options.files.map((x) => path2.posix.join(directory, addExtensions(x, options.extensions)));
    }
    if (options.files) {
      return options.files.map((x) => path2.posix.join(directory, `**/${x}`));
    }
    if (options.extensions) {
      return [path2.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];
    }
    return [path2.posix.join(directory, "**")];
  };
  dirGlob.exports = async (input, options) => {
    options = {
      cwd: process.cwd(),
      ...options
    };
    if (typeof options.cwd !== "string") {
      throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``);
    }
    const globs = await Promise.all([].concat(input).map(async (x) => {
      const isDirectory = await pathType2.isDirectory(getPath(x, options.cwd));
      return isDirectory ? getGlob(x, options) : x;
    }));
    return [].concat.apply([], globs);
  };
  dirGlob.exports.sync = (input, options) => {
    options = {
      cwd: process.cwd(),
      ...options
    };
    if (typeof options.cwd !== "string") {
      throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``);
    }
    const globs = [].concat(input).map((x) => pathType2.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x);
    return [].concat.apply([], globs);
  };
  return dirGlob.exports;
}
var gitignore = { exports: {} };
var ignore;
var hasRequiredIgnore;
function requireIgnore() {
  if (hasRequiredIgnore)
    return ignore;
  hasRequiredIgnore = 1;
  function makeArray(subject) {
    return Array.isArray(subject) ? subject : [subject];
  }
  const EMPTY = "";
  const SPACE = " ";
  const ESCAPE = "\\";
  const REGEX_TEST_BLANK_LINE = /^\s+$/;
  const REGEX_INVALID_TRAILING_BACKSLASH = /(?:[^\\]|^)\\$/;
  const REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
  const REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/;
  const REGEX_SPLITALL_CRLF = /\r?\n/g;
  const REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;
  const SLASH = "/";
  let TMP_KEY_IGNORE = "node-ignore";
  if (typeof Symbol !== "undefined") {
    TMP_KEY_IGNORE = Symbol.for("node-ignore");
  }
  const KEY_IGNORE = TMP_KEY_IGNORE;
  const define = (object, key, value2) => Object.defineProperty(object, key, { value: value2 });
  const REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;
  const RETURN_FALSE = () => false;
  const sanitizeRange = (range) => range.replace(
    REGEX_REGEXP_RANGE,
    (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match : EMPTY
  );
  const cleanRangeBackSlash = (slashes) => {
    const { length } = slashes;
    return slashes.slice(0, length - length % 2);
  };
  const REPLACERS = [
    // > Trailing spaces are ignored unless they are quoted with backslash ("\")
    [
      // (a\ ) -> (a )
      // (a  ) -> (a)
      // (a \ ) -> (a  )
      /\\?\s+$/,
      (match) => match.indexOf("\\") === 0 ? SPACE : EMPTY
    ],
    // replace (\ ) with ' '
    [
      /\\\s/g,
      () => SPACE
    ],
    // Escape metacharacters
    // which is written down by users but means special for regular expressions.
    // > There are 12 characters with special meanings:
    // > - the backslash \,
    // > - the caret ^,
    // > - the dollar sign $,
    // > - the period or dot .,
    // > - the vertical bar or pipe symbol |,
    // > - the question mark ?,
    // > - the asterisk or star *,
    // > - the plus sign +,
    // > - the opening parenthesis (,
    // > - the closing parenthesis ),
    // > - and the opening square bracket [,
    // > - the opening curly brace {,
    // > These special characters are often called "metacharacters".
    [
      /[\\$.|*+(){^]/g,
      (match) => `\\${match}`
    ],
    [
      // > a question mark (?) matches a single character
      /(?!\\)\?/g,
      () => "[^/]"
    ],
    // leading slash
    [
      // > A leading slash matches the beginning of the pathname.
      // > For example, "/*.c" matches "cat-file.c" but not "mozilla-sha1/sha1.c".
      // A leading slash matches the beginning of the pathname
      /^\//,
      () => "^"
    ],
    // replace special metacharacter slash after the leading slash
    [
      /\//g,
      () => "\\/"
    ],
    [
      // > A leading "**" followed by a slash means match in all directories.
      // > For example, "**/foo" matches file or directory "foo" anywhere,
      // > the same as pattern "foo".
      // > "**/foo/bar" matches file or directory "bar" anywhere that is directly
      // >   under directory "foo".
      // Notice that the '*'s have been replaced as '\\*'
      /^\^*\\\*\\\*\\\//,
      // '**/foo' <-> 'foo'
      () => "^(?:.*\\/)?"
    ],
    // starting
    [
      // there will be no leading '/'
      //   (which has been replaced by section "leading slash")
      // If starts with '**', adding a '^' to the regular expression also works
      /^(?=[^^])/,
      function startingReplacer() {
        return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
      }
    ],
    // two globstars
    [
      // Use lookahead assertions so that we could match more than one `'/**'`
      /\\\/\\\*\\\*(?=\\\/|$)/g,
      // Zero, one or several directories
      // should not use '*', or it will be replaced by the next replacer
      // Check if it is not the last `'/**'`
      (_, index2, str2) => index2 + 6 < str2.length ? "(?:\\/[^\\/]+)*" : "\\/.+"
    ],
    // normal intermediate wildcards
    [
      // Never replace escaped '*'
      // ignore rule '\*' will match the path '*'
      // 'abc.*/' -> go
      // 'abc.*'  -> skip this rule,
      //    coz trailing single wildcard will be handed by [trailing wildcard]
      /(^|[^\\]+)(\\\*)+(?=.+)/g,
      // '*.js' matches '.js'
      // '*.js' doesn't match 'abc'
      (_, p1, p2) => {
        const unescaped = p2.replace(/\\\*/g, "[^\\/]*");
        return p1 + unescaped;
      }
    ],
    [
      // unescape, revert step 3 except for back slash
      // For example, if a user escape a '\\*',
      // after step 3, the result will be '\\\\\\*'
      /\\\\\\(?=[$.|*+(){^])/g,
      () => ESCAPE
    ],
    [
      // '\\\\' -> '\\'
      /\\\\/g,
      () => ESCAPE
    ],
    [
      // > The range notation, e.g. [a-zA-Z],
      // > can be used to match one of the characters in a range.
      // `\` is escaped by step 3
      /(\\)?\[([^\]/]*?)(\\*)($|\])/g,
      (match, leadEscape, range, endEscape, close2) => leadEscape === ESCAPE ? `\\[${range}${cleanRangeBackSlash(endEscape)}${close2}` : close2 === "]" ? endEscape.length % 2 === 0 ? `[${sanitizeRange(range)}${endEscape}]` : "[]" : "[]"
    ],
    // ending
    [
      // 'js' will not match 'js.'
      // 'ab' will not match 'abc'
      /(?:[^*])$/,
      // WTF!
      // https://git-scm.com/docs/gitignore
      // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)
      // which re-fixes #24, #38
      // > If there is a separator at the end of the pattern then the pattern
      // > will only match directories, otherwise the pattern can match both
      // > files and directories.
      // 'js*' will not match 'a.js'
      // 'js/' will not match 'a.js'
      // 'js' will match 'a.js' and 'a.js/'
      (match) => /\/$/.test(match) ? `${match}$` : `${match}(?=$|\\/$)`
    ],
    // trailing wildcard
    [
      /(\^|\\\/)?\\\*$/,
      (_, p1) => {
        const prefix = p1 ? `${p1}[^/]+` : "[^/]*";
        return `${prefix}(?=$|\\/$)`;
      }
    ]
  ];
  const regexCache = /* @__PURE__ */ Object.create(null);
  const makeRegex = (pattern2, ignoreCase) => {
    let source = regexCache[pattern2];
    if (!source) {
      source = REPLACERS.reduce(
        (prev, current) => prev.replace(current[0], current[1].bind(pattern2)),
        pattern2
      );
      regexCache[pattern2] = source;
    }
    return ignoreCase ? new RegExp(source, "i") : new RegExp(source);
  };
  const isString = (subject) => typeof subject === "string";
  const checkPattern = (pattern2) => pattern2 && isString(pattern2) && !REGEX_TEST_BLANK_LINE.test(pattern2) && !REGEX_INVALID_TRAILING_BACKSLASH.test(pattern2) && pattern2.indexOf("#") !== 0;
  const splitPattern = (pattern2) => pattern2.split(REGEX_SPLITALL_CRLF);
  class IgnoreRule {
    constructor(origin, pattern2, negative, regex) {
      this.origin = origin;
      this.pattern = pattern2;
      this.negative = negative;
      this.regex = regex;
    }
  }
  const createRule = (pattern2, ignoreCase) => {
    const origin = pattern2;
    let negative = false;
    if (pattern2.indexOf("!") === 0) {
      negative = true;
      pattern2 = pattern2.substr(1);
    }
    pattern2 = pattern2.replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, "!").replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, "#");
    const regex = makeRegex(pattern2, ignoreCase);
    return new IgnoreRule(
      origin,
      pattern2,
      negative,
      regex
    );
  };
  const throwError2 = (message, Ctor) => {
    throw new Ctor(message);
  };
  const checkPath = (path2, originalPath, doThrow) => {
    if (!isString(path2)) {
      return doThrow(
        `path must be a string, but got \`${originalPath}\``,
        TypeError
      );
    }
    if (!path2) {
      return doThrow(`path must not be empty`, TypeError);
    }
    if (checkPath.isNotRelative(path2)) {
      const r = "`path.relative()`d";
      return doThrow(
        `path should be a ${r} string, but got "${originalPath}"`,
        RangeError
      );
    }
    return true;
  };
  const isNotRelative = (path2) => REGEX_TEST_INVALID_PATH.test(path2);
  checkPath.isNotRelative = isNotRelative;
  checkPath.convert = (p) => p;
  class Ignore {
    constructor({
      ignorecase = true,
      ignoreCase = ignorecase,
      allowRelativePaths = false
    } = {}) {
      define(this, KEY_IGNORE, true);
      this._rules = [];
      this._ignoreCase = ignoreCase;
      this._allowRelativePaths = allowRelativePaths;
      this._initCache();
    }
    _initCache() {
      this._ignoreCache = /* @__PURE__ */ Object.create(null);
      this._testCache = /* @__PURE__ */ Object.create(null);
    }
    _addPattern(pattern2) {
      if (pattern2 && pattern2[KEY_IGNORE]) {
        this._rules = this._rules.concat(pattern2._rules);
        this._added = true;
        return;
      }
      if (checkPattern(pattern2)) {
        const rule = createRule(pattern2, this._ignoreCase);
        this._added = true;
        this._rules.push(rule);
      }
    }
    // @param {Array<string> | string | Ignore} pattern
    add(pattern2) {
      this._added = false;
      makeArray(
        isString(pattern2) ? splitPattern(pattern2) : pattern2
      ).forEach(this._addPattern, this);
      if (this._added) {
        this._initCache();
      }
      return this;
    }
    // legacy
    addPattern(pattern2) {
      return this.add(pattern2);
    }
    //          |           ignored : unignored
    // negative |   0:0   |   0:1   |   1:0   |   1:1
    // -------- | ------- | ------- | ------- | --------
    //     0    |  TEST   |  TEST   |  SKIP   |    X
    //     1    |  TESTIF |  SKIP   |  TEST   |    X
    // - SKIP: always skip
    // - TEST: always test
    // - TESTIF: only test if checkUnignored
    // - X: that never happen
    // @param {boolean} whether should check if the path is unignored,
    //   setting `checkUnignored` to `false` could reduce additional
    //   path matching.
    // @returns {TestResult} true if a file is ignored
    _testOne(path2, checkUnignored) {
      let ignored = false;
      let unignored = false;
      this._rules.forEach((rule) => {
        const { negative } = rule;
        if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {
          return;
        }
        const matched = rule.regex.test(path2);
        if (matched) {
          ignored = !negative;
          unignored = negative;
        }
      });
      return {
        ignored,
        unignored
      };
    }
    // @returns {TestResult}
    _test(originalPath, cache, checkUnignored, slices) {
      const path2 = originalPath && checkPath.convert(originalPath);
      checkPath(
        path2,
        originalPath,
        this._allowRelativePaths ? RETURN_FALSE : throwError2
      );
      return this._t(path2, cache, checkUnignored, slices);
    }
    _t(path2, cache, checkUnignored, slices) {
      if (path2 in cache) {
        return cache[path2];
      }
      if (!slices) {
        slices = path2.split(SLASH);
      }
      slices.pop();
      if (!slices.length) {
        return cache[path2] = this._testOne(path2, checkUnignored);
      }
      const parent = this._t(
        slices.join(SLASH) + SLASH,
        cache,
        checkUnignored,
        slices
      );
      return cache[path2] = parent.ignored ? parent : this._testOne(path2, checkUnignored);
    }
    ignores(path2) {
      return this._test(path2, this._ignoreCache, false).ignored;
    }
    createFilter() {
      return (path2) => !this.ignores(path2);
    }
    filter(paths) {
      return makeArray(paths).filter(this.createFilter());
    }
    // @returns {TestResult}
    test(path2) {
      return this._test(path2, this._testCache, true);
    }
  }
  const factory = (options) => new Ignore(options);
  const isPathValid = (path2) => checkPath(path2 && checkPath.convert(path2), path2, RETURN_FALSE);
  factory.isPathValid = isPathValid;
  factory.default = factory;
  ignore = factory;
  if (
    // Detect `process` so that it can run in browsers.
    typeof process !== "undefined" && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === "win32")
  ) {
    const makePosix = (str2) => /^\\\\\?\\/.test(str2) || /["<>|\u0000-\u001F]+/u.test(str2) ? str2 : str2.replace(/\\/g, "/");
    checkPath.convert = makePosix;
    const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
    checkPath.isNotRelative = (path2) => REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path2) || isNotRelative(path2);
  }
  return ignore;
}
var slash;
var hasRequiredSlash;
function requireSlash() {
  if (hasRequiredSlash)
    return slash;
  hasRequiredSlash = 1;
  slash = (path2) => {
    const isExtendedLengthPath = /^\\\\\?\\/.test(path2);
    const hasNonAscii = /[^\u0000-\u0080]+/.test(path2);
    if (isExtendedLengthPath || hasNonAscii) {
      return path2;
    }
    return path2.replace(/\\/g, "/");
  };
  return slash;
}
var hasRequiredGitignore;
function requireGitignore() {
  if (hasRequiredGitignore)
    return gitignore.exports;
  hasRequiredGitignore = 1;
  const { promisify: promisify2 } = require$$0$2;
  const fs2 = require$$0$1;
  const path2 = require$$0$3;
  const fastGlob = requireOut();
  const gitIgnore = requireIgnore();
  const slash2 = requireSlash();
  const DEFAULT_IGNORE = [
    "**/node_modules/**",
    "**/flow-typed/**",
    "**/coverage/**",
    "**/.git"
  ];
  const readFileP = promisify2(fs2.readFile);
  const mapGitIgnorePatternTo = (base2) => (ignore2) => {
    if (ignore2.startsWith("!")) {
      return "!" + path2.posix.join(base2, ignore2.slice(1));
    }
    return path2.posix.join(base2, ignore2);
  };
  const parseGitIgnore = (content2, options) => {
    const base2 = slash2(path2.relative(options.cwd, path2.dirname(options.fileName)));
    return content2.split(/\r?\n/).filter(Boolean).filter((line) => !line.startsWith("#")).map(mapGitIgnorePatternTo(base2));
  };
  const reduceIgnore = (files) => {
    const ignores = gitIgnore();
    for (const file2 of files) {
      ignores.add(parseGitIgnore(file2.content, {
        cwd: file2.cwd,
        fileName: file2.filePath
      }));
    }
    return ignores;
  };
  const ensureAbsolutePathForCwd = (cwd, p) => {
    cwd = slash2(cwd);
    if (path2.isAbsolute(p)) {
      if (slash2(p).startsWith(cwd)) {
        return p;
      }
      throw new Error(`Path ${p} is not in cwd ${cwd}`);
    }
    return path2.join(cwd, p);
  };
  const getIsIgnoredPredecate = (ignores, cwd) => {
    return (p) => ignores.ignores(slash2(path2.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p))));
  };
  const getFile = async (file2, cwd) => {
    const filePath = path2.join(cwd, file2);
    const content2 = await readFileP(filePath, "utf8");
    return {
      cwd,
      filePath,
      content: content2
    };
  };
  const getFileSync = (file2, cwd) => {
    const filePath = path2.join(cwd, file2);
    const content2 = fs2.readFileSync(filePath, "utf8");
    return {
      cwd,
      filePath,
      content: content2
    };
  };
  const normalizeOptions = ({
    ignore: ignore2 = [],
    cwd = slash2(process.cwd())
  } = {}) => {
    return { ignore: ignore2, cwd };
  };
  gitignore.exports = async (options) => {
    options = normalizeOptions(options);
    const paths = await fastGlob("**/.gitignore", {
      ignore: DEFAULT_IGNORE.concat(options.ignore),
      cwd: options.cwd
    });
    const files = await Promise.all(paths.map((file2) => getFile(file2, options.cwd)));
    const ignores = reduceIgnore(files);
    return getIsIgnoredPredecate(ignores, options.cwd);
  };
  gitignore.exports.sync = (options) => {
    options = normalizeOptions(options);
    const paths = fastGlob.sync("**/.gitignore", {
      ignore: DEFAULT_IGNORE.concat(options.ignore),
      cwd: options.cwd
    });
    const files = paths.map((file2) => getFileSync(file2, options.cwd));
    const ignores = reduceIgnore(files);
    return getIsIgnoredPredecate(ignores, options.cwd);
  };
  return gitignore.exports;
}
var streamUtils;
var hasRequiredStreamUtils;
function requireStreamUtils() {
  if (hasRequiredStreamUtils)
    return streamUtils;
  hasRequiredStreamUtils = 1;
  const { Transform } = Stream;
  class ObjectTransform extends Transform {
    constructor() {
      super({
        objectMode: true
      });
    }
  }
  class FilterStream extends ObjectTransform {
    constructor(filter) {
      super();
      this._filter = filter;
    }
    _transform(data, encoding, callback) {
      if (this._filter(data)) {
        this.push(data);
      }
      callback();
    }
  }
  class UniqueStream extends ObjectTransform {
    constructor() {
      super();
      this._pushed = /* @__PURE__ */ new Set();
    }
    _transform(data, encoding, callback) {
      if (!this._pushed.has(data)) {
        this.push(data);
        this._pushed.add(data);
      }
      callback();
    }
  }
  streamUtils = {
    FilterStream,
    UniqueStream
  };
  return streamUtils;
}
var hasRequiredGlobby;
function requireGlobby() {
  if (hasRequiredGlobby)
    return globby.exports;
  hasRequiredGlobby = 1;
  const fs2 = require$$0$1;
  const arrayUnion2 = requireArrayUnion();
  const merge2 = requireMerge2();
  const fastGlob = requireOut();
  const dirGlob2 = requireDirGlob();
  const gitignore2 = requireGitignore();
  const { FilterStream, UniqueStream } = requireStreamUtils();
  const DEFAULT_FILTER = () => false;
  const isNegative = (pattern2) => pattern2[0] === "!";
  const assertPatternsInput = (patterns) => {
    if (!patterns.every((pattern2) => typeof pattern2 === "string")) {
      throw new TypeError("Patterns must be a string or an array of strings");
    }
  };
  const checkCwdOption = (options = {}) => {
    if (!options.cwd) {
      return;
    }
    let stat2;
    try {
      stat2 = fs2.statSync(options.cwd);
    } catch {
      return;
    }
    if (!stat2.isDirectory()) {
      throw new Error("The `cwd` option must be a path to a directory");
    }
  };
  const getPathString = (p) => p.stats instanceof fs2.Stats ? p.path : p;
  const generateGlobTasks = (patterns, taskOptions) => {
    patterns = arrayUnion2([].concat(patterns));
    assertPatternsInput(patterns);
    checkCwdOption(taskOptions);
    const globTasks = [];
    taskOptions = {
      ignore: [],
      expandDirectories: true,
      ...taskOptions
    };
    for (const [index2, pattern2] of patterns.entries()) {
      if (isNegative(pattern2)) {
        continue;
      }
      const ignore2 = patterns.slice(index2).filter((pattern3) => isNegative(pattern3)).map((pattern3) => pattern3.slice(1));
      const options = {
        ...taskOptions,
        ignore: taskOptions.ignore.concat(ignore2)
      };
      globTasks.push({ pattern: pattern2, options });
    }
    return globTasks;
  };
  const globDirs = (task, fn) => {
    let options = {};
    if (task.options.cwd) {
      options.cwd = task.options.cwd;
    }
    if (Array.isArray(task.options.expandDirectories)) {
      options = {
        ...options,
        files: task.options.expandDirectories
      };
    } else if (typeof task.options.expandDirectories === "object") {
      options = {
        ...options,
        ...task.options.expandDirectories
      };
    }
    return fn(task.pattern, options);
  };
  const getPattern = (task, fn) => task.options.expandDirectories ? globDirs(task, fn) : [task.pattern];
  const getFilterSync = (options) => {
    return options && options.gitignore ? gitignore2.sync({ cwd: options.cwd, ignore: options.ignore }) : DEFAULT_FILTER;
  };
  const globToTask = (task) => (glob) => {
    const { options } = task;
    if (options.ignore && Array.isArray(options.ignore) && options.expandDirectories) {
      options.ignore = dirGlob2.sync(options.ignore);
    }
    return {
      pattern: glob,
      options
    };
  };
  globby.exports = async (patterns, options) => {
    const globTasks = generateGlobTasks(patterns, options);
    const getFilter = async () => {
      return options && options.gitignore ? gitignore2({ cwd: options.cwd, ignore: options.ignore }) : DEFAULT_FILTER;
    };
    const getTasks = async () => {
      const tasks3 = await Promise.all(globTasks.map(async (task) => {
        const globs = await getPattern(task, dirGlob2);
        return Promise.all(globs.map(globToTask(task)));
      }));
      return arrayUnion2(...tasks3);
    };
    const [filter, tasks2] = await Promise.all([getFilter(), getTasks()]);
    const paths = await Promise.all(tasks2.map((task) => fastGlob(task.pattern, task.options)));
    return arrayUnion2(...paths).filter((path_) => !filter(getPathString(path_)));
  };
  globby.exports.sync = (patterns, options) => {
    const globTasks = generateGlobTasks(patterns, options);
    const tasks2 = [];
    for (const task of globTasks) {
      const newTask = getPattern(task, dirGlob2.sync).map(globToTask(task));
      tasks2.push(...newTask);
    }
    const filter = getFilterSync(options);
    let matches = [];
    for (const task of tasks2) {
      matches = arrayUnion2(matches, fastGlob.sync(task.pattern, task.options));
    }
    return matches.filter((path_) => !filter(path_));
  };
  globby.exports.stream = (patterns, options) => {
    const globTasks = generateGlobTasks(patterns, options);
    const tasks2 = [];
    for (const task of globTasks) {
      const newTask = getPattern(task, dirGlob2.sync).map(globToTask(task));
      tasks2.push(...newTask);
    }
    const filter = getFilterSync(options);
    const filterStream = new FilterStream((p) => !filter(p));
    const uniqueStream = new UniqueStream();
    return merge2(tasks2.map((task) => fastGlob.stream(task.pattern, task.options))).pipe(filterStream).pipe(uniqueStream);
  };
  globby.exports.generateGlobTasks = generateGlobTasks;
  globby.exports.hasMagic = (patterns, options) => [].concat(patterns).some((pattern2) => fastGlob.isDynamicPattern(pattern2, options));
  globby.exports.gitignore = gitignore2;
  return globby.exports;
}
var readYamlFile = { exports: {} };
var pify;
var hasRequiredPify;
function requirePify() {
  if (hasRequiredPify)
    return pify;
  hasRequiredPify = 1;
  const processFn = (fn, options) => function(...args) {
    const P = options.promiseModule;
    return new P((resolve, reject) => {
      if (options.multiArgs) {
        args.push((...result) => {
          if (options.errorFirst) {
            if (result[0]) {
              reject(result);
            } else {
              result.shift();
              resolve(result);
            }
          } else {
            resolve(result);
          }
        });
      } else if (options.errorFirst) {
        args.push((error2, result) => {
          if (error2) {
            reject(error2);
          } else {
            resolve(result);
          }
        });
      } else {
        args.push(resolve);
      }
      fn.apply(this, args);
    });
  };
  pify = (input, options) => {
    options = Object.assign({
      exclude: [/.+(Sync|Stream)$/],
      errorFirst: true,
      promiseModule: Promise
    }, options);
    const objType = typeof input;
    if (!(input !== null && (objType === "object" || objType === "function"))) {
      throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${input === null ? "null" : objType}\``);
    }
    const filter = (key) => {
      const match = (pattern2) => typeof pattern2 === "string" ? key === pattern2 : pattern2.test(key);
      return options.include ? options.include.some(match) : !options.exclude.some(match);
    };
    let ret;
    if (objType === "function") {
      ret = function(...args) {
        return options.excludeMain ? input(...args) : processFn(input, options).apply(this, args);
      };
    } else {
      ret = Object.create(Object.getPrototypeOf(input));
    }
    for (const key in input) {
      const property = input[key];
      ret[key] = typeof property === "function" && filter(key) ? processFn(property, options) : property;
    }
    return ret;
  };
  return pify;
}
var stripBom;
var hasRequiredStripBom;
function requireStripBom() {
  if (hasRequiredStripBom)
    return stripBom;
  hasRequiredStripBom = 1;
  stripBom = (x) => {
    if (typeof x !== "string") {
      throw new TypeError("Expected a string, got " + typeof x);
    }
    if (x.charCodeAt(0) === 65279) {
      return x.slice(1);
    }
    return x;
  };
  return stripBom;
}
var jsYaml$2 = {};
var loader$1 = {};
var common$1 = {};
var hasRequiredCommon;
function requireCommon() {
  if (hasRequiredCommon)
    return common$1;
  hasRequiredCommon = 1;
  function isNothing2(subject) {
    return typeof subject === "undefined" || subject === null;
  }
  function isObject2(subject) {
    return typeof subject === "object" && subject !== null;
  }
  function toArray2(sequence) {
    if (Array.isArray(sequence))
      return sequence;
    else if (isNothing2(sequence))
      return [];
    return [sequence];
  }
  function extend4(target, source) {
    var index2, length, key, sourceKeys;
    if (source) {
      sourceKeys = Object.keys(source);
      for (index2 = 0, length = sourceKeys.length; index2 < length; index2 += 1) {
        key = sourceKeys[index2];
        target[key] = source[key];
      }
    }
    return target;
  }
  function repeat2(string2, count) {
    var result = "", cycle;
    for (cycle = 0; cycle < count; cycle += 1) {
      result += string2;
    }
    return result;
  }
  function isNegativeZero2(number) {
    return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
  }
  common$1.isNothing = isNothing2;
  common$1.isObject = isObject2;
  common$1.toArray = toArray2;
  common$1.repeat = repeat2;
  common$1.isNegativeZero = isNegativeZero2;
  common$1.extend = extend4;
  return common$1;
}
var exception$1;
var hasRequiredException;
function requireException() {
  if (hasRequiredException)
    return exception$1;
  hasRequiredException = 1;
  function YAMLException2(reason, mark2) {
    Error.call(this);
    this.name = "YAMLException";
    this.reason = reason;
    this.mark = mark2;
    this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : "");
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error().stack || "";
    }
  }
  YAMLException2.prototype = Object.create(Error.prototype);
  YAMLException2.prototype.constructor = YAMLException2;
  YAMLException2.prototype.toString = function toString3(compact) {
    var result = this.name + ": ";
    result += this.reason || "(unknown reason)";
    if (!compact && this.mark) {
      result += " " + this.mark.toString();
    }
    return result;
  };
  exception$1 = YAMLException2;
  return exception$1;
}
var mark;
var hasRequiredMark;
function requireMark() {
  if (hasRequiredMark)
    return mark;
  hasRequiredMark = 1;
  var common2 = requireCommon();
  function Mark(name, buffer2, position2, line, column) {
    this.name = name;
    this.buffer = buffer2;
    this.position = position2;
    this.line = line;
    this.column = column;
  }
  Mark.prototype.getSnippet = function getSnippet(indent2, maxLength) {
    var head, start, tail, end, snippet2;
    if (!this.buffer)
      return null;
    indent2 = indent2 || 4;
    maxLength = maxLength || 75;
    head = "";
    start = this.position;
    while (start > 0 && "\0\r\n\u2028\u2029".indexOf(this.buffer.charAt(start - 1)) === -1) {
      start -= 1;
      if (this.position - start > maxLength / 2 - 1) {
        head = " ... ";
        start += 5;
        break;
      }
    }
    tail = "";
    end = this.position;
    while (end < this.buffer.length && "\0\r\n\u2028\u2029".indexOf(this.buffer.charAt(end)) === -1) {
      end += 1;
      if (end - this.position > maxLength / 2 - 1) {
        tail = " ... ";
        end -= 5;
        break;
      }
    }
    snippet2 = this.buffer.slice(start, end);
    return common2.repeat(" ", indent2) + head + snippet2 + tail + "\n" + common2.repeat(" ", indent2 + this.position - start + head.length) + "^";
  };
  Mark.prototype.toString = function toString3(compact) {
    var snippet2, where = "";
    if (this.name) {
      where += 'in "' + this.name + '" ';
    }
    where += "at line " + (this.line + 1) + ", column " + (this.column + 1);
    if (!compact) {
      snippet2 = this.getSnippet();
      if (snippet2) {
        where += ":\n" + snippet2;
      }
    }
    return where;
  };
  mark = Mark;
  return mark;
}
var type$1;
var hasRequiredType;
function requireType() {
  if (hasRequiredType)
    return type$1;
  hasRequiredType = 1;
  var YAMLException2 = requireException();
  var TYPE_CONSTRUCTOR_OPTIONS2 = [
    "kind",
    "resolve",
    "construct",
    "instanceOf",
    "predicate",
    "represent",
    "defaultStyle",
    "styleAliases"
  ];
  var YAML_NODE_KINDS2 = [
    "scalar",
    "sequence",
    "mapping"
  ];
  function compileStyleAliases2(map2) {
    var result = {};
    if (map2 !== null) {
      Object.keys(map2).forEach(function(style) {
        map2[style].forEach(function(alias) {
          result[String(alias)] = style;
        });
      });
    }
    return result;
  }
  function Type2(tag, options) {
    options = options || {};
    Object.keys(options).forEach(function(name) {
      if (TYPE_CONSTRUCTOR_OPTIONS2.indexOf(name) === -1) {
        throw new YAMLException2('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
      }
    });
    this.tag = tag;
    this.kind = options["kind"] || null;
    this.resolve = options["resolve"] || function() {
      return true;
    };
    this.construct = options["construct"] || function(data) {
      return data;
    };
    this.instanceOf = options["instanceOf"] || null;
    this.predicate = options["predicate"] || null;
    this.represent = options["represent"] || null;
    this.defaultStyle = options["defaultStyle"] || null;
    this.styleAliases = compileStyleAliases2(options["styleAliases"] || null);
    if (YAML_NODE_KINDS2.indexOf(this.kind) === -1) {
      throw new YAMLException2('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
    }
  }
  type$1 = Type2;
  return type$1;
}
var schema$1;
var hasRequiredSchema;
function requireSchema() {
  if (hasRequiredSchema)
    return schema$1;
  hasRequiredSchema = 1;
  var common2 = requireCommon();
  var YAMLException2 = requireException();
  var Type2 = requireType();
  function compileList2(schema2, name, result) {
    var exclude = [];
    schema2.include.forEach(function(includedSchema) {
      result = compileList2(includedSchema, name, result);
    });
    schema2[name].forEach(function(currentType) {
      result.forEach(function(previousType, previousIndex) {
        if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
          exclude.push(previousIndex);
        }
      });
      result.push(currentType);
    });
    return result.filter(function(type2, index2) {
      return exclude.indexOf(index2) === -1;
    });
  }
  function compileMap2() {
    var result = {
      scalar: {},
      sequence: {},
      mapping: {},
      fallback: {}
    }, index2, length;
    function collectType(type2) {
      result[type2.kind][type2.tag] = result["fallback"][type2.tag] = type2;
    }
    for (index2 = 0, length = arguments.length; index2 < length; index2 += 1) {
      arguments[index2].forEach(collectType);
    }
    return result;
  }
  function Schema2(definition2) {
    this.include = definition2.include || [];
    this.implicit = definition2.implicit || [];
    this.explicit = definition2.explicit || [];
    this.implicit.forEach(function(type2) {
      if (type2.loadKind && type2.loadKind !== "scalar") {
        throw new YAMLException2("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
      }
    });
    this.compiledImplicit = compileList2(this, "implicit", []);
    this.compiledExplicit = compileList2(this, "explicit", []);
    this.compiledTypeMap = compileMap2(this.compiledImplicit, this.compiledExplicit);
  }
  Schema2.DEFAULT = null;
  Schema2.create = function createSchema() {
    var schemas, types2;
    switch (arguments.length) {
      case 1:
        schemas = Schema2.DEFAULT;
        types2 = arguments[0];
        break;
      case 2:
        schemas = arguments[0];
        types2 = arguments[1];
        break;
      default:
        throw new YAMLException2("Wrong number of arguments for Schema.create function");
    }
    schemas = common2.toArray(schemas);
    types2 = common2.toArray(types2);
    if (!schemas.every(function(schema2) {
      return schema2 instanceof Schema2;
    })) {
      throw new YAMLException2("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
    }
    if (!types2.every(function(type2) {
      return type2 instanceof Type2;
    })) {
      throw new YAMLException2("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
    return new Schema2({
      include: schemas,
      explicit: types2
    });
  };
  schema$1 = Schema2;
  return schema$1;
}
var str$1;
var hasRequiredStr;
function requireStr() {
  if (hasRequiredStr)
    return str$1;
  hasRequiredStr = 1;
  var Type2 = requireType();
  str$1 = new Type2("tag:yaml.org,2002:str", {
    kind: "scalar",
    construct: function(data) {
      return data !== null ? data : "";
    }
  });
  return str$1;
}
var seq$1;
var hasRequiredSeq;
function requireSeq() {
  if (hasRequiredSeq)
    return seq$1;
  hasRequiredSeq = 1;
  var Type2 = requireType();
  seq$1 = new Type2("tag:yaml.org,2002:seq", {
    kind: "sequence",
    construct: function(data) {
      return data !== null ? data : [];
    }
  });
  return seq$1;
}
var map$2;
var hasRequiredMap;
function requireMap() {
  if (hasRequiredMap)
    return map$2;
  hasRequiredMap = 1;
  var Type2 = requireType();
  map$2 = new Type2("tag:yaml.org,2002:map", {
    kind: "mapping",
    construct: function(data) {
      return data !== null ? data : {};
    }
  });
  return map$2;
}
var failsafe$1;
var hasRequiredFailsafe;
function requireFailsafe() {
  if (hasRequiredFailsafe)
    return failsafe$1;
  hasRequiredFailsafe = 1;
  var Schema2 = requireSchema();
  failsafe$1 = new Schema2({
    explicit: [
      requireStr(),
      requireSeq(),
      requireMap()
    ]
  });
  return failsafe$1;
}
var _null$1;
var hasRequired_null;
function require_null() {
  if (hasRequired_null)
    return _null$1;
  hasRequired_null = 1;
  var Type2 = requireType();
  function resolveYamlNull2(data) {
    if (data === null)
      return true;
    var max = data.length;
    return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
  }
  function constructYamlNull2() {
    return null;
  }
  function isNull2(object) {
    return object === null;
  }
  _null$1 = new Type2("tag:yaml.org,2002:null", {
    kind: "scalar",
    resolve: resolveYamlNull2,
    construct: constructYamlNull2,
    predicate: isNull2,
    represent: {
      canonical: function() {
        return "~";
      },
      lowercase: function() {
        return "null";
      },
      uppercase: function() {
        return "NULL";
      },
      camelcase: function() {
        return "Null";
      }
    },
    defaultStyle: "lowercase"
  });
  return _null$1;
}
var bool$1;
var hasRequiredBool;
function requireBool() {
  if (hasRequiredBool)
    return bool$1;
  hasRequiredBool = 1;
  var Type2 = requireType();
  function resolveYamlBoolean2(data) {
    if (data === null)
      return false;
    var max = data.length;
    return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
  }
  function constructYamlBoolean2(data) {
    return data === "true" || data === "True" || data === "TRUE";
  }
  function isBoolean2(object) {
    return Object.prototype.toString.call(object) === "[object Boolean]";
  }
  bool$1 = new Type2("tag:yaml.org,2002:bool", {
    kind: "scalar",
    resolve: resolveYamlBoolean2,
    construct: constructYamlBoolean2,
    predicate: isBoolean2,
    represent: {
      lowercase: function(object) {
        return object ? "true" : "false";
      },
      uppercase: function(object) {
        return object ? "TRUE" : "FALSE";
      },
      camelcase: function(object) {
        return object ? "True" : "False";
      }
    },
    defaultStyle: "lowercase"
  });
  return bool$1;
}
var int$1;
var hasRequiredInt;
function requireInt() {
  if (hasRequiredInt)
    return int$1;
  hasRequiredInt = 1;
  var common2 = requireCommon();
  var Type2 = requireType();
  function isHexCode2(c) {
    return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
  }
  function isOctCode2(c) {
    return 48 <= c && c <= 55;
  }
  function isDecCode2(c) {
    return 48 <= c && c <= 57;
  }
  function resolveYamlInteger2(data) {
    if (data === null)
      return false;
    var max = data.length, index2 = 0, hasDigits = false, ch;
    if (!max)
      return false;
    ch = data[index2];
    if (ch === "-" || ch === "+") {
      ch = data[++index2];
    }
    if (ch === "0") {
      if (index2 + 1 === max)
        return true;
      ch = data[++index2];
      if (ch === "b") {
        index2++;
        for (; index2 < max; index2++) {
          ch = data[index2];
          if (ch === "_")
            continue;
          if (ch !== "0" && ch !== "1")
            return false;
          hasDigits = true;
        }
        return hasDigits && ch !== "_";
      }
      if (ch === "x") {
        index2++;
        for (; index2 < max; index2++) {
          ch = data[index2];
          if (ch === "_")
            continue;
          if (!isHexCode2(data.charCodeAt(index2)))
            return false;
          hasDigits = true;
        }
        return hasDigits && ch !== "_";
      }
      for (; index2 < max; index2++) {
        ch = data[index2];
        if (ch === "_")
          continue;
        if (!isOctCode2(data.charCodeAt(index2)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "_")
      return false;
    for (; index2 < max; index2++) {
      ch = data[index2];
      if (ch === "_")
        continue;
      if (ch === ":")
        break;
      if (!isDecCode2(data.charCodeAt(index2))) {
        return false;
      }
      hasDigits = true;
    }
    if (!hasDigits || ch === "_")
      return false;
    if (ch !== ":")
      return true;
    return /^(:[0-5]?[0-9])+$/.test(data.slice(index2));
  }
  function constructYamlInteger2(data) {
    var value2 = data, sign2 = 1, ch, base2, digits = [];
    if (value2.indexOf("_") !== -1) {
      value2 = value2.replace(/_/g, "");
    }
    ch = value2[0];
    if (ch === "-" || ch === "+") {
      if (ch === "-")
        sign2 = -1;
      value2 = value2.slice(1);
      ch = value2[0];
    }
    if (value2 === "0")
      return 0;
    if (ch === "0") {
      if (value2[1] === "b")
        return sign2 * parseInt(value2.slice(2), 2);
      if (value2[1] === "x")
        return sign2 * parseInt(value2, 16);
      return sign2 * parseInt(value2, 8);
    }
    if (value2.indexOf(":") !== -1) {
      value2.split(":").forEach(function(v) {
        digits.unshift(parseInt(v, 10));
      });
      value2 = 0;
      base2 = 1;
      digits.forEach(function(d) {
        value2 += d * base2;
        base2 *= 60;
      });
      return sign2 * value2;
    }
    return sign2 * parseInt(value2, 10);
  }
  function isInteger2(object) {
    return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common2.isNegativeZero(object));
  }
  int$1 = new Type2("tag:yaml.org,2002:int", {
    kind: "scalar",
    resolve: resolveYamlInteger2,
    construct: constructYamlInteger2,
    predicate: isInteger2,
    represent: {
      binary: function(obj) {
        return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
      },
      octal: function(obj) {
        return obj >= 0 ? "0" + obj.toString(8) : "-0" + obj.toString(8).slice(1);
      },
      decimal: function(obj) {
        return obj.toString(10);
      },
      /* eslint-disable max-len */
      hexadecimal: function(obj) {
        return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
      }
    },
    defaultStyle: "decimal",
    styleAliases: {
      binary: [2, "bin"],
      octal: [8, "oct"],
      decimal: [10, "dec"],
      hexadecimal: [16, "hex"]
    }
  });
  return int$1;
}
var float$1;
var hasRequiredFloat;
function requireFloat() {
  if (hasRequiredFloat)
    return float$1;
  hasRequiredFloat = 1;
  var common2 = requireCommon();
  var Type2 = requireType();
  var YAML_FLOAT_PATTERN2 = new RegExp(
    // 2.5e4, 2.5 and integers
    "^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
  );
  function resolveYamlFloat2(data) {
    if (data === null)
      return false;
    if (!YAML_FLOAT_PATTERN2.test(data) || // Quick hack to not allow integers end with `_`
    // Probably should update regexp & check speed
    data[data.length - 1] === "_") {
      return false;
    }
    return true;
  }
  function constructYamlFloat2(data) {
    var value2, sign2, base2, digits;
    value2 = data.replace(/_/g, "").toLowerCase();
    sign2 = value2[0] === "-" ? -1 : 1;
    digits = [];
    if ("+-".indexOf(value2[0]) >= 0) {
      value2 = value2.slice(1);
    }
    if (value2 === ".inf") {
      return sign2 === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
    } else if (value2 === ".nan") {
      return NaN;
    } else if (value2.indexOf(":") >= 0) {
      value2.split(":").forEach(function(v) {
        digits.unshift(parseFloat(v, 10));
      });
      value2 = 0;
      base2 = 1;
      digits.forEach(function(d) {
        value2 += d * base2;
        base2 *= 60;
      });
      return sign2 * value2;
    }
    return sign2 * parseFloat(value2, 10);
  }
  var SCIENTIFIC_WITHOUT_DOT2 = /^[-+]?[0-9]+e/;
  function representYamlFloat2(object, style) {
    var res;
    if (isNaN(object)) {
      switch (style) {
        case "lowercase":
          return ".nan";
        case "uppercase":
          return ".NAN";
        case "camelcase":
          return ".NaN";
      }
    } else if (Number.POSITIVE_INFINITY === object) {
      switch (style) {
        case "lowercase":
          return ".inf";
        case "uppercase":
          return ".INF";
        case "camelcase":
          return ".Inf";
      }
    } else if (Number.NEGATIVE_INFINITY === object) {
      switch (style) {
        case "lowercase":
          return "-.inf";
        case "uppercase":
          return "-.INF";
        case "camelcase":
          return "-.Inf";
      }
    } else if (common2.isNegativeZero(object)) {
      return "-0.0";
    }
    res = object.toString(10);
    return SCIENTIFIC_WITHOUT_DOT2.test(res) ? res.replace("e", ".e") : res;
  }
  function isFloat2(object) {
    return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common2.isNegativeZero(object));
  }
  float$1 = new Type2("tag:yaml.org,2002:float", {
    kind: "scalar",
    resolve: resolveYamlFloat2,
    construct: constructYamlFloat2,
    predicate: isFloat2,
    represent: representYamlFloat2,
    defaultStyle: "lowercase"
  });
  return float$1;
}
var json$1;
var hasRequiredJson;
function requireJson() {
  if (hasRequiredJson)
    return json$1;
  hasRequiredJson = 1;
  var Schema2 = requireSchema();
  json$1 = new Schema2({
    include: [
      requireFailsafe()
    ],
    implicit: [
      require_null(),
      requireBool(),
      requireInt(),
      requireFloat()
    ]
  });
  return json$1;
}
var core$1;
var hasRequiredCore;
function requireCore() {
  if (hasRequiredCore)
    return core$1;
  hasRequiredCore = 1;
  var Schema2 = requireSchema();
  core$1 = new Schema2({
    include: [
      requireJson()
    ]
  });
  return core$1;
}
var timestamp$1;
var hasRequiredTimestamp;
function requireTimestamp() {
  if (hasRequiredTimestamp)
    return timestamp$1;
  hasRequiredTimestamp = 1;
  var Type2 = requireType();
  var YAML_DATE_REGEXP2 = new RegExp(
    "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
  );
  var YAML_TIMESTAMP_REGEXP2 = new RegExp(
    "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
  );
  function resolveYamlTimestamp2(data) {
    if (data === null)
      return false;
    if (YAML_DATE_REGEXP2.exec(data) !== null)
      return true;
    if (YAML_TIMESTAMP_REGEXP2.exec(data) !== null)
      return true;
    return false;
  }
  function constructYamlTimestamp2(data) {
    var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
    match = YAML_DATE_REGEXP2.exec(data);
    if (match === null)
      match = YAML_TIMESTAMP_REGEXP2.exec(data);
    if (match === null)
      throw new Error("Date resolve error");
    year = +match[1];
    month = +match[2] - 1;
    day = +match[3];
    if (!match[4]) {
      return new Date(Date.UTC(year, month, day));
    }
    hour = +match[4];
    minute = +match[5];
    second = +match[6];
    if (match[7]) {
      fraction = match[7].slice(0, 3);
      while (fraction.length < 3) {
        fraction += "0";
      }
      fraction = +fraction;
    }
    if (match[9]) {
      tz_hour = +match[10];
      tz_minute = +(match[11] || 0);
      delta = (tz_hour * 60 + tz_minute) * 6e4;
      if (match[9] === "-")
        delta = -delta;
    }
    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
    if (delta)
      date.setTime(date.getTime() - delta);
    return date;
  }
  function representYamlTimestamp2(object) {
    return object.toISOString();
  }
  timestamp$1 = new Type2("tag:yaml.org,2002:timestamp", {
    kind: "scalar",
    resolve: resolveYamlTimestamp2,
    construct: constructYamlTimestamp2,
    instanceOf: Date,
    represent: representYamlTimestamp2
  });
  return timestamp$1;
}
var merge$1;
var hasRequiredMerge;
function requireMerge() {
  if (hasRequiredMerge)
    return merge$1;
  hasRequiredMerge = 1;
  var Type2 = requireType();
  function resolveYamlMerge2(data) {
    return data === "<<" || data === null;
  }
  merge$1 = new Type2("tag:yaml.org,2002:merge", {
    kind: "scalar",
    resolve: resolveYamlMerge2
  });
  return merge$1;
}
function commonjsRequire(path2) {
  throw new Error('Could not dynamically require "' + path2 + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var binary$1;
var hasRequiredBinary;
function requireBinary() {
  if (hasRequiredBinary)
    return binary$1;
  hasRequiredBinary = 1;
  var NodeBuffer;
  try {
    var _require = commonjsRequire;
    NodeBuffer = _require("buffer").Buffer;
  } catch (__) {
  }
  var Type2 = requireType();
  var BASE64_MAP2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
  function resolveYamlBinary2(data) {
    if (data === null)
      return false;
    var code2, idx, bitlen = 0, max = data.length, map2 = BASE64_MAP2;
    for (idx = 0; idx < max; idx++) {
      code2 = map2.indexOf(data.charAt(idx));
      if (code2 > 64)
        continue;
      if (code2 < 0)
        return false;
      bitlen += 6;
    }
    return bitlen % 8 === 0;
  }
  function constructYamlBinary2(data) {
    var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map2 = BASE64_MAP2, bits = 0, result = [];
    for (idx = 0; idx < max; idx++) {
      if (idx % 4 === 0 && idx) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      }
      bits = bits << 6 | map2.indexOf(input.charAt(idx));
    }
    tailbits = max % 4 * 6;
    if (tailbits === 0) {
      result.push(bits >> 16 & 255);
      result.push(bits >> 8 & 255);
      result.push(bits & 255);
    } else if (tailbits === 18) {
      result.push(bits >> 10 & 255);
      result.push(bits >> 2 & 255);
    } else if (tailbits === 12) {
      result.push(bits >> 4 & 255);
    }
    if (NodeBuffer) {
      return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
    }
    return result;
  }
  function representYamlBinary2(object) {
    var result = "", bits = 0, idx, tail, max = object.length, map2 = BASE64_MAP2;
    for (idx = 0; idx < max; idx++) {
      if (idx % 3 === 0 && idx) {
        result += map2[bits >> 18 & 63];
        result += map2[bits >> 12 & 63];
        result += map2[bits >> 6 & 63];
        result += map2[bits & 63];
      }
      bits = (bits << 8) + object[idx];
    }
    tail = max % 3;
    if (tail === 0) {
      result += map2[bits >> 18 & 63];
      result += map2[bits >> 12 & 63];
      result += map2[bits >> 6 & 63];
      result += map2[bits & 63];
    } else if (tail === 2) {
      result += map2[bits >> 10 & 63];
      result += map2[bits >> 4 & 63];
      result += map2[bits << 2 & 63];
      result += map2[64];
    } else if (tail === 1) {
      result += map2[bits >> 2 & 63];
      result += map2[bits << 4 & 63];
      result += map2[64];
      result += map2[64];
    }
    return result;
  }
  function isBinary2(object) {
    return NodeBuffer && NodeBuffer.isBuffer(object);
  }
  binary$1 = new Type2("tag:yaml.org,2002:binary", {
    kind: "scalar",
    resolve: resolveYamlBinary2,
    construct: constructYamlBinary2,
    predicate: isBinary2,
    represent: representYamlBinary2
  });
  return binary$1;
}
var omap$1;
var hasRequiredOmap;
function requireOmap() {
  if (hasRequiredOmap)
    return omap$1;
  hasRequiredOmap = 1;
  var Type2 = requireType();
  var _hasOwnProperty2 = Object.prototype.hasOwnProperty;
  var _toString2 = Object.prototype.toString;
  function resolveYamlOmap2(data) {
    if (data === null)
      return true;
    var objectKeys = [], index2, length, pair, pairKey, pairHasKey, object = data;
    for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
      pair = object[index2];
      pairHasKey = false;
      if (_toString2.call(pair) !== "[object Object]")
        return false;
      for (pairKey in pair) {
        if (_hasOwnProperty2.call(pair, pairKey)) {
          if (!pairHasKey)
            pairHasKey = true;
          else
            return false;
        }
      }
      if (!pairHasKey)
        return false;
      if (objectKeys.indexOf(pairKey) === -1)
        objectKeys.push(pairKey);
      else
        return false;
    }
    return true;
  }
  function constructYamlOmap2(data) {
    return data !== null ? data : [];
  }
  omap$1 = new Type2("tag:yaml.org,2002:omap", {
    kind: "sequence",
    resolve: resolveYamlOmap2,
    construct: constructYamlOmap2
  });
  return omap$1;
}
var pairs$1;
var hasRequiredPairs;
function requirePairs() {
  if (hasRequiredPairs)
    return pairs$1;
  hasRequiredPairs = 1;
  var Type2 = requireType();
  var _toString2 = Object.prototype.toString;
  function resolveYamlPairs2(data) {
    if (data === null)
      return true;
    var index2, length, pair, keys2, result, object = data;
    result = new Array(object.length);
    for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
      pair = object[index2];
      if (_toString2.call(pair) !== "[object Object]")
        return false;
      keys2 = Object.keys(pair);
      if (keys2.length !== 1)
        return false;
      result[index2] = [keys2[0], pair[keys2[0]]];
    }
    return true;
  }
  function constructYamlPairs2(data) {
    if (data === null)
      return [];
    var index2, length, pair, keys2, result, object = data;
    result = new Array(object.length);
    for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
      pair = object[index2];
      keys2 = Object.keys(pair);
      result[index2] = [keys2[0], pair[keys2[0]]];
    }
    return result;
  }
  pairs$1 = new Type2("tag:yaml.org,2002:pairs", {
    kind: "sequence",
    resolve: resolveYamlPairs2,
    construct: constructYamlPairs2
  });
  return pairs$1;
}
var set$1;
var hasRequiredSet;
function requireSet() {
  if (hasRequiredSet)
    return set$1;
  hasRequiredSet = 1;
  var Type2 = requireType();
  var _hasOwnProperty2 = Object.prototype.hasOwnProperty;
  function resolveYamlSet2(data) {
    if (data === null)
      return true;
    var key, object = data;
    for (key in object) {
      if (_hasOwnProperty2.call(object, key)) {
        if (object[key] !== null)
          return false;
      }
    }
    return true;
  }
  function constructYamlSet2(data) {
    return data !== null ? data : {};
  }
  set$1 = new Type2("tag:yaml.org,2002:set", {
    kind: "mapping",
    resolve: resolveYamlSet2,
    construct: constructYamlSet2
  });
  return set$1;
}
var default_safe;
var hasRequiredDefault_safe;
function requireDefault_safe() {
  if (hasRequiredDefault_safe)
    return default_safe;
  hasRequiredDefault_safe = 1;
  var Schema2 = requireSchema();
  default_safe = new Schema2({
    include: [
      requireCore()
    ],
    implicit: [
      requireTimestamp(),
      requireMerge()
    ],
    explicit: [
      requireBinary(),
      requireOmap(),
      requirePairs(),
      requireSet()
    ]
  });
  return default_safe;
}
var _undefined;
var hasRequired_undefined;
function require_undefined() {
  if (hasRequired_undefined)
    return _undefined;
  hasRequired_undefined = 1;
  var Type2 = requireType();
  function resolveJavascriptUndefined() {
    return true;
  }
  function constructJavascriptUndefined() {
    return void 0;
  }
  function representJavascriptUndefined() {
    return "";
  }
  function isUndefined(object) {
    return typeof object === "undefined";
  }
  _undefined = new Type2("tag:yaml.org,2002:js/undefined", {
    kind: "scalar",
    resolve: resolveJavascriptUndefined,
    construct: constructJavascriptUndefined,
    predicate: isUndefined,
    represent: representJavascriptUndefined
  });
  return _undefined;
}
var regexp;
var hasRequiredRegexp;
function requireRegexp() {
  if (hasRequiredRegexp)
    return regexp;
  hasRequiredRegexp = 1;
  var Type2 = requireType();
  function resolveJavascriptRegExp(data) {
    if (data === null)
      return false;
    if (data.length === 0)
      return false;
    var regexp2 = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
    if (regexp2[0] === "/") {
      if (tail)
        modifiers = tail[1];
      if (modifiers.length > 3)
        return false;
      if (regexp2[regexp2.length - modifiers.length - 1] !== "/")
        return false;
    }
    return true;
  }
  function constructJavascriptRegExp(data) {
    var regexp2 = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
    if (regexp2[0] === "/") {
      if (tail)
        modifiers = tail[1];
      regexp2 = regexp2.slice(1, regexp2.length - modifiers.length - 1);
    }
    return new RegExp(regexp2, modifiers);
  }
  function representJavascriptRegExp(object) {
    var result = "/" + object.source + "/";
    if (object.global)
      result += "g";
    if (object.multiline)
      result += "m";
    if (object.ignoreCase)
      result += "i";
    return result;
  }
  function isRegExp(object) {
    return Object.prototype.toString.call(object) === "[object RegExp]";
  }
  regexp = new Type2("tag:yaml.org,2002:js/regexp", {
    kind: "scalar",
    resolve: resolveJavascriptRegExp,
    construct: constructJavascriptRegExp,
    predicate: isRegExp,
    represent: representJavascriptRegExp
  });
  return regexp;
}
var _function;
var hasRequired_function;
function require_function() {
  if (hasRequired_function)
    return _function;
  hasRequired_function = 1;
  var esprima;
  try {
    var _require = commonjsRequire;
    esprima = _require("esprima");
  } catch (_) {
    if (typeof window !== "undefined")
      esprima = window.esprima;
  }
  var Type2 = requireType();
  function resolveJavascriptFunction(data) {
    if (data === null)
      return false;
    try {
      var source = "(" + data + ")", ast = esprima.parse(source, { range: true });
      if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
        return false;
      }
      return true;
    } catch (err) {
      return false;
    }
  }
  function constructJavascriptFunction(data) {
    var source = "(" + data + ")", ast = esprima.parse(source, { range: true }), params = [], body;
    if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
      throw new Error("Failed to resolve function");
    }
    ast.body[0].expression.params.forEach(function(param) {
      params.push(param.name);
    });
    body = ast.body[0].expression.body.range;
    if (ast.body[0].expression.body.type === "BlockStatement") {
      return new Function(params, source.slice(body[0] + 1, body[1] - 1));
    }
    return new Function(params, "return " + source.slice(body[0], body[1]));
  }
  function representJavascriptFunction(object) {
    return object.toString();
  }
  function isFunction(object) {
    return Object.prototype.toString.call(object) === "[object Function]";
  }
  _function = new Type2("tag:yaml.org,2002:js/function", {
    kind: "scalar",
    resolve: resolveJavascriptFunction,
    construct: constructJavascriptFunction,
    predicate: isFunction,
    represent: representJavascriptFunction
  });
  return _function;
}
var default_full;
var hasRequiredDefault_full;
function requireDefault_full() {
  if (hasRequiredDefault_full)
    return default_full;
  hasRequiredDefault_full = 1;
  var Schema2 = requireSchema();
  default_full = Schema2.DEFAULT = new Schema2({
    include: [
      requireDefault_safe()
    ],
    explicit: [
      require_undefined(),
      requireRegexp(),
      require_function()
    ]
  });
  return default_full;
}
var hasRequiredLoader;
function requireLoader() {
  if (hasRequiredLoader)
    return loader$1;
  hasRequiredLoader = 1;
  var common2 = requireCommon();
  var YAMLException2 = requireException();
  var Mark = requireMark();
  var DEFAULT_SAFE_SCHEMA = requireDefault_safe();
  var DEFAULT_FULL_SCHEMA = requireDefault_full();
  var _hasOwnProperty2 = Object.prototype.hasOwnProperty;
  var CONTEXT_FLOW_IN2 = 1;
  var CONTEXT_FLOW_OUT2 = 2;
  var CONTEXT_BLOCK_IN2 = 3;
  var CONTEXT_BLOCK_OUT2 = 4;
  var CHOMPING_CLIP2 = 1;
  var CHOMPING_STRIP2 = 2;
  var CHOMPING_KEEP2 = 3;
  var PATTERN_NON_PRINTABLE2 = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
  var PATTERN_NON_ASCII_LINE_BREAKS2 = /[\x85\u2028\u2029]/;
  var PATTERN_FLOW_INDICATORS2 = /[,\[\]\{\}]/;
  var PATTERN_TAG_HANDLE2 = /^(?:!|!!|![a-z\-]+!)$/i;
  var PATTERN_TAG_URI2 = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
  function _class2(obj) {
    return Object.prototype.toString.call(obj);
  }
  function is_EOL2(c) {
    return c === 10 || c === 13;
  }
  function is_WHITE_SPACE2(c) {
    return c === 9 || c === 32;
  }
  function is_WS_OR_EOL2(c) {
    return c === 9 || c === 32 || c === 10 || c === 13;
  }
  function is_FLOW_INDICATOR2(c) {
    return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
  }
  function fromHexCode2(c) {
    var lc;
    if (48 <= c && c <= 57) {
      return c - 48;
    }
    lc = c | 32;
    if (97 <= lc && lc <= 102) {
      return lc - 97 + 10;
    }
    return -1;
  }
  function escapedHexLen2(c) {
    if (c === 120) {
      return 2;
    }
    if (c === 117) {
      return 4;
    }
    if (c === 85) {
      return 8;
    }
    return 0;
  }
  function fromDecimalCode2(c) {
    if (48 <= c && c <= 57) {
      return c - 48;
    }
    return -1;
  }
  function simpleEscapeSequence2(c) {
    return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "" : c === 95 ? " " : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
  }
  function charFromCodepoint2(c) {
    if (c <= 65535) {
      return String.fromCharCode(c);
    }
    return String.fromCharCode(
      (c - 65536 >> 10) + 55296,
      (c - 65536 & 1023) + 56320
    );
  }
  var simpleEscapeCheck2 = new Array(256);
  var simpleEscapeMap2 = new Array(256);
  for (var i = 0; i < 256; i++) {
    simpleEscapeCheck2[i] = simpleEscapeSequence2(i) ? 1 : 0;
    simpleEscapeMap2[i] = simpleEscapeSequence2(i);
  }
  function State2(input, options) {
    this.input = input;
    this.filename = options["filename"] || null;
    this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
    this.onWarning = options["onWarning"] || null;
    this.legacy = options["legacy"] || false;
    this.json = options["json"] || false;
    this.listener = options["listener"] || null;
    this.implicitTypes = this.schema.compiledImplicit;
    this.typeMap = this.schema.compiledTypeMap;
    this.length = input.length;
    this.position = 0;
    this.line = 0;
    this.lineStart = 0;
    this.lineIndent = 0;
    this.documents = [];
  }
  function generateError2(state, message) {
    return new YAMLException2(
      message,
      new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart)
    );
  }
  function throwError2(state, message) {
    throw generateError2(state, message);
  }
  function throwWarning2(state, message) {
    if (state.onWarning) {
      state.onWarning.call(null, generateError2(state, message));
    }
  }
  var directiveHandlers2 = {
    YAML: function handleYamlDirective2(state, name, args) {
      var match, major, minor;
      if (state.version !== null) {
        throwError2(state, "duplication of %YAML directive");
      }
      if (args.length !== 1) {
        throwError2(state, "YAML directive accepts exactly one argument");
      }
      match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
      if (match === null) {
        throwError2(state, "ill-formed argument of the YAML directive");
      }
      major = parseInt(match[1], 10);
      minor = parseInt(match[2], 10);
      if (major !== 1) {
        throwError2(state, "unacceptable YAML version of the document");
      }
      state.version = args[0];
      state.checkLineBreaks = minor < 2;
      if (minor !== 1 && minor !== 2) {
        throwWarning2(state, "unsupported YAML version of the document");
      }
    },
    TAG: function handleTagDirective2(state, name, args) {
      var handle, prefix;
      if (args.length !== 2) {
        throwError2(state, "TAG directive accepts exactly two arguments");
      }
      handle = args[0];
      prefix = args[1];
      if (!PATTERN_TAG_HANDLE2.test(handle)) {
        throwError2(state, "ill-formed tag handle (first argument) of the TAG directive");
      }
      if (_hasOwnProperty2.call(state.tagMap, handle)) {
        throwError2(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
      }
      if (!PATTERN_TAG_URI2.test(prefix)) {
        throwError2(state, "ill-formed tag prefix (second argument) of the TAG directive");
      }
      state.tagMap[handle] = prefix;
    }
  };
  function captureSegment2(state, start, end, checkJson) {
    var _position, _length, _character, _result;
    if (start < end) {
      _result = state.input.slice(start, end);
      if (checkJson) {
        for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
          _character = _result.charCodeAt(_position);
          if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
            throwError2(state, "expected valid JSON character");
          }
        }
      } else if (PATTERN_NON_PRINTABLE2.test(_result)) {
        throwError2(state, "the stream contains non-printable characters");
      }
      state.result += _result;
    }
  }
  function mergeMappings2(state, destination, source, overridableKeys) {
    var sourceKeys, key, index2, quantity;
    if (!common2.isObject(source)) {
      throwError2(state, "cannot merge mappings; the provided source object is unacceptable");
    }
    sourceKeys = Object.keys(source);
    for (index2 = 0, quantity = sourceKeys.length; index2 < quantity; index2 += 1) {
      key = sourceKeys[index2];
      if (!_hasOwnProperty2.call(destination, key)) {
        destination[key] = source[key];
        overridableKeys[key] = true;
      }
    }
  }
  function storeMappingPair2(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
    var index2, quantity;
    if (Array.isArray(keyNode)) {
      keyNode = Array.prototype.slice.call(keyNode);
      for (index2 = 0, quantity = keyNode.length; index2 < quantity; index2 += 1) {
        if (Array.isArray(keyNode[index2])) {
          throwError2(state, "nested arrays are not supported inside keys");
        }
        if (typeof keyNode === "object" && _class2(keyNode[index2]) === "[object Object]") {
          keyNode[index2] = "[object Object]";
        }
      }
    }
    if (typeof keyNode === "object" && _class2(keyNode) === "[object Object]") {
      keyNode = "[object Object]";
    }
    keyNode = String(keyNode);
    if (_result === null) {
      _result = {};
    }
    if (keyTag === "tag:yaml.org,2002:merge") {
      if (Array.isArray(valueNode)) {
        for (index2 = 0, quantity = valueNode.length; index2 < quantity; index2 += 1) {
          mergeMappings2(state, _result, valueNode[index2], overridableKeys);
        }
      } else {
        mergeMappings2(state, _result, valueNode, overridableKeys);
      }
    } else {
      if (!state.json && !_hasOwnProperty2.call(overridableKeys, keyNode) && _hasOwnProperty2.call(_result, keyNode)) {
        state.line = startLine || state.line;
        state.position = startPos || state.position;
        throwError2(state, "duplicated mapping key");
      }
      _result[keyNode] = valueNode;
      delete overridableKeys[keyNode];
    }
    return _result;
  }
  function readLineBreak2(state) {
    var ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 10) {
      state.position++;
    } else if (ch === 13) {
      state.position++;
      if (state.input.charCodeAt(state.position) === 10) {
        state.position++;
      }
    } else {
      throwError2(state, "a line break is expected");
    }
    state.line += 1;
    state.lineStart = state.position;
  }
  function skipSeparationSpace2(state, allowComments, checkIndent) {
    var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
    while (ch !== 0) {
      while (is_WHITE_SPACE2(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (allowComments && ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 10 && ch !== 13 && ch !== 0);
      }
      if (is_EOL2(ch)) {
        readLineBreak2(state);
        ch = state.input.charCodeAt(state.position);
        lineBreaks++;
        state.lineIndent = 0;
        while (ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
      } else {
        break;
      }
    }
    if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
      throwWarning2(state, "deficient indentation");
    }
    return lineBreaks;
  }
  function testDocumentSeparator2(state) {
    var _position = state.position, ch;
    ch = state.input.charCodeAt(_position);
    if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
      _position += 3;
      ch = state.input.charCodeAt(_position);
      if (ch === 0 || is_WS_OR_EOL2(ch)) {
        return true;
      }
    }
    return false;
  }
  function writeFoldedLines2(state, count) {
    if (count === 1) {
      state.result += " ";
    } else if (count > 1) {
      state.result += common2.repeat("\n", count - 1);
    }
  }
  function readPlainScalar2(state, nodeIndent, withinFlowCollection) {
    var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
    ch = state.input.charCodeAt(state.position);
    if (is_WS_OR_EOL2(ch) || is_FLOW_INDICATOR2(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
      return false;
    }
    if (ch === 63 || ch === 45) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL2(following) || withinFlowCollection && is_FLOW_INDICATOR2(following)) {
        return false;
      }
    }
    state.kind = "scalar";
    state.result = "";
    captureStart = captureEnd = state.position;
    hasPendingContent = false;
    while (ch !== 0) {
      if (ch === 58) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL2(following) || withinFlowCollection && is_FLOW_INDICATOR2(following)) {
          break;
        }
      } else if (ch === 35) {
        preceding = state.input.charCodeAt(state.position - 1);
        if (is_WS_OR_EOL2(preceding)) {
          break;
        }
      } else if (state.position === state.lineStart && testDocumentSeparator2(state) || withinFlowCollection && is_FLOW_INDICATOR2(ch)) {
        break;
      } else if (is_EOL2(ch)) {
        _line = state.line;
        _lineStart = state.lineStart;
        _lineIndent = state.lineIndent;
        skipSeparationSpace2(state, false, -1);
        if (state.lineIndent >= nodeIndent) {
          hasPendingContent = true;
          ch = state.input.charCodeAt(state.position);
          continue;
        } else {
          state.position = captureEnd;
          state.line = _line;
          state.lineStart = _lineStart;
          state.lineIndent = _lineIndent;
          break;
        }
      }
      if (hasPendingContent) {
        captureSegment2(state, captureStart, captureEnd, false);
        writeFoldedLines2(state, state.line - _line);
        captureStart = captureEnd = state.position;
        hasPendingContent = false;
      }
      if (!is_WHITE_SPACE2(ch)) {
        captureEnd = state.position + 1;
      }
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment2(state, captureStart, captureEnd, false);
    if (state.result) {
      return true;
    }
    state.kind = _kind;
    state.result = _result;
    return false;
  }
  function readSingleQuotedScalar2(state, nodeIndent) {
    var ch, captureStart, captureEnd;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 39) {
      return false;
    }
    state.kind = "scalar";
    state.result = "";
    state.position++;
    captureStart = captureEnd = state.position;
    while ((ch = state.input.charCodeAt(state.position)) !== 0) {
      if (ch === 39) {
        captureSegment2(state, captureStart, state.position, true);
        ch = state.input.charCodeAt(++state.position);
        if (ch === 39) {
          captureStart = state.position;
          state.position++;
          captureEnd = state.position;
        } else {
          return true;
        }
      } else if (is_EOL2(ch)) {
        captureSegment2(state, captureStart, captureEnd, true);
        writeFoldedLines2(state, skipSeparationSpace2(state, false, nodeIndent));
        captureStart = captureEnd = state.position;
      } else if (state.position === state.lineStart && testDocumentSeparator2(state)) {
        throwError2(state, "unexpected end of the document within a single quoted scalar");
      } else {
        state.position++;
        captureEnd = state.position;
      }
    }
    throwError2(state, "unexpected end of the stream within a single quoted scalar");
  }
  function readDoubleQuotedScalar2(state, nodeIndent) {
    var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 34) {
      return false;
    }
    state.kind = "scalar";
    state.result = "";
    state.position++;
    captureStart = captureEnd = state.position;
    while ((ch = state.input.charCodeAt(state.position)) !== 0) {
      if (ch === 34) {
        captureSegment2(state, captureStart, state.position, true);
        state.position++;
        return true;
      } else if (ch === 92) {
        captureSegment2(state, captureStart, state.position, true);
        ch = state.input.charCodeAt(++state.position);
        if (is_EOL2(ch)) {
          skipSeparationSpace2(state, false, nodeIndent);
        } else if (ch < 256 && simpleEscapeCheck2[ch]) {
          state.result += simpleEscapeMap2[ch];
          state.position++;
        } else if ((tmp = escapedHexLen2(ch)) > 0) {
          hexLength = tmp;
          hexResult = 0;
          for (; hexLength > 0; hexLength--) {
            ch = state.input.charCodeAt(++state.position);
            if ((tmp = fromHexCode2(ch)) >= 0) {
              hexResult = (hexResult << 4) + tmp;
            } else {
              throwError2(state, "expected hexadecimal character");
            }
          }
          state.result += charFromCodepoint2(hexResult);
          state.position++;
        } else {
          throwError2(state, "unknown escape sequence");
        }
        captureStart = captureEnd = state.position;
      } else if (is_EOL2(ch)) {
        captureSegment2(state, captureStart, captureEnd, true);
        writeFoldedLines2(state, skipSeparationSpace2(state, false, nodeIndent));
        captureStart = captureEnd = state.position;
      } else if (state.position === state.lineStart && testDocumentSeparator2(state)) {
        throwError2(state, "unexpected end of the document within a double quoted scalar");
      } else {
        state.position++;
        captureEnd = state.position;
      }
    }
    throwError2(state, "unexpected end of the stream within a double quoted scalar");
  }
  function readFlowCollection2(state, nodeIndent) {
    var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = {}, keyNode, keyTag, valueNode, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 91) {
      terminator = 93;
      isMapping = false;
      _result = [];
    } else if (ch === 123) {
      terminator = 125;
      isMapping = true;
      _result = {};
    } else {
      return false;
    }
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = _result;
    }
    ch = state.input.charCodeAt(++state.position);
    while (ch !== 0) {
      skipSeparationSpace2(state, true, nodeIndent);
      ch = state.input.charCodeAt(state.position);
      if (ch === terminator) {
        state.position++;
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = isMapping ? "mapping" : "sequence";
        state.result = _result;
        return true;
      } else if (!readNext) {
        throwError2(state, "missed comma between flow collection entries");
      }
      keyTag = keyNode = valueNode = null;
      isPair = isExplicitPair = false;
      if (ch === 63) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL2(following)) {
          isPair = isExplicitPair = true;
          state.position++;
          skipSeparationSpace2(state, true, nodeIndent);
        }
      }
      _line = state.line;
      composeNode2(state, nodeIndent, CONTEXT_FLOW_IN2, false, true);
      keyTag = state.tag;
      keyNode = state.result;
      skipSeparationSpace2(state, true, nodeIndent);
      ch = state.input.charCodeAt(state.position);
      if ((isExplicitPair || state.line === _line) && ch === 58) {
        isPair = true;
        ch = state.input.charCodeAt(++state.position);
        skipSeparationSpace2(state, true, nodeIndent);
        composeNode2(state, nodeIndent, CONTEXT_FLOW_IN2, false, true);
        valueNode = state.result;
      }
      if (isMapping) {
        storeMappingPair2(state, _result, overridableKeys, keyTag, keyNode, valueNode);
      } else if (isPair) {
        _result.push(storeMappingPair2(state, null, overridableKeys, keyTag, keyNode, valueNode));
      } else {
        _result.push(keyNode);
      }
      skipSeparationSpace2(state, true, nodeIndent);
      ch = state.input.charCodeAt(state.position);
      if (ch === 44) {
        readNext = true;
        ch = state.input.charCodeAt(++state.position);
      } else {
        readNext = false;
      }
    }
    throwError2(state, "unexpected end of the stream within a flow collection");
  }
  function readBlockScalar2(state, nodeIndent) {
    var captureStart, folding, chomping = CHOMPING_CLIP2, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 124) {
      folding = false;
    } else if (ch === 62) {
      folding = true;
    } else {
      return false;
    }
    state.kind = "scalar";
    state.result = "";
    while (ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
      if (ch === 43 || ch === 45) {
        if (CHOMPING_CLIP2 === chomping) {
          chomping = ch === 43 ? CHOMPING_KEEP2 : CHOMPING_STRIP2;
        } else {
          throwError2(state, "repeat of a chomping mode identifier");
        }
      } else if ((tmp = fromDecimalCode2(ch)) >= 0) {
        if (tmp === 0) {
          throwError2(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
        } else if (!detectedIndent) {
          textIndent = nodeIndent + tmp - 1;
          detectedIndent = true;
        } else {
          throwError2(state, "repeat of an indentation width identifier");
        }
      } else {
        break;
      }
    }
    if (is_WHITE_SPACE2(ch)) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (is_WHITE_SPACE2(ch));
      if (ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (!is_EOL2(ch) && ch !== 0);
      }
    }
    while (ch !== 0) {
      readLineBreak2(state);
      state.lineIndent = 0;
      ch = state.input.charCodeAt(state.position);
      while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
      if (!detectedIndent && state.lineIndent > textIndent) {
        textIndent = state.lineIndent;
      }
      if (is_EOL2(ch)) {
        emptyLines++;
        continue;
      }
      if (state.lineIndent < textIndent) {
        if (chomping === CHOMPING_KEEP2) {
          state.result += common2.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        } else if (chomping === CHOMPING_CLIP2) {
          if (didReadContent) {
            state.result += "\n";
          }
        }
        break;
      }
      if (folding) {
        if (is_WHITE_SPACE2(ch)) {
          atMoreIndented = true;
          state.result += common2.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        } else if (atMoreIndented) {
          atMoreIndented = false;
          state.result += common2.repeat("\n", emptyLines + 1);
        } else if (emptyLines === 0) {
          if (didReadContent) {
            state.result += " ";
          }
        } else {
          state.result += common2.repeat("\n", emptyLines);
        }
      } else {
        state.result += common2.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      }
      didReadContent = true;
      detectedIndent = true;
      emptyLines = 0;
      captureStart = state.position;
      while (!is_EOL2(ch) && ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment2(state, captureStart, state.position, false);
    }
    return true;
  }
  function readBlockSequence2(state, nodeIndent) {
    var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = _result;
    }
    ch = state.input.charCodeAt(state.position);
    while (ch !== 0) {
      if (ch !== 45) {
        break;
      }
      following = state.input.charCodeAt(state.position + 1);
      if (!is_WS_OR_EOL2(following)) {
        break;
      }
      detected = true;
      state.position++;
      if (skipSeparationSpace2(state, true, -1)) {
        if (state.lineIndent <= nodeIndent) {
          _result.push(null);
          ch = state.input.charCodeAt(state.position);
          continue;
        }
      }
      _line = state.line;
      composeNode2(state, nodeIndent, CONTEXT_BLOCK_IN2, false, true);
      _result.push(state.result);
      skipSeparationSpace2(state, true, -1);
      ch = state.input.charCodeAt(state.position);
      if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
        throwError2(state, "bad indentation of a sequence entry");
      } else if (state.lineIndent < nodeIndent) {
        break;
      }
    }
    if (detected) {
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = "sequence";
      state.result = _result;
      return true;
    }
    return false;
  }
  function readBlockMapping2(state, nodeIndent, flowIndent) {
    var following, allowCompact, _line, _pos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = {}, keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = _result;
    }
    ch = state.input.charCodeAt(state.position);
    while (ch !== 0) {
      following = state.input.charCodeAt(state.position + 1);
      _line = state.line;
      _pos = state.position;
      if ((ch === 63 || ch === 58) && is_WS_OR_EOL2(following)) {
        if (ch === 63) {
          if (atExplicitKey) {
            storeMappingPair2(state, _result, overridableKeys, keyTag, keyNode, null);
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = true;
          allowCompact = true;
        } else if (atExplicitKey) {
          atExplicitKey = false;
          allowCompact = true;
        } else {
          throwError2(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
        }
        state.position += 1;
        ch = following;
      } else if (composeNode2(state, flowIndent, CONTEXT_FLOW_OUT2, false, true)) {
        if (state.line === _line) {
          ch = state.input.charCodeAt(state.position);
          while (is_WHITE_SPACE2(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 58) {
            ch = state.input.charCodeAt(++state.position);
            if (!is_WS_OR_EOL2(ch)) {
              throwError2(state, "a whitespace character is expected after the key-value separator within a block mapping");
            }
            if (atExplicitKey) {
              storeMappingPair2(state, _result, overridableKeys, keyTag, keyNode, null);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = false;
            allowCompact = false;
            keyTag = state.tag;
            keyNode = state.result;
          } else if (detected) {
            throwError2(state, "can not read an implicit mapping pair; a colon is missed");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        } else if (detected) {
          throwError2(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true;
        }
      } else {
        break;
      }
      if (state.line === _line || state.lineIndent > nodeIndent) {
        if (composeNode2(state, nodeIndent, CONTEXT_BLOCK_OUT2, true, allowCompact)) {
          if (atExplicitKey) {
            keyNode = state.result;
          } else {
            valueNode = state.result;
          }
        }
        if (!atExplicitKey) {
          storeMappingPair2(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
          keyTag = keyNode = valueNode = null;
        }
        skipSeparationSpace2(state, true, -1);
        ch = state.input.charCodeAt(state.position);
      }
      if (state.lineIndent > nodeIndent && ch !== 0) {
        throwError2(state, "bad indentation of a mapping entry");
      } else if (state.lineIndent < nodeIndent) {
        break;
      }
    }
    if (atExplicitKey) {
      storeMappingPair2(state, _result, overridableKeys, keyTag, keyNode, null);
    }
    if (detected) {
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = "mapping";
      state.result = _result;
    }
    return detected;
  }
  function readTagProperty2(state) {
    var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 33)
      return false;
    if (state.tag !== null) {
      throwError2(state, "duplication of a tag property");
    }
    ch = state.input.charCodeAt(++state.position);
    if (ch === 60) {
      isVerbatim = true;
      ch = state.input.charCodeAt(++state.position);
    } else if (ch === 33) {
      isNamed = true;
      tagHandle = "!!";
      ch = state.input.charCodeAt(++state.position);
    } else {
      tagHandle = "!";
    }
    _position = state.position;
    if (isVerbatim) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0 && ch !== 62);
      if (state.position < state.length) {
        tagName = state.input.slice(_position, state.position);
        ch = state.input.charCodeAt(++state.position);
      } else {
        throwError2(state, "unexpected end of the stream within a verbatim tag");
      }
    } else {
      while (ch !== 0 && !is_WS_OR_EOL2(ch)) {
        if (ch === 33) {
          if (!isNamed) {
            tagHandle = state.input.slice(_position - 1, state.position + 1);
            if (!PATTERN_TAG_HANDLE2.test(tagHandle)) {
              throwError2(state, "named tag handle cannot contain such characters");
            }
            isNamed = true;
            _position = state.position + 1;
          } else {
            throwError2(state, "tag suffix cannot contain exclamation marks");
          }
        }
        ch = state.input.charCodeAt(++state.position);
      }
      tagName = state.input.slice(_position, state.position);
      if (PATTERN_FLOW_INDICATORS2.test(tagName)) {
        throwError2(state, "tag suffix cannot contain flow indicator characters");
      }
    }
    if (tagName && !PATTERN_TAG_URI2.test(tagName)) {
      throwError2(state, "tag name cannot contain such characters: " + tagName);
    }
    if (isVerbatim) {
      state.tag = tagName;
    } else if (_hasOwnProperty2.call(state.tagMap, tagHandle)) {
      state.tag = state.tagMap[tagHandle] + tagName;
    } else if (tagHandle === "!") {
      state.tag = "!" + tagName;
    } else if (tagHandle === "!!") {
      state.tag = "tag:yaml.org,2002:" + tagName;
    } else {
      throwError2(state, 'undeclared tag handle "' + tagHandle + '"');
    }
    return true;
  }
  function readAnchorProperty2(state) {
    var _position, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 38)
      return false;
    if (state.anchor !== null) {
      throwError2(state, "duplication of an anchor property");
    }
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL2(ch) && !is_FLOW_INDICATOR2(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    if (state.position === _position) {
      throwError2(state, "name of an anchor node must contain at least one character");
    }
    state.anchor = state.input.slice(_position, state.position);
    return true;
  }
  function readAlias2(state) {
    var _position, alias, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 42)
      return false;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL2(ch) && !is_FLOW_INDICATOR2(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    if (state.position === _position) {
      throwError2(state, "name of an alias node must contain at least one character");
    }
    alias = state.input.slice(_position, state.position);
    if (!_hasOwnProperty2.call(state.anchorMap, alias)) {
      throwError2(state, 'unidentified alias "' + alias + '"');
    }
    state.result = state.anchorMap[alias];
    skipSeparationSpace2(state, true, -1);
    return true;
  }
  function composeNode2(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
    var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type2, flowIndent, blockIndent;
    if (state.listener !== null) {
      state.listener("open", state);
    }
    state.tag = null;
    state.anchor = null;
    state.kind = null;
    state.result = null;
    allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT2 === nodeContext || CONTEXT_BLOCK_IN2 === nodeContext;
    if (allowToSeek) {
      if (skipSeparationSpace2(state, true, -1)) {
        atNewLine = true;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      }
    }
    if (indentStatus === 1) {
      while (readTagProperty2(state) || readAnchorProperty2(state)) {
        if (skipSeparationSpace2(state, true, -1)) {
          atNewLine = true;
          allowBlockCollections = allowBlockStyles;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        } else {
          allowBlockCollections = false;
        }
      }
    }
    if (allowBlockCollections) {
      allowBlockCollections = atNewLine || allowCompact;
    }
    if (indentStatus === 1 || CONTEXT_BLOCK_OUT2 === nodeContext) {
      if (CONTEXT_FLOW_IN2 === nodeContext || CONTEXT_FLOW_OUT2 === nodeContext) {
        flowIndent = parentIndent;
      } else {
        flowIndent = parentIndent + 1;
      }
      blockIndent = state.position - state.lineStart;
      if (indentStatus === 1) {
        if (allowBlockCollections && (readBlockSequence2(state, blockIndent) || readBlockMapping2(state, blockIndent, flowIndent)) || readFlowCollection2(state, flowIndent)) {
          hasContent = true;
        } else {
          if (allowBlockScalars && readBlockScalar2(state, flowIndent) || readSingleQuotedScalar2(state, flowIndent) || readDoubleQuotedScalar2(state, flowIndent)) {
            hasContent = true;
          } else if (readAlias2(state)) {
            hasContent = true;
            if (state.tag !== null || state.anchor !== null) {
              throwError2(state, "alias node should not have any properties");
            }
          } else if (readPlainScalar2(state, flowIndent, CONTEXT_FLOW_IN2 === nodeContext)) {
            hasContent = true;
            if (state.tag === null) {
              state.tag = "?";
            }
          }
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
        }
      } else if (indentStatus === 0) {
        hasContent = allowBlockCollections && readBlockSequence2(state, blockIndent);
      }
    }
    if (state.tag !== null && state.tag !== "!") {
      if (state.tag === "?") {
        if (state.result !== null && state.kind !== "scalar") {
          throwError2(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
        }
        for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
          type2 = state.implicitTypes[typeIndex];
          if (type2.resolve(state.result)) {
            state.result = type2.construct(state.result);
            state.tag = type2.tag;
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
            break;
          }
        }
      } else if (_hasOwnProperty2.call(state.typeMap[state.kind || "fallback"], state.tag)) {
        type2 = state.typeMap[state.kind || "fallback"][state.tag];
        if (state.result !== null && type2.kind !== state.kind) {
          throwError2(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type2.kind + '", not "' + state.kind + '"');
        }
        if (!type2.resolve(state.result)) {
          throwError2(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
        } else {
          state.result = type2.construct(state.result);
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
        }
      } else {
        throwError2(state, "unknown tag !<" + state.tag + ">");
      }
    }
    if (state.listener !== null) {
      state.listener("close", state);
    }
    return state.tag !== null || state.anchor !== null || hasContent;
  }
  function readDocument2(state) {
    var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
    state.version = null;
    state.checkLineBreaks = state.legacy;
    state.tagMap = {};
    state.anchorMap = {};
    while ((ch = state.input.charCodeAt(state.position)) !== 0) {
      skipSeparationSpace2(state, true, -1);
      ch = state.input.charCodeAt(state.position);
      if (state.lineIndent > 0 || ch !== 37) {
        break;
      }
      hasDirectives = true;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL2(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveName = state.input.slice(_position, state.position);
      directiveArgs = [];
      if (directiveName.length < 1) {
        throwError2(state, "directive name must not be less than one character in length");
      }
      while (ch !== 0) {
        while (is_WHITE_SPACE2(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 0 && !is_EOL2(ch));
          break;
        }
        if (is_EOL2(ch))
          break;
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL2(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveArgs.push(state.input.slice(_position, state.position));
      }
      if (ch !== 0)
        readLineBreak2(state);
      if (_hasOwnProperty2.call(directiveHandlers2, directiveName)) {
        directiveHandlers2[directiveName](state, directiveName, directiveArgs);
      } else {
        throwWarning2(state, 'unknown document directive "' + directiveName + '"');
      }
    }
    skipSeparationSpace2(state, true, -1);
    if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
      state.position += 3;
      skipSeparationSpace2(state, true, -1);
    } else if (hasDirectives) {
      throwError2(state, "directives end mark is expected");
    }
    composeNode2(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT2, false, true);
    skipSeparationSpace2(state, true, -1);
    if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS2.test(state.input.slice(documentStart, state.position))) {
      throwWarning2(state, "non-ASCII line breaks are interpreted as content");
    }
    state.documents.push(state.result);
    if (state.position === state.lineStart && testDocumentSeparator2(state)) {
      if (state.input.charCodeAt(state.position) === 46) {
        state.position += 3;
        skipSeparationSpace2(state, true, -1);
      }
      return;
    }
    if (state.position < state.length - 1) {
      throwError2(state, "end of the stream or a document separator is expected");
    } else {
      return;
    }
  }
  function loadDocuments2(input, options) {
    input = String(input);
    options = options || {};
    if (input.length !== 0) {
      if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
        input += "\n";
      }
      if (input.charCodeAt(0) === 65279) {
        input = input.slice(1);
      }
    }
    var state = new State2(input, options);
    var nullpos = input.indexOf("\0");
    if (nullpos !== -1) {
      state.position = nullpos;
      throwError2(state, "null byte is not allowed in input");
    }
    state.input += "\0";
    while (state.input.charCodeAt(state.position) === 32) {
      state.lineIndent += 1;
      state.position += 1;
    }
    while (state.position < state.length - 1) {
      readDocument2(state);
    }
    return state.documents;
  }
  function loadAll2(input, iterator2, options) {
    if (iterator2 !== null && typeof iterator2 === "object" && typeof options === "undefined") {
      options = iterator2;
      iterator2 = null;
    }
    var documents = loadDocuments2(input, options);
    if (typeof iterator2 !== "function") {
      return documents;
    }
    for (var index2 = 0, length = documents.length; index2 < length; index2 += 1) {
      iterator2(documents[index2]);
    }
  }
  function load2(input, options) {
    var documents = loadDocuments2(input, options);
    if (documents.length === 0) {
      return void 0;
    } else if (documents.length === 1) {
      return documents[0];
    }
    throw new YAMLException2("expected a single document in the stream, but found more");
  }
  function safeLoadAll2(input, iterator2, options) {
    if (typeof iterator2 === "object" && iterator2 !== null && typeof options === "undefined") {
      options = iterator2;
      iterator2 = null;
    }
    return loadAll2(input, iterator2, common2.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
  }
  function safeLoad2(input, options) {
    return load2(input, common2.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
  }
  loader$1.loadAll = loadAll2;
  loader$1.load = load2;
  loader$1.safeLoadAll = safeLoadAll2;
  loader$1.safeLoad = safeLoad2;
  return loader$1;
}
var dumper$1 = {};
var hasRequiredDumper;
function requireDumper() {
  if (hasRequiredDumper)
    return dumper$1;
  hasRequiredDumper = 1;
  var common2 = requireCommon();
  var YAMLException2 = requireException();
  var DEFAULT_FULL_SCHEMA = requireDefault_full();
  var DEFAULT_SAFE_SCHEMA = requireDefault_safe();
  var _toString2 = Object.prototype.toString;
  var _hasOwnProperty2 = Object.prototype.hasOwnProperty;
  var CHAR_TAB2 = 9;
  var CHAR_LINE_FEED2 = 10;
  var CHAR_CARRIAGE_RETURN2 = 13;
  var CHAR_SPACE2 = 32;
  var CHAR_EXCLAMATION2 = 33;
  var CHAR_DOUBLE_QUOTE2 = 34;
  var CHAR_SHARP2 = 35;
  var CHAR_PERCENT2 = 37;
  var CHAR_AMPERSAND2 = 38;
  var CHAR_SINGLE_QUOTE2 = 39;
  var CHAR_ASTERISK2 = 42;
  var CHAR_COMMA2 = 44;
  var CHAR_MINUS2 = 45;
  var CHAR_COLON2 = 58;
  var CHAR_EQUALS2 = 61;
  var CHAR_GREATER_THAN2 = 62;
  var CHAR_QUESTION2 = 63;
  var CHAR_COMMERCIAL_AT2 = 64;
  var CHAR_LEFT_SQUARE_BRACKET2 = 91;
  var CHAR_RIGHT_SQUARE_BRACKET2 = 93;
  var CHAR_GRAVE_ACCENT2 = 96;
  var CHAR_LEFT_CURLY_BRACKET2 = 123;
  var CHAR_VERTICAL_LINE2 = 124;
  var CHAR_RIGHT_CURLY_BRACKET2 = 125;
  var ESCAPE_SEQUENCES2 = {};
  ESCAPE_SEQUENCES2[0] = "\\0";
  ESCAPE_SEQUENCES2[7] = "\\a";
  ESCAPE_SEQUENCES2[8] = "\\b";
  ESCAPE_SEQUENCES2[9] = "\\t";
  ESCAPE_SEQUENCES2[10] = "\\n";
  ESCAPE_SEQUENCES2[11] = "\\v";
  ESCAPE_SEQUENCES2[12] = "\\f";
  ESCAPE_SEQUENCES2[13] = "\\r";
  ESCAPE_SEQUENCES2[27] = "\\e";
  ESCAPE_SEQUENCES2[34] = '\\"';
  ESCAPE_SEQUENCES2[92] = "\\\\";
  ESCAPE_SEQUENCES2[133] = "\\N";
  ESCAPE_SEQUENCES2[160] = "\\_";
  ESCAPE_SEQUENCES2[8232] = "\\L";
  ESCAPE_SEQUENCES2[8233] = "\\P";
  var DEPRECATED_BOOLEANS_SYNTAX2 = [
    "y",
    "Y",
    "yes",
    "Yes",
    "YES",
    "on",
    "On",
    "ON",
    "n",
    "N",
    "no",
    "No",
    "NO",
    "off",
    "Off",
    "OFF"
  ];
  function compileStyleMap2(schema2, map2) {
    var result, keys2, index2, length, tag, style, type2;
    if (map2 === null)
      return {};
    result = {};
    keys2 = Object.keys(map2);
    for (index2 = 0, length = keys2.length; index2 < length; index2 += 1) {
      tag = keys2[index2];
      style = String(map2[tag]);
      if (tag.slice(0, 2) === "!!") {
        tag = "tag:yaml.org,2002:" + tag.slice(2);
      }
      type2 = schema2.compiledTypeMap["fallback"][tag];
      if (type2 && _hasOwnProperty2.call(type2.styleAliases, style)) {
        style = type2.styleAliases[style];
      }
      result[tag] = style;
    }
    return result;
  }
  function encodeHex2(character) {
    var string2, handle, length;
    string2 = character.toString(16).toUpperCase();
    if (character <= 255) {
      handle = "x";
      length = 2;
    } else if (character <= 65535) {
      handle = "u";
      length = 4;
    } else if (character <= 4294967295) {
      handle = "U";
      length = 8;
    } else {
      throw new YAMLException2("code point within a string may not be greater than 0xFFFFFFFF");
    }
    return "\\" + handle + common2.repeat("0", length - string2.length) + string2;
  }
  function State2(options) {
    this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
    this.indent = Math.max(1, options["indent"] || 2);
    this.noArrayIndent = options["noArrayIndent"] || false;
    this.skipInvalid = options["skipInvalid"] || false;
    this.flowLevel = common2.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
    this.styleMap = compileStyleMap2(this.schema, options["styles"] || null);
    this.sortKeys = options["sortKeys"] || false;
    this.lineWidth = options["lineWidth"] || 80;
    this.noRefs = options["noRefs"] || false;
    this.noCompatMode = options["noCompatMode"] || false;
    this.condenseFlow = options["condenseFlow"] || false;
    this.implicitTypes = this.schema.compiledImplicit;
    this.explicitTypes = this.schema.compiledExplicit;
    this.tag = null;
    this.result = "";
    this.duplicates = [];
    this.usedDuplicates = null;
  }
  function indentString2(string2, spaces) {
    var ind = common2.repeat(" ", spaces), position2 = 0, next = -1, result = "", line, length = string2.length;
    while (position2 < length) {
      next = string2.indexOf("\n", position2);
      if (next === -1) {
        line = string2.slice(position2);
        position2 = length;
      } else {
        line = string2.slice(position2, next + 1);
        position2 = next + 1;
      }
      if (line.length && line !== "\n")
        result += ind;
      result += line;
    }
    return result;
  }
  function generateNextLine2(state, level) {
    return "\n" + common2.repeat(" ", state.indent * level);
  }
  function testImplicitResolving2(state, str2) {
    var index2, length, type2;
    for (index2 = 0, length = state.implicitTypes.length; index2 < length; index2 += 1) {
      type2 = state.implicitTypes[index2];
      if (type2.resolve(str2)) {
        return true;
      }
    }
    return false;
  }
  function isWhitespace2(c) {
    return c === CHAR_SPACE2 || c === CHAR_TAB2;
  }
  function isPrintable2(c) {
    return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== 65279 || 65536 <= c && c <= 1114111;
  }
  function isNsChar(c) {
    return isPrintable2(c) && !isWhitespace2(c) && c !== 65279 && c !== CHAR_CARRIAGE_RETURN2 && c !== CHAR_LINE_FEED2;
  }
  function isPlainSafe2(c, prev) {
    return isPrintable2(c) && c !== 65279 && c !== CHAR_COMMA2 && c !== CHAR_LEFT_SQUARE_BRACKET2 && c !== CHAR_RIGHT_SQUARE_BRACKET2 && c !== CHAR_LEFT_CURLY_BRACKET2 && c !== CHAR_RIGHT_CURLY_BRACKET2 && c !== CHAR_COLON2 && (c !== CHAR_SHARP2 || prev && isNsChar(prev));
  }
  function isPlainSafeFirst2(c) {
    return isPrintable2(c) && c !== 65279 && !isWhitespace2(c) && c !== CHAR_MINUS2 && c !== CHAR_QUESTION2 && c !== CHAR_COLON2 && c !== CHAR_COMMA2 && c !== CHAR_LEFT_SQUARE_BRACKET2 && c !== CHAR_RIGHT_SQUARE_BRACKET2 && c !== CHAR_LEFT_CURLY_BRACKET2 && c !== CHAR_RIGHT_CURLY_BRACKET2 && c !== CHAR_SHARP2 && c !== CHAR_AMPERSAND2 && c !== CHAR_ASTERISK2 && c !== CHAR_EXCLAMATION2 && c !== CHAR_VERTICAL_LINE2 && c !== CHAR_EQUALS2 && c !== CHAR_GREATER_THAN2 && c !== CHAR_SINGLE_QUOTE2 && c !== CHAR_DOUBLE_QUOTE2 && c !== CHAR_PERCENT2 && c !== CHAR_COMMERCIAL_AT2 && c !== CHAR_GRAVE_ACCENT2;
  }
  function needIndentIndicator2(string2) {
    var leadingSpaceRe = /^\n* /;
    return leadingSpaceRe.test(string2);
  }
  var STYLE_PLAIN2 = 1, STYLE_SINGLE2 = 2, STYLE_LITERAL2 = 3, STYLE_FOLDED2 = 4, STYLE_DOUBLE2 = 5;
  function chooseScalarStyle2(string2, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
    var i;
    var char, prev_char;
    var hasLineBreak = false;
    var hasFoldableLine = false;
    var shouldTrackWidth = lineWidth !== -1;
    var previousLineBreak = -1;
    var plain = isPlainSafeFirst2(string2.charCodeAt(0)) && !isWhitespace2(string2.charCodeAt(string2.length - 1));
    if (singleLineOnly) {
      for (i = 0; i < string2.length; i++) {
        char = string2.charCodeAt(i);
        if (!isPrintable2(char)) {
          return STYLE_DOUBLE2;
        }
        prev_char = i > 0 ? string2.charCodeAt(i - 1) : null;
        plain = plain && isPlainSafe2(char, prev_char);
      }
    } else {
      for (i = 0; i < string2.length; i++) {
        char = string2.charCodeAt(i);
        if (char === CHAR_LINE_FEED2) {
          hasLineBreak = true;
          if (shouldTrackWidth) {
            hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
            i - previousLineBreak - 1 > lineWidth && string2[previousLineBreak + 1] !== " ";
            previousLineBreak = i;
          }
        } else if (!isPrintable2(char)) {
          return STYLE_DOUBLE2;
        }
        prev_char = i > 0 ? string2.charCodeAt(i - 1) : null;
        plain = plain && isPlainSafe2(char, prev_char);
      }
      hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string2[previousLineBreak + 1] !== " ");
    }
    if (!hasLineBreak && !hasFoldableLine) {
      return plain && !testAmbiguousType(string2) ? STYLE_PLAIN2 : STYLE_SINGLE2;
    }
    if (indentPerLevel > 9 && needIndentIndicator2(string2)) {
      return STYLE_DOUBLE2;
    }
    return hasFoldableLine ? STYLE_FOLDED2 : STYLE_LITERAL2;
  }
  function writeScalar2(state, string2, level, iskey) {
    state.dump = function() {
      if (string2.length === 0) {
        return "''";
      }
      if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX2.indexOf(string2) !== -1) {
        return "'" + string2 + "'";
      }
      var indent2 = state.indent * Math.max(1, level);
      var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent2);
      var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
      function testAmbiguity(string3) {
        return testImplicitResolving2(state, string3);
      }
      switch (chooseScalarStyle2(string2, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
        case STYLE_PLAIN2:
          return string2;
        case STYLE_SINGLE2:
          return "'" + string2.replace(/'/g, "''") + "'";
        case STYLE_LITERAL2:
          return "|" + blockHeader2(string2, state.indent) + dropEndingNewline2(indentString2(string2, indent2));
        case STYLE_FOLDED2:
          return ">" + blockHeader2(string2, state.indent) + dropEndingNewline2(indentString2(foldString2(string2, lineWidth), indent2));
        case STYLE_DOUBLE2:
          return '"' + escapeString2(string2) + '"';
        default:
          throw new YAMLException2("impossible error: invalid scalar style");
      }
    }();
  }
  function blockHeader2(string2, indentPerLevel) {
    var indentIndicator = needIndentIndicator2(string2) ? String(indentPerLevel) : "";
    var clip = string2[string2.length - 1] === "\n";
    var keep = clip && (string2[string2.length - 2] === "\n" || string2 === "\n");
    var chomp = keep ? "+" : clip ? "" : "-";
    return indentIndicator + chomp + "\n";
  }
  function dropEndingNewline2(string2) {
    return string2[string2.length - 1] === "\n" ? string2.slice(0, -1) : string2;
  }
  function foldString2(string2, width) {
    var lineRe = /(\n+)([^\n]*)/g;
    var result = function() {
      var nextLF = string2.indexOf("\n");
      nextLF = nextLF !== -1 ? nextLF : string2.length;
      lineRe.lastIndex = nextLF;
      return foldLine2(string2.slice(0, nextLF), width);
    }();
    var prevMoreIndented = string2[0] === "\n" || string2[0] === " ";
    var moreIndented;
    var match;
    while (match = lineRe.exec(string2)) {
      var prefix = match[1], line = match[2];
      moreIndented = line[0] === " ";
      result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine2(line, width);
      prevMoreIndented = moreIndented;
    }
    return result;
  }
  function foldLine2(line, width) {
    if (line === "" || line[0] === " ")
      return line;
    var breakRe = / [^ ]/g;
    var match;
    var start = 0, end, curr = 0, next = 0;
    var result = "";
    while (match = breakRe.exec(line)) {
      next = match.index;
      if (next - start > width) {
        end = curr > start ? curr : next;
        result += "\n" + line.slice(start, end);
        start = end + 1;
      }
      curr = next;
    }
    result += "\n";
    if (line.length - start > width && curr > start) {
      result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
    } else {
      result += line.slice(start);
    }
    return result.slice(1);
  }
  function escapeString2(string2) {
    var result = "";
    var char, nextChar;
    var escapeSeq;
    for (var i = 0; i < string2.length; i++) {
      char = string2.charCodeAt(i);
      if (char >= 55296 && char <= 56319) {
        nextChar = string2.charCodeAt(i + 1);
        if (nextChar >= 56320 && nextChar <= 57343) {
          result += encodeHex2((char - 55296) * 1024 + nextChar - 56320 + 65536);
          i++;
          continue;
        }
      }
      escapeSeq = ESCAPE_SEQUENCES2[char];
      result += !escapeSeq && isPrintable2(char) ? string2[i] : escapeSeq || encodeHex2(char);
    }
    return result;
  }
  function writeFlowSequence2(state, level, object) {
    var _result = "", _tag = state.tag, index2, length;
    for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
      if (writeNode2(state, level, object[index2], false, false)) {
        if (index2 !== 0)
          _result += "," + (!state.condenseFlow ? " " : "");
        _result += state.dump;
      }
    }
    state.tag = _tag;
    state.dump = "[" + _result + "]";
  }
  function writeBlockSequence2(state, level, object, compact) {
    var _result = "", _tag = state.tag, index2, length;
    for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
      if (writeNode2(state, level + 1, object[index2], true, true)) {
        if (!compact || index2 !== 0) {
          _result += generateNextLine2(state, level);
        }
        if (state.dump && CHAR_LINE_FEED2 === state.dump.charCodeAt(0)) {
          _result += "-";
        } else {
          _result += "- ";
        }
        _result += state.dump;
      }
    }
    state.tag = _tag;
    state.dump = _result || "[]";
  }
  function writeFlowMapping2(state, level, object) {
    var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index2, length, objectKey, objectValue, pairBuffer;
    for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
      pairBuffer = "";
      if (index2 !== 0)
        pairBuffer += ", ";
      if (state.condenseFlow)
        pairBuffer += '"';
      objectKey = objectKeyList[index2];
      objectValue = object[objectKey];
      if (!writeNode2(state, level, objectKey, false, false)) {
        continue;
      }
      if (state.dump.length > 1024)
        pairBuffer += "? ";
      pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
      if (!writeNode2(state, level, objectValue, false, false)) {
        continue;
      }
      pairBuffer += state.dump;
      _result += pairBuffer;
    }
    state.tag = _tag;
    state.dump = "{" + _result + "}";
  }
  function writeBlockMapping2(state, level, object, compact) {
    var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index2, length, objectKey, objectValue, explicitPair, pairBuffer;
    if (state.sortKeys === true) {
      objectKeyList.sort();
    } else if (typeof state.sortKeys === "function") {
      objectKeyList.sort(state.sortKeys);
    } else if (state.sortKeys) {
      throw new YAMLException2("sortKeys must be a boolean or a function");
    }
    for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
      pairBuffer = "";
      if (!compact || index2 !== 0) {
        pairBuffer += generateNextLine2(state, level);
      }
      objectKey = objectKeyList[index2];
      objectValue = object[objectKey];
      if (!writeNode2(state, level + 1, objectKey, true, true, true)) {
        continue;
      }
      explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
      if (explicitPair) {
        if (state.dump && CHAR_LINE_FEED2 === state.dump.charCodeAt(0)) {
          pairBuffer += "?";
        } else {
          pairBuffer += "? ";
        }
      }
      pairBuffer += state.dump;
      if (explicitPair) {
        pairBuffer += generateNextLine2(state, level);
      }
      if (!writeNode2(state, level + 1, objectValue, true, explicitPair)) {
        continue;
      }
      if (state.dump && CHAR_LINE_FEED2 === state.dump.charCodeAt(0)) {
        pairBuffer += ":";
      } else {
        pairBuffer += ": ";
      }
      pairBuffer += state.dump;
      _result += pairBuffer;
    }
    state.tag = _tag;
    state.dump = _result || "{}";
  }
  function detectType2(state, object, explicit) {
    var _result, typeList, index2, length, type2, style;
    typeList = explicit ? state.explicitTypes : state.implicitTypes;
    for (index2 = 0, length = typeList.length; index2 < length; index2 += 1) {
      type2 = typeList[index2];
      if ((type2.instanceOf || type2.predicate) && (!type2.instanceOf || typeof object === "object" && object instanceof type2.instanceOf) && (!type2.predicate || type2.predicate(object))) {
        state.tag = explicit ? type2.tag : "?";
        if (type2.represent) {
          style = state.styleMap[type2.tag] || type2.defaultStyle;
          if (_toString2.call(type2.represent) === "[object Function]") {
            _result = type2.represent(object, style);
          } else if (_hasOwnProperty2.call(type2.represent, style)) {
            _result = type2.represent[style](object, style);
          } else {
            throw new YAMLException2("!<" + type2.tag + '> tag resolver accepts not "' + style + '" style');
          }
          state.dump = _result;
        }
        return true;
      }
    }
    return false;
  }
  function writeNode2(state, level, object, block, compact, iskey) {
    state.tag = null;
    state.dump = object;
    if (!detectType2(state, object, false)) {
      detectType2(state, object, true);
    }
    var type2 = _toString2.call(state.dump);
    if (block) {
      block = state.flowLevel < 0 || state.flowLevel > level;
    }
    var objectOrArray = type2 === "[object Object]" || type2 === "[object Array]", duplicateIndex, duplicate;
    if (objectOrArray) {
      duplicateIndex = state.duplicates.indexOf(object);
      duplicate = duplicateIndex !== -1;
    }
    if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
      compact = false;
    }
    if (duplicate && state.usedDuplicates[duplicateIndex]) {
      state.dump = "*ref_" + duplicateIndex;
    } else {
      if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
        state.usedDuplicates[duplicateIndex] = true;
      }
      if (type2 === "[object Object]") {
        if (block && Object.keys(state.dump).length !== 0) {
          writeBlockMapping2(state, level, state.dump, compact);
          if (duplicate) {
            state.dump = "&ref_" + duplicateIndex + state.dump;
          }
        } else {
          writeFlowMapping2(state, level, state.dump);
          if (duplicate) {
            state.dump = "&ref_" + duplicateIndex + " " + state.dump;
          }
        }
      } else if (type2 === "[object Array]") {
        var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;
        if (block && state.dump.length !== 0) {
          writeBlockSequence2(state, arrayLevel, state.dump, compact);
          if (duplicate) {
            state.dump = "&ref_" + duplicateIndex + state.dump;
          }
        } else {
          writeFlowSequence2(state, arrayLevel, state.dump);
          if (duplicate) {
            state.dump = "&ref_" + duplicateIndex + " " + state.dump;
          }
        }
      } else if (type2 === "[object String]") {
        if (state.tag !== "?") {
          writeScalar2(state, state.dump, level, iskey);
        }
      } else {
        if (state.skipInvalid)
          return false;
        throw new YAMLException2("unacceptable kind of an object to dump " + type2);
      }
      if (state.tag !== null && state.tag !== "?") {
        state.dump = "!<" + state.tag + "> " + state.dump;
      }
    }
    return true;
  }
  function getDuplicateReferences2(object, state) {
    var objects = [], duplicatesIndexes = [], index2, length;
    inspectNode2(object, objects, duplicatesIndexes);
    for (index2 = 0, length = duplicatesIndexes.length; index2 < length; index2 += 1) {
      state.duplicates.push(objects[duplicatesIndexes[index2]]);
    }
    state.usedDuplicates = new Array(length);
  }
  function inspectNode2(object, objects, duplicatesIndexes) {
    var objectKeyList, index2, length;
    if (object !== null && typeof object === "object") {
      index2 = objects.indexOf(object);
      if (index2 !== -1) {
        if (duplicatesIndexes.indexOf(index2) === -1) {
          duplicatesIndexes.push(index2);
        }
      } else {
        objects.push(object);
        if (Array.isArray(object)) {
          for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
            inspectNode2(object[index2], objects, duplicatesIndexes);
          }
        } else {
          objectKeyList = Object.keys(object);
          for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
            inspectNode2(object[objectKeyList[index2]], objects, duplicatesIndexes);
          }
        }
      }
    }
  }
  function dump2(input, options) {
    options = options || {};
    var state = new State2(options);
    if (!state.noRefs)
      getDuplicateReferences2(input, state);
    if (writeNode2(state, 0, input, true, true))
      return state.dump + "\n";
    return "";
  }
  function safeDump2(input, options) {
    return dump2(input, common2.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
  }
  dumper$1.dump = dump2;
  dumper$1.safeDump = safeDump2;
  return dumper$1;
}
var hasRequiredJsYaml$1;
function requireJsYaml$1() {
  if (hasRequiredJsYaml$1)
    return jsYaml$2;
  hasRequiredJsYaml$1 = 1;
  var loader2 = requireLoader();
  var dumper2 = requireDumper();
  function deprecated(name) {
    return function() {
      throw new Error("Function " + name + " is deprecated and cannot be used.");
    };
  }
  jsYaml$2.Type = requireType();
  jsYaml$2.Schema = requireSchema();
  jsYaml$2.FAILSAFE_SCHEMA = requireFailsafe();
  jsYaml$2.JSON_SCHEMA = requireJson();
  jsYaml$2.CORE_SCHEMA = requireCore();
  jsYaml$2.DEFAULT_SAFE_SCHEMA = requireDefault_safe();
  jsYaml$2.DEFAULT_FULL_SCHEMA = requireDefault_full();
  jsYaml$2.load = loader2.load;
  jsYaml$2.loadAll = loader2.loadAll;
  jsYaml$2.safeLoad = loader2.safeLoad;
  jsYaml$2.safeLoadAll = loader2.safeLoadAll;
  jsYaml$2.dump = dumper2.dump;
  jsYaml$2.safeDump = dumper2.safeDump;
  jsYaml$2.YAMLException = requireException();
  jsYaml$2.MINIMAL_SCHEMA = requireFailsafe();
  jsYaml$2.SAFE_SCHEMA = requireDefault_safe();
  jsYaml$2.DEFAULT_SCHEMA = requireDefault_full();
  jsYaml$2.scan = deprecated("scan");
  jsYaml$2.parse = deprecated("parse");
  jsYaml$2.compose = deprecated("compose");
  jsYaml$2.addConstructor = deprecated("addConstructor");
  return jsYaml$2;
}
var jsYaml$1;
var hasRequiredJsYaml;
function requireJsYaml() {
  if (hasRequiredJsYaml)
    return jsYaml$1;
  hasRequiredJsYaml = 1;
  var yaml = requireJsYaml$1();
  jsYaml$1 = yaml;
  return jsYaml$1;
}
var hasRequiredReadYamlFile;
function requireReadYamlFile() {
  if (hasRequiredReadYamlFile)
    return readYamlFile.exports;
  hasRequiredReadYamlFile = 1;
  const fs2 = requireGracefulFs();
  const pify2 = requirePify();
  const stripBom2 = requireStripBom();
  const yaml = requireJsYaml();
  const parse2 = (data) => yaml.safeLoad(stripBom2(data));
  const readYamlFile$1 = (fp) => pify2(fs2.readFile)(fp, "utf8").then((data) => parse2(data));
  readYamlFile.exports = readYamlFile$1;
  readYamlFile.exports.default = readYamlFile$1;
  readYamlFile.exports.sync = (fp) => parse2(fs2.readFileSync(fp, "utf8"));
  return readYamlFile.exports;
}
var regeneratorExports = requireRegenerator();
const _regeneratorRuntime = /* @__PURE__ */ getDefaultExportFromCjs(regeneratorExports);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value2 = info.value;
  } catch (error2) {
    reject(error2);
    return;
  }
  if (info.done) {
    resolve(value2);
  } else {
    Promise.resolve(value2).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self2 = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self2, args);
      function _next(value2) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value2);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
var findUp$1 = { exports: {} };
var locatePath = { exports: {} };
var pLocate$2 = { exports: {} };
var pLimit$2 = { exports: {} };
var pTry$2 = { exports: {} };
const pTry$1 = (fn, ...arguments_) => new Promise((resolve) => {
  resolve(fn(...arguments_));
});
pTry$2.exports = pTry$1;
pTry$2.exports.default = pTry$1;
var pTryExports = pTry$2.exports;
const pTry = pTryExports;
const pLimit$1 = (concurrency) => {
  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
    return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));
  }
  const queue2 = [];
  let activeCount = 0;
  const next = () => {
    activeCount--;
    if (queue2.length > 0) {
      queue2.shift()();
    }
  };
  const run2 = (fn, resolve, ...args) => {
    activeCount++;
    const result = pTry(fn, ...args);
    resolve(result);
    result.then(next, next);
  };
  const enqueue = (fn, resolve, ...args) => {
    if (activeCount < concurrency) {
      run2(fn, resolve, ...args);
    } else {
      queue2.push(run2.bind(null, fn, resolve, ...args));
    }
  };
  const generator = (fn, ...args) => new Promise((resolve) => enqueue(fn, resolve, ...args));
  Object.defineProperties(generator, {
    activeCount: {
      get: () => activeCount
    },
    pendingCount: {
      get: () => queue2.length
    },
    clearQueue: {
      value: () => {
        queue2.length = 0;
      }
    }
  });
  return generator;
};
pLimit$2.exports = pLimit$1;
pLimit$2.exports.default = pLimit$1;
var pLimitExports = pLimit$2.exports;
const pLimit = pLimitExports;
class EndError extends Error {
  constructor(value2) {
    super();
    this.value = value2;
  }
}
const testElement = async (element, tester) => tester(await element);
const finder = async (element) => {
  const values = await Promise.all(element);
  if (values[1] === true) {
    throw new EndError(values[0]);
  }
  return false;
};
const pLocate$1 = async (iterable, tester, options) => {
  options = {
    concurrency: Infinity,
    preserveOrder: true,
    ...options
  };
  const limit = pLimit(options.concurrency);
  const items = [...iterable].map((element) => [element, limit(testElement, element, tester)]);
  const checkLimit = pLimit(options.preserveOrder ? 1 : Infinity);
  try {
    await Promise.all(items.map((element) => checkLimit(finder, element)));
  } catch (error2) {
    if (error2 instanceof EndError) {
      return error2.value;
    }
    throw error2;
  }
};
pLocate$2.exports = pLocate$1;
pLocate$2.exports.default = pLocate$1;
var pLocateExports = pLocate$2.exports;
const path$3 = require$$0$3;
const fs$2 = require$$0$1;
const { promisify: promisify$1 } = require$$0$2;
const pLocate = pLocateExports;
const fsStat = promisify$1(fs$2.stat);
const fsLStat = promisify$1(fs$2.lstat);
const typeMappings = {
  directory: "isDirectory",
  file: "isFile"
};
function checkType({ type: type2 }) {
  if (type2 in typeMappings) {
    return;
  }
  throw new Error(`Invalid type specified: ${type2}`);
}
const matchType = (type2, stat2) => type2 === void 0 || stat2[typeMappings[type2]]();
locatePath.exports = async (paths, options) => {
  options = {
    cwd: process.cwd(),
    type: "file",
    allowSymlinks: true,
    ...options
  };
  checkType(options);
  const statFn = options.allowSymlinks ? fsStat : fsLStat;
  return pLocate(paths, async (path_) => {
    try {
      const stat2 = await statFn(path$3.resolve(options.cwd, path_));
      return matchType(options.type, stat2);
    } catch (_) {
      return false;
    }
  }, options);
};
locatePath.exports.sync = (paths, options) => {
  options = {
    cwd: process.cwd(),
    allowSymlinks: true,
    type: "file",
    ...options
  };
  checkType(options);
  const statFn = options.allowSymlinks ? fs$2.statSync : fs$2.lstatSync;
  for (const path_ of paths) {
    try {
      const stat2 = statFn(path$3.resolve(options.cwd, path_));
      if (matchType(options.type, stat2)) {
        return path_;
      }
    } catch (_) {
    }
  }
};
var locatePathExports = locatePath.exports;
var pathExists = { exports: {} };
const fs$1 = require$$0$1;
const { promisify } = require$$0$2;
const pAccess = promisify(fs$1.access);
pathExists.exports = async (path2) => {
  try {
    await pAccess(path2);
    return true;
  } catch (_) {
    return false;
  }
};
pathExists.exports.sync = (path2) => {
  try {
    fs$1.accessSync(path2);
    return true;
  } catch (_) {
    return false;
  }
};
var pathExistsExports = pathExists.exports;
(function(module) {
  const path2 = require$$0$3;
  const locatePath2 = locatePathExports;
  const pathExists2 = pathExistsExports;
  const stop = Symbol("findUp.stop");
  module.exports = async (name, options = {}) => {
    let directory = path2.resolve(options.cwd || "");
    const { root } = path2.parse(directory);
    const paths = [].concat(name);
    const runMatcher = async (locateOptions) => {
      if (typeof name !== "function") {
        return locatePath2(paths, locateOptions);
      }
      const foundPath = await name(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath2([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = await runMatcher({ ...options, cwd: directory });
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path2.resolve(directory, foundPath);
      }
      if (directory === root) {
        return;
      }
      directory = path2.dirname(directory);
    }
  };
  module.exports.sync = (name, options = {}) => {
    let directory = path2.resolve(options.cwd || "");
    const { root } = path2.parse(directory);
    const paths = [].concat(name);
    const runMatcher = (locateOptions) => {
      if (typeof name !== "function") {
        return locatePath2.sync(paths, locateOptions);
      }
      const foundPath = name(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath2.sync([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = runMatcher({ ...options, cwd: directory });
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path2.resolve(directory, foundPath);
      }
      if (directory === root) {
        return;
      }
      directory = path2.dirname(directory);
    }
  };
  module.exports.exists = pathExists2;
  module.exports.sync.exists = pathExists2.sync;
  module.exports.stop = stop;
})(findUp$1);
var findUpExports = findUp$1.exports;
const findUp = /* @__PURE__ */ getDefaultExportFromCjs(findUpExports);
var libExports = requireLib();
const fs = /* @__PURE__ */ getDefaultExportFromCjs(libExports);
var NoPkgJsonFound$1 = /* @__PURE__ */ function(_Error) {
  _inherits(NoPkgJsonFound2, _Error);
  function NoPkgJsonFound2(directory) {
    var _this;
    _classCallCheck(this, NoPkgJsonFound2);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(NoPkgJsonFound2).call(this, "No package.json could be found upwards from the directory ".concat(directory)));
    _this.directory = directory;
    return _this;
  }
  return NoPkgJsonFound2;
}(_wrapNativeSuper(Error));
function hasWorkspacesConfiguredViaPkgJson(_x, _x2) {
  return _hasWorkspacesConfiguredViaPkgJson.apply(this, arguments);
}
function _hasWorkspacesConfiguredViaPkgJson() {
  _hasWorkspacesConfiguredViaPkgJson = _asyncToGenerator(
    /* @__PURE__ */ _regeneratorRuntime.mark(function _callee(directory, firstPkgJsonDirRef) {
      var pkgJson;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return fs.readJson(require$$0$3.join(directory, "package.json"));
            case 3:
              pkgJson = _context.sent;
              if (firstPkgJsonDirRef.current === void 0) {
                firstPkgJsonDirRef.current = directory;
              }
              if (!(pkgJson.workspaces || pkgJson.bolt)) {
                _context.next = 7;
                break;
              }
              return _context.abrupt("return", directory);
            case 7:
              _context.next = 13;
              break;
            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](0);
              if (!(_context.t0.code !== "ENOENT")) {
                _context.next = 13;
                break;
              }
              throw _context.t0;
            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 9]]);
    })
  );
  return _hasWorkspacesConfiguredViaPkgJson.apply(this, arguments);
}
function hasWorkspacesConfiguredViaLerna(_x3) {
  return _hasWorkspacesConfiguredViaLerna.apply(this, arguments);
}
function _hasWorkspacesConfiguredViaLerna() {
  _hasWorkspacesConfiguredViaLerna = _asyncToGenerator(
    /* @__PURE__ */ _regeneratorRuntime.mark(function _callee2(directory) {
      var lernaJson;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return fs.readJson(require$$0$3.join(directory, "lerna.json"));
            case 3:
              lernaJson = _context2.sent;
              if (!(lernaJson.useWorkspaces !== true)) {
                _context2.next = 6;
                break;
              }
              return _context2.abrupt("return", directory);
            case 6:
              _context2.next = 12;
              break;
            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              if (!(_context2.t0.code !== "ENOENT")) {
                _context2.next = 12;
                break;
              }
              throw _context2.t0;
            case 12:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[0, 8]]);
    })
  );
  return _hasWorkspacesConfiguredViaLerna.apply(this, arguments);
}
function hasWorkspacesConfiguredViaPnpm(_x4) {
  return _hasWorkspacesConfiguredViaPnpm.apply(this, arguments);
}
function _hasWorkspacesConfiguredViaPnpm() {
  _hasWorkspacesConfiguredViaPnpm = _asyncToGenerator(
    /* @__PURE__ */ _regeneratorRuntime.mark(function _callee3(directory) {
      var pnpmWorkspacesFileExists;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return fs.exists(require$$0$3.join(directory, "pnpm-workspace.yaml"));
            case 2:
              pnpmWorkspacesFileExists = _context3.sent;
              if (!pnpmWorkspacesFileExists) {
                _context3.next = 5;
                break;
              }
              return _context3.abrupt("return", directory);
            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })
  );
  return _hasWorkspacesConfiguredViaPnpm.apply(this, arguments);
}
function findRoot$1(_x5) {
  return _findRoot.apply(this, arguments);
}
function _findRoot() {
  _findRoot = _asyncToGenerator(
    /* @__PURE__ */ _regeneratorRuntime.mark(function _callee4(cwd) {
      var firstPkgJsonDirRef, dir;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              firstPkgJsonDirRef = {
                current: void 0
              };
              _context4.next = 3;
              return findUp(function(directory) {
                return Promise.all([hasWorkspacesConfiguredViaLerna(directory), hasWorkspacesConfiguredViaPkgJson(directory, firstPkgJsonDirRef), hasWorkspacesConfiguredViaPnpm(directory)]).then(function(x) {
                  return x.find(function(dir2) {
                    return dir2;
                  });
                });
              }, {
                cwd,
                type: "directory"
              });
            case 3:
              dir = _context4.sent;
              if (!(firstPkgJsonDirRef.current === void 0)) {
                _context4.next = 6;
                break;
              }
              throw new NoPkgJsonFound$1(cwd);
            case 6:
              if (!(dir === void 0)) {
                _context4.next = 8;
                break;
              }
              return _context4.abrupt("return", firstPkgJsonDirRef.current);
            case 8:
              return _context4.abrupt("return", dir);
            case 9:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })
  );
  return _findRoot.apply(this, arguments);
}
function hasWorkspacesConfiguredViaPkgJsonSync(directory, firstPkgJsonDirRef) {
  try {
    var pkgJson = fs.readJsonSync(require$$0$3.join(directory, "package.json"));
    if (firstPkgJsonDirRef.current === void 0) {
      firstPkgJsonDirRef.current = directory;
    }
    if (pkgJson.workspaces || pkgJson.bolt) {
      return directory;
    }
  } catch (err) {
    if (err.code !== "ENOENT") {
      throw err;
    }
  }
}
function hasWorkspacesConfiguredViaLernaSync(directory) {
  try {
    var lernaJson = fs.readJsonSync(require$$0$3.join(directory, "lerna.json"));
    if (lernaJson.useWorkspaces !== true) {
      return directory;
    }
  } catch (err) {
    if (err.code !== "ENOENT") {
      throw err;
    }
  }
}
function hasWorkspacesConfiguredViaPnpmSync(directory) {
  var pnpmWorkspacesFileExists = fs.existsSync(require$$0$3.join(directory, "pnpm-workspace.yaml"));
  if (pnpmWorkspacesFileExists) {
    return directory;
  }
}
function findRootSync$1(cwd) {
  var firstPkgJsonDirRef = {
    current: void 0
  };
  findUpExports.sync(function(directory) {
    return [hasWorkspacesConfiguredViaLernaSync(directory), hasWorkspacesConfiguredViaPkgJsonSync(directory, firstPkgJsonDirRef), hasWorkspacesConfiguredViaPnpmSync(directory)].find(function(dir) {
      return dir;
    });
  }, {
    cwd,
    type: "directory"
  });
  {
    throw new NoPkgJsonFound$1(cwd);
  }
}
const findRoot_esm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  NoPkgJsonFound: NoPkgJsonFound$1,
  findRoot: findRoot$1,
  findRootSync: findRootSync$1
}, Symbol.toStringTag, { value: "Module" }));
const require$$11 = /* @__PURE__ */ getAugmentedNamespace(findRoot_esm);
var hasRequiredGetPackages_cjs_prod;
function requireGetPackages_cjs_prod() {
  if (hasRequiredGetPackages_cjs_prod)
    return getPackages_cjs_prod;
  hasRequiredGetPackages_cjs_prod = 1;
  function _interopDefault(ex) {
    return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
  }
  Object.defineProperty(getPackages_cjs_prod, "__esModule", {
    value: true
  });
  var _regeneratorRuntime2 = _interopDefault(requireRegenerator()), _asyncToGenerator2 = _interopDefault(requireAsyncToGenerator()), _classCallCheck2 = _interopDefault(requireClassCallCheck()), _possibleConstructorReturn2 = _interopDefault(requirePossibleConstructorReturn()), _getPrototypeOf2 = _interopDefault(requireGetPrototypeOf()), _inherits2 = _interopDefault(requireInherits()), _wrapNativeSuper2 = _interopDefault(requireWrapNativeSuper()), fs2 = _interopDefault(requireLib()), path2 = _interopDefault(require$$0$3), globby2 = requireGlobby(), globby__default = _interopDefault(globby2), readYamlFile2 = requireReadYamlFile(), readYamlFile__default = _interopDefault(readYamlFile2), findRoot2 = require$$11, PackageJsonMissingNameError = function(_Error) {
    function PackageJsonMissingNameError2(directories) {
      var _this;
      return _classCallCheck2(this, PackageJsonMissingNameError2), (_this = _possibleConstructorReturn2(this, _getPrototypeOf2(PackageJsonMissingNameError2).call(this, 'The following package.jsons are missing the "name" field:\n'.concat(directories.join("\n"))))).directories = directories, _this;
    }
    return _inherits2(PackageJsonMissingNameError2, _Error), PackageJsonMissingNameError2;
  }(_wrapNativeSuper2(Error));
  function getPackages(_x) {
    return _getPackages.apply(this, arguments);
  }
  function _getPackages() {
    return (_getPackages = _asyncToGenerator2(_regeneratorRuntime2.mark(function _callee(dir) {
      var cwd, pkg, tool, manifest, lernaJson, root, relativeDirectories, directories, pkgJsonsMissingNameField, results;
      return _regeneratorRuntime2.wrap(function(_context) {
        for (; ; )
          switch (_context.prev = _context.next) {
            case 0:
              return _context.next = 2, findRoot2.findRoot(dir);
            case 2:
              return cwd = _context.sent, _context.next = 5, fs2.readJson(path2.join(cwd, "package.json"));
            case 5:
              if (!(pkg = _context.sent).workspaces) {
                _context.next = 10;
                break;
              }
              Array.isArray(pkg.workspaces) ? tool = {
                type: "yarn",
                packageGlobs: pkg.workspaces
              } : pkg.workspaces.packages && (tool = {
                type: "yarn",
                packageGlobs: pkg.workspaces.packages
              }), _context.next = 37;
              break;
            case 10:
              if (!pkg.bolt || !pkg.bolt.workspaces) {
                _context.next = 14;
                break;
              }
              tool = {
                type: "bolt",
                packageGlobs: pkg.bolt.workspaces
              }, _context.next = 37;
              break;
            case 14:
              return _context.prev = 14, _context.next = 17, readYamlFile__default(path2.join(cwd, "pnpm-workspace.yaml"));
            case 17:
              (manifest = _context.sent) && manifest.packages && (tool = {
                type: "pnpm",
                packageGlobs: manifest.packages
              }), _context.next = 25;
              break;
            case 21:
              if (_context.prev = 21, _context.t0 = _context.catch(14), "ENOENT" === _context.t0.code) {
                _context.next = 25;
                break;
              }
              throw _context.t0;
            case 25:
              if (tool) {
                _context.next = 37;
                break;
              }
              return _context.prev = 26, _context.next = 29, fs2.readJson(path2.join(cwd, "lerna.json"));
            case 29:
              (lernaJson = _context.sent) && (tool = {
                type: "lerna",
                packageGlobs: lernaJson.packages || ["packages/*"]
              }), _context.next = 37;
              break;
            case 33:
              if (_context.prev = 33, _context.t1 = _context.catch(26), "ENOENT" === _context.t1.code) {
                _context.next = 37;
                break;
              }
              throw _context.t1;
            case 37:
              if (tool) {
                _context.next = 42;
                break;
              }
              if (root = {
                dir: cwd,
                packageJson: pkg
              }, pkg.name) {
                _context.next = 41;
                break;
              }
              throw new PackageJsonMissingNameError(["package.json"]);
            case 41:
              return _context.abrupt("return", {
                tool: "root",
                root,
                packages: [root]
              });
            case 42:
              return _context.next = 44, globby__default(tool.packageGlobs, {
                cwd,
                onlyDirectories: true,
                expandDirectories: false,
                ignore: ["**/node_modules"]
              });
            case 44:
              return relativeDirectories = _context.sent, directories = relativeDirectories.map(function(p) {
                return path2.resolve(cwd, p);
              }), pkgJsonsMissingNameField = [], _context.next = 49, Promise.all(directories.sort().map(function(dir2) {
                return fs2.readJson(path2.join(dir2, "package.json")).then(function(packageJson) {
                  return packageJson.name || pkgJsonsMissingNameField.push(path2.relative(cwd, path2.join(dir2, "package.json"))), {
                    packageJson,
                    dir: dir2
                  };
                }).catch(function(err) {
                  if ("ENOENT" === err.code)
                    return null;
                  throw err;
                });
              }));
            case 49:
              if (_context.t2 = function(x) {
                return x;
              }, results = _context.sent.filter(_context.t2), 0 === pkgJsonsMissingNameField.length) {
                _context.next = 54;
                break;
              }
              throw pkgJsonsMissingNameField.sort(), new PackageJsonMissingNameError(pkgJsonsMissingNameField);
            case 54:
              return _context.abrupt("return", {
                tool: tool.type,
                root: {
                  dir: cwd,
                  packageJson: pkg
                },
                packages: results
              });
            case 55:
            case "end":
              return _context.stop();
          }
      }, _callee, null, [[14, 21], [26, 33]]);
    }))).apply(this, arguments);
  }
  function getPackagesSync(dir) {
    var tool, cwd = findRoot2.findRootSync(dir), pkg = fs2.readJsonSync(path2.join(cwd, "package.json"));
    if (pkg.workspaces)
      Array.isArray(pkg.workspaces) ? tool = {
        type: "yarn",
        packageGlobs: pkg.workspaces
      } : pkg.workspaces.packages && (tool = {
        type: "yarn",
        packageGlobs: pkg.workspaces.packages
      });
    else if (pkg.bolt && pkg.bolt.workspaces)
      tool = {
        type: "bolt",
        packageGlobs: pkg.bolt.workspaces
      };
    else {
      try {
        var manifest = readYamlFile2.sync(path2.join(cwd, "pnpm-workspace.yaml"));
        manifest && manifest.packages && (tool = {
          type: "pnpm",
          packageGlobs: manifest.packages
        });
      } catch (err) {
        if ("ENOENT" !== err.code)
          throw err;
      }
      if (!tool)
        try {
          var lernaJson = fs2.readJsonSync(path2.join(cwd, "lerna.json"));
          lernaJson && (tool = {
            type: "lerna",
            packageGlobs: lernaJson.packages || ["packages/*"]
          });
        } catch (err) {
          if ("ENOENT" !== err.code)
            throw err;
        }
    }
    if (!tool) {
      var root = {
        dir: cwd,
        packageJson: pkg
      };
      if (!pkg.name)
        throw new PackageJsonMissingNameError(["package.json"]);
      return {
        tool: "root",
        root,
        packages: [root]
      };
    }
    var directories = globby2.sync(tool.packageGlobs, {
      cwd,
      onlyDirectories: true,
      expandDirectories: false,
      ignore: ["**/node_modules"]
    }).map(function(p) {
      return path2.resolve(cwd, p);
    }), pkgJsonsMissingNameField = [], results = directories.sort().map(function(dir2) {
      try {
        var packageJson = fs2.readJsonSync(path2.join(dir2, "package.json"));
        return packageJson.name || pkgJsonsMissingNameField.push(path2.relative(cwd, path2.join(dir2, "package.json"))), {
          packageJson,
          dir: dir2
        };
      } catch (err) {
        if ("ENOENT" === err.code)
          return null;
        throw err;
      }
    }).filter(function(x) {
      return x;
    });
    if (0 !== pkgJsonsMissingNameField.length)
      throw pkgJsonsMissingNameField.sort(), new PackageJsonMissingNameError(pkgJsonsMissingNameField);
    return {
      tool: tool.type,
      root: {
        dir: cwd,
        packageJson: pkg
      },
      packages: results
    };
  }
  getPackages_cjs_prod.PackageJsonMissingNameError = PackageJsonMissingNameError, getPackages_cjs_prod.getPackages = getPackages, getPackages_cjs_prod.getPackagesSync = getPackagesSync;
  return getPackages_cjs_prod;
}
var getPackages_cjs_dev = {};
var hasRequiredGetPackages_cjs_dev;
function requireGetPackages_cjs_dev() {
  if (hasRequiredGetPackages_cjs_dev)
    return getPackages_cjs_dev;
  hasRequiredGetPackages_cjs_dev = 1;
  Object.defineProperty(getPackages_cjs_dev, "__esModule", { value: true });
  function _interopDefault(ex) {
    return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
  }
  var _regeneratorRuntime2 = _interopDefault(requireRegenerator());
  var _asyncToGenerator2 = _interopDefault(requireAsyncToGenerator());
  var _classCallCheck2 = _interopDefault(requireClassCallCheck());
  var _possibleConstructorReturn2 = _interopDefault(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopDefault(requireGetPrototypeOf());
  var _inherits2 = _interopDefault(requireInherits());
  var _wrapNativeSuper2 = _interopDefault(requireWrapNativeSuper());
  var fs2 = _interopDefault(requireLib());
  var path2 = _interopDefault(require$$0$3);
  var globby2 = requireGlobby();
  var globby__default = _interopDefault(globby2);
  var readYamlFile2 = requireReadYamlFile();
  var readYamlFile__default = _interopDefault(readYamlFile2);
  var findRoot2 = require$$11;
  var PackageJsonMissingNameError = /* @__PURE__ */ function(_Error) {
    _inherits2(PackageJsonMissingNameError2, _Error);
    function PackageJsonMissingNameError2(directories) {
      var _this;
      _classCallCheck2(this, PackageJsonMissingNameError2);
      _this = _possibleConstructorReturn2(this, _getPrototypeOf2(PackageJsonMissingNameError2).call(this, 'The following package.jsons are missing the "name" field:\n'.concat(directories.join("\n"))));
      _this.directories = directories;
      return _this;
    }
    return PackageJsonMissingNameError2;
  }(_wrapNativeSuper2(Error));
  function getPackages(_x) {
    return _getPackages.apply(this, arguments);
  }
  function _getPackages() {
    _getPackages = _asyncToGenerator2(
      /* @__PURE__ */ _regeneratorRuntime2.mark(function _callee(dir) {
        var cwd, pkg, tool, manifest, lernaJson, root, relativeDirectories, directories, pkgJsonsMissingNameField, results;
        return _regeneratorRuntime2.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return findRoot2.findRoot(dir);
              case 2:
                cwd = _context.sent;
                _context.next = 5;
                return fs2.readJson(path2.join(cwd, "package.json"));
              case 5:
                pkg = _context.sent;
                if (!pkg.workspaces) {
                  _context.next = 10;
                  break;
                }
                if (Array.isArray(pkg.workspaces)) {
                  tool = {
                    type: "yarn",
                    packageGlobs: pkg.workspaces
                  };
                } else if (pkg.workspaces.packages) {
                  tool = {
                    type: "yarn",
                    packageGlobs: pkg.workspaces.packages
                  };
                }
                _context.next = 37;
                break;
              case 10:
                if (!(pkg.bolt && pkg.bolt.workspaces)) {
                  _context.next = 14;
                  break;
                }
                tool = {
                  type: "bolt",
                  packageGlobs: pkg.bolt.workspaces
                };
                _context.next = 37;
                break;
              case 14:
                _context.prev = 14;
                _context.next = 17;
                return readYamlFile__default(path2.join(cwd, "pnpm-workspace.yaml"));
              case 17:
                manifest = _context.sent;
                if (manifest && manifest.packages) {
                  tool = {
                    type: "pnpm",
                    packageGlobs: manifest.packages
                  };
                }
                _context.next = 25;
                break;
              case 21:
                _context.prev = 21;
                _context.t0 = _context["catch"](14);
                if (!(_context.t0.code !== "ENOENT")) {
                  _context.next = 25;
                  break;
                }
                throw _context.t0;
              case 25:
                if (tool) {
                  _context.next = 37;
                  break;
                }
                _context.prev = 26;
                _context.next = 29;
                return fs2.readJson(path2.join(cwd, "lerna.json"));
              case 29:
                lernaJson = _context.sent;
                if (lernaJson) {
                  tool = {
                    type: "lerna",
                    packageGlobs: lernaJson.packages || ["packages/*"]
                  };
                }
                _context.next = 37;
                break;
              case 33:
                _context.prev = 33;
                _context.t1 = _context["catch"](26);
                if (!(_context.t1.code !== "ENOENT")) {
                  _context.next = 37;
                  break;
                }
                throw _context.t1;
              case 37:
                if (tool) {
                  _context.next = 42;
                  break;
                }
                root = {
                  dir: cwd,
                  packageJson: pkg
                };
                if (pkg.name) {
                  _context.next = 41;
                  break;
                }
                throw new PackageJsonMissingNameError(["package.json"]);
              case 41:
                return _context.abrupt("return", {
                  tool: "root",
                  root,
                  packages: [root]
                });
              case 42:
                _context.next = 44;
                return globby__default(tool.packageGlobs, {
                  cwd,
                  onlyDirectories: true,
                  expandDirectories: false,
                  ignore: ["**/node_modules"]
                });
              case 44:
                relativeDirectories = _context.sent;
                directories = relativeDirectories.map(function(p) {
                  return path2.resolve(cwd, p);
                });
                pkgJsonsMissingNameField = [];
                _context.next = 49;
                return Promise.all(directories.sort().map(function(dir2) {
                  return fs2.readJson(path2.join(dir2, "package.json")).then(function(packageJson) {
                    if (!packageJson.name) {
                      pkgJsonsMissingNameField.push(path2.relative(cwd, path2.join(dir2, "package.json")));
                    }
                    return {
                      packageJson,
                      dir: dir2
                    };
                  })["catch"](function(err) {
                    if (err.code === "ENOENT") {
                      return null;
                    }
                    throw err;
                  });
                }));
              case 49:
                _context.t2 = function(x) {
                  return x;
                };
                results = _context.sent.filter(_context.t2);
                if (!(pkgJsonsMissingNameField.length !== 0)) {
                  _context.next = 54;
                  break;
                }
                pkgJsonsMissingNameField.sort();
                throw new PackageJsonMissingNameError(pkgJsonsMissingNameField);
              case 54:
                return _context.abrupt("return", {
                  tool: tool.type,
                  root: {
                    dir: cwd,
                    packageJson: pkg
                  },
                  packages: results
                });
              case 55:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[14, 21], [26, 33]]);
      })
    );
    return _getPackages.apply(this, arguments);
  }
  function getPackagesSync(dir) {
    var cwd = findRoot2.findRootSync(dir);
    var pkg = fs2.readJsonSync(path2.join(cwd, "package.json"));
    var tool;
    if (pkg.workspaces) {
      if (Array.isArray(pkg.workspaces)) {
        tool = {
          type: "yarn",
          packageGlobs: pkg.workspaces
        };
      } else if (pkg.workspaces.packages) {
        tool = {
          type: "yarn",
          packageGlobs: pkg.workspaces.packages
        };
      }
    } else if (pkg.bolt && pkg.bolt.workspaces) {
      tool = {
        type: "bolt",
        packageGlobs: pkg.bolt.workspaces
      };
    } else {
      try {
        var manifest = readYamlFile2.sync(path2.join(cwd, "pnpm-workspace.yaml"));
        if (manifest && manifest.packages) {
          tool = {
            type: "pnpm",
            packageGlobs: manifest.packages
          };
        }
      } catch (err) {
        if (err.code !== "ENOENT") {
          throw err;
        }
      }
      if (!tool) {
        try {
          var lernaJson = fs2.readJsonSync(path2.join(cwd, "lerna.json"));
          if (lernaJson) {
            tool = {
              type: "lerna",
              packageGlobs: lernaJson.packages || ["packages/*"]
            };
          }
        } catch (err) {
          if (err.code !== "ENOENT") {
            throw err;
          }
        }
      }
    }
    if (!tool) {
      var root = {
        dir: cwd,
        packageJson: pkg
      };
      if (!pkg.name) {
        throw new PackageJsonMissingNameError(["package.json"]);
      }
      return {
        tool: "root",
        root,
        packages: [root]
      };
    }
    var relativeDirectories = globby2.sync(tool.packageGlobs, {
      cwd,
      onlyDirectories: true,
      expandDirectories: false,
      ignore: ["**/node_modules"]
    });
    var directories = relativeDirectories.map(function(p) {
      return path2.resolve(cwd, p);
    });
    var pkgJsonsMissingNameField = [];
    var results = directories.sort().map(function(dir2) {
      try {
        var packageJson = fs2.readJsonSync(path2.join(dir2, "package.json"));
        if (!packageJson.name) {
          pkgJsonsMissingNameField.push(path2.relative(cwd, path2.join(dir2, "package.json")));
        }
        return {
          packageJson,
          dir: dir2
        };
      } catch (err) {
        if (err.code === "ENOENT")
          return null;
        throw err;
      }
    }).filter(function(x) {
      return x;
    });
    if (pkgJsonsMissingNameField.length !== 0) {
      pkgJsonsMissingNameField.sort();
      throw new PackageJsonMissingNameError(pkgJsonsMissingNameField);
    }
    return {
      tool: tool.type,
      root: {
        dir: cwd,
        packageJson: pkg
      },
      packages: results
    };
  }
  getPackages_cjs_dev.PackageJsonMissingNameError = PackageJsonMissingNameError;
  getPackages_cjs_dev.getPackages = getPackages;
  getPackages_cjs_dev.getPackagesSync = getPackagesSync;
  return getPackages_cjs_dev;
}
if (process.env.NODE_ENV === "production") {
  getPackages_cjs.exports = requireGetPackages_cjs_prod();
} else {
  getPackages_cjs.exports = requireGetPackages_cjs_dev();
}
var getPackages_cjsExports = getPackages_cjs.exports;
var bld = {};
var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
    d.__proto__ = b;
  } || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(bld, "__esModule", { value: true });
var ExtendableError = (
  /** @class */
  function(_super) {
    __extends(ExtendableError2, _super);
    function ExtendableError2(message) {
      var _newTarget = this.constructor;
      if (message === void 0) {
        message = "";
      }
      var _this = _super.call(this, message) || this;
      _this.message = message;
      Object.setPrototypeOf(_this, _newTarget.prototype);
      delete _this.stack;
      _this.name = _newTarget.name;
      _this._error = new Error();
      return _this;
    }
    Object.defineProperty(ExtendableError2.prototype, "stack", {
      get: function() {
        if (this._stack) {
          return this._stack;
        }
        var prototype = Object.getPrototypeOf(this);
        var depth2 = 1;
        loop:
          while (prototype) {
            switch (prototype) {
              case ExtendableError2.prototype:
                break loop;
              case Object.prototype:
                depth2 = 1;
                break loop;
              default:
                depth2++;
                break;
            }
            prototype = Object.getPrototypeOf(prototype);
          }
        var stackLines = (this._error.stack || "").match(/.+/g) || [];
        var nameLine = this.name;
        if (this.message) {
          nameLine += ": " + this.message;
        }
        stackLines.splice(0, depth2 + 1, nameLine);
        return this._stack = stackLines.join("\n");
      },
      enumerable: true,
      configurable: true
    });
    return ExtendableError2;
  }(Error)
);
bld.ExtendableError = ExtendableError;
bld.default = ExtendableError;
var isWindows$1 = { exports: {} };
/*!
 * is-windows <https://github.com/jonschlinkert/is-windows>
 *
 * Copyright © 2015-2018, Jon Schlinkert.
 * Released under the MIT License.
 */
(function(module, exports) {
  (function(factory) {
    if (exports && true && true) {
      module.exports = factory();
    } else if (typeof window !== "undefined") {
      window.isWindows = factory();
    } else if (typeof commonjsGlobal !== "undefined") {
      commonjsGlobal.isWindows = factory();
    } else if (typeof self !== "undefined") {
      self.isWindows = factory();
    } else {
      this.isWindows = factory();
    }
  })(function() {
    return function isWindows2() {
      return process && (process.platform === "win32" || /^(msys|cygwin)$/.test(process.env.OSTYPE));
    };
  });
})(isWindows$1, isWindows$1.exports);
var isWindowsExports = isWindows$1.exports;
const path$2 = require$$0$3;
const isWindows = isWindowsExports;
var betterPathResolve$1 = isWindows() ? winResolve : path$2.resolve;
function winResolve(p) {
  if (arguments.length === 0)
    return path$2.resolve();
  if (typeof p !== "string") {
    return path$2.resolve(p);
  }
  if (p[1] === ":") {
    const cc = p[0].charCodeAt();
    if (cc < 65 || cc > 90) {
      p = `${p[0].toUpperCase()}${p.substr(1)}`;
    }
  }
  if (p.endsWith(":")) {
    return p;
  }
  return path$2.resolve(p);
}
const betterPathResolve = betterPathResolve$1;
const path$1 = require$$0$3;
function isSubdir(parentDir, subdir) {
  const rParent = `${betterPathResolve(parentDir)}${path$1.sep}`;
  const rDir = `${betterPathResolve(subdir)}${path$1.sep}`;
  return rDir.startsWith(rParent);
}
isSubdir.strict = function isSubdirStrict(parentDir, subdir) {
  const rParent = `${betterPathResolve(parentDir)}${path$1.sep}`;
  const rDir = `${betterPathResolve(subdir)}${path$1.sep}`;
  return rDir !== rParent && rDir.startsWith(rParent);
};
var isSubdir_1 = isSubdir;
const isSubdir$1 = /* @__PURE__ */ getDefaultExportFromCjs(isSubdir_1);
async function getDivergedCommit(cwd, ref) {
  const cmd = await spawn$1("git", ["merge-base", ref, "HEAD"], {
    cwd
  });
  if (cmd.code !== 0) {
    throw new Error(`Failed to find where HEAD diverged from ${ref}. Does ${ref} exist?`);
  }
  return cmd.stdout.toString().trim();
}
async function getRepoRoot({
  cwd
}) {
  const {
    stdout,
    code: code2,
    stderr
  } = await spawn$1("git", ["rev-parse", "--show-toplevel"], {
    cwd
  });
  if (code2 !== 0) {
    throw new Error(stderr.toString());
  }
  return stdout.toString().trim().replace(/\n|\r/g, "");
}
async function getChangedFilesSince({
  cwd,
  ref,
  fullPath = false
}) {
  const divergedAt = await getDivergedCommit(cwd, ref);
  const cmd = await spawn$1("git", ["diff", "--name-only", divergedAt], {
    cwd
  });
  if (cmd.code !== 0) {
    throw new Error(`Failed to diff against ${divergedAt}. Is ${divergedAt} a valid ref?`);
  }
  const files = cmd.stdout.toString().trim().split("\n").filter((a) => a);
  if (!fullPath)
    return files;
  const repoRoot = await getRepoRoot({
    cwd
  });
  return files.map((file2) => require$$0$3.resolve(repoRoot, file2));
}
async function getChangedPackagesSinceRef({
  cwd,
  ref,
  changedFilePatterns = ["**"]
}) {
  const changedFiles = await getChangedFilesSince({
    ref,
    cwd,
    fullPath: true
  });
  return [...(await getPackages_cjsExports.getPackages(cwd)).packages].sort((pkgA, pkgB) => pkgB.dir.length - pkgA.dir.length).filter((pkg) => {
    const changedPackageFiles = [];
    for (let i = changedFiles.length - 1; i >= 0; i--) {
      const file2 = changedFiles[i];
      if (isSubdir$1(pkg.dir, file2)) {
        changedFiles.splice(i, 1);
        const relativeFile = file2.slice(pkg.dir.length + 1);
        changedPackageFiles.push(relativeFile);
      }
    }
    return changedPackageFiles.length > 0 && micromatch$1(changedPackageFiles, changedFilePatterns).length > 0;
  });
}
var manypkgGetPackages_cjs = { exports: {} };
var manypkgGetPackages_cjs_prod = {};
var manypkgTools_cjs = { exports: {} };
var manypkgTools_cjs_prod = {};
var jju = { exports: {} };
var parse$1 = { exports: {} };
var unicode = { exports: {} };
var hasRequiredUnicode;
function requireUnicode() {
  if (hasRequiredUnicode)
    return unicode.exports;
  hasRequiredUnicode = 1;
  (function(module) {
    var Uni = module.exports;
    module.exports.isWhiteSpace = function isWhiteSpace(x) {
      return x === " " || x === " " || x === "\uFEFF" || x >= "	" && x <= "\r" || x === " " || x >= " " && x <= " " || x === "\u2028" || x === "\u2029" || x === " " || x === " " || x === "　";
    };
    module.exports.isWhiteSpaceJSON = function isWhiteSpaceJSON(x) {
      return x === " " || x === "	" || x === "\n" || x === "\r";
    };
    module.exports.isLineTerminator = function isLineTerminator(x) {
      return x === "\n" || x === "\r" || x === "\u2028" || x === "\u2029";
    };
    module.exports.isLineTerminatorJSON = function isLineTerminatorJSON(x) {
      return x === "\n" || x === "\r";
    };
    module.exports.isIdentifierStart = function isIdentifierStart(x) {
      return x === "$" || x === "_" || x >= "A" && x <= "Z" || x >= "a" && x <= "z" || x >= "" && Uni.NonAsciiIdentifierStart.test(x);
    };
    module.exports.isIdentifierPart = function isIdentifierPart(x) {
      return x === "$" || x === "_" || x >= "A" && x <= "Z" || x >= "a" && x <= "z" || x >= "0" && x <= "9" || x >= "" && Uni.NonAsciiIdentifierPart.test(x);
    };
    module.exports.NonAsciiIdentifierStart = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/;
    module.exports.NonAsciiIdentifierPart = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/;
  })(unicode);
  return unicode.exports;
}
var hasRequiredParse;
function requireParse() {
  if (hasRequiredParse)
    return parse$1.exports;
  hasRequiredParse = 1;
  (function(module) {
    var Uni = requireUnicode();
    function isHexDigit(x) {
      return x >= "0" && x <= "9" || x >= "A" && x <= "F" || x >= "a" && x <= "f";
    }
    function isOctDigit(x) {
      return x >= "0" && x <= "7";
    }
    function isDecDigit(x) {
      return x >= "0" && x <= "9";
    }
    var unescapeMap = {
      "'": "'",
      '"': '"',
      "\\": "\\",
      "b": "\b",
      "f": "\f",
      "n": "\n",
      "r": "\r",
      "t": "	",
      "v": "\v",
      "/": "/"
    };
    function formatError2(input, msg, position2, lineno, column, json5) {
      var result = msg + " at " + (lineno + 1) + ":" + (column + 1), tmppos = position2 - column - 1, srcline = "", underline = "";
      var isLineTerminator = json5 ? Uni.isLineTerminator : Uni.isLineTerminatorJSON;
      if (tmppos < position2 - 70) {
        tmppos = position2 - 70;
      }
      while (1) {
        var chr = input[++tmppos];
        if (isLineTerminator(chr) || tmppos === input.length) {
          if (position2 >= tmppos) {
            underline += "^";
          }
          break;
        }
        srcline += chr;
        if (position2 === tmppos) {
          underline += "^";
        } else if (position2 > tmppos) {
          underline += input[tmppos] === "	" ? "	" : " ";
        }
        if (srcline.length > 78)
          break;
      }
      return result + "\n" + srcline + "\n" + underline;
    }
    function parse2(input, options) {
      var json5 = false;
      var cjson = false;
      if (options.legacy || options.mode === "json")
        ;
      else if (options.mode === "cjson") {
        cjson = true;
      } else if (options.mode === "json5") {
        json5 = true;
      } else {
        json5 = true;
      }
      var isLineTerminator = json5 ? Uni.isLineTerminator : Uni.isLineTerminatorJSON;
      var isWhiteSpace = json5 ? Uni.isWhiteSpace : Uni.isWhiteSpaceJSON;
      var length = input.length, lineno = 0, linestart = 0, position2 = 0, stack = [];
      var tokenStart = function() {
      };
      var tokenEnd = function(v) {
        return v;
      };
      if (options._tokenize) {
        (function() {
          var start = null;
          tokenStart = function() {
            if (start !== null)
              throw Error("internal error, token overlap");
            start = position2;
          };
          tokenEnd = function(v, type2) {
            if (start != position2) {
              var hash = {
                raw: input.substr(start, position2 - start),
                type: type2,
                stack: stack.slice(0)
              };
              if (v !== void 0)
                hash.value = v;
              options._tokenize.call(null, hash);
            }
            start = null;
            return v;
          };
        })();
      }
      function fail(msg) {
        var column = position2 - linestart;
        if (!msg) {
          if (position2 < length) {
            var token = "'" + JSON.stringify(input[position2]).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
            if (!msg)
              msg = "Unexpected token " + token;
          } else {
            if (!msg)
              msg = "Unexpected end of input";
          }
        }
        var error2 = SyntaxError(formatError2(input, msg, position2, lineno, column, json5));
        error2.row = lineno + 1;
        error2.column = column + 1;
        throw error2;
      }
      function newline(chr) {
        if (chr === "\r" && input[position2] === "\n")
          position2++;
        linestart = position2;
        lineno++;
      }
      function parseGeneric() {
        while (position2 < length) {
          tokenStart();
          var chr = input[position2++];
          if (chr === '"' || chr === "'" && json5) {
            return tokenEnd(parseString(chr), "literal");
          } else if (chr === "{") {
            tokenEnd(void 0, "separator");
            return parseObject();
          } else if (chr === "[") {
            tokenEnd(void 0, "separator");
            return parseArray();
          } else if (chr === "-" || chr === "." || isDecDigit(chr) || json5 && (chr === "+" || chr === "I" || chr === "N")) {
            return tokenEnd(parseNumber(), "literal");
          } else if (chr === "n") {
            parseKeyword("null");
            return tokenEnd(null, "literal");
          } else if (chr === "t") {
            parseKeyword("true");
            return tokenEnd(true, "literal");
          } else if (chr === "f") {
            parseKeyword("false");
            return tokenEnd(false, "literal");
          } else {
            position2--;
            return tokenEnd(void 0);
          }
        }
      }
      function parseKey() {
        var result;
        while (position2 < length) {
          tokenStart();
          var chr = input[position2++];
          if (chr === '"' || chr === "'" && json5) {
            return tokenEnd(parseString(chr), "key");
          } else if (chr === "{") {
            tokenEnd(void 0, "separator");
            return parseObject();
          } else if (chr === "[") {
            tokenEnd(void 0, "separator");
            return parseArray();
          } else if (chr === "." || isDecDigit(chr)) {
            return tokenEnd(parseNumber(), "key");
          } else if (json5 && Uni.isIdentifierStart(chr) || chr === "\\" && input[position2] === "u") {
            var rollback = position2 - 1;
            var result = parseIdentifier();
            if (result === void 0) {
              position2 = rollback;
              return tokenEnd(void 0);
            } else {
              return tokenEnd(result, "key");
            }
          } else {
            position2--;
            return tokenEnd(void 0);
          }
        }
      }
      function skipWhiteSpace() {
        tokenStart();
        while (position2 < length) {
          var chr = input[position2++];
          if (isLineTerminator(chr)) {
            position2--;
            tokenEnd(void 0, "whitespace");
            tokenStart();
            position2++;
            newline(chr);
            tokenEnd(void 0, "newline");
            tokenStart();
          } else if (isWhiteSpace(chr))
            ;
          else if (chr === "/" && (json5 || cjson) && (input[position2] === "/" || input[position2] === "*")) {
            position2--;
            tokenEnd(void 0, "whitespace");
            tokenStart();
            position2++;
            skipComment(input[position2++] === "*");
            tokenEnd(void 0, "comment");
            tokenStart();
          } else {
            position2--;
            break;
          }
        }
        return tokenEnd(void 0, "whitespace");
      }
      function skipComment(multi) {
        while (position2 < length) {
          var chr = input[position2++];
          if (isLineTerminator(chr)) {
            if (!multi) {
              position2--;
              return;
            }
            newline(chr);
          } else if (chr === "*" && multi) {
            if (input[position2] === "/") {
              position2++;
              return;
            }
          } else
            ;
        }
        if (multi) {
          fail("Unclosed multiline comment");
        }
      }
      function parseKeyword(keyword) {
        var _pos = position2;
        var len = keyword.length;
        for (var i = 1; i < len; i++) {
          if (position2 >= length || keyword[i] != input[position2]) {
            position2 = _pos - 1;
            fail();
          }
          position2++;
        }
      }
      function parseObject() {
        var result = options.null_prototype ? /* @__PURE__ */ Object.create(null) : {}, empty_object = {}, is_non_empty = false;
        while (position2 < length) {
          skipWhiteSpace();
          var item1 = parseKey();
          skipWhiteSpace();
          tokenStart();
          var chr = input[position2++];
          tokenEnd(void 0, "separator");
          if (chr === "}" && item1 === void 0) {
            if (!json5 && is_non_empty) {
              position2--;
              fail("Trailing comma in object");
            }
            return result;
          } else if (chr === ":" && item1 !== void 0) {
            skipWhiteSpace();
            stack.push(item1);
            var item2 = parseGeneric();
            stack.pop();
            if (item2 === void 0)
              fail("No value found for key " + item1);
            if (typeof item1 !== "string") {
              if (!json5 || typeof item1 !== "number") {
                fail("Wrong key type: " + item1);
              }
            }
            if ((item1 in empty_object || empty_object[item1] != null) && options.reserved_keys !== "replace") {
              if (options.reserved_keys === "throw") {
                fail("Reserved key: " + item1);
              }
            } else {
              if (typeof options.reviver === "function") {
                item2 = options.reviver.call(null, item1, item2);
              }
              if (item2 !== void 0) {
                is_non_empty = true;
                Object.defineProperty(result, item1, {
                  value: item2,
                  enumerable: true,
                  configurable: true,
                  writable: true
                });
              }
            }
            skipWhiteSpace();
            tokenStart();
            var chr = input[position2++];
            tokenEnd(void 0, "separator");
            if (chr === ",") {
              continue;
            } else if (chr === "}") {
              return result;
            } else {
              fail();
            }
          } else {
            position2--;
            fail();
          }
        }
        fail();
      }
      function parseArray() {
        var result = [];
        while (position2 < length) {
          skipWhiteSpace();
          stack.push(result.length);
          var item = parseGeneric();
          stack.pop();
          skipWhiteSpace();
          tokenStart();
          var chr = input[position2++];
          tokenEnd(void 0, "separator");
          if (item !== void 0) {
            if (typeof options.reviver === "function") {
              item = options.reviver.call(null, String(result.length), item);
            }
            if (item === void 0) {
              result.length++;
              item = true;
            } else {
              result.push(item);
            }
          }
          if (chr === ",") {
            if (item === void 0) {
              fail("Elisions are not supported");
            }
          } else if (chr === "]") {
            if (!json5 && item === void 0 && result.length) {
              position2--;
              fail("Trailing comma in array");
            }
            return result;
          } else {
            position2--;
            fail();
          }
        }
      }
      function parseNumber() {
        position2--;
        var start = position2, chr = input[position2++];
        var to_num = function(is_octal2) {
          var str2 = input.substr(start, position2 - start);
          if (is_octal2) {
            var result = parseInt(str2.replace(/^0o?/, ""), 8);
          } else {
            var result = Number(str2);
          }
          if (Number.isNaN(result)) {
            position2--;
            fail('Bad numeric literal - "' + input.substr(start, position2 - start + 1) + '"');
          } else if (!json5 && !str2.match(/^-?(0|[1-9][0-9]*)(\.[0-9]+)?(e[+-]?[0-9]+)?$/i)) {
            position2--;
            fail('Non-json numeric literal - "' + input.substr(start, position2 - start + 1) + '"');
          } else {
            return result;
          }
        };
        if (chr === "-" || chr === "+" && json5)
          chr = input[position2++];
        if (chr === "N" && json5) {
          parseKeyword("NaN");
          return NaN;
        }
        if (chr === "I" && json5) {
          parseKeyword("Infinity");
          return to_num();
        }
        if (chr >= "1" && chr <= "9") {
          while (position2 < length && isDecDigit(input[position2]))
            position2++;
          chr = input[position2++];
        }
        if (chr === "0") {
          chr = input[position2++];
          var is_octal = chr === "o" || chr === "O" || isOctDigit(chr);
          var is_hex = chr === "x" || chr === "X";
          if (json5 && (is_octal || is_hex)) {
            while (position2 < length && (is_hex ? isHexDigit : isOctDigit)(input[position2]))
              position2++;
            var sign2 = 1;
            if (input[start] === "-") {
              sign2 = -1;
              start++;
            } else if (input[start] === "+") {
              start++;
            }
            return sign2 * to_num(is_octal);
          }
        }
        if (chr === ".") {
          while (position2 < length && isDecDigit(input[position2]))
            position2++;
          chr = input[position2++];
        }
        if (chr === "e" || chr === "E") {
          chr = input[position2++];
          if (chr === "-" || chr === "+")
            position2++;
          while (position2 < length && isDecDigit(input[position2]))
            position2++;
          chr = input[position2++];
        }
        position2--;
        return to_num();
      }
      function parseIdentifier() {
        position2--;
        var result = "";
        while (position2 < length) {
          var chr = input[position2++];
          if (chr === "\\" && input[position2] === "u" && isHexDigit(input[position2 + 1]) && isHexDigit(input[position2 + 2]) && isHexDigit(input[position2 + 3]) && isHexDigit(input[position2 + 4])) {
            chr = String.fromCharCode(parseInt(input.substr(position2 + 1, 4), 16));
            position2 += 5;
          }
          if (result.length) {
            if (Uni.isIdentifierPart(chr)) {
              result += chr;
            } else {
              position2--;
              return result;
            }
          } else {
            if (Uni.isIdentifierStart(chr)) {
              result += chr;
            } else {
              return void 0;
            }
          }
        }
        fail();
      }
      function parseString(endChar) {
        var result = "";
        while (position2 < length) {
          var chr = input[position2++];
          if (chr === endChar) {
            return result;
          } else if (chr === "\\") {
            if (position2 >= length)
              fail();
            chr = input[position2++];
            if (unescapeMap[chr] && (json5 || chr != "v" && chr != "'")) {
              result += unescapeMap[chr];
            } else if (json5 && isLineTerminator(chr)) {
              newline(chr);
            } else if (chr === "u" || chr === "x" && json5) {
              var off = chr === "u" ? 4 : 2;
              for (var i = 0; i < off; i++) {
                if (position2 >= length)
                  fail();
                if (!isHexDigit(input[position2]))
                  fail("Bad escape sequence");
                position2++;
              }
              result += String.fromCharCode(parseInt(input.substr(position2 - off, off), 16));
            } else if (json5 && isOctDigit(chr)) {
              if (chr < "4" && isOctDigit(input[position2]) && isOctDigit(input[position2 + 1])) {
                var digits = 3;
              } else if (isOctDigit(input[position2])) {
                var digits = 2;
              } else {
                var digits = 1;
              }
              position2 += digits - 1;
              result += String.fromCharCode(parseInt(input.substr(position2 - digits, digits), 8));
            } else if (json5) {
              result += chr;
            } else {
              position2--;
              fail();
            }
          } else if (isLineTerminator(chr)) {
            fail();
          } else {
            if (!json5 && chr.charCodeAt(0) < 32) {
              position2--;
              fail("Unexpected control character");
            }
            result += chr;
          }
        }
        fail();
      }
      skipWhiteSpace();
      var return_value = parseGeneric();
      if (return_value !== void 0 || position2 < length) {
        skipWhiteSpace();
        if (position2 >= length) {
          if (typeof options.reviver === "function") {
            return_value = options.reviver.call(null, "", return_value);
          }
          return return_value;
        } else {
          fail();
        }
      } else {
        if (position2) {
          fail("No data, only a whitespace");
        } else {
          fail("No data, empty input");
        }
      }
    }
    module.exports.parse = function parseJSON(input, options) {
      if (typeof options === "function") {
        options = {
          reviver: options
        };
      }
      if (input === void 0) {
        return void 0;
      }
      if (typeof input !== "string")
        input = String(input);
      if (options == null)
        options = {};
      if (options.reserved_keys == null)
        options.reserved_keys = "ignore";
      if (options.reserved_keys === "throw" || options.reserved_keys === "ignore") {
        if (options.null_prototype == null) {
          options.null_prototype = true;
        }
      }
      try {
        return parse2(input, options);
      } catch (err) {
        if (err instanceof SyntaxError && err.row != null && err.column != null) {
          var old_err = err;
          err = SyntaxError(old_err.message);
          err.column = old_err.column;
          err.row = old_err.row;
        }
        throw err;
      }
    };
    module.exports.tokenize = function tokenizeJSON(input, options) {
      if (options == null)
        options = {};
      options._tokenize = function(smth) {
        if (options._addstack)
          smth.stack.unshift.apply(smth.stack, options._addstack);
        tokens.push(smth);
      };
      var tokens = [];
      tokens.data = module.exports.parse(input, options);
      return tokens;
    };
  })(parse$1);
  return parse$1.exports;
}
var stringify = {};
var hasRequiredStringify;
function requireStringify() {
  if (hasRequiredStringify)
    return stringify;
  hasRequiredStringify = 1;
  var Uni = requireUnicode();
  if (!(function f() {
  }).name) {
    Object.defineProperty((function() {
    }).constructor.prototype, "name", {
      get: function() {
        var name = this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];
        Object.defineProperty(this, "name", { value: name });
        return name;
      }
    });
  }
  var special_chars = {
    0: "\\0",
    // this is not an octal literal
    8: "\\b",
    9: "\\t",
    10: "\\n",
    11: "\\v",
    12: "\\f",
    13: "\\r",
    92: "\\\\"
  };
  var hasOwnProperty2 = Object.prototype.hasOwnProperty;
  var escapable = /[\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/;
  function _stringify(object, options, recursiveLvl, currentKey) {
    var json5 = options.mode === "json5" || !options.mode;
    function indent2(str3, add2) {
      var prefix = options._prefix ? options._prefix : "";
      if (!options.indent)
        return prefix + str3;
      var result = "";
      var count = recursiveLvl + (add2 || 0);
      for (var i = 0; i < count; i++)
        result += options.indent;
      return prefix + result + str3 + (add2 ? "\n" : "");
    }
    function _stringify_key(key) {
      if (options.quote_keys)
        return _stringify_str(key);
      if (String(Number(key)) == key && key[0] != "-")
        return key;
      if (key == "")
        return _stringify_str(key);
      var result = "";
      for (var i = 0; i < key.length; i++) {
        if (i > 0) {
          if (!Uni.isIdentifierPart(key[i]))
            return _stringify_str(key);
        } else {
          if (!Uni.isIdentifierStart(key[i]))
            return _stringify_str(key);
        }
        var chr = key.charCodeAt(i);
        if (options.ascii) {
          if (chr < 128) {
            result += key[i];
          } else {
            result += "\\u" + ("0000" + chr.toString(16)).slice(-4);
          }
        } else {
          if (escapable.exec(key[i])) {
            result += "\\u" + ("0000" + chr.toString(16)).slice(-4);
          } else {
            result += key[i];
          }
        }
      }
      return result;
    }
    function _stringify_str(key) {
      var quote = options.quote;
      var quoteChr = quote.charCodeAt(0);
      var result = "";
      for (var i = 0; i < key.length; i++) {
        var chr = key.charCodeAt(i);
        if (chr < 16) {
          if (chr === 0 && json5) {
            result += "\\0";
          } else if (chr >= 8 && chr <= 13 && (json5 || chr !== 11)) {
            result += special_chars[chr];
          } else if (json5) {
            result += "\\x0" + chr.toString(16);
          } else {
            result += "\\u000" + chr.toString(16);
          }
        } else if (chr < 32) {
          if (json5) {
            result += "\\x" + chr.toString(16);
          } else {
            result += "\\u00" + chr.toString(16);
          }
        } else if (chr >= 32 && chr < 128) {
          if (chr === 47 && i && key[i - 1] === "<") {
            result += "\\" + key[i];
          } else if (chr === 92) {
            result += "\\\\";
          } else if (chr === quoteChr) {
            result += "\\" + quote;
          } else {
            result += key[i];
          }
        } else if (options.ascii || Uni.isLineTerminator(key[i]) || escapable.exec(key[i])) {
          if (chr < 256) {
            if (json5) {
              result += "\\x" + chr.toString(16);
            } else {
              result += "\\u00" + chr.toString(16);
            }
          } else if (chr < 4096) {
            result += "\\u0" + chr.toString(16);
          } else if (chr < 65536) {
            result += "\\u" + chr.toString(16);
          } else {
            throw Error("weird codepoint");
          }
        } else {
          result += key[i];
        }
      }
      return quote + result + quote;
    }
    function _stringify_object() {
      if (object === null)
        return "null";
      var result = [], len = 0, braces2;
      if (Array.isArray(object)) {
        braces2 = "[]";
        for (var i = 0; i < object.length; i++) {
          var s = _stringify(object[i], options, recursiveLvl + 1, String(i));
          if (s === void 0)
            s = "null";
          len += s.length + 2;
          result.push(s + ",");
        }
      } else {
        braces2 = "{}";
        var fn = function(key) {
          var t = _stringify(object[key], options, recursiveLvl + 1, key);
          if (t !== void 0) {
            t = _stringify_key(key) + ":" + (options.indent ? " " : "") + t + ",";
            len += t.length + 1;
            result.push(t);
          }
        };
        if (Array.isArray(options.replacer)) {
          for (var i = 0; i < options.replacer.length; i++)
            if (hasOwnProperty2.call(object, options.replacer[i]))
              fn(options.replacer[i]);
        } else {
          var keys2 = Object.keys(object);
          if (options.sort_keys)
            keys2 = keys2.sort(typeof options.sort_keys === "function" ? options.sort_keys : void 0);
          keys2.forEach(fn);
        }
      }
      len -= 2;
      if (options.indent && (len > options._splitMax - recursiveLvl * options.indent.length || len > options._splitMin)) {
        if (options.no_trailing_comma && result.length) {
          result[result.length - 1] = result[result.length - 1].substring(0, result[result.length - 1].length - 1);
        }
        var innerStuff = result.map(function(x) {
          return indent2(x, 1);
        }).join("");
        return braces2[0] + (options.indent ? "\n" : "") + innerStuff + indent2(braces2[1]);
      } else {
        if (result.length) {
          result[result.length - 1] = result[result.length - 1].substring(0, result[result.length - 1].length - 1);
        }
        var innerStuff = result.join(options.indent ? " " : "");
        return braces2[0] + innerStuff + braces2[1];
      }
    }
    function _stringify_nonobject(object2) {
      if (typeof options.replacer === "function") {
        object2 = options.replacer.call(null, currentKey, object2);
      }
      switch (typeof object2) {
        case "string":
          return _stringify_str(object2);
        case "number":
          if (object2 === 0 && 1 / object2 < 0) {
            return "-0";
          }
          if (!json5 && !Number.isFinite(object2)) {
            return "null";
          }
          return object2.toString();
        case "boolean":
          return object2.toString();
        case "undefined":
          return void 0;
        case "function":
        default:
          return JSON.stringify(object2);
      }
    }
    if (options._stringify_key) {
      return _stringify_key(object);
    }
    if (typeof object === "object") {
      if (object === null)
        return "null";
      var str2;
      if (typeof (str2 = object.toJSON5) === "function" && options.mode !== "json") {
        object = str2.call(object, currentKey);
      } else if (typeof (str2 = object.toJSON) === "function") {
        object = str2.call(object, currentKey);
      }
      if (object === null)
        return "null";
      if (typeof object !== "object")
        return _stringify_nonobject(object);
      if (object.constructor === Number || object.constructor === Boolean || object.constructor === String) {
        object = object.valueOf();
        return _stringify_nonobject(object);
      } else if (object.constructor === Date) {
        return _stringify_nonobject(object.toISOString());
      } else {
        if (typeof options.replacer === "function") {
          object = options.replacer.call(null, currentKey, object);
          if (typeof object !== "object")
            return _stringify_nonobject(object);
        }
        return _stringify_object();
      }
    } else {
      return _stringify_nonobject(object);
    }
  }
  stringify.stringify = function stringifyJSON(object, options, _space) {
    if (typeof options === "function" || Array.isArray(options)) {
      options = {
        replacer: options
      };
    } else if (typeof options === "object" && options !== null)
      ;
    else {
      options = {};
    }
    if (_space != null)
      options.indent = _space;
    if (options.indent == null)
      options.indent = "	";
    if (options.quote == null)
      options.quote = "'";
    if (options.ascii == null)
      options.ascii = false;
    if (options.mode == null)
      options.mode = "json5";
    if (options.mode === "json" || options.mode === "cjson") {
      options.quote = '"';
      options.no_trailing_comma = true;
      options.quote_keys = true;
    }
    if (typeof options.indent === "object") {
      if (options.indent.constructor === Number || options.indent.constructor === Boolean || options.indent.constructor === String)
        options.indent = options.indent.valueOf();
    }
    if (typeof options.indent === "number") {
      if (options.indent >= 0) {
        options.indent = Array(Math.min(~~options.indent, 10) + 1).join(" ");
      } else {
        options.indent = false;
      }
    } else if (typeof options.indent === "string") {
      options.indent = options.indent.substr(0, 10);
    }
    if (options._splitMin == null)
      options._splitMin = 50;
    if (options._splitMax == null)
      options._splitMax = 70;
    return _stringify(object, options, 0, "");
  };
  return stringify;
}
var document$2 = {};
var analyze = {};
var hasRequiredAnalyze;
function requireAnalyze() {
  if (hasRequiredAnalyze)
    return analyze;
  hasRequiredAnalyze = 1;
  var tokenize = requireParse().tokenize;
  analyze.analyze = function analyzeJSON(input, options) {
    if (options == null)
      options = {};
    if (!Array.isArray(input)) {
      input = tokenize(input, options);
    }
    var result = {
      has_whitespace: false,
      has_comments: false,
      has_newlines: false,
      has_trailing_comma: false,
      indent: "",
      newline: "\n",
      quote: '"',
      quote_keys: true
    };
    var stats = {
      indent: {},
      newline: {},
      quote: {}
    };
    for (var i = 0; i < input.length; i++) {
      if (input[i].type === "newline") {
        if (input[i + 1] && input[i + 1].type === "whitespace") {
          if (input[i + 1].raw[0] === "	") {
            stats.indent["	"] = (stats.indent["	"] || 0) + 1;
          }
          if (input[i + 1].raw.match(/^\x20+$/)) {
            var ws_len = input[i + 1].raw.length;
            var indent_len = input[i + 1].stack.length + 1;
            if (ws_len % indent_len === 0) {
              var t = Array(ws_len / indent_len + 1).join(" ");
              stats.indent[t] = (stats.indent[t] || 0) + 1;
            }
          }
        }
        stats.newline[input[i].raw] = (stats.newline[input[i].raw] || 0) + 1;
      }
      if (input[i].type === "newline") {
        result.has_newlines = true;
      }
      if (input[i].type === "whitespace") {
        result.has_whitespace = true;
      }
      if (input[i].type === "comment") {
        result.has_comments = true;
      }
      if (input[i].type === "key") {
        if (input[i].raw[0] !== '"' && input[i].raw[0] !== "'")
          result.quote_keys = false;
      }
      if (input[i].type === "key" || input[i].type === "literal") {
        if (input[i].raw[0] === '"' || input[i].raw[0] === "'") {
          stats.quote[input[i].raw[0]] = (stats.quote[input[i].raw[0]] || 0) + 1;
        }
      }
      if (input[i].type === "separator" && input[i].raw === ",") {
        for (var j = i + 1; j < input.length; j++) {
          if (input[j].type === "literal" || input[j].type === "key")
            break;
          if (input[j].type === "separator")
            result.has_trailing_comma = true;
        }
      }
    }
    for (var k in stats) {
      if (Object.keys(stats[k]).length) {
        result[k] = Object.keys(stats[k]).reduce(function(a, b) {
          return stats[k][a] > stats[k][b] ? a : b;
        });
      }
    }
    return result;
  };
  return analyze;
}
var hasRequiredDocument;
function requireDocument() {
  if (hasRequiredDocument)
    return document$2;
  hasRequiredDocument = 1;
  var assert = require$$0$4;
  var tokenize = requireParse().tokenize;
  var stringify2 = requireStringify().stringify;
  var analyze2 = requireAnalyze().analyze;
  function isObject2(x) {
    return typeof x === "object" && x !== null;
  }
  function value_to_tokenlist(value2, stack, options, is_key, indent2) {
    options = Object.create(options);
    options._stringify_key = !!is_key;
    if (indent2) {
      options._prefix = indent2.prefix.map(function(x) {
        return x.raw;
      }).join("");
    }
    if (options._splitMin == null)
      options._splitMin = 0;
    if (options._splitMax == null)
      options._splitMax = 0;
    var stringified = stringify2(value2, options);
    if (is_key) {
      return [{ raw: stringified, type: "key", stack, value: value2 }];
    }
    options._addstack = stack;
    var result = tokenize(stringified, {
      _addstack: stack
    });
    result.data = null;
    return result;
  }
  function arg_to_path(path2) {
    if (typeof path2 === "number")
      path2 = String(path2);
    if (path2 === "")
      path2 = [];
    if (typeof path2 === "string")
      path2 = path2.split(".");
    if (!Array.isArray(path2))
      throw Error("Invalid path type, string or array expected");
    return path2;
  }
  function find_element_in_tokenlist(element, lvl, tokens, begin, end) {
    while (tokens[begin].stack[lvl] != element) {
      if (begin++ >= end)
        return false;
    }
    while (tokens[end].stack[lvl] != element) {
      if (end-- < begin)
        return false;
    }
    return [begin, end];
  }
  function is_whitespace(token_type) {
    return token_type === "whitespace" || token_type === "newline" || token_type === "comment";
  }
  function find_first_non_ws_token(tokens, begin, end) {
    while (is_whitespace(tokens[begin].type)) {
      if (begin++ >= end)
        return false;
    }
    return begin;
  }
  function find_last_non_ws_token(tokens, begin, end) {
    while (is_whitespace(tokens[end].type)) {
      if (end-- < begin)
        return false;
    }
    return end;
  }
  function detect_indent_style(tokens, is_array, begin, end, level) {
    var result = {
      sep1: [],
      sep2: [],
      suffix: [],
      prefix: [],
      newline: []
    };
    if (tokens[end].type === "separator" && tokens[end].stack.length !== level + 1 && tokens[end].raw !== ",") {
      return result;
    }
    if (tokens[end].type === "separator")
      end = find_last_non_ws_token(tokens, begin, end - 1);
    if (end === false)
      return result;
    while (tokens[end].stack.length > level)
      end--;
    if (!is_array) {
      while (is_whitespace(tokens[end].type)) {
        if (end < begin)
          return result;
        if (tokens[end].type === "whitespace") {
          result.sep2.unshift(tokens[end]);
        } else {
          return result;
        }
        end--;
      }
      assert.equal(tokens[end].type, "separator");
      assert.equal(tokens[end].raw, ":");
      while (is_whitespace(tokens[--end].type)) {
        if (end < begin)
          return result;
        if (tokens[end].type === "whitespace") {
          result.sep1.unshift(tokens[end]);
        } else {
          return result;
        }
      }
      assert.equal(tokens[end].type, "key");
      end--;
    }
    while (is_whitespace(tokens[end].type)) {
      if (end < begin)
        return result;
      if (tokens[end].type === "whitespace") {
        result.prefix.unshift(tokens[end]);
      } else if (tokens[end].type === "newline") {
        result.newline.unshift(tokens[end]);
        return result;
      } else {
        return result;
      }
      end--;
    }
    return result;
  }
  function Document(text2, options) {
    var self2 = Object.create(Document.prototype);
    if (options == null)
      options = {};
    var tokens = self2._tokens = tokenize(text2, options);
    self2._data = tokens.data;
    tokens.data = null;
    self2._options = options;
    var stats = analyze2(text2, options);
    if (options.indent == null) {
      options.indent = stats.indent;
    }
    if (options.quote == null) {
      options.quote = stats.quote;
    }
    if (options.quote_keys == null) {
      options.quote_keys = stats.quote_keys;
    }
    if (options.no_trailing_comma == null) {
      options.no_trailing_comma = !stats.has_trailing_comma;
    }
    return self2;
  }
  function check_if_can_be_placed(key, object, is_unset) {
    function error2(add2) {
      return Error("You can't " + (is_unset ? "unset" : "set") + " key '" + key + "'" + add2);
    }
    if (!isObject2(object)) {
      throw error2(" of an non-object");
    }
    if (Array.isArray(object)) {
      if (String(key).match(/^\d+$/)) {
        key = Number(String(key));
        if (object.length < key || is_unset && object.length === key) {
          throw error2(", out of bounds");
        } else if (is_unset && object.length !== key + 1) {
          throw error2(" in the middle of an array");
        } else {
          return true;
        }
      } else {
        throw error2(" of an array");
      }
    } else {
      return true;
    }
  }
  Document.prototype.set = function(path2, value2) {
    path2 = arg_to_path(path2);
    if (path2.length === 0) {
      if (value2 === void 0)
        throw Error("can't remove root document");
      this._data = value2;
      var new_key = false;
    } else {
      var data = this._data;
      for (var i = 0; i < path2.length - 1; i++) {
        check_if_can_be_placed(path2[i], data, false);
        data = data[path2[i]];
      }
      if (i === path2.length - 1) {
        check_if_can_be_placed(path2[i], data, value2 === void 0);
      }
      var new_key = !(path2[i] in data);
      if (value2 === void 0) {
        if (Array.isArray(data)) {
          data.pop();
        } else {
          delete data[path2[i]];
        }
      } else {
        data[path2[i]] = value2;
      }
    }
    if (!this._tokens.length)
      this._tokens = [{ raw: "", type: "literal", stack: [], value: void 0 }];
    var position2 = [
      find_first_non_ws_token(this._tokens, 0, this._tokens.length - 1),
      find_last_non_ws_token(this._tokens, 0, this._tokens.length - 1)
    ];
    for (var i = 0; i < path2.length - 1; i++) {
      position2 = find_element_in_tokenlist(path2[i], i, this._tokens, position2[0], position2[1]);
      if (position2 == false)
        throw Error("internal error, please report this");
    }
    if (path2.length === 0) {
      var newtokens = value_to_tokenlist(value2, path2, this._options);
    } else if (!new_key) {
      var pos_old = position2;
      position2 = find_element_in_tokenlist(path2[i], i, this._tokens, position2[0], position2[1]);
      if (value2 === void 0 && position2 !== false) {
        var newtokens = [];
        if (!Array.isArray(data)) {
          var pos2 = find_last_non_ws_token(this._tokens, pos_old[0], position2[0] - 1);
          assert.equal(this._tokens[pos2].type, "separator");
          assert.equal(this._tokens[pos2].raw, ":");
          position2[0] = pos2;
          var pos2 = find_last_non_ws_token(this._tokens, pos_old[0], position2[0] - 1);
          assert.equal(this._tokens[pos2].type, "key");
          assert.equal(this._tokens[pos2].value, path2[path2.length - 1]);
          position2[0] = pos2;
        }
        var pos2 = find_last_non_ws_token(this._tokens, pos_old[0], position2[0] - 1);
        assert.equal(this._tokens[pos2].type, "separator");
        if (this._tokens[pos2].raw === ",") {
          position2[0] = pos2;
        } else {
          pos2 = find_first_non_ws_token(this._tokens, position2[1] + 1, pos_old[1]);
          assert.equal(this._tokens[pos2].type, "separator");
          if (this._tokens[pos2].raw === ",") {
            position2[1] = pos2;
          }
        }
      } else {
        var indent2 = pos2 !== false ? detect_indent_style(this._tokens, Array.isArray(data), pos_old[0], position2[1] - 1, i) : {};
        var newtokens = value_to_tokenlist(value2, path2, this._options, false, indent2);
      }
    } else {
      var path_1 = path2.slice(0, i);
      var pos2 = find_last_non_ws_token(this._tokens, position2[0] + 1, position2[1] - 1);
      assert(pos2 !== false);
      var indent2 = pos2 !== false ? detect_indent_style(this._tokens, Array.isArray(data), position2[0] + 1, pos2, i) : {};
      var newtokens = value_to_tokenlist(value2, path2, this._options, false, indent2);
      var prefix = [];
      if (indent2.newline && indent2.newline.length)
        prefix = prefix.concat(indent2.newline);
      if (indent2.prefix && indent2.prefix.length)
        prefix = prefix.concat(indent2.prefix);
      if (!Array.isArray(data)) {
        prefix = prefix.concat(value_to_tokenlist(path2[path2.length - 1], path_1, this._options, true));
        if (indent2.sep1 && indent2.sep1.length)
          prefix = prefix.concat(indent2.sep1);
        prefix.push({ raw: ":", type: "separator", stack: path_1 });
        if (indent2.sep2 && indent2.sep2.length)
          prefix = prefix.concat(indent2.sep2);
      }
      newtokens.unshift.apply(newtokens, prefix);
      if (this._tokens[pos2].type === "separator" && this._tokens[pos2].stack.length === path2.length - 1) {
        if (this._tokens[pos2].raw === ",") {
          newtokens.push({ raw: ",", type: "separator", stack: path_1 });
        }
      } else {
        newtokens.unshift({ raw: ",", type: "separator", stack: path_1 });
      }
      if (indent2.suffix && indent2.suffix.length)
        newtokens.push.apply(newtokens, indent2.suffix);
      assert.equal(this._tokens[position2[1]].type, "separator");
      position2[0] = pos2 + 1;
      position2[1] = pos2;
    }
    newtokens.unshift(position2[1] - position2[0] + 1);
    newtokens.unshift(position2[0]);
    this._tokens.splice.apply(this._tokens, newtokens);
    return this;
  };
  Document.prototype.unset = function(path2) {
    return this.set(path2, void 0);
  };
  Document.prototype.get = function(path2) {
    path2 = arg_to_path(path2);
    var data = this._data;
    for (var i = 0; i < path2.length; i++) {
      if (!isObject2(data))
        return void 0;
      data = data[path2[i]];
    }
    return data;
  };
  Document.prototype.has = function(path2) {
    path2 = arg_to_path(path2);
    var data = this._data;
    for (var i = 0; i < path2.length; i++) {
      if (!isObject2(data))
        return false;
      data = data[path2[i]];
    }
    return data !== void 0;
  };
  Document.prototype.update = function(value2) {
    var self2 = this;
    change([], self2._data, value2);
    return self2;
    function change(path2, old_data, new_data) {
      if (!isObject2(new_data) || !isObject2(old_data)) {
        if (new_data !== old_data)
          self2.set(path2, new_data);
      } else if (Array.isArray(new_data) != Array.isArray(old_data)) {
        self2.set(path2, new_data);
      } else if (Array.isArray(new_data)) {
        if (new_data.length > old_data.length) {
          for (var i = 0; i < new_data.length; i++) {
            path2.push(String(i));
            change(path2, old_data[i], new_data[i]);
            path2.pop();
          }
        } else {
          for (var i = old_data.length - 1; i >= 0; i--) {
            path2.push(String(i));
            change(path2, old_data[i], new_data[i]);
            path2.pop();
          }
        }
      } else {
        for (var i in new_data) {
          path2.push(String(i));
          change(path2, old_data[i], new_data[i]);
          path2.pop();
        }
        for (var i in old_data) {
          if (i in new_data)
            continue;
          path2.push(String(i));
          change(path2, old_data[i], new_data[i]);
          path2.pop();
        }
      }
    }
  };
  Document.prototype.toString = function() {
    return this._tokens.map(function(x) {
      return x.raw;
    }).join("");
  };
  document$2.Document = Document;
  document$2.update = function updateJSON(source, new_value, options) {
    return Document(source, options).update(new_value).toString();
  };
  return document$2;
}
var utils = {};
var hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils)
    return utils;
  hasRequiredUtils = 1;
  var FS = require$$0$1;
  var jju2 = requireJju();
  utils.register = function() {
    var r = commonjsRequire, e = "extensions";
    r[e][".json5"] = function(m, f) {
      m.exports = jju2.parse(FS.readFileSync(f, "utf8"));
    };
  };
  utils.patch_JSON_parse = function() {
    var _parse = JSON.parse;
    JSON.parse = function(text2, rev) {
      try {
        return _parse(text2, rev);
      } catch (err) {
        requireJju().parse(text2, {
          mode: "json",
          legacy: true,
          reviver: rev,
          reserved_keys: "replace",
          null_prototype: false
        });
        throw err;
      }
    };
  };
  utils.middleware = function() {
    return function(req, res, next) {
      throw Error("this function is removed, use express-json5 instead");
    };
  };
  return utils;
}
var hasRequiredJju;
function requireJju() {
  if (hasRequiredJju)
    return jju.exports;
  hasRequiredJju = 1;
  (function(module) {
    module.exports.__defineGetter__("parse", function() {
      return requireParse().parse;
    });
    module.exports.__defineGetter__("stringify", function() {
      return requireStringify().stringify;
    });
    module.exports.__defineGetter__("tokenize", function() {
      return requireParse().tokenize;
    });
    module.exports.__defineGetter__("update", function() {
      return requireDocument().update;
    });
    module.exports.__defineGetter__("analyze", function() {
      return requireAnalyze().analyze;
    });
    module.exports.__defineGetter__("utils", function() {
      return requireUtils();
    });
  })(jju);
  return jju.exports;
}
var hasRequiredManypkgTools_cjs_prod;
function requireManypkgTools_cjs_prod() {
  if (hasRequiredManypkgTools_cjs_prod)
    return manypkgTools_cjs_prod;
  hasRequiredManypkgTools_cjs_prod = 1;
  Object.defineProperty(manypkgTools_cjs_prod, "__esModule", { value: true });
  var path2 = require$$0$3;
  var fs2 = requireLib();
  var globby2 = requireGlobby();
  var readYamlFile2 = requireReadYamlFile();
  var jju2 = requireJju();
  function _interopDefault(e) {
    return e && e.__esModule ? e : { "default": e };
  }
  var path__default = /* @__PURE__ */ _interopDefault(path2);
  var fs__default = /* @__PURE__ */ _interopDefault(fs2);
  var globby__default = /* @__PURE__ */ _interopDefault(globby2);
  var readYamlFile__default = /* @__PURE__ */ _interopDefault(readYamlFile2);
  var jju__default = /* @__PURE__ */ _interopDefault(jju2);
  class InvalidMonorepoError extends Error {
  }
  async function expandPackageGlobs(packageGlobs, directory) {
    const relativeDirectories = await globby__default["default"](packageGlobs, {
      cwd: directory,
      onlyDirectories: true,
      expandDirectories: false,
      ignore: ["**/node_modules"]
    });
    const directories = relativeDirectories.map((p) => path__default["default"].resolve(directory, p)).sort();
    const discoveredPackages = await Promise.all(directories.map((dir) => fs__default["default"].readJson(path__default["default"].join(dir, "package.json")).catch((err) => {
      if (err && err.code === "ENOENT") {
        return void 0;
      }
      throw err;
    }).then((result) => {
      if (result) {
        return {
          dir: path__default["default"].resolve(dir),
          relativeDir: path__default["default"].relative(directory, dir),
          packageJson: result
        };
      }
    })));
    return discoveredPackages.filter((pkg) => pkg);
  }
  function expandPackageGlobsSync(packageGlobs, directory) {
    const relativeDirectories = globby__default["default"].sync(packageGlobs, {
      cwd: directory,
      onlyDirectories: true,
      expandDirectories: false,
      ignore: ["**/node_modules"]
    });
    const directories = relativeDirectories.map((p) => path__default["default"].resolve(directory, p)).sort();
    const discoveredPackages = directories.map((dir) => {
      try {
        const packageJson = fs__default["default"].readJsonSync(path__default["default"].join(dir, "package.json"));
        return {
          dir: path__default["default"].resolve(dir),
          relativeDir: path__default["default"].relative(directory, dir),
          packageJson
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return void 0;
        }
        throw err;
      }
    });
    return discoveredPackages.filter((pkg) => pkg);
  }
  const BoltTool = {
    type: "bolt",
    async isMonorepoRoot(directory) {
      try {
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(directory, "package.json"));
        if (pkgJson.bolt && pkgJson.bolt.workspaces) {
          return true;
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    isMonorepoRootSync(directory) {
      try {
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(directory, "package.json"));
        if (pkgJson.bolt && pkgJson.bolt.workspaces) {
          return true;
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    async getPackages(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(rootDir, "package.json"));
        if (!pkgJson.bolt || !pkgJson.bolt.workspaces) {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing bolt.workspaces entry`);
        }
        const packageGlobs = pkgJson.bolt.workspaces;
        return {
          tool: BoltTool,
          packages: await expandPackageGlobs(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing package.json`);
        }
        throw err;
      }
    },
    getPackagesSync(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(rootDir, "package.json"));
        if (!pkgJson.bolt || !pkgJson.bolt.workspaces) {
          throw new InvalidMonorepoError(`Directory ${directory} is not a valid ${BoltTool.type} monorepo root: missing bolt.workspaces entry`);
        }
        const packageGlobs = pkgJson.bolt.workspaces;
        return {
          tool: BoltTool,
          packages: expandPackageGlobsSync(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing package.json`);
        }
        throw err;
      }
    }
  };
  const LernaTool = {
    type: "lerna",
    async isMonorepoRoot(directory) {
      try {
        const lernaJson = await fs__default["default"].readJson(path__default["default"].join(directory, "lerna.json"));
        if (lernaJson.useWorkspaces !== true) {
          return true;
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    isMonorepoRootSync(directory) {
      try {
        const lernaJson = fs__default["default"].readJsonSync(path__default["default"].join(directory, "lerna.json"));
        if (lernaJson.useWorkspaces !== true) {
          return true;
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    async getPackages(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const lernaJson = await fs__default["default"].readJson(path__default["default"].join(rootDir, "lerna.json"));
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(rootDir, "package.json"));
        const packageGlobs = lernaJson.packages || ["packages/*"];
        return {
          tool: LernaTool,
          packages: await expandPackageGlobs(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${LernaTool.type} monorepo root: missing lerna.json and/or package.json`);
        }
        throw err;
      }
    },
    getPackagesSync(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const lernaJson = fs__default["default"].readJsonSync(path__default["default"].join(rootDir, "lerna.json"));
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(rootDir, "package.json"));
        const packageGlobs = lernaJson.packages || ["packages/*"];
        return {
          tool: LernaTool,
          packages: expandPackageGlobsSync(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${LernaTool.type} monorepo root: missing lerna.json and/or package.json`);
        }
        throw err;
      }
    }
  };
  const PnpmTool = {
    type: "pnpm",
    async isMonorepoRoot(directory) {
      try {
        const manifest = await readYamlFile__default["default"](path__default["default"].join(directory, "pnpm-workspace.yaml"));
        if (manifest.packages) {
          return true;
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    isMonorepoRootSync(directory) {
      try {
        const manifest = readYamlFile2.sync(path__default["default"].join(directory, "pnpm-workspace.yaml"));
        if (manifest.packages) {
          return true;
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    async getPackages(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const manifest = await readYamlFile__default["default"](path__default["default"].join(rootDir, "pnpm-workspace.yaml"));
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(rootDir, "package.json"));
        const packageGlobs = manifest.packages;
        return {
          tool: PnpmTool,
          packages: await expandPackageGlobs(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${PnpmTool.type} monorepo root: missing pnpm-workspace.yaml and/or package.json`);
        }
        throw err;
      }
    },
    getPackagesSync(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const manifest = readYamlFile2.sync(path__default["default"].join(rootDir, "pnpm-workspace.yaml"));
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(rootDir, "package.json"));
        const packageGlobs = manifest.packages;
        return {
          tool: PnpmTool,
          packages: expandPackageGlobsSync(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${PnpmTool.type} monorepo root: missing pnpm-workspace.yaml and/or package.json`);
        }
        throw err;
      }
    }
  };
  const RootTool = {
    type: "root",
    async isMonorepoRoot(directory) {
      return false;
    },
    isMonorepoRootSync(directory) {
      return false;
    },
    async getPackages(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(rootDir, "package.json"));
        const pkg = {
          dir: rootDir,
          relativeDir: ".",
          packageJson: pkgJson
        };
        return {
          tool: RootTool,
          packages: [pkg],
          rootPackage: pkg,
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${RootTool.type} monorepo root`);
        }
        throw err;
      }
    },
    getPackagesSync(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(rootDir, "package.json"));
        const pkg = {
          dir: rootDir,
          relativeDir: ".",
          packageJson: pkgJson
        };
        return {
          tool: RootTool,
          packages: [pkg],
          rootPackage: pkg,
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${RootTool.type} monorepo root`);
        }
        throw err;
      }
    }
  };
  const RushTool = {
    type: "rush",
    async isMonorepoRoot(directory) {
      try {
        await fs__default["default"].readFile(path__default["default"].join(directory, "rush.json"), "utf8");
        return true;
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    isMonorepoRootSync(directory) {
      try {
        fs__default["default"].readFileSync(path__default["default"].join(directory, "rush.json"), "utf8");
        return true;
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    async getPackages(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const rushText = await fs__default["default"].readFile(path__default["default"].join(rootDir, "rush.json"), "utf8");
        const rushJson = jju__default["default"].parse(rushText);
        const directories = rushJson.projects.map((project) => path__default["default"].resolve(rootDir, project.projectFolder));
        const packages = await Promise.all(directories.map(async (dir) => {
          return {
            dir,
            relativeDir: path__default["default"].relative(directory, dir),
            packageJson: await fs__default["default"].readJson(path__default["default"].join(dir, "package.json"))
          };
        }));
        return {
          tool: RushTool,
          packages,
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${RushTool.type} monorepo root: missing rush.json`);
        }
        throw err;
      }
    },
    getPackagesSync(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const rushText = fs__default["default"].readFileSync(path__default["default"].join(rootDir, "rush.json"), "utf8");
        const rushJson = jju__default["default"].parse(rushText);
        const directories = rushJson.projects.map((project) => path__default["default"].resolve(rootDir, project.projectFolder));
        const packages = directories.map((dir) => {
          const packageJson = fs__default["default"].readJsonSync(path__default["default"].join(dir, "package.json"));
          return {
            dir,
            relativeDir: path__default["default"].relative(directory, dir),
            packageJson
          };
        });
        return {
          tool: RushTool,
          packages,
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${RushTool.type} monorepo root: missing rush.json`);
        }
        throw err;
      }
    }
  };
  const YarnTool = {
    type: "yarn",
    async isMonorepoRoot(directory) {
      try {
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(directory, "package.json"));
        if (pkgJson.workspaces) {
          if (Array.isArray(pkgJson.workspaces) || Array.isArray(pkgJson.workspaces.packages)) {
            return true;
          }
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    isMonorepoRootSync(directory) {
      try {
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(directory, "package.json"));
        if (pkgJson.workspaces) {
          if (Array.isArray(pkgJson.workspaces) || Array.isArray(pkgJson.workspaces.packages)) {
            return true;
          }
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    async getPackages(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(rootDir, "package.json"));
        const packageGlobs = Array.isArray(pkgJson.workspaces) ? pkgJson.workspaces : pkgJson.workspaces.packages;
        return {
          tool: YarnTool,
          packages: await expandPackageGlobs(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${YarnTool.type} monorepo root`);
        }
        throw err;
      }
    },
    getPackagesSync(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(rootDir, "package.json"));
        const packageGlobs = Array.isArray(pkgJson.workspaces) ? pkgJson.workspaces : pkgJson.workspaces.packages;
        return {
          tool: YarnTool,
          packages: expandPackageGlobsSync(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${YarnTool.type} monorepo root`);
        }
        throw err;
      }
    }
  };
  manypkgTools_cjs_prod.BoltTool = BoltTool;
  manypkgTools_cjs_prod.InvalidMonorepoError = InvalidMonorepoError;
  manypkgTools_cjs_prod.LernaTool = LernaTool;
  manypkgTools_cjs_prod.PnpmTool = PnpmTool;
  manypkgTools_cjs_prod.RootTool = RootTool;
  manypkgTools_cjs_prod.RushTool = RushTool;
  manypkgTools_cjs_prod.YarnTool = YarnTool;
  return manypkgTools_cjs_prod;
}
var manypkgTools_cjs_dev = {};
var hasRequiredManypkgTools_cjs_dev;
function requireManypkgTools_cjs_dev() {
  if (hasRequiredManypkgTools_cjs_dev)
    return manypkgTools_cjs_dev;
  hasRequiredManypkgTools_cjs_dev = 1;
  Object.defineProperty(manypkgTools_cjs_dev, "__esModule", { value: true });
  var path2 = require$$0$3;
  var fs2 = requireLib();
  var globby2 = requireGlobby();
  var readYamlFile2 = requireReadYamlFile();
  var jju2 = requireJju();
  function _interopDefault(e) {
    return e && e.__esModule ? e : { "default": e };
  }
  var path__default = /* @__PURE__ */ _interopDefault(path2);
  var fs__default = /* @__PURE__ */ _interopDefault(fs2);
  var globby__default = /* @__PURE__ */ _interopDefault(globby2);
  var readYamlFile__default = /* @__PURE__ */ _interopDefault(readYamlFile2);
  var jju__default = /* @__PURE__ */ _interopDefault(jju2);
  class InvalidMonorepoError extends Error {
  }
  async function expandPackageGlobs(packageGlobs, directory) {
    const relativeDirectories = await globby__default["default"](packageGlobs, {
      cwd: directory,
      onlyDirectories: true,
      expandDirectories: false,
      ignore: ["**/node_modules"]
    });
    const directories = relativeDirectories.map((p) => path__default["default"].resolve(directory, p)).sort();
    const discoveredPackages = await Promise.all(directories.map((dir) => fs__default["default"].readJson(path__default["default"].join(dir, "package.json")).catch((err) => {
      if (err && err.code === "ENOENT") {
        return void 0;
      }
      throw err;
    }).then((result) => {
      if (result) {
        return {
          dir: path__default["default"].resolve(dir),
          relativeDir: path__default["default"].relative(directory, dir),
          packageJson: result
        };
      }
    })));
    return discoveredPackages.filter((pkg) => pkg);
  }
  function expandPackageGlobsSync(packageGlobs, directory) {
    const relativeDirectories = globby__default["default"].sync(packageGlobs, {
      cwd: directory,
      onlyDirectories: true,
      expandDirectories: false,
      ignore: ["**/node_modules"]
    });
    const directories = relativeDirectories.map((p) => path__default["default"].resolve(directory, p)).sort();
    const discoveredPackages = directories.map((dir) => {
      try {
        const packageJson = fs__default["default"].readJsonSync(path__default["default"].join(dir, "package.json"));
        return {
          dir: path__default["default"].resolve(dir),
          relativeDir: path__default["default"].relative(directory, dir),
          packageJson
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return void 0;
        }
        throw err;
      }
    });
    return discoveredPackages.filter((pkg) => pkg);
  }
  const BoltTool = {
    type: "bolt",
    async isMonorepoRoot(directory) {
      try {
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(directory, "package.json"));
        if (pkgJson.bolt && pkgJson.bolt.workspaces) {
          return true;
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    isMonorepoRootSync(directory) {
      try {
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(directory, "package.json"));
        if (pkgJson.bolt && pkgJson.bolt.workspaces) {
          return true;
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    async getPackages(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(rootDir, "package.json"));
        if (!pkgJson.bolt || !pkgJson.bolt.workspaces) {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing bolt.workspaces entry`);
        }
        const packageGlobs = pkgJson.bolt.workspaces;
        return {
          tool: BoltTool,
          packages: await expandPackageGlobs(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing package.json`);
        }
        throw err;
      }
    },
    getPackagesSync(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(rootDir, "package.json"));
        if (!pkgJson.bolt || !pkgJson.bolt.workspaces) {
          throw new InvalidMonorepoError(`Directory ${directory} is not a valid ${BoltTool.type} monorepo root: missing bolt.workspaces entry`);
        }
        const packageGlobs = pkgJson.bolt.workspaces;
        return {
          tool: BoltTool,
          packages: expandPackageGlobsSync(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing package.json`);
        }
        throw err;
      }
    }
  };
  const LernaTool = {
    type: "lerna",
    async isMonorepoRoot(directory) {
      try {
        const lernaJson = await fs__default["default"].readJson(path__default["default"].join(directory, "lerna.json"));
        if (lernaJson.useWorkspaces !== true) {
          return true;
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    isMonorepoRootSync(directory) {
      try {
        const lernaJson = fs__default["default"].readJsonSync(path__default["default"].join(directory, "lerna.json"));
        if (lernaJson.useWorkspaces !== true) {
          return true;
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    async getPackages(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const lernaJson = await fs__default["default"].readJson(path__default["default"].join(rootDir, "lerna.json"));
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(rootDir, "package.json"));
        const packageGlobs = lernaJson.packages || ["packages/*"];
        return {
          tool: LernaTool,
          packages: await expandPackageGlobs(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${LernaTool.type} monorepo root: missing lerna.json and/or package.json`);
        }
        throw err;
      }
    },
    getPackagesSync(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const lernaJson = fs__default["default"].readJsonSync(path__default["default"].join(rootDir, "lerna.json"));
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(rootDir, "package.json"));
        const packageGlobs = lernaJson.packages || ["packages/*"];
        return {
          tool: LernaTool,
          packages: expandPackageGlobsSync(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${LernaTool.type} monorepo root: missing lerna.json and/or package.json`);
        }
        throw err;
      }
    }
  };
  const PnpmTool = {
    type: "pnpm",
    async isMonorepoRoot(directory) {
      try {
        const manifest = await readYamlFile__default["default"](path__default["default"].join(directory, "pnpm-workspace.yaml"));
        if (manifest.packages) {
          return true;
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    isMonorepoRootSync(directory) {
      try {
        const manifest = readYamlFile2.sync(path__default["default"].join(directory, "pnpm-workspace.yaml"));
        if (manifest.packages) {
          return true;
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    async getPackages(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const manifest = await readYamlFile__default["default"](path__default["default"].join(rootDir, "pnpm-workspace.yaml"));
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(rootDir, "package.json"));
        const packageGlobs = manifest.packages;
        return {
          tool: PnpmTool,
          packages: await expandPackageGlobs(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${PnpmTool.type} monorepo root: missing pnpm-workspace.yaml and/or package.json`);
        }
        throw err;
      }
    },
    getPackagesSync(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const manifest = readYamlFile2.sync(path__default["default"].join(rootDir, "pnpm-workspace.yaml"));
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(rootDir, "package.json"));
        const packageGlobs = manifest.packages;
        return {
          tool: PnpmTool,
          packages: expandPackageGlobsSync(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${PnpmTool.type} monorepo root: missing pnpm-workspace.yaml and/or package.json`);
        }
        throw err;
      }
    }
  };
  const RootTool = {
    type: "root",
    async isMonorepoRoot(directory) {
      return false;
    },
    isMonorepoRootSync(directory) {
      return false;
    },
    async getPackages(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(rootDir, "package.json"));
        const pkg = {
          dir: rootDir,
          relativeDir: ".",
          packageJson: pkgJson
        };
        return {
          tool: RootTool,
          packages: [pkg],
          rootPackage: pkg,
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${RootTool.type} monorepo root`);
        }
        throw err;
      }
    },
    getPackagesSync(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(rootDir, "package.json"));
        const pkg = {
          dir: rootDir,
          relativeDir: ".",
          packageJson: pkgJson
        };
        return {
          tool: RootTool,
          packages: [pkg],
          rootPackage: pkg,
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${RootTool.type} monorepo root`);
        }
        throw err;
      }
    }
  };
  const RushTool = {
    type: "rush",
    async isMonorepoRoot(directory) {
      try {
        await fs__default["default"].readFile(path__default["default"].join(directory, "rush.json"), "utf8");
        return true;
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    isMonorepoRootSync(directory) {
      try {
        fs__default["default"].readFileSync(path__default["default"].join(directory, "rush.json"), "utf8");
        return true;
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    async getPackages(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const rushText = await fs__default["default"].readFile(path__default["default"].join(rootDir, "rush.json"), "utf8");
        const rushJson = jju__default["default"].parse(rushText);
        const directories = rushJson.projects.map((project) => path__default["default"].resolve(rootDir, project.projectFolder));
        const packages = await Promise.all(directories.map(async (dir) => {
          return {
            dir,
            relativeDir: path__default["default"].relative(directory, dir),
            packageJson: await fs__default["default"].readJson(path__default["default"].join(dir, "package.json"))
          };
        }));
        return {
          tool: RushTool,
          packages,
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${RushTool.type} monorepo root: missing rush.json`);
        }
        throw err;
      }
    },
    getPackagesSync(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const rushText = fs__default["default"].readFileSync(path__default["default"].join(rootDir, "rush.json"), "utf8");
        const rushJson = jju__default["default"].parse(rushText);
        const directories = rushJson.projects.map((project) => path__default["default"].resolve(rootDir, project.projectFolder));
        const packages = directories.map((dir) => {
          const packageJson = fs__default["default"].readJsonSync(path__default["default"].join(dir, "package.json"));
          return {
            dir,
            relativeDir: path__default["default"].relative(directory, dir),
            packageJson
          };
        });
        return {
          tool: RushTool,
          packages,
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${RushTool.type} monorepo root: missing rush.json`);
        }
        throw err;
      }
    }
  };
  const YarnTool = {
    type: "yarn",
    async isMonorepoRoot(directory) {
      try {
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(directory, "package.json"));
        if (pkgJson.workspaces) {
          if (Array.isArray(pkgJson.workspaces) || Array.isArray(pkgJson.workspaces.packages)) {
            return true;
          }
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    isMonorepoRootSync(directory) {
      try {
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(directory, "package.json"));
        if (pkgJson.workspaces) {
          if (Array.isArray(pkgJson.workspaces) || Array.isArray(pkgJson.workspaces.packages)) {
            return true;
          }
        }
      } catch (err) {
        if (err && err.code === "ENOENT") {
          return false;
        }
        throw err;
      }
      return false;
    },
    async getPackages(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const pkgJson = await fs__default["default"].readJson(path__default["default"].join(rootDir, "package.json"));
        const packageGlobs = Array.isArray(pkgJson.workspaces) ? pkgJson.workspaces : pkgJson.workspaces.packages;
        return {
          tool: YarnTool,
          packages: await expandPackageGlobs(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${YarnTool.type} monorepo root`);
        }
        throw err;
      }
    },
    getPackagesSync(directory) {
      const rootDir = path__default["default"].resolve(directory);
      try {
        const pkgJson = fs__default["default"].readJsonSync(path__default["default"].join(rootDir, "package.json"));
        const packageGlobs = Array.isArray(pkgJson.workspaces) ? pkgJson.workspaces : pkgJson.workspaces.packages;
        return {
          tool: YarnTool,
          packages: expandPackageGlobsSync(packageGlobs, rootDir),
          rootPackage: {
            dir: rootDir,
            relativeDir: ".",
            packageJson: pkgJson
          },
          rootDir
        };
      } catch (err) {
        if (err && err.code === "ENOENT") {
          throw new InvalidMonorepoError(`Directory ${rootDir} is not a valid ${YarnTool.type} monorepo root`);
        }
        throw err;
      }
    }
  };
  manypkgTools_cjs_dev.BoltTool = BoltTool;
  manypkgTools_cjs_dev.InvalidMonorepoError = InvalidMonorepoError;
  manypkgTools_cjs_dev.LernaTool = LernaTool;
  manypkgTools_cjs_dev.PnpmTool = PnpmTool;
  manypkgTools_cjs_dev.RootTool = RootTool;
  manypkgTools_cjs_dev.RushTool = RushTool;
  manypkgTools_cjs_dev.YarnTool = YarnTool;
  return manypkgTools_cjs_dev;
}
if (process.env.NODE_ENV === "production") {
  manypkgTools_cjs.exports = requireManypkgTools_cjs_prod();
} else {
  manypkgTools_cjs.exports = requireManypkgTools_cjs_dev();
}
var manypkgTools_cjsExports = manypkgTools_cjs.exports;
const DEFAULT_TOOLS = [manypkgTools_cjsExports.YarnTool, manypkgTools_cjsExports.PnpmTool, manypkgTools_cjsExports.LernaTool, manypkgTools_cjsExports.RushTool, manypkgTools_cjsExports.BoltTool, manypkgTools_cjsExports.RootTool];
const isNoEntryError = (err) => !!err && typeof err === "object" && "code" in err && err.code === "ENOENT";
class NoPkgJsonFound extends Error {
  constructor(directory) {
    super(`No package.json could be found upwards from directory ${directory}`);
    this.directory = directory;
  }
}
class NoMatchingMonorepoFound extends Error {
  constructor(directory) {
    super(`No monorepo matching the list of supported monorepos could be found upwards from directory ${directory}`);
    this.directory = directory;
  }
}
async function findRoot(cwd, options = {}) {
  let monorepoRoot;
  const tools = options.tools || DEFAULT_TOOLS;
  await findUp(async (directory) => {
    return Promise.all(tools.map(async (tool) => {
      if (await tool.isMonorepoRoot(directory)) {
        return {
          tool,
          rootDir: directory
        };
      }
    })).then((x) => x.find((value2) => value2)).then((result) => {
      if (result) {
        monorepoRoot = result;
        return directory;
      }
    });
  }, {
    cwd,
    type: "directory"
  });
  if (monorepoRoot) {
    return monorepoRoot;
  }
  if (!tools.includes(manypkgTools_cjsExports.RootTool)) {
    throw new NoMatchingMonorepoFound(cwd);
  }
  let rootDir = await findUp(async (directory) => {
    try {
      await fs.access(require$$0$3.join(directory, "package.json"));
      return directory;
    } catch (err) {
      if (!isNoEntryError(err)) {
        throw err;
      }
    }
  }, {
    cwd,
    type: "directory"
  });
  if (!rootDir) {
    throw new NoPkgJsonFound(cwd);
  }
  return {
    tool: manypkgTools_cjsExports.RootTool,
    rootDir
  };
}
function findRootSync(cwd, options = {}) {
  let monorepoRoot;
  const tools = options.tools || DEFAULT_TOOLS;
  findUpExports.sync((directory) => {
    for (const tool of tools) {
      if (tool.isMonorepoRootSync(directory)) {
        monorepoRoot = {
          tool,
          rootDir: directory
        };
        return directory;
      }
    }
  }, {
    cwd,
    type: "directory"
  });
  if (monorepoRoot) {
    return monorepoRoot;
  }
  if (!tools.includes(manypkgTools_cjsExports.RootTool)) {
    throw new NoMatchingMonorepoFound(cwd);
  }
  const rootDir = findUpExports.sync((directory) => {
    const exists = fs.existsSync(require$$0$3.join(directory, "package.json"));
    return exists ? directory : void 0;
  }, {
    cwd,
    type: "directory"
  });
  if (!rootDir) {
    throw new NoPkgJsonFound(cwd);
  }
  return {
    tool: manypkgTools_cjsExports.RootTool,
    rootDir
  };
}
const manypkgFindRoot_esm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  NoMatchingMonorepoFound,
  NoPkgJsonFound,
  findRoot,
  findRootSync
}, Symbol.toStringTag, { value: "Module" }));
const require$$1 = /* @__PURE__ */ getAugmentedNamespace(manypkgFindRoot_esm);
var hasRequiredManypkgGetPackages_cjs_prod;
function requireManypkgGetPackages_cjs_prod() {
  if (hasRequiredManypkgGetPackages_cjs_prod)
    return manypkgGetPackages_cjs_prod;
  hasRequiredManypkgGetPackages_cjs_prod = 1;
  Object.defineProperty(manypkgGetPackages_cjs_prod, "__esModule", { value: true });
  var path2 = require$$0$3;
  var findRoot2 = require$$1;
  function _interopDefault(e) {
    return e && e.__esModule ? e : { "default": e };
  }
  var path__default = /* @__PURE__ */ _interopDefault(path2);
  class PackageJsonMissingNameError extends Error {
    constructor(directories) {
      super(`The following package.jsons are missing the "name" field:
${directories.join("\n")}`);
      this.directories = directories;
    }
  }
  async function getPackages(dir, options) {
    const monorepoRoot = await findRoot2.findRoot(dir, options);
    const packages = await monorepoRoot.tool.getPackages(dir);
    validatePackages(packages);
    return packages;
  }
  function getPackagesSync(dir, options) {
    const monorepoRoot = findRoot2.findRootSync(dir, options);
    const packages = monorepoRoot.tool.getPackagesSync(dir);
    validatePackages(packages);
    return packages;
  }
  function validatePackages(packages) {
    const pkgJsonsMissingNameField = [];
    for (const pkg of packages.packages) {
      if (!pkg.packageJson.name) {
        pkgJsonsMissingNameField.push(path__default["default"].join(pkg.relativeDir, "package.json"));
      }
    }
    if (pkgJsonsMissingNameField.length > 0) {
      pkgJsonsMissingNameField.sort();
      throw new PackageJsonMissingNameError(pkgJsonsMissingNameField);
    }
  }
  manypkgGetPackages_cjs_prod.PackageJsonMissingNameError = PackageJsonMissingNameError;
  manypkgGetPackages_cjs_prod.getPackages = getPackages;
  manypkgGetPackages_cjs_prod.getPackagesSync = getPackagesSync;
  return manypkgGetPackages_cjs_prod;
}
var manypkgGetPackages_cjs_dev = {};
var hasRequiredManypkgGetPackages_cjs_dev;
function requireManypkgGetPackages_cjs_dev() {
  if (hasRequiredManypkgGetPackages_cjs_dev)
    return manypkgGetPackages_cjs_dev;
  hasRequiredManypkgGetPackages_cjs_dev = 1;
  Object.defineProperty(manypkgGetPackages_cjs_dev, "__esModule", { value: true });
  var path2 = require$$0$3;
  var findRoot2 = require$$1;
  function _interopDefault(e) {
    return e && e.__esModule ? e : { "default": e };
  }
  var path__default = /* @__PURE__ */ _interopDefault(path2);
  class PackageJsonMissingNameError extends Error {
    constructor(directories) {
      super(`The following package.jsons are missing the "name" field:
${directories.join("\n")}`);
      this.directories = directories;
    }
  }
  async function getPackages(dir, options) {
    const monorepoRoot = await findRoot2.findRoot(dir, options);
    const packages = await monorepoRoot.tool.getPackages(dir);
    validatePackages(packages);
    return packages;
  }
  function getPackagesSync(dir, options) {
    const monorepoRoot = findRoot2.findRootSync(dir, options);
    const packages = monorepoRoot.tool.getPackagesSync(dir);
    validatePackages(packages);
    return packages;
  }
  function validatePackages(packages) {
    const pkgJsonsMissingNameField = [];
    for (const pkg of packages.packages) {
      if (!pkg.packageJson.name) {
        pkgJsonsMissingNameField.push(path__default["default"].join(pkg.relativeDir, "package.json"));
      }
    }
    if (pkgJsonsMissingNameField.length > 0) {
      pkgJsonsMissingNameField.sort();
      throw new PackageJsonMissingNameError(pkgJsonsMissingNameField);
    }
  }
  manypkgGetPackages_cjs_dev.PackageJsonMissingNameError = PackageJsonMissingNameError;
  manypkgGetPackages_cjs_dev.getPackages = getPackages;
  manypkgGetPackages_cjs_dev.getPackagesSync = getPackagesSync;
  return manypkgGetPackages_cjs_dev;
}
if (process.env.NODE_ENV === "production") {
  manypkgGetPackages_cjs.exports = requireManypkgGetPackages_cjs_prod();
} else {
  manypkgGetPackages_cjs.exports = requireManypkgGetPackages_cjs_dev();
}
var manypkgGetPackages_cjsExports = manypkgGetPackages_cjs.exports;
var dist = {};
(function(exports) {
  var __spreadArray = commonjsGlobal && commonjsGlobal.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.minLength = exports.maxLength = exports.poolSize = exports.humanId = exports.adverbs = exports.verbs = exports.nouns = exports.adjectives = void 0;
  exports.adjectives = ["afraid", "all", "angry", "beige", "big", "better", "bitter", "blue", "brave", "breezy", "bright", "brown", "bumpy", "busy", "calm", "chatty", "chilly", "chubby", "clean", "clear", "clever", "cold", "crazy", "cruel", "cuddly", "curly", "curvy", "cute", "common", "cold", "cool", "cyan", "dark", "deep", "dirty", "dry", "dull", "eager", "early", "easy", "eight", "eighty", "eleven", "empty", "every", "evil", "fair", "famous", "fast", "fancy", "few", "fine", "fifty", "five", "flat", "fluffy", "floppy", "forty", "four", "free", "fresh", "fruity", "full", "funny", "fuzzy", "gentle", "giant", "gold", "good", "great", "green", "grumpy", "happy", "heavy", "hip", "honest", "hot", "huge", "hungry", "icy", "itchy", "khaki", "kind", "large", "late", "lazy", "lemon", "legal", "light", "little", "long", "loose", "loud", "lovely", "lucky", "major", "many", "mean", "metal", "mighty", "modern", "moody", "nasty", "neat", "new", "nice", "nine", "ninety", "odd", "old", "olive", "open", "orange", "pink", "plain", "plenty", "polite", "poor", "pretty", "proud", "public", "puny", "petite", "purple", "quick", "quiet", "rare", "real", "ready", "red", "rich", "ripe", "rotten", "rude", "sad", "salty", "seven", "shaggy", "shaky", "sharp", "shiny", "short", "shy", "silent", "silly", "silver", "six", "sixty", "slick", "slimy", "slow", "small", "smart", "smooth", "social", "soft", "solid", "some", "sour", "spicy", "spotty", "stale", "strong", "stupid", "sweet", "swift", "tall", "tame", "tangy", "tasty", "ten", "tender", "thick", "thin", "thirty", "three", "tidy", "tiny", "tired", "tough", "tricky", "true", "twelve", "twenty", "two", "upset", "vast", "violet", "warm", "weak", "wet", "whole", "wicked", "wide", "wild", "wise", "witty", "yellow", "young", "yummy"];
  exports.nouns = ["apes", "animals", "areas", "bars", "banks", "baths", "breads", "bushes", "cloths", "clowns", "clubs", "hoops", "loops", "memes", "papers", "parks", "paths", "showers", "sides", "signs", "sites", "streets", "teeth", "tires", "webs", "actors", "ads", "adults", "aliens", "ants", "apples", "baboons", "badgers", "bags", "bananas", "bats", "beans", "bears", "beds", "beers", "bees", "berries", "bikes", "birds", "boats", "bobcats", "books", "bottles", "boxes", "brooms", "buckets", "bugs", "buses", "buttons", "camels", "cases", "cameras", "candies", "candles", "carpets", "carrots", "carrots", "cars", "cats", "chairs", "chefs", "chicken", "clocks", "clouds", "coats", "cobras", "coins", "corners", "colts", "comics", "cooks", "cougars", "regions", "results", "cows", "crabs", "crabs", "crews", "cups", "cities", "cycles", "dancers", "days", "deer", "dingos", "dodos", "dogs", "dolls", "donkeys", "donuts", "doodles", "doors", "dots", "dragons", "drinks", "dryers", "ducks", "ducks", "eagles", "ears", "eels", "eggs", "ends", "mammals", "emus", "experts", "eyes", "facts", "falcons", "fans", "feet", "files", "flies", "flowers", "forks", "foxes", "friends", "frogs", "games", "garlics", "geckos", "geese", "ghosts", "ghosts", "gifts", "glasses", "goats", "grapes", "groups", "guests", "hairs", "hands", "hats", "heads", "hornets", "horses", "hotels", "hounds", "houses", "humans", "icons", "ideas", "impalas", "insects", "islands", "items", "jars", "jeans", "jobs", "jokes", "keys", "kids", "kings", "kiwis", "knives", "lamps", "lands", "laws", "lemons", "lies", "lights", "lines", "lions", "lizards", "llamas", "mails", "mangos", "maps", "masks", "meals", "melons", "mice", "mirrors", "moments", "moles", "monkeys", "months", "moons", "moose", "mugs", "nails", "needles", "news", "nights", "numbers", "olives", "onions", "oranges", "otters", "owls", "pandas", "pans", "pants", "papayas", "parents", "parts", "parrots", "paws", "peaches", "pears", "peas", "pens", "pets", "phones", "pianos", "pigs", "pillows", "places", "planes", "planets", "plants", "plums", "poems", "poets", "points", "pots", "pugs", "pumas", "queens", "rabbits", "radios", "rats", "ravens", "readers", "rice", "rings", "rivers", "rockets", "rocks", "rooms", "roses", "rules", "schools", "bats", "seals", "seas", "sheep", "shirts", "shoes", "shrimps", "singers", "sloths", "snails", "snakes", "socks", "spiders", "spies", "spoons", "squids", "stars", "states", "steaks", "wings", "suits", "suns", "swans", "symbols", "tables", "taxes", "taxis", "teams", "terms", "things", "ties", "tigers", "times", "tips", "toes", "towns", "tools", "toys", "trains", "trams", "trees", "turkeys", "turtles", "vans", "views", "walls", "walls", "wasps", "waves", "ways", "weeks", "windows", "wolves", "women", "wombats", "words", "worlds", "worms", "yaks", "years", "zebras", "zoos"];
  exports.verbs = ["accept", "act", "add", "admire", "agree", "allow", "appear", "argue", "arrive", "ask", "attack", "attend", "bake", "bathe", "battle", "beam", "beg", "begin", "behave", "bet", "boil", "bow", "brake", "brush", "build", "burn", "buy", "call", "camp", "care", "carry", "change", "cheat", "check", "cheer", "chew", "clap", "clean", "cough", "count", "cover", "crash", "create", "cross", "cry", "cut", "dance", "decide", "deny", "design", "dig", "divide", "do", "double", "doubt", "draw", "dream", "dress", "drive", "drop", "drum", "eat", "end", "enter", "enjoy", "exist", "fail", "fall", "feel", "fetch", "film", "find", "fix", "flash", "float", "flow", "fly", "fold", "follow", "fry", "give", "glow", "go", "grab", "greet", "grin", "grow", "guess", "hammer", "hang", "happen", "heal", "hear", "help", "hide", "hope", "hug", "hunt", "invent", "invite", "itch", "jam", "jog", "join", "joke", "judge", "juggle", "jump", "kick", "kiss", "kneel", "knock", "know", "laugh", "lay", "lead", "learn", "leave", "lick", "like", "lie", "listen", "live", "look", "lose", "love", "make", "march", "marry", "mate", "matter", "melt", "mix", "move", "nail", "notice", "obey", "occur", "open", "own", "pay", "peel", "play", "poke", "post", "press", "prove", "pull", "pump", "pick", "punch", "push", "raise", "read", "refuse", "relate", "relax", "remain", "repair", "repeat", "reply", "report", "rescue", "rest", "retire", "return", "rhyme", "ring", "roll", "rule", "run", "rush", "say", "scream", "see", "search", "sell", "send", "serve", "shake", "share", "shave", "shine", "show", "shop", "shout", "sin", "sink", "sing", "sip", "sit", "sleep", "slide", "smash", "smell", "smile", "smoke", "sneeze", "sniff", "sort", "speak", "spend", "stand", "start", "stay", "stick", "stop", "stare", "study", "suffer", "swim", "switch", "take", "talk", "tan", "tap", "taste", "teach", "tease", "tell", "thank", "think", "throw", "tickle", "tie", "trade", "train", "travel", "try", "turn", "type", "unite", "vanish", "visit", "wait", "walk", "warn", "wash", "watch", "wave", "wear", "win", "wink", "wish", "wonder", "work", "worry", "write", "yawn", "yell"];
  exports.adverbs = ["bravely", "brightly", "busily", "daily", "freely", "hungrily", "joyously", "knowlingly", "lazily", "oddly", "mysteriously", "noisily", "politely", "quickly", "quietly", "rapidly", "safely", "sleepily", "slowly", "truly", "yearly"];
  function random(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  }
  function longest(arr) {
    return arr.reduce(function(a, b) {
      return a.length > b.length ? a : b;
    });
  }
  function shortest(arr) {
    return arr.reduce(function(a, b) {
      return a.length < b.length ? a : b;
    });
  }
  function humanId(options) {
    if (options === void 0) {
      options = {};
    }
    if (typeof options === "string")
      options = { separator: options };
    if (typeof options === "boolean")
      options = { capitalize: options };
    var _a = options.separator, separator = _a === void 0 ? "" : _a, _b = options.capitalize, capitalize = _b === void 0 ? true : _b, _c = options.adjectiveCount, adjectiveCount = _c === void 0 ? 1 : _c, _d = options.addAdverb, addAdverb = _d === void 0 ? false : _d;
    var res = __spreadArray(__spreadArray(__spreadArray([], __spreadArray([], Array(adjectiveCount), true).map(function(_) {
      return random(exports.adjectives);
    }), true), [
      random(exports.nouns),
      random(exports.verbs)
    ], false), addAdverb ? [random(exports.adverbs)] : [], true);
    if (capitalize)
      res = res.map(function(r) {
        return r.charAt(0).toUpperCase() + r.substr(1);
      });
    return res.join(separator);
  }
  exports.humanId = humanId;
  function poolSize(options) {
    if (options === void 0) {
      options = {};
    }
    var _a = options.adjectiveCount, adjectiveCount = _a === void 0 ? 1 : _a, _b = options.addAdverb, addAdverb = _b === void 0 ? false : _b;
    return exports.adjectives.length * adjectiveCount * exports.nouns.length * exports.verbs.length * (addAdverb ? exports.adverbs.length : 1);
  }
  exports.poolSize = poolSize;
  function maxLength(options) {
    if (options === void 0) {
      options = {};
    }
    var _a = options.adjectiveCount, adjectiveCount = _a === void 0 ? 1 : _a, _b = options.addAdverb, addAdverb = _b === void 0 ? false : _b, _c = options.separator, separator = _c === void 0 ? "" : _c;
    return longest(exports.adjectives).length * adjectiveCount + adjectiveCount * separator.length + longest(exports.nouns).length + separator.length + longest(exports.verbs).length + (addAdverb ? longest(exports.adverbs).length + separator.length : 0);
  }
  exports.maxLength = maxLength;
  function minLength(options) {
    if (options === void 0) {
      options = {};
    }
    var _a = options.adjectiveCount, adjectiveCount = _a === void 0 ? 1 : _a, _b = options.addAdverb, addAdverb = _b === void 0 ? false : _b, _c = options.separator, separator = _c === void 0 ? "" : _c;
    return shortest(exports.adjectives).length * adjectiveCount + adjectiveCount * separator.length + shortest(exports.nouns).length + separator.length + shortest(exports.verbs).length + (addAdverb ? shortest(exports.adverbs).length + separator.length : 0);
  }
  exports.minLength = minLength;
  exports.default = humanId;
})(dist);
function bail(error2) {
  if (error2) {
    throw error2;
  }
}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
var isBuffer = function isBuffer2(obj) {
  return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
};
const isBuffer$1 = /* @__PURE__ */ getDefaultExportFromCjs(isBuffer);
var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var defineProperty = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;
var isArray = function isArray2(arr) {
  if (typeof Array.isArray === "function") {
    return Array.isArray(arr);
  }
  return toStr.call(arr) === "[object Array]";
};
var isPlainObject$1 = function isPlainObject(obj) {
  if (!obj || toStr.call(obj) !== "[object Object]") {
    return false;
  }
  var hasOwnConstructor = hasOwn.call(obj, "constructor");
  var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
  if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
    return false;
  }
  var key;
  for (key in obj) {
  }
  return typeof key === "undefined" || hasOwn.call(obj, key);
};
var setProperty = function setProperty2(target, options) {
  if (defineProperty && options.name === "__proto__") {
    defineProperty(target, options.name, {
      enumerable: true,
      configurable: true,
      value: options.newValue,
      writable: true
    });
  } else {
    target[options.name] = options.newValue;
  }
};
var getProperty = function getProperty2(obj, name) {
  if (name === "__proto__") {
    if (!hasOwn.call(obj, name)) {
      return void 0;
    } else if (gOPD) {
      return gOPD(obj, name).value;
    }
  }
  return obj[name];
};
var extend$1 = function extend() {
  var options, name, src, copy2, copyIsArray, clone2;
  var target = arguments[0];
  var i = 1;
  var length = arguments.length;
  var deep2 = false;
  if (typeof target === "boolean") {
    deep2 = target;
    target = arguments[1] || {};
    i = 2;
  }
  if (target == null || typeof target !== "object" && typeof target !== "function") {
    target = {};
  }
  for (; i < length; ++i) {
    options = arguments[i];
    if (options != null) {
      for (name in options) {
        src = getProperty(target, name);
        copy2 = getProperty(options, name);
        if (target !== copy2) {
          if (deep2 && copy2 && (isPlainObject$1(copy2) || (copyIsArray = isArray(copy2)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone2 = src && isArray(src) ? src : [];
            } else {
              clone2 = src && isPlainObject$1(src) ? src : {};
            }
            setProperty(target, { name, newValue: extend(deep2, clone2, copy2) });
          } else if (typeof copy2 !== "undefined") {
            setProperty(target, { name, newValue: copy2 });
          }
        }
      }
    }
  }
  return target;
};
const extend$2 = /* @__PURE__ */ getDefaultExportFromCjs(extend$1);
function isPlainObject2(value2) {
  if (typeof value2 !== "object" || value2 === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(value2);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value2) && !(Symbol.iterator in value2);
}
function trough() {
  const fns = [];
  const pipeline = { run: run2, use };
  return pipeline;
  function run2(...values) {
    let middlewareIndex = -1;
    const callback = values.pop();
    if (typeof callback !== "function") {
      throw new TypeError("Expected function as last argument, not " + callback);
    }
    next(null, ...values);
    function next(error2, ...output2) {
      const fn = fns[++middlewareIndex];
      let index2 = -1;
      if (error2) {
        callback(error2);
        return;
      }
      while (++index2 < values.length) {
        if (output2[index2] === null || output2[index2] === void 0) {
          output2[index2] = values[index2];
        }
      }
      values = output2;
      if (fn) {
        wrap(fn, next)(...output2);
      } else {
        callback(null, ...output2);
      }
    }
  }
  function use(middelware) {
    if (typeof middelware !== "function") {
      throw new TypeError(
        "Expected `middelware` to be a function, not " + middelware
      );
    }
    fns.push(middelware);
    return pipeline;
  }
}
function wrap(middleware, callback) {
  let called;
  return wrapped;
  function wrapped(...parameters) {
    const fnExpectsCallback = middleware.length > parameters.length;
    let result;
    if (fnExpectsCallback) {
      parameters.push(done);
    }
    try {
      result = middleware.apply(this, parameters);
    } catch (error2) {
      const exception2 = (
        /** @type {Error} */
        error2
      );
      if (fnExpectsCallback && called) {
        throw exception2;
      }
      return done(exception2);
    }
    if (!fnExpectsCallback) {
      if (result instanceof Promise) {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }
  function done(error2, ...output2) {
    if (!called) {
      called = true;
      callback(error2, ...output2);
    }
  }
  function then(value2) {
    done(null, value2);
  }
}
function stringifyPosition(value2) {
  if (!value2 || typeof value2 !== "object") {
    return "";
  }
  if ("position" in value2 || "type" in value2) {
    return position(value2.position);
  }
  if ("start" in value2 || "end" in value2) {
    return position(value2);
  }
  if ("line" in value2 || "column" in value2) {
    return point$1(value2);
  }
  return "";
}
function point$1(point2) {
  return index(point2 && point2.line) + ":" + index(point2 && point2.column);
}
function position(pos) {
  return point$1(pos && pos.start) + "-" + point$1(pos && pos.end);
}
function index(value2) {
  return value2 && typeof value2 === "number" ? value2 : 1;
}
class VFileMessage extends Error {
  /**
   * Create a message for `reason` at `place` from `origin`.
   *
   * When an error is passed in as `reason`, the `stack` is copied.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   *
   *   > 👉 **Note**: you should use markdown.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // To do: next major: expose `undefined` everywhere instead of `null`.
  constructor(reason, place, origin) {
    const parts = [null, null];
    let position2 = {
      // @ts-expect-error: we always follows the structure of `position`.
      start: { line: null, column: null },
      // @ts-expect-error: "
      end: { line: null, column: null }
    };
    super();
    if (typeof place === "string") {
      origin = place;
      place = void 0;
    }
    if (typeof origin === "string") {
      const index2 = origin.indexOf(":");
      if (index2 === -1) {
        parts[1] = origin;
      } else {
        parts[0] = origin.slice(0, index2);
        parts[1] = origin.slice(index2 + 1);
      }
    }
    if (place) {
      if ("type" in place || "position" in place) {
        if (place.position) {
          position2 = place.position;
        }
      } else if ("start" in place || "end" in place) {
        position2 = place;
      } else if ("line" in place || "column" in place) {
        position2.start = place;
      }
    }
    this.name = stringifyPosition(place) || "1:1";
    this.message = typeof reason === "object" ? reason.message : reason;
    this.stack = "";
    if (typeof reason === "object" && reason.stack) {
      this.stack = reason.stack;
    }
    this.reason = this.message;
    this.fatal;
    this.line = position2.start.line;
    this.column = position2.start.column;
    this.position = position2;
    this.source = parts[0];
    this.ruleId = parts[1];
    this.file;
    this.actual;
    this.expected;
    this.url;
    this.note;
  }
}
VFileMessage.prototype.file = "";
VFileMessage.prototype.name = "";
VFileMessage.prototype.reason = "";
VFileMessage.prototype.message = "";
VFileMessage.prototype.stack = "";
VFileMessage.prototype.fatal = null;
VFileMessage.prototype.column = null;
VFileMessage.prototype.line = null;
VFileMessage.prototype.source = null;
VFileMessage.prototype.ruleId = null;
VFileMessage.prototype.position = null;
function isUrl(fileUrlOrPath) {
  return fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && // @ts-expect-error: indexable.
  fileUrlOrPath.href && // @ts-expect-error: indexable.
  fileUrlOrPath.origin;
}
const order = ["history", "path", "basename", "stem", "extname", "dirname"];
class VFile {
  /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Buffer` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */
  constructor(value2) {
    let options;
    if (!value2) {
      options = {};
    } else if (typeof value2 === "string" || buffer(value2)) {
      options = { value: value2 };
    } else if (isUrl(value2)) {
      options = { path: value2 };
    } else {
      options = value2;
    }
    this.data = {};
    this.messages = [];
    this.history = [];
    this.cwd = proc.cwd();
    this.value;
    this.stored;
    this.result;
    this.map;
    let index2 = -1;
    while (++index2 < order.length) {
      const prop2 = order[index2];
      if (prop2 in options && options[prop2] !== void 0 && options[prop2] !== null) {
        this[prop2] = prop2 === "history" ? [...options[prop2]] : options[prop2];
      }
    }
    let prop;
    for (prop in options) {
      if (!order.includes(prop)) {
        this[prop] = options[prop];
      }
    }
  }
  /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   */
  get path() {
    return this.history[this.history.length - 1];
  }
  /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {string | URL} path
   */
  set path(path2) {
    if (isUrl(path2)) {
      path2 = fileURLToPath(path2);
    }
    assertNonEmpty(path2, "path");
    if (this.path !== path2) {
      this.history.push(path2);
    }
  }
  /**
   * Get the parent path (example: `'~'`).
   */
  get dirname() {
    return typeof this.path === "string" ? require$$0$3.dirname(this.path) : void 0;
  }
  /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   */
  set dirname(dirname) {
    assertPath(this.basename, "dirname");
    this.path = require$$0$3.join(dirname || "", this.basename);
  }
  /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   */
  get basename() {
    return typeof this.path === "string" ? require$$0$3.basename(this.path) : void 0;
  }
  /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */
  set basename(basename) {
    assertNonEmpty(basename, "basename");
    assertPart(basename, "basename");
    this.path = require$$0$3.join(this.dirname || "", basename);
  }
  /**
   * Get the extname (including dot) (example: `'.js'`).
   */
  get extname() {
    return typeof this.path === "string" ? require$$0$3.extname(this.path) : void 0;
  }
  /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   */
  set extname(extname) {
    assertPart(extname, "extname");
    assertPath(this.dirname, "extname");
    if (extname) {
      if (extname.charCodeAt(0) !== 46) {
        throw new Error("`extname` must start with `.`");
      }
      if (extname.includes(".", 1)) {
        throw new Error("`extname` cannot contain multiple dots");
      }
    }
    this.path = require$$0$3.join(this.dirname, this.stem + (extname || ""));
  }
  /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   */
  get stem() {
    return typeof this.path === "string" ? require$$0$3.basename(this.path, this.extname) : void 0;
  }
  /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */
  set stem(stem) {
    assertNonEmpty(stem, "stem");
    assertPart(stem, "stem");
    this.path = require$$0$3.join(this.dirname || "", stem + (this.extname || ""));
  }
  /**
   * Serialize the file.
   *
   * @param {BufferEncoding | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Buffer`
   *   (default: `'utf8'`).
   * @returns {string}
   *   Serialized file.
   */
  toString(encoding) {
    return (this.value || "").toString(encoding || void 0);
  }
  /**
   * Create a warning message associated with the file.
   *
   * Its `fatal` is set to `false` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  message(reason, place, origin) {
    const message = new VFileMessage(reason, place, origin);
    if (this.path) {
      message.name = this.path + ":" + message.name;
      message.file = this.path;
    }
    message.fatal = false;
    this.messages.push(message);
    return message;
  }
  /**
   * Create an info message associated with the file.
   *
   * Its `fatal` is set to `null` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  info(reason, place, origin) {
    const message = this.message(reason, place, origin);
    message.fatal = null;
    return message;
  }
  /**
   * Create a fatal error associated with the file.
   *
   * Its `fatal` is set to `true` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * > 👉 **Note**: a fatal error means that a file is no longer processable.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Message.
   * @throws {VFileMessage}
   *   Message.
   */
  fail(reason, place, origin) {
    const message = this.message(reason, place, origin);
    message.fatal = true;
    throw message;
  }
}
function assertPart(part, name) {
  if (part && part.includes(require$$0$3.sep)) {
    throw new Error(
      "`" + name + "` cannot be a path: did not expect `" + require$$0$3.sep + "`"
    );
  }
}
function assertNonEmpty(part, name) {
  if (!part) {
    throw new Error("`" + name + "` cannot be empty");
  }
}
function assertPath(path2, name) {
  if (!path2) {
    throw new Error("Setting `" + name + "` requires `path` to be set too");
  }
}
function buffer(value2) {
  return isBuffer$1(value2);
}
const unified = base().freeze();
const own$4 = {}.hasOwnProperty;
function base() {
  const transformers = trough();
  const attachers = [];
  let namespace = {};
  let frozen;
  let freezeIndex = -1;
  processor.data = data;
  processor.Parser = void 0;
  processor.Compiler = void 0;
  processor.freeze = freeze;
  processor.attachers = attachers;
  processor.use = use;
  processor.parse = parse2;
  processor.stringify = stringify2;
  processor.run = run2;
  processor.runSync = runSync;
  processor.process = process2;
  processor.processSync = processSync;
  return processor;
  function processor() {
    const destination = base();
    let index2 = -1;
    while (++index2 < attachers.length) {
      destination.use(...attachers[index2]);
    }
    destination.data(extend$2(true, {}, namespace));
    return destination;
  }
  function data(key, value2) {
    if (typeof key === "string") {
      if (arguments.length === 2) {
        assertUnfrozen("data", frozen);
        namespace[key] = value2;
        return processor;
      }
      return own$4.call(namespace, key) && namespace[key] || null;
    }
    if (key) {
      assertUnfrozen("data", frozen);
      namespace = key;
      return processor;
    }
    return namespace;
  }
  function freeze() {
    if (frozen) {
      return processor;
    }
    while (++freezeIndex < attachers.length) {
      const [attacher, ...options] = attachers[freezeIndex];
      if (options[0] === false) {
        continue;
      }
      if (options[0] === true) {
        options[0] = void 0;
      }
      const transformer = attacher.call(processor, ...options);
      if (typeof transformer === "function") {
        transformers.use(transformer);
      }
    }
    frozen = true;
    freezeIndex = Number.POSITIVE_INFINITY;
    return processor;
  }
  function use(value2, ...options) {
    let settings2;
    assertUnfrozen("use", frozen);
    if (value2 === null || value2 === void 0)
      ;
    else if (typeof value2 === "function") {
      addPlugin(value2, ...options);
    } else if (typeof value2 === "object") {
      if (Array.isArray(value2)) {
        addList(value2);
      } else {
        addPreset(value2);
      }
    } else {
      throw new TypeError("Expected usable value, not `" + value2 + "`");
    }
    if (settings2) {
      namespace.settings = Object.assign(namespace.settings || {}, settings2);
    }
    return processor;
    function add2(value3) {
      if (typeof value3 === "function") {
        addPlugin(value3);
      } else if (typeof value3 === "object") {
        if (Array.isArray(value3)) {
          const [plugin, ...options2] = value3;
          addPlugin(plugin, ...options2);
        } else {
          addPreset(value3);
        }
      } else {
        throw new TypeError("Expected usable value, not `" + value3 + "`");
      }
    }
    function addPreset(result) {
      addList(result.plugins);
      if (result.settings) {
        settings2 = Object.assign(settings2 || {}, result.settings);
      }
    }
    function addList(plugins) {
      let index2 = -1;
      if (plugins === null || plugins === void 0)
        ;
      else if (Array.isArray(plugins)) {
        while (++index2 < plugins.length) {
          const thing = plugins[index2];
          add2(thing);
        }
      } else {
        throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
      }
    }
    function addPlugin(plugin, value3) {
      let index2 = -1;
      let entry2;
      while (++index2 < attachers.length) {
        if (attachers[index2][0] === plugin) {
          entry2 = attachers[index2];
          break;
        }
      }
      if (entry2) {
        if (isPlainObject2(entry2[1]) && isPlainObject2(value3)) {
          value3 = extend$2(true, entry2[1], value3);
        }
        entry2[1] = value3;
      } else {
        attachers.push([...arguments]);
      }
    }
  }
  function parse2(doc) {
    processor.freeze();
    const file2 = vfile(doc);
    const Parser = processor.Parser;
    assertParser("parse", Parser);
    if (newable(Parser, "parse")) {
      return new Parser(String(file2), file2).parse();
    }
    return Parser(String(file2), file2);
  }
  function stringify2(node2, doc) {
    processor.freeze();
    const file2 = vfile(doc);
    const Compiler = processor.Compiler;
    assertCompiler("stringify", Compiler);
    assertNode(node2);
    if (newable(Compiler, "compile")) {
      return new Compiler(node2, file2).compile();
    }
    return Compiler(node2, file2);
  }
  function run2(node2, doc, callback) {
    assertNode(node2);
    processor.freeze();
    if (!callback && typeof doc === "function") {
      callback = doc;
      doc = void 0;
    }
    if (!callback) {
      return new Promise(executor);
    }
    executor(null, callback);
    function executor(resolve, reject) {
      transformers.run(node2, vfile(doc), done);
      function done(error2, tree, file2) {
        tree = tree || node2;
        if (error2) {
          reject(error2);
        } else if (resolve) {
          resolve(tree);
        } else {
          callback(null, tree, file2);
        }
      }
    }
  }
  function runSync(node2, file2) {
    let result;
    let complete;
    processor.run(node2, file2, done);
    assertDone("runSync", "run", complete);
    return result;
    function done(error2, tree) {
      bail(error2);
      result = tree;
      complete = true;
    }
  }
  function process2(doc, callback) {
    processor.freeze();
    assertParser("process", processor.Parser);
    assertCompiler("process", processor.Compiler);
    if (!callback) {
      return new Promise(executor);
    }
    executor(null, callback);
    function executor(resolve, reject) {
      const file2 = vfile(doc);
      processor.run(processor.parse(file2), file2, (error2, tree, file3) => {
        if (error2 || !tree || !file3) {
          done(error2);
        } else {
          const result = processor.stringify(tree, file3);
          if (result === void 0 || result === null)
            ;
          else if (looksLikeAVFileValue(result)) {
            file3.value = result;
          } else {
            file3.result = result;
          }
          done(error2, file3);
        }
      });
      function done(error2, file3) {
        if (error2 || !file3) {
          reject(error2);
        } else if (resolve) {
          resolve(file3);
        } else {
          callback(null, file3);
        }
      }
    }
  }
  function processSync(doc) {
    let complete;
    processor.freeze();
    assertParser("processSync", processor.Parser);
    assertCompiler("processSync", processor.Compiler);
    const file2 = vfile(doc);
    processor.process(file2, done);
    assertDone("processSync", "process", complete);
    return file2;
    function done(error2) {
      complete = true;
      bail(error2);
    }
  }
}
function newable(value2, name) {
  return typeof value2 === "function" && // Prototypes do exist.
  // type-coverage:ignore-next-line
  value2.prototype && // A function with keys in its prototype is probably a constructor.
  // Classes’ prototype methods are not enumerable, so we check if some value
  // exists in the prototype.
  // type-coverage:ignore-next-line
  (keys(value2.prototype) || name in value2.prototype);
}
function keys(value2) {
  let key;
  for (key in value2) {
    if (own$4.call(value2, key)) {
      return true;
    }
  }
  return false;
}
function assertParser(name, value2) {
  if (typeof value2 !== "function") {
    throw new TypeError("Cannot `" + name + "` without `Parser`");
  }
}
function assertCompiler(name, value2) {
  if (typeof value2 !== "function") {
    throw new TypeError("Cannot `" + name + "` without `Compiler`");
  }
}
function assertUnfrozen(name, frozen) {
  if (frozen) {
    throw new Error(
      "Cannot call `" + name + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
    );
  }
}
function assertNode(node2) {
  if (!isPlainObject2(node2) || typeof node2.type !== "string") {
    throw new TypeError("Expected node, got `" + node2 + "`");
  }
}
function assertDone(name, asyncName, complete) {
  if (!complete) {
    throw new Error(
      "`" + name + "` finished async. Use `" + asyncName + "` instead"
    );
  }
}
function vfile(value2) {
  return looksLikeAVFile(value2) ? value2 : new VFile(value2);
}
function looksLikeAVFile(value2) {
  return Boolean(
    value2 && typeof value2 === "object" && "message" in value2 && "messages" in value2
  );
}
function looksLikeAVFileValue(value2) {
  return typeof value2 === "string" || isBuffer$1(value2);
}
const emptyOptions = {};
function toString(value2, options) {
  const settings2 = options || emptyOptions;
  const includeImageAlt = typeof settings2.includeImageAlt === "boolean" ? settings2.includeImageAlt : true;
  const includeHtml = typeof settings2.includeHtml === "boolean" ? settings2.includeHtml : true;
  return one(value2, includeImageAlt, includeHtml);
}
function one(value2, includeImageAlt, includeHtml) {
  if (node(value2)) {
    if ("value" in value2) {
      return value2.type === "html" && !includeHtml ? "" : value2.value;
    }
    if (includeImageAlt && "alt" in value2 && value2.alt) {
      return value2.alt;
    }
    if ("children" in value2) {
      return all(value2.children, includeImageAlt, includeHtml);
    }
  }
  if (Array.isArray(value2)) {
    return all(value2, includeImageAlt, includeHtml);
  }
  return "";
}
function all(values, includeImageAlt, includeHtml) {
  const result = [];
  let index2 = -1;
  while (++index2 < values.length) {
    result[index2] = one(values[index2], includeImageAlt, includeHtml);
  }
  return result.join("");
}
function node(value2) {
  return Boolean(value2 && typeof value2 === "object");
}
function splice(list2, start, remove2, items) {
  const end = list2.length;
  let chunkStart = 0;
  let parameters;
  if (start < 0) {
    start = -start > end ? 0 : end + start;
  } else {
    start = start > end ? end : start;
  }
  remove2 = remove2 > 0 ? remove2 : 0;
  if (items.length < 1e4) {
    parameters = Array.from(items);
    parameters.unshift(start, remove2);
    list2.splice(...parameters);
  } else {
    if (remove2)
      list2.splice(start, remove2);
    while (chunkStart < items.length) {
      parameters = items.slice(chunkStart, chunkStart + 1e4);
      parameters.unshift(start, 0);
      list2.splice(...parameters);
      chunkStart += 1e4;
      start += 1e4;
    }
  }
}
function push(list2, items) {
  if (list2.length > 0) {
    splice(list2, list2.length, 0, items);
    return list2;
  }
  return items;
}
const hasOwnProperty = {}.hasOwnProperty;
function combineExtensions(extensions) {
  const all2 = {};
  let index2 = -1;
  while (++index2 < extensions.length) {
    syntaxExtension(all2, extensions[index2]);
  }
  return all2;
}
function syntaxExtension(all2, extension2) {
  let hook2;
  for (hook2 in extension2) {
    const maybe = hasOwnProperty.call(all2, hook2) ? all2[hook2] : void 0;
    const left = maybe || (all2[hook2] = {});
    const right = extension2[hook2];
    let code2;
    if (right) {
      for (code2 in right) {
        if (!hasOwnProperty.call(left, code2))
          left[code2] = [];
        const value2 = right[code2];
        constructs(
          // @ts-expect-error Looks like a list.
          left[code2],
          Array.isArray(value2) ? value2 : value2 ? [value2] : []
        );
      }
    }
  }
}
function constructs(existing, list2) {
  let index2 = -1;
  const before = [];
  while (++index2 < list2.length) {
    (list2[index2].add === "after" ? existing : before).push(list2[index2]);
  }
  splice(existing, 0, 0, before);
}
const unicodePunctuationRegex = /[!-\/:-@\[-`\{-~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;
const asciiAlpha = regexCheck(/[A-Za-z]/);
const asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
const asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
function asciiControl(code2) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code2 !== null && (code2 < 32 || code2 === 127)
  );
}
const asciiDigit = regexCheck(/\d/);
const asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
function markdownLineEnding(code2) {
  return code2 !== null && code2 < -2;
}
function markdownLineEndingOrSpace(code2) {
  return code2 !== null && (code2 < 0 || code2 === 32);
}
function markdownSpace(code2) {
  return code2 === -2 || code2 === -1 || code2 === 32;
}
const unicodePunctuation = regexCheck(unicodePunctuationRegex);
const unicodeWhitespace = regexCheck(/\s/);
function regexCheck(regex) {
  return check;
  function check(code2) {
    return code2 !== null && regex.test(String.fromCharCode(code2));
  }
}
function factorySpace(effects, ok2, type2, max) {
  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
  let size = 0;
  return start;
  function start(code2) {
    if (markdownSpace(code2)) {
      effects.enter(type2);
      return prefix(code2);
    }
    return ok2(code2);
  }
  function prefix(code2) {
    if (markdownSpace(code2) && size++ < limit) {
      effects.consume(code2);
      return prefix;
    }
    effects.exit(type2);
    return ok2(code2);
  }
}
const content$1 = {
  tokenize: initializeContent
};
function initializeContent(effects) {
  const contentStart = effects.attempt(
    this.parser.constructs.contentInitial,
    afterContentStartConstruct,
    paragraphInitial
  );
  let previous2;
  return contentStart;
  function afterContentStartConstruct(code2) {
    if (code2 === null) {
      effects.consume(code2);
      return;
    }
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return factorySpace(effects, contentStart, "linePrefix");
  }
  function paragraphInitial(code2) {
    effects.enter("paragraph");
    return lineStart(code2);
  }
  function lineStart(code2) {
    const token = effects.enter("chunkText", {
      contentType: "text",
      previous: previous2
    });
    if (previous2) {
      previous2.next = token;
    }
    previous2 = token;
    return data(code2);
  }
  function data(code2) {
    if (code2 === null) {
      effects.exit("chunkText");
      effects.exit("paragraph");
      effects.consume(code2);
      return;
    }
    if (markdownLineEnding(code2)) {
      effects.consume(code2);
      effects.exit("chunkText");
      return lineStart;
    }
    effects.consume(code2);
    return data;
  }
}
const document$1 = {
  tokenize: initializeDocument
};
const containerConstruct = {
  tokenize: tokenizeContainer
};
function initializeDocument(effects) {
  const self2 = this;
  const stack = [];
  let continued = 0;
  let childFlow;
  let childToken;
  let lineStartOffset;
  return start;
  function start(code2) {
    if (continued < stack.length) {
      const item = stack[continued];
      self2.containerState = item[1];
      return effects.attempt(
        item[0].continuation,
        documentContinue,
        checkNewContainers
      )(code2);
    }
    return checkNewContainers(code2);
  }
  function documentContinue(code2) {
    continued++;
    if (self2.containerState._closeFlow) {
      self2.containerState._closeFlow = void 0;
      if (childFlow) {
        closeFlow();
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let point2;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
          point2 = self2.events[indexBeforeFlow][1].end;
          break;
        }
      }
      exitContainers(continued);
      let index2 = indexBeforeExits;
      while (index2 < self2.events.length) {
        self2.events[index2][1].end = Object.assign({}, point2);
        index2++;
      }
      splice(
        self2.events,
        indexBeforeFlow + 1,
        0,
        self2.events.slice(indexBeforeExits)
      );
      self2.events.length = index2;
      return checkNewContainers(code2);
    }
    return start(code2);
  }
  function checkNewContainers(code2) {
    if (continued === stack.length) {
      if (!childFlow) {
        return documentContinued(code2);
      }
      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
        return flowStart(code2);
      }
      self2.interrupt = Boolean(
        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
      );
    }
    self2.containerState = {};
    return effects.check(
      containerConstruct,
      thereIsANewContainer,
      thereIsNoNewContainer
    )(code2);
  }
  function thereIsANewContainer(code2) {
    if (childFlow)
      closeFlow();
    exitContainers(continued);
    return documentContinued(code2);
  }
  function thereIsNoNewContainer(code2) {
    self2.parser.lazy[self2.now().line] = continued !== stack.length;
    lineStartOffset = self2.now().offset;
    return flowStart(code2);
  }
  function documentContinued(code2) {
    self2.containerState = {};
    return effects.attempt(
      containerConstruct,
      containerContinue,
      flowStart
    )(code2);
  }
  function containerContinue(code2) {
    continued++;
    stack.push([self2.currentConstruct, self2.containerState]);
    return documentContinued(code2);
  }
  function flowStart(code2) {
    if (code2 === null) {
      if (childFlow)
        closeFlow();
      exitContainers(0);
      effects.consume(code2);
      return;
    }
    childFlow = childFlow || self2.parser.flow(self2.now());
    effects.enter("chunkFlow", {
      contentType: "flow",
      previous: childToken,
      _tokenizer: childFlow
    });
    return flowContinue(code2);
  }
  function flowContinue(code2) {
    if (code2 === null) {
      writeToChild(effects.exit("chunkFlow"), true);
      exitContainers(0);
      effects.consume(code2);
      return;
    }
    if (markdownLineEnding(code2)) {
      effects.consume(code2);
      writeToChild(effects.exit("chunkFlow"));
      continued = 0;
      self2.interrupt = void 0;
      return start;
    }
    effects.consume(code2);
    return flowContinue;
  }
  function writeToChild(token, eof) {
    const stream2 = self2.sliceStream(token);
    if (eof)
      stream2.push(null);
    token.previous = childToken;
    if (childToken)
      childToken.next = token;
    childToken = token;
    childFlow.defineSkip(token.start);
    childFlow.write(stream2);
    if (self2.parser.lazy[token.start.line]) {
      let index2 = childFlow.events.length;
      while (index2--) {
        if (
          // The token starts before the line ending…
          childFlow.events[index2][1].start.offset < lineStartOffset && // …and either is not ended yet…
          (!childFlow.events[index2][1].end || // …or ends after it.
          childFlow.events[index2][1].end.offset > lineStartOffset)
        ) {
          return;
        }
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let seen;
      let point2;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
          if (seen) {
            point2 = self2.events[indexBeforeFlow][1].end;
            break;
          }
          seen = true;
        }
      }
      exitContainers(continued);
      index2 = indexBeforeExits;
      while (index2 < self2.events.length) {
        self2.events[index2][1].end = Object.assign({}, point2);
        index2++;
      }
      splice(
        self2.events,
        indexBeforeFlow + 1,
        0,
        self2.events.slice(indexBeforeExits)
      );
      self2.events.length = index2;
    }
  }
  function exitContainers(size) {
    let index2 = stack.length;
    while (index2-- > size) {
      const entry2 = stack[index2];
      self2.containerState = entry2[1];
      entry2[0].exit.call(self2, effects);
    }
    stack.length = size;
  }
  function closeFlow() {
    childFlow.write([null]);
    childToken = void 0;
    childFlow = void 0;
    self2.containerState._closeFlow = void 0;
  }
}
function tokenizeContainer(effects, ok2, nok) {
  return factorySpace(
    effects,
    effects.attempt(this.parser.constructs.document, ok2, nok),
    "linePrefix",
    this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
  );
}
function classifyCharacter(code2) {
  if (code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)) {
    return 1;
  }
  if (unicodePunctuation(code2)) {
    return 2;
  }
}
function resolveAll(constructs2, events2, context2) {
  const called = [];
  let index2 = -1;
  while (++index2 < constructs2.length) {
    const resolve = constructs2[index2].resolveAll;
    if (resolve && !called.includes(resolve)) {
      events2 = resolve(events2, context2);
      called.push(resolve);
    }
  }
  return events2;
}
const attention = {
  name: "attention",
  tokenize: tokenizeAttention,
  resolveAll: resolveAllAttention
};
function resolveAllAttention(events2, context2) {
  let index2 = -1;
  let open;
  let group;
  let text2;
  let openingSequence;
  let closingSequence;
  let use;
  let nextEvents;
  let offset;
  while (++index2 < events2.length) {
    if (events2[index2][0] === "enter" && events2[index2][1].type === "attentionSequence" && events2[index2][1]._close) {
      open = index2;
      while (open--) {
        if (events2[open][0] === "exit" && events2[open][1].type === "attentionSequence" && events2[open][1]._open && // If the markers are the same:
        context2.sliceSerialize(events2[open][1]).charCodeAt(0) === context2.sliceSerialize(events2[index2][1]).charCodeAt(0)) {
          if ((events2[open][1]._close || events2[index2][1]._open) && (events2[index2][1].end.offset - events2[index2][1].start.offset) % 3 && !((events2[open][1].end.offset - events2[open][1].start.offset + events2[index2][1].end.offset - events2[index2][1].start.offset) % 3)) {
            continue;
          }
          use = events2[open][1].end.offset - events2[open][1].start.offset > 1 && events2[index2][1].end.offset - events2[index2][1].start.offset > 1 ? 2 : 1;
          const start = Object.assign({}, events2[open][1].end);
          const end = Object.assign({}, events2[index2][1].start);
          movePoint(start, -use);
          movePoint(end, use);
          openingSequence = {
            type: use > 1 ? "strongSequence" : "emphasisSequence",
            start,
            end: Object.assign({}, events2[open][1].end)
          };
          closingSequence = {
            type: use > 1 ? "strongSequence" : "emphasisSequence",
            start: Object.assign({}, events2[index2][1].start),
            end
          };
          text2 = {
            type: use > 1 ? "strongText" : "emphasisText",
            start: Object.assign({}, events2[open][1].end),
            end: Object.assign({}, events2[index2][1].start)
          };
          group = {
            type: use > 1 ? "strong" : "emphasis",
            start: Object.assign({}, openingSequence.start),
            end: Object.assign({}, closingSequence.end)
          };
          events2[open][1].end = Object.assign({}, openingSequence.start);
          events2[index2][1].start = Object.assign({}, closingSequence.end);
          nextEvents = [];
          if (events2[open][1].end.offset - events2[open][1].start.offset) {
            nextEvents = push(nextEvents, [
              ["enter", events2[open][1], context2],
              ["exit", events2[open][1], context2]
            ]);
          }
          nextEvents = push(nextEvents, [
            ["enter", group, context2],
            ["enter", openingSequence, context2],
            ["exit", openingSequence, context2],
            ["enter", text2, context2]
          ]);
          nextEvents = push(
            nextEvents,
            resolveAll(
              context2.parser.constructs.insideSpan.null,
              events2.slice(open + 1, index2),
              context2
            )
          );
          nextEvents = push(nextEvents, [
            ["exit", text2, context2],
            ["enter", closingSequence, context2],
            ["exit", closingSequence, context2],
            ["exit", group, context2]
          ]);
          if (events2[index2][1].end.offset - events2[index2][1].start.offset) {
            offset = 2;
            nextEvents = push(nextEvents, [
              ["enter", events2[index2][1], context2],
              ["exit", events2[index2][1], context2]
            ]);
          } else {
            offset = 0;
          }
          splice(events2, open - 1, index2 - open + 3, nextEvents);
          index2 = open + nextEvents.length - offset - 2;
          break;
        }
      }
    }
  }
  index2 = -1;
  while (++index2 < events2.length) {
    if (events2[index2][1].type === "attentionSequence") {
      events2[index2][1].type = "data";
    }
  }
  return events2;
}
function tokenizeAttention(effects, ok2) {
  const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
  const previous2 = this.previous;
  const before = classifyCharacter(previous2);
  let marker;
  return start;
  function start(code2) {
    marker = code2;
    effects.enter("attentionSequence");
    return inside(code2);
  }
  function inside(code2) {
    if (code2 === marker) {
      effects.consume(code2);
      return inside;
    }
    const token = effects.exit("attentionSequence");
    const after = classifyCharacter(code2);
    const open = !after || after === 2 && before || attentionMarkers2.includes(code2);
    const close2 = !before || before === 2 && after || attentionMarkers2.includes(previous2);
    token._open = Boolean(marker === 42 ? open : open && (before || !close2));
    token._close = Boolean(marker === 42 ? close2 : close2 && (after || !open));
    return ok2(code2);
  }
}
function movePoint(point2, offset) {
  point2.column += offset;
  point2.offset += offset;
  point2._bufferIndex += offset;
}
const autolink = {
  name: "autolink",
  tokenize: tokenizeAutolink
};
function tokenizeAutolink(effects, ok2, nok) {
  let size = 0;
  return start;
  function start(code2) {
    effects.enter("autolink");
    effects.enter("autolinkMarker");
    effects.consume(code2);
    effects.exit("autolinkMarker");
    effects.enter("autolinkProtocol");
    return open;
  }
  function open(code2) {
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      return schemeOrEmailAtext;
    }
    return emailAtext(code2);
  }
  function schemeOrEmailAtext(code2) {
    if (code2 === 43 || code2 === 45 || code2 === 46 || asciiAlphanumeric(code2)) {
      size = 1;
      return schemeInsideOrEmailAtext(code2);
    }
    return emailAtext(code2);
  }
  function schemeInsideOrEmailAtext(code2) {
    if (code2 === 58) {
      effects.consume(code2);
      size = 0;
      return urlInside;
    }
    if ((code2 === 43 || code2 === 45 || code2 === 46 || asciiAlphanumeric(code2)) && size++ < 32) {
      effects.consume(code2);
      return schemeInsideOrEmailAtext;
    }
    size = 0;
    return emailAtext(code2);
  }
  function urlInside(code2) {
    if (code2 === 62) {
      effects.exit("autolinkProtocol");
      effects.enter("autolinkMarker");
      effects.consume(code2);
      effects.exit("autolinkMarker");
      effects.exit("autolink");
      return ok2;
    }
    if (code2 === null || code2 === 32 || code2 === 60 || asciiControl(code2)) {
      return nok(code2);
    }
    effects.consume(code2);
    return urlInside;
  }
  function emailAtext(code2) {
    if (code2 === 64) {
      effects.consume(code2);
      return emailAtSignOrDot;
    }
    if (asciiAtext(code2)) {
      effects.consume(code2);
      return emailAtext;
    }
    return nok(code2);
  }
  function emailAtSignOrDot(code2) {
    return asciiAlphanumeric(code2) ? emailLabel(code2) : nok(code2);
  }
  function emailLabel(code2) {
    if (code2 === 46) {
      effects.consume(code2);
      size = 0;
      return emailAtSignOrDot;
    }
    if (code2 === 62) {
      effects.exit("autolinkProtocol").type = "autolinkEmail";
      effects.enter("autolinkMarker");
      effects.consume(code2);
      effects.exit("autolinkMarker");
      effects.exit("autolink");
      return ok2;
    }
    return emailValue(code2);
  }
  function emailValue(code2) {
    if ((code2 === 45 || asciiAlphanumeric(code2)) && size++ < 63) {
      const next = code2 === 45 ? emailValue : emailLabel;
      effects.consume(code2);
      return next;
    }
    return nok(code2);
  }
}
const blankLine = {
  tokenize: tokenizeBlankLine,
  partial: true
};
function tokenizeBlankLine(effects, ok2, nok) {
  return start;
  function start(code2) {
    return markdownSpace(code2) ? factorySpace(effects, after, "linePrefix")(code2) : after(code2);
  }
  function after(code2) {
    return code2 === null || markdownLineEnding(code2) ? ok2(code2) : nok(code2);
  }
}
const blockQuote = {
  name: "blockQuote",
  tokenize: tokenizeBlockQuoteStart,
  continuation: {
    tokenize: tokenizeBlockQuoteContinuation
  },
  exit: exit$1
};
function tokenizeBlockQuoteStart(effects, ok2, nok) {
  const self2 = this;
  return start;
  function start(code2) {
    if (code2 === 62) {
      const state = self2.containerState;
      if (!state.open) {
        effects.enter("blockQuote", {
          _container: true
        });
        state.open = true;
      }
      effects.enter("blockQuotePrefix");
      effects.enter("blockQuoteMarker");
      effects.consume(code2);
      effects.exit("blockQuoteMarker");
      return after;
    }
    return nok(code2);
  }
  function after(code2) {
    if (markdownSpace(code2)) {
      effects.enter("blockQuotePrefixWhitespace");
      effects.consume(code2);
      effects.exit("blockQuotePrefixWhitespace");
      effects.exit("blockQuotePrefix");
      return ok2;
    }
    effects.exit("blockQuotePrefix");
    return ok2(code2);
  }
}
function tokenizeBlockQuoteContinuation(effects, ok2, nok) {
  const self2 = this;
  return contStart;
  function contStart(code2) {
    if (markdownSpace(code2)) {
      return factorySpace(
        effects,
        contBefore,
        "linePrefix",
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
      )(code2);
    }
    return contBefore(code2);
  }
  function contBefore(code2) {
    return effects.attempt(blockQuote, ok2, nok)(code2);
  }
}
function exit$1(effects) {
  effects.exit("blockQuote");
}
const characterEscape = {
  name: "characterEscape",
  tokenize: tokenizeCharacterEscape
};
function tokenizeCharacterEscape(effects, ok2, nok) {
  return start;
  function start(code2) {
    effects.enter("characterEscape");
    effects.enter("escapeMarker");
    effects.consume(code2);
    effects.exit("escapeMarker");
    return inside;
  }
  function inside(code2) {
    if (asciiPunctuation(code2)) {
      effects.enter("characterEscapeValue");
      effects.consume(code2);
      effects.exit("characterEscapeValue");
      effects.exit("characterEscape");
      return ok2;
    }
    return nok(code2);
  }
}
const characterEntities = {
  AElig: "Æ",
  AMP: "&",
  Aacute: "Á",
  Abreve: "Ă",
  Acirc: "Â",
  Acy: "А",
  Afr: "𝔄",
  Agrave: "À",
  Alpha: "Α",
  Amacr: "Ā",
  And: "⩓",
  Aogon: "Ą",
  Aopf: "𝔸",
  ApplyFunction: "⁡",
  Aring: "Å",
  Ascr: "𝒜",
  Assign: "≔",
  Atilde: "Ã",
  Auml: "Ä",
  Backslash: "∖",
  Barv: "⫧",
  Barwed: "⌆",
  Bcy: "Б",
  Because: "∵",
  Bernoullis: "ℬ",
  Beta: "Β",
  Bfr: "𝔅",
  Bopf: "𝔹",
  Breve: "˘",
  Bscr: "ℬ",
  Bumpeq: "≎",
  CHcy: "Ч",
  COPY: "©",
  Cacute: "Ć",
  Cap: "⋒",
  CapitalDifferentialD: "ⅅ",
  Cayleys: "ℭ",
  Ccaron: "Č",
  Ccedil: "Ç",
  Ccirc: "Ĉ",
  Cconint: "∰",
  Cdot: "Ċ",
  Cedilla: "¸",
  CenterDot: "·",
  Cfr: "ℭ",
  Chi: "Χ",
  CircleDot: "⊙",
  CircleMinus: "⊖",
  CirclePlus: "⊕",
  CircleTimes: "⊗",
  ClockwiseContourIntegral: "∲",
  CloseCurlyDoubleQuote: "”",
  CloseCurlyQuote: "’",
  Colon: "∷",
  Colone: "⩴",
  Congruent: "≡",
  Conint: "∯",
  ContourIntegral: "∮",
  Copf: "ℂ",
  Coproduct: "∐",
  CounterClockwiseContourIntegral: "∳",
  Cross: "⨯",
  Cscr: "𝒞",
  Cup: "⋓",
  CupCap: "≍",
  DD: "ⅅ",
  DDotrahd: "⤑",
  DJcy: "Ђ",
  DScy: "Ѕ",
  DZcy: "Џ",
  Dagger: "‡",
  Darr: "↡",
  Dashv: "⫤",
  Dcaron: "Ď",
  Dcy: "Д",
  Del: "∇",
  Delta: "Δ",
  Dfr: "𝔇",
  DiacriticalAcute: "´",
  DiacriticalDot: "˙",
  DiacriticalDoubleAcute: "˝",
  DiacriticalGrave: "`",
  DiacriticalTilde: "˜",
  Diamond: "⋄",
  DifferentialD: "ⅆ",
  Dopf: "𝔻",
  Dot: "¨",
  DotDot: "⃜",
  DotEqual: "≐",
  DoubleContourIntegral: "∯",
  DoubleDot: "¨",
  DoubleDownArrow: "⇓",
  DoubleLeftArrow: "⇐",
  DoubleLeftRightArrow: "⇔",
  DoubleLeftTee: "⫤",
  DoubleLongLeftArrow: "⟸",
  DoubleLongLeftRightArrow: "⟺",
  DoubleLongRightArrow: "⟹",
  DoubleRightArrow: "⇒",
  DoubleRightTee: "⊨",
  DoubleUpArrow: "⇑",
  DoubleUpDownArrow: "⇕",
  DoubleVerticalBar: "∥",
  DownArrow: "↓",
  DownArrowBar: "⤓",
  DownArrowUpArrow: "⇵",
  DownBreve: "̑",
  DownLeftRightVector: "⥐",
  DownLeftTeeVector: "⥞",
  DownLeftVector: "↽",
  DownLeftVectorBar: "⥖",
  DownRightTeeVector: "⥟",
  DownRightVector: "⇁",
  DownRightVectorBar: "⥗",
  DownTee: "⊤",
  DownTeeArrow: "↧",
  Downarrow: "⇓",
  Dscr: "𝒟",
  Dstrok: "Đ",
  ENG: "Ŋ",
  ETH: "Ð",
  Eacute: "É",
  Ecaron: "Ě",
  Ecirc: "Ê",
  Ecy: "Э",
  Edot: "Ė",
  Efr: "𝔈",
  Egrave: "È",
  Element: "∈",
  Emacr: "Ē",
  EmptySmallSquare: "◻",
  EmptyVerySmallSquare: "▫",
  Eogon: "Ę",
  Eopf: "𝔼",
  Epsilon: "Ε",
  Equal: "⩵",
  EqualTilde: "≂",
  Equilibrium: "⇌",
  Escr: "ℰ",
  Esim: "⩳",
  Eta: "Η",
  Euml: "Ë",
  Exists: "∃",
  ExponentialE: "ⅇ",
  Fcy: "Ф",
  Ffr: "𝔉",
  FilledSmallSquare: "◼",
  FilledVerySmallSquare: "▪",
  Fopf: "𝔽",
  ForAll: "∀",
  Fouriertrf: "ℱ",
  Fscr: "ℱ",
  GJcy: "Ѓ",
  GT: ">",
  Gamma: "Γ",
  Gammad: "Ϝ",
  Gbreve: "Ğ",
  Gcedil: "Ģ",
  Gcirc: "Ĝ",
  Gcy: "Г",
  Gdot: "Ġ",
  Gfr: "𝔊",
  Gg: "⋙",
  Gopf: "𝔾",
  GreaterEqual: "≥",
  GreaterEqualLess: "⋛",
  GreaterFullEqual: "≧",
  GreaterGreater: "⪢",
  GreaterLess: "≷",
  GreaterSlantEqual: "⩾",
  GreaterTilde: "≳",
  Gscr: "𝒢",
  Gt: "≫",
  HARDcy: "Ъ",
  Hacek: "ˇ",
  Hat: "^",
  Hcirc: "Ĥ",
  Hfr: "ℌ",
  HilbertSpace: "ℋ",
  Hopf: "ℍ",
  HorizontalLine: "─",
  Hscr: "ℋ",
  Hstrok: "Ħ",
  HumpDownHump: "≎",
  HumpEqual: "≏",
  IEcy: "Е",
  IJlig: "Ĳ",
  IOcy: "Ё",
  Iacute: "Í",
  Icirc: "Î",
  Icy: "И",
  Idot: "İ",
  Ifr: "ℑ",
  Igrave: "Ì",
  Im: "ℑ",
  Imacr: "Ī",
  ImaginaryI: "ⅈ",
  Implies: "⇒",
  Int: "∬",
  Integral: "∫",
  Intersection: "⋂",
  InvisibleComma: "⁣",
  InvisibleTimes: "⁢",
  Iogon: "Į",
  Iopf: "𝕀",
  Iota: "Ι",
  Iscr: "ℐ",
  Itilde: "Ĩ",
  Iukcy: "І",
  Iuml: "Ï",
  Jcirc: "Ĵ",
  Jcy: "Й",
  Jfr: "𝔍",
  Jopf: "𝕁",
  Jscr: "𝒥",
  Jsercy: "Ј",
  Jukcy: "Є",
  KHcy: "Х",
  KJcy: "Ќ",
  Kappa: "Κ",
  Kcedil: "Ķ",
  Kcy: "К",
  Kfr: "𝔎",
  Kopf: "𝕂",
  Kscr: "𝒦",
  LJcy: "Љ",
  LT: "<",
  Lacute: "Ĺ",
  Lambda: "Λ",
  Lang: "⟪",
  Laplacetrf: "ℒ",
  Larr: "↞",
  Lcaron: "Ľ",
  Lcedil: "Ļ",
  Lcy: "Л",
  LeftAngleBracket: "⟨",
  LeftArrow: "←",
  LeftArrowBar: "⇤",
  LeftArrowRightArrow: "⇆",
  LeftCeiling: "⌈",
  LeftDoubleBracket: "⟦",
  LeftDownTeeVector: "⥡",
  LeftDownVector: "⇃",
  LeftDownVectorBar: "⥙",
  LeftFloor: "⌊",
  LeftRightArrow: "↔",
  LeftRightVector: "⥎",
  LeftTee: "⊣",
  LeftTeeArrow: "↤",
  LeftTeeVector: "⥚",
  LeftTriangle: "⊲",
  LeftTriangleBar: "⧏",
  LeftTriangleEqual: "⊴",
  LeftUpDownVector: "⥑",
  LeftUpTeeVector: "⥠",
  LeftUpVector: "↿",
  LeftUpVectorBar: "⥘",
  LeftVector: "↼",
  LeftVectorBar: "⥒",
  Leftarrow: "⇐",
  Leftrightarrow: "⇔",
  LessEqualGreater: "⋚",
  LessFullEqual: "≦",
  LessGreater: "≶",
  LessLess: "⪡",
  LessSlantEqual: "⩽",
  LessTilde: "≲",
  Lfr: "𝔏",
  Ll: "⋘",
  Lleftarrow: "⇚",
  Lmidot: "Ŀ",
  LongLeftArrow: "⟵",
  LongLeftRightArrow: "⟷",
  LongRightArrow: "⟶",
  Longleftarrow: "⟸",
  Longleftrightarrow: "⟺",
  Longrightarrow: "⟹",
  Lopf: "𝕃",
  LowerLeftArrow: "↙",
  LowerRightArrow: "↘",
  Lscr: "ℒ",
  Lsh: "↰",
  Lstrok: "Ł",
  Lt: "≪",
  Map: "⤅",
  Mcy: "М",
  MediumSpace: " ",
  Mellintrf: "ℳ",
  Mfr: "𝔐",
  MinusPlus: "∓",
  Mopf: "𝕄",
  Mscr: "ℳ",
  Mu: "Μ",
  NJcy: "Њ",
  Nacute: "Ń",
  Ncaron: "Ň",
  Ncedil: "Ņ",
  Ncy: "Н",
  NegativeMediumSpace: "​",
  NegativeThickSpace: "​",
  NegativeThinSpace: "​",
  NegativeVeryThinSpace: "​",
  NestedGreaterGreater: "≫",
  NestedLessLess: "≪",
  NewLine: "\n",
  Nfr: "𝔑",
  NoBreak: "⁠",
  NonBreakingSpace: " ",
  Nopf: "ℕ",
  Not: "⫬",
  NotCongruent: "≢",
  NotCupCap: "≭",
  NotDoubleVerticalBar: "∦",
  NotElement: "∉",
  NotEqual: "≠",
  NotEqualTilde: "≂̸",
  NotExists: "∄",
  NotGreater: "≯",
  NotGreaterEqual: "≱",
  NotGreaterFullEqual: "≧̸",
  NotGreaterGreater: "≫̸",
  NotGreaterLess: "≹",
  NotGreaterSlantEqual: "⩾̸",
  NotGreaterTilde: "≵",
  NotHumpDownHump: "≎̸",
  NotHumpEqual: "≏̸",
  NotLeftTriangle: "⋪",
  NotLeftTriangleBar: "⧏̸",
  NotLeftTriangleEqual: "⋬",
  NotLess: "≮",
  NotLessEqual: "≰",
  NotLessGreater: "≸",
  NotLessLess: "≪̸",
  NotLessSlantEqual: "⩽̸",
  NotLessTilde: "≴",
  NotNestedGreaterGreater: "⪢̸",
  NotNestedLessLess: "⪡̸",
  NotPrecedes: "⊀",
  NotPrecedesEqual: "⪯̸",
  NotPrecedesSlantEqual: "⋠",
  NotReverseElement: "∌",
  NotRightTriangle: "⋫",
  NotRightTriangleBar: "⧐̸",
  NotRightTriangleEqual: "⋭",
  NotSquareSubset: "⊏̸",
  NotSquareSubsetEqual: "⋢",
  NotSquareSuperset: "⊐̸",
  NotSquareSupersetEqual: "⋣",
  NotSubset: "⊂⃒",
  NotSubsetEqual: "⊈",
  NotSucceeds: "⊁",
  NotSucceedsEqual: "⪰̸",
  NotSucceedsSlantEqual: "⋡",
  NotSucceedsTilde: "≿̸",
  NotSuperset: "⊃⃒",
  NotSupersetEqual: "⊉",
  NotTilde: "≁",
  NotTildeEqual: "≄",
  NotTildeFullEqual: "≇",
  NotTildeTilde: "≉",
  NotVerticalBar: "∤",
  Nscr: "𝒩",
  Ntilde: "Ñ",
  Nu: "Ν",
  OElig: "Œ",
  Oacute: "Ó",
  Ocirc: "Ô",
  Ocy: "О",
  Odblac: "Ő",
  Ofr: "𝔒",
  Ograve: "Ò",
  Omacr: "Ō",
  Omega: "Ω",
  Omicron: "Ο",
  Oopf: "𝕆",
  OpenCurlyDoubleQuote: "“",
  OpenCurlyQuote: "‘",
  Or: "⩔",
  Oscr: "𝒪",
  Oslash: "Ø",
  Otilde: "Õ",
  Otimes: "⨷",
  Ouml: "Ö",
  OverBar: "‾",
  OverBrace: "⏞",
  OverBracket: "⎴",
  OverParenthesis: "⏜",
  PartialD: "∂",
  Pcy: "П",
  Pfr: "𝔓",
  Phi: "Φ",
  Pi: "Π",
  PlusMinus: "±",
  Poincareplane: "ℌ",
  Popf: "ℙ",
  Pr: "⪻",
  Precedes: "≺",
  PrecedesEqual: "⪯",
  PrecedesSlantEqual: "≼",
  PrecedesTilde: "≾",
  Prime: "″",
  Product: "∏",
  Proportion: "∷",
  Proportional: "∝",
  Pscr: "𝒫",
  Psi: "Ψ",
  QUOT: '"',
  Qfr: "𝔔",
  Qopf: "ℚ",
  Qscr: "𝒬",
  RBarr: "⤐",
  REG: "®",
  Racute: "Ŕ",
  Rang: "⟫",
  Rarr: "↠",
  Rarrtl: "⤖",
  Rcaron: "Ř",
  Rcedil: "Ŗ",
  Rcy: "Р",
  Re: "ℜ",
  ReverseElement: "∋",
  ReverseEquilibrium: "⇋",
  ReverseUpEquilibrium: "⥯",
  Rfr: "ℜ",
  Rho: "Ρ",
  RightAngleBracket: "⟩",
  RightArrow: "→",
  RightArrowBar: "⇥",
  RightArrowLeftArrow: "⇄",
  RightCeiling: "⌉",
  RightDoubleBracket: "⟧",
  RightDownTeeVector: "⥝",
  RightDownVector: "⇂",
  RightDownVectorBar: "⥕",
  RightFloor: "⌋",
  RightTee: "⊢",
  RightTeeArrow: "↦",
  RightTeeVector: "⥛",
  RightTriangle: "⊳",
  RightTriangleBar: "⧐",
  RightTriangleEqual: "⊵",
  RightUpDownVector: "⥏",
  RightUpTeeVector: "⥜",
  RightUpVector: "↾",
  RightUpVectorBar: "⥔",
  RightVector: "⇀",
  RightVectorBar: "⥓",
  Rightarrow: "⇒",
  Ropf: "ℝ",
  RoundImplies: "⥰",
  Rrightarrow: "⇛",
  Rscr: "ℛ",
  Rsh: "↱",
  RuleDelayed: "⧴",
  SHCHcy: "Щ",
  SHcy: "Ш",
  SOFTcy: "Ь",
  Sacute: "Ś",
  Sc: "⪼",
  Scaron: "Š",
  Scedil: "Ş",
  Scirc: "Ŝ",
  Scy: "С",
  Sfr: "𝔖",
  ShortDownArrow: "↓",
  ShortLeftArrow: "←",
  ShortRightArrow: "→",
  ShortUpArrow: "↑",
  Sigma: "Σ",
  SmallCircle: "∘",
  Sopf: "𝕊",
  Sqrt: "√",
  Square: "□",
  SquareIntersection: "⊓",
  SquareSubset: "⊏",
  SquareSubsetEqual: "⊑",
  SquareSuperset: "⊐",
  SquareSupersetEqual: "⊒",
  SquareUnion: "⊔",
  Sscr: "𝒮",
  Star: "⋆",
  Sub: "⋐",
  Subset: "⋐",
  SubsetEqual: "⊆",
  Succeeds: "≻",
  SucceedsEqual: "⪰",
  SucceedsSlantEqual: "≽",
  SucceedsTilde: "≿",
  SuchThat: "∋",
  Sum: "∑",
  Sup: "⋑",
  Superset: "⊃",
  SupersetEqual: "⊇",
  Supset: "⋑",
  THORN: "Þ",
  TRADE: "™",
  TSHcy: "Ћ",
  TScy: "Ц",
  Tab: "	",
  Tau: "Τ",
  Tcaron: "Ť",
  Tcedil: "Ţ",
  Tcy: "Т",
  Tfr: "𝔗",
  Therefore: "∴",
  Theta: "Θ",
  ThickSpace: "  ",
  ThinSpace: " ",
  Tilde: "∼",
  TildeEqual: "≃",
  TildeFullEqual: "≅",
  TildeTilde: "≈",
  Topf: "𝕋",
  TripleDot: "⃛",
  Tscr: "𝒯",
  Tstrok: "Ŧ",
  Uacute: "Ú",
  Uarr: "↟",
  Uarrocir: "⥉",
  Ubrcy: "Ў",
  Ubreve: "Ŭ",
  Ucirc: "Û",
  Ucy: "У",
  Udblac: "Ű",
  Ufr: "𝔘",
  Ugrave: "Ù",
  Umacr: "Ū",
  UnderBar: "_",
  UnderBrace: "⏟",
  UnderBracket: "⎵",
  UnderParenthesis: "⏝",
  Union: "⋃",
  UnionPlus: "⊎",
  Uogon: "Ų",
  Uopf: "𝕌",
  UpArrow: "↑",
  UpArrowBar: "⤒",
  UpArrowDownArrow: "⇅",
  UpDownArrow: "↕",
  UpEquilibrium: "⥮",
  UpTee: "⊥",
  UpTeeArrow: "↥",
  Uparrow: "⇑",
  Updownarrow: "⇕",
  UpperLeftArrow: "↖",
  UpperRightArrow: "↗",
  Upsi: "ϒ",
  Upsilon: "Υ",
  Uring: "Ů",
  Uscr: "𝒰",
  Utilde: "Ũ",
  Uuml: "Ü",
  VDash: "⊫",
  Vbar: "⫫",
  Vcy: "В",
  Vdash: "⊩",
  Vdashl: "⫦",
  Vee: "⋁",
  Verbar: "‖",
  Vert: "‖",
  VerticalBar: "∣",
  VerticalLine: "|",
  VerticalSeparator: "❘",
  VerticalTilde: "≀",
  VeryThinSpace: " ",
  Vfr: "𝔙",
  Vopf: "𝕍",
  Vscr: "𝒱",
  Vvdash: "⊪",
  Wcirc: "Ŵ",
  Wedge: "⋀",
  Wfr: "𝔚",
  Wopf: "𝕎",
  Wscr: "𝒲",
  Xfr: "𝔛",
  Xi: "Ξ",
  Xopf: "𝕏",
  Xscr: "𝒳",
  YAcy: "Я",
  YIcy: "Ї",
  YUcy: "Ю",
  Yacute: "Ý",
  Ycirc: "Ŷ",
  Ycy: "Ы",
  Yfr: "𝔜",
  Yopf: "𝕐",
  Yscr: "𝒴",
  Yuml: "Ÿ",
  ZHcy: "Ж",
  Zacute: "Ź",
  Zcaron: "Ž",
  Zcy: "З",
  Zdot: "Ż",
  ZeroWidthSpace: "​",
  Zeta: "Ζ",
  Zfr: "ℨ",
  Zopf: "ℤ",
  Zscr: "𝒵",
  aacute: "á",
  abreve: "ă",
  ac: "∾",
  acE: "∾̳",
  acd: "∿",
  acirc: "â",
  acute: "´",
  acy: "а",
  aelig: "æ",
  af: "⁡",
  afr: "𝔞",
  agrave: "à",
  alefsym: "ℵ",
  aleph: "ℵ",
  alpha: "α",
  amacr: "ā",
  amalg: "⨿",
  amp: "&",
  and: "∧",
  andand: "⩕",
  andd: "⩜",
  andslope: "⩘",
  andv: "⩚",
  ang: "∠",
  ange: "⦤",
  angle: "∠",
  angmsd: "∡",
  angmsdaa: "⦨",
  angmsdab: "⦩",
  angmsdac: "⦪",
  angmsdad: "⦫",
  angmsdae: "⦬",
  angmsdaf: "⦭",
  angmsdag: "⦮",
  angmsdah: "⦯",
  angrt: "∟",
  angrtvb: "⊾",
  angrtvbd: "⦝",
  angsph: "∢",
  angst: "Å",
  angzarr: "⍼",
  aogon: "ą",
  aopf: "𝕒",
  ap: "≈",
  apE: "⩰",
  apacir: "⩯",
  ape: "≊",
  apid: "≋",
  apos: "'",
  approx: "≈",
  approxeq: "≊",
  aring: "å",
  ascr: "𝒶",
  ast: "*",
  asymp: "≈",
  asympeq: "≍",
  atilde: "ã",
  auml: "ä",
  awconint: "∳",
  awint: "⨑",
  bNot: "⫭",
  backcong: "≌",
  backepsilon: "϶",
  backprime: "‵",
  backsim: "∽",
  backsimeq: "⋍",
  barvee: "⊽",
  barwed: "⌅",
  barwedge: "⌅",
  bbrk: "⎵",
  bbrktbrk: "⎶",
  bcong: "≌",
  bcy: "б",
  bdquo: "„",
  becaus: "∵",
  because: "∵",
  bemptyv: "⦰",
  bepsi: "϶",
  bernou: "ℬ",
  beta: "β",
  beth: "ℶ",
  between: "≬",
  bfr: "𝔟",
  bigcap: "⋂",
  bigcirc: "◯",
  bigcup: "⋃",
  bigodot: "⨀",
  bigoplus: "⨁",
  bigotimes: "⨂",
  bigsqcup: "⨆",
  bigstar: "★",
  bigtriangledown: "▽",
  bigtriangleup: "△",
  biguplus: "⨄",
  bigvee: "⋁",
  bigwedge: "⋀",
  bkarow: "⤍",
  blacklozenge: "⧫",
  blacksquare: "▪",
  blacktriangle: "▴",
  blacktriangledown: "▾",
  blacktriangleleft: "◂",
  blacktriangleright: "▸",
  blank: "␣",
  blk12: "▒",
  blk14: "░",
  blk34: "▓",
  block: "█",
  bne: "=⃥",
  bnequiv: "≡⃥",
  bnot: "⌐",
  bopf: "𝕓",
  bot: "⊥",
  bottom: "⊥",
  bowtie: "⋈",
  boxDL: "╗",
  boxDR: "╔",
  boxDl: "╖",
  boxDr: "╓",
  boxH: "═",
  boxHD: "╦",
  boxHU: "╩",
  boxHd: "╤",
  boxHu: "╧",
  boxUL: "╝",
  boxUR: "╚",
  boxUl: "╜",
  boxUr: "╙",
  boxV: "║",
  boxVH: "╬",
  boxVL: "╣",
  boxVR: "╠",
  boxVh: "╫",
  boxVl: "╢",
  boxVr: "╟",
  boxbox: "⧉",
  boxdL: "╕",
  boxdR: "╒",
  boxdl: "┐",
  boxdr: "┌",
  boxh: "─",
  boxhD: "╥",
  boxhU: "╨",
  boxhd: "┬",
  boxhu: "┴",
  boxminus: "⊟",
  boxplus: "⊞",
  boxtimes: "⊠",
  boxuL: "╛",
  boxuR: "╘",
  boxul: "┘",
  boxur: "└",
  boxv: "│",
  boxvH: "╪",
  boxvL: "╡",
  boxvR: "╞",
  boxvh: "┼",
  boxvl: "┤",
  boxvr: "├",
  bprime: "‵",
  breve: "˘",
  brvbar: "¦",
  bscr: "𝒷",
  bsemi: "⁏",
  bsim: "∽",
  bsime: "⋍",
  bsol: "\\",
  bsolb: "⧅",
  bsolhsub: "⟈",
  bull: "•",
  bullet: "•",
  bump: "≎",
  bumpE: "⪮",
  bumpe: "≏",
  bumpeq: "≏",
  cacute: "ć",
  cap: "∩",
  capand: "⩄",
  capbrcup: "⩉",
  capcap: "⩋",
  capcup: "⩇",
  capdot: "⩀",
  caps: "∩︀",
  caret: "⁁",
  caron: "ˇ",
  ccaps: "⩍",
  ccaron: "č",
  ccedil: "ç",
  ccirc: "ĉ",
  ccups: "⩌",
  ccupssm: "⩐",
  cdot: "ċ",
  cedil: "¸",
  cemptyv: "⦲",
  cent: "¢",
  centerdot: "·",
  cfr: "𝔠",
  chcy: "ч",
  check: "✓",
  checkmark: "✓",
  chi: "χ",
  cir: "○",
  cirE: "⧃",
  circ: "ˆ",
  circeq: "≗",
  circlearrowleft: "↺",
  circlearrowright: "↻",
  circledR: "®",
  circledS: "Ⓢ",
  circledast: "⊛",
  circledcirc: "⊚",
  circleddash: "⊝",
  cire: "≗",
  cirfnint: "⨐",
  cirmid: "⫯",
  cirscir: "⧂",
  clubs: "♣",
  clubsuit: "♣",
  colon: ":",
  colone: "≔",
  coloneq: "≔",
  comma: ",",
  commat: "@",
  comp: "∁",
  compfn: "∘",
  complement: "∁",
  complexes: "ℂ",
  cong: "≅",
  congdot: "⩭",
  conint: "∮",
  copf: "𝕔",
  coprod: "∐",
  copy: "©",
  copysr: "℗",
  crarr: "↵",
  cross: "✗",
  cscr: "𝒸",
  csub: "⫏",
  csube: "⫑",
  csup: "⫐",
  csupe: "⫒",
  ctdot: "⋯",
  cudarrl: "⤸",
  cudarrr: "⤵",
  cuepr: "⋞",
  cuesc: "⋟",
  cularr: "↶",
  cularrp: "⤽",
  cup: "∪",
  cupbrcap: "⩈",
  cupcap: "⩆",
  cupcup: "⩊",
  cupdot: "⊍",
  cupor: "⩅",
  cups: "∪︀",
  curarr: "↷",
  curarrm: "⤼",
  curlyeqprec: "⋞",
  curlyeqsucc: "⋟",
  curlyvee: "⋎",
  curlywedge: "⋏",
  curren: "¤",
  curvearrowleft: "↶",
  curvearrowright: "↷",
  cuvee: "⋎",
  cuwed: "⋏",
  cwconint: "∲",
  cwint: "∱",
  cylcty: "⌭",
  dArr: "⇓",
  dHar: "⥥",
  dagger: "†",
  daleth: "ℸ",
  darr: "↓",
  dash: "‐",
  dashv: "⊣",
  dbkarow: "⤏",
  dblac: "˝",
  dcaron: "ď",
  dcy: "д",
  dd: "ⅆ",
  ddagger: "‡",
  ddarr: "⇊",
  ddotseq: "⩷",
  deg: "°",
  delta: "δ",
  demptyv: "⦱",
  dfisht: "⥿",
  dfr: "𝔡",
  dharl: "⇃",
  dharr: "⇂",
  diam: "⋄",
  diamond: "⋄",
  diamondsuit: "♦",
  diams: "♦",
  die: "¨",
  digamma: "ϝ",
  disin: "⋲",
  div: "÷",
  divide: "÷",
  divideontimes: "⋇",
  divonx: "⋇",
  djcy: "ђ",
  dlcorn: "⌞",
  dlcrop: "⌍",
  dollar: "$",
  dopf: "𝕕",
  dot: "˙",
  doteq: "≐",
  doteqdot: "≑",
  dotminus: "∸",
  dotplus: "∔",
  dotsquare: "⊡",
  doublebarwedge: "⌆",
  downarrow: "↓",
  downdownarrows: "⇊",
  downharpoonleft: "⇃",
  downharpoonright: "⇂",
  drbkarow: "⤐",
  drcorn: "⌟",
  drcrop: "⌌",
  dscr: "𝒹",
  dscy: "ѕ",
  dsol: "⧶",
  dstrok: "đ",
  dtdot: "⋱",
  dtri: "▿",
  dtrif: "▾",
  duarr: "⇵",
  duhar: "⥯",
  dwangle: "⦦",
  dzcy: "џ",
  dzigrarr: "⟿",
  eDDot: "⩷",
  eDot: "≑",
  eacute: "é",
  easter: "⩮",
  ecaron: "ě",
  ecir: "≖",
  ecirc: "ê",
  ecolon: "≕",
  ecy: "э",
  edot: "ė",
  ee: "ⅇ",
  efDot: "≒",
  efr: "𝔢",
  eg: "⪚",
  egrave: "è",
  egs: "⪖",
  egsdot: "⪘",
  el: "⪙",
  elinters: "⏧",
  ell: "ℓ",
  els: "⪕",
  elsdot: "⪗",
  emacr: "ē",
  empty: "∅",
  emptyset: "∅",
  emptyv: "∅",
  emsp13: " ",
  emsp14: " ",
  emsp: " ",
  eng: "ŋ",
  ensp: " ",
  eogon: "ę",
  eopf: "𝕖",
  epar: "⋕",
  eparsl: "⧣",
  eplus: "⩱",
  epsi: "ε",
  epsilon: "ε",
  epsiv: "ϵ",
  eqcirc: "≖",
  eqcolon: "≕",
  eqsim: "≂",
  eqslantgtr: "⪖",
  eqslantless: "⪕",
  equals: "=",
  equest: "≟",
  equiv: "≡",
  equivDD: "⩸",
  eqvparsl: "⧥",
  erDot: "≓",
  erarr: "⥱",
  escr: "ℯ",
  esdot: "≐",
  esim: "≂",
  eta: "η",
  eth: "ð",
  euml: "ë",
  euro: "€",
  excl: "!",
  exist: "∃",
  expectation: "ℰ",
  exponentiale: "ⅇ",
  fallingdotseq: "≒",
  fcy: "ф",
  female: "♀",
  ffilig: "ﬃ",
  fflig: "ﬀ",
  ffllig: "ﬄ",
  ffr: "𝔣",
  filig: "ﬁ",
  fjlig: "fj",
  flat: "♭",
  fllig: "ﬂ",
  fltns: "▱",
  fnof: "ƒ",
  fopf: "𝕗",
  forall: "∀",
  fork: "⋔",
  forkv: "⫙",
  fpartint: "⨍",
  frac12: "½",
  frac13: "⅓",
  frac14: "¼",
  frac15: "⅕",
  frac16: "⅙",
  frac18: "⅛",
  frac23: "⅔",
  frac25: "⅖",
  frac34: "¾",
  frac35: "⅗",
  frac38: "⅜",
  frac45: "⅘",
  frac56: "⅚",
  frac58: "⅝",
  frac78: "⅞",
  frasl: "⁄",
  frown: "⌢",
  fscr: "𝒻",
  gE: "≧",
  gEl: "⪌",
  gacute: "ǵ",
  gamma: "γ",
  gammad: "ϝ",
  gap: "⪆",
  gbreve: "ğ",
  gcirc: "ĝ",
  gcy: "г",
  gdot: "ġ",
  ge: "≥",
  gel: "⋛",
  geq: "≥",
  geqq: "≧",
  geqslant: "⩾",
  ges: "⩾",
  gescc: "⪩",
  gesdot: "⪀",
  gesdoto: "⪂",
  gesdotol: "⪄",
  gesl: "⋛︀",
  gesles: "⪔",
  gfr: "𝔤",
  gg: "≫",
  ggg: "⋙",
  gimel: "ℷ",
  gjcy: "ѓ",
  gl: "≷",
  glE: "⪒",
  gla: "⪥",
  glj: "⪤",
  gnE: "≩",
  gnap: "⪊",
  gnapprox: "⪊",
  gne: "⪈",
  gneq: "⪈",
  gneqq: "≩",
  gnsim: "⋧",
  gopf: "𝕘",
  grave: "`",
  gscr: "ℊ",
  gsim: "≳",
  gsime: "⪎",
  gsiml: "⪐",
  gt: ">",
  gtcc: "⪧",
  gtcir: "⩺",
  gtdot: "⋗",
  gtlPar: "⦕",
  gtquest: "⩼",
  gtrapprox: "⪆",
  gtrarr: "⥸",
  gtrdot: "⋗",
  gtreqless: "⋛",
  gtreqqless: "⪌",
  gtrless: "≷",
  gtrsim: "≳",
  gvertneqq: "≩︀",
  gvnE: "≩︀",
  hArr: "⇔",
  hairsp: " ",
  half: "½",
  hamilt: "ℋ",
  hardcy: "ъ",
  harr: "↔",
  harrcir: "⥈",
  harrw: "↭",
  hbar: "ℏ",
  hcirc: "ĥ",
  hearts: "♥",
  heartsuit: "♥",
  hellip: "…",
  hercon: "⊹",
  hfr: "𝔥",
  hksearow: "⤥",
  hkswarow: "⤦",
  hoarr: "⇿",
  homtht: "∻",
  hookleftarrow: "↩",
  hookrightarrow: "↪",
  hopf: "𝕙",
  horbar: "―",
  hscr: "𝒽",
  hslash: "ℏ",
  hstrok: "ħ",
  hybull: "⁃",
  hyphen: "‐",
  iacute: "í",
  ic: "⁣",
  icirc: "î",
  icy: "и",
  iecy: "е",
  iexcl: "¡",
  iff: "⇔",
  ifr: "𝔦",
  igrave: "ì",
  ii: "ⅈ",
  iiiint: "⨌",
  iiint: "∭",
  iinfin: "⧜",
  iiota: "℩",
  ijlig: "ĳ",
  imacr: "ī",
  image: "ℑ",
  imagline: "ℐ",
  imagpart: "ℑ",
  imath: "ı",
  imof: "⊷",
  imped: "Ƶ",
  in: "∈",
  incare: "℅",
  infin: "∞",
  infintie: "⧝",
  inodot: "ı",
  int: "∫",
  intcal: "⊺",
  integers: "ℤ",
  intercal: "⊺",
  intlarhk: "⨗",
  intprod: "⨼",
  iocy: "ё",
  iogon: "į",
  iopf: "𝕚",
  iota: "ι",
  iprod: "⨼",
  iquest: "¿",
  iscr: "𝒾",
  isin: "∈",
  isinE: "⋹",
  isindot: "⋵",
  isins: "⋴",
  isinsv: "⋳",
  isinv: "∈",
  it: "⁢",
  itilde: "ĩ",
  iukcy: "і",
  iuml: "ï",
  jcirc: "ĵ",
  jcy: "й",
  jfr: "𝔧",
  jmath: "ȷ",
  jopf: "𝕛",
  jscr: "𝒿",
  jsercy: "ј",
  jukcy: "є",
  kappa: "κ",
  kappav: "ϰ",
  kcedil: "ķ",
  kcy: "к",
  kfr: "𝔨",
  kgreen: "ĸ",
  khcy: "х",
  kjcy: "ќ",
  kopf: "𝕜",
  kscr: "𝓀",
  lAarr: "⇚",
  lArr: "⇐",
  lAtail: "⤛",
  lBarr: "⤎",
  lE: "≦",
  lEg: "⪋",
  lHar: "⥢",
  lacute: "ĺ",
  laemptyv: "⦴",
  lagran: "ℒ",
  lambda: "λ",
  lang: "⟨",
  langd: "⦑",
  langle: "⟨",
  lap: "⪅",
  laquo: "«",
  larr: "←",
  larrb: "⇤",
  larrbfs: "⤟",
  larrfs: "⤝",
  larrhk: "↩",
  larrlp: "↫",
  larrpl: "⤹",
  larrsim: "⥳",
  larrtl: "↢",
  lat: "⪫",
  latail: "⤙",
  late: "⪭",
  lates: "⪭︀",
  lbarr: "⤌",
  lbbrk: "❲",
  lbrace: "{",
  lbrack: "[",
  lbrke: "⦋",
  lbrksld: "⦏",
  lbrkslu: "⦍",
  lcaron: "ľ",
  lcedil: "ļ",
  lceil: "⌈",
  lcub: "{",
  lcy: "л",
  ldca: "⤶",
  ldquo: "“",
  ldquor: "„",
  ldrdhar: "⥧",
  ldrushar: "⥋",
  ldsh: "↲",
  le: "≤",
  leftarrow: "←",
  leftarrowtail: "↢",
  leftharpoondown: "↽",
  leftharpoonup: "↼",
  leftleftarrows: "⇇",
  leftrightarrow: "↔",
  leftrightarrows: "⇆",
  leftrightharpoons: "⇋",
  leftrightsquigarrow: "↭",
  leftthreetimes: "⋋",
  leg: "⋚",
  leq: "≤",
  leqq: "≦",
  leqslant: "⩽",
  les: "⩽",
  lescc: "⪨",
  lesdot: "⩿",
  lesdoto: "⪁",
  lesdotor: "⪃",
  lesg: "⋚︀",
  lesges: "⪓",
  lessapprox: "⪅",
  lessdot: "⋖",
  lesseqgtr: "⋚",
  lesseqqgtr: "⪋",
  lessgtr: "≶",
  lesssim: "≲",
  lfisht: "⥼",
  lfloor: "⌊",
  lfr: "𝔩",
  lg: "≶",
  lgE: "⪑",
  lhard: "↽",
  lharu: "↼",
  lharul: "⥪",
  lhblk: "▄",
  ljcy: "љ",
  ll: "≪",
  llarr: "⇇",
  llcorner: "⌞",
  llhard: "⥫",
  lltri: "◺",
  lmidot: "ŀ",
  lmoust: "⎰",
  lmoustache: "⎰",
  lnE: "≨",
  lnap: "⪉",
  lnapprox: "⪉",
  lne: "⪇",
  lneq: "⪇",
  lneqq: "≨",
  lnsim: "⋦",
  loang: "⟬",
  loarr: "⇽",
  lobrk: "⟦",
  longleftarrow: "⟵",
  longleftrightarrow: "⟷",
  longmapsto: "⟼",
  longrightarrow: "⟶",
  looparrowleft: "↫",
  looparrowright: "↬",
  lopar: "⦅",
  lopf: "𝕝",
  loplus: "⨭",
  lotimes: "⨴",
  lowast: "∗",
  lowbar: "_",
  loz: "◊",
  lozenge: "◊",
  lozf: "⧫",
  lpar: "(",
  lparlt: "⦓",
  lrarr: "⇆",
  lrcorner: "⌟",
  lrhar: "⇋",
  lrhard: "⥭",
  lrm: "‎",
  lrtri: "⊿",
  lsaquo: "‹",
  lscr: "𝓁",
  lsh: "↰",
  lsim: "≲",
  lsime: "⪍",
  lsimg: "⪏",
  lsqb: "[",
  lsquo: "‘",
  lsquor: "‚",
  lstrok: "ł",
  lt: "<",
  ltcc: "⪦",
  ltcir: "⩹",
  ltdot: "⋖",
  lthree: "⋋",
  ltimes: "⋉",
  ltlarr: "⥶",
  ltquest: "⩻",
  ltrPar: "⦖",
  ltri: "◃",
  ltrie: "⊴",
  ltrif: "◂",
  lurdshar: "⥊",
  luruhar: "⥦",
  lvertneqq: "≨︀",
  lvnE: "≨︀",
  mDDot: "∺",
  macr: "¯",
  male: "♂",
  malt: "✠",
  maltese: "✠",
  map: "↦",
  mapsto: "↦",
  mapstodown: "↧",
  mapstoleft: "↤",
  mapstoup: "↥",
  marker: "▮",
  mcomma: "⨩",
  mcy: "м",
  mdash: "—",
  measuredangle: "∡",
  mfr: "𝔪",
  mho: "℧",
  micro: "µ",
  mid: "∣",
  midast: "*",
  midcir: "⫰",
  middot: "·",
  minus: "−",
  minusb: "⊟",
  minusd: "∸",
  minusdu: "⨪",
  mlcp: "⫛",
  mldr: "…",
  mnplus: "∓",
  models: "⊧",
  mopf: "𝕞",
  mp: "∓",
  mscr: "𝓂",
  mstpos: "∾",
  mu: "μ",
  multimap: "⊸",
  mumap: "⊸",
  nGg: "⋙̸",
  nGt: "≫⃒",
  nGtv: "≫̸",
  nLeftarrow: "⇍",
  nLeftrightarrow: "⇎",
  nLl: "⋘̸",
  nLt: "≪⃒",
  nLtv: "≪̸",
  nRightarrow: "⇏",
  nVDash: "⊯",
  nVdash: "⊮",
  nabla: "∇",
  nacute: "ń",
  nang: "∠⃒",
  nap: "≉",
  napE: "⩰̸",
  napid: "≋̸",
  napos: "ŉ",
  napprox: "≉",
  natur: "♮",
  natural: "♮",
  naturals: "ℕ",
  nbsp: " ",
  nbump: "≎̸",
  nbumpe: "≏̸",
  ncap: "⩃",
  ncaron: "ň",
  ncedil: "ņ",
  ncong: "≇",
  ncongdot: "⩭̸",
  ncup: "⩂",
  ncy: "н",
  ndash: "–",
  ne: "≠",
  neArr: "⇗",
  nearhk: "⤤",
  nearr: "↗",
  nearrow: "↗",
  nedot: "≐̸",
  nequiv: "≢",
  nesear: "⤨",
  nesim: "≂̸",
  nexist: "∄",
  nexists: "∄",
  nfr: "𝔫",
  ngE: "≧̸",
  nge: "≱",
  ngeq: "≱",
  ngeqq: "≧̸",
  ngeqslant: "⩾̸",
  nges: "⩾̸",
  ngsim: "≵",
  ngt: "≯",
  ngtr: "≯",
  nhArr: "⇎",
  nharr: "↮",
  nhpar: "⫲",
  ni: "∋",
  nis: "⋼",
  nisd: "⋺",
  niv: "∋",
  njcy: "њ",
  nlArr: "⇍",
  nlE: "≦̸",
  nlarr: "↚",
  nldr: "‥",
  nle: "≰",
  nleftarrow: "↚",
  nleftrightarrow: "↮",
  nleq: "≰",
  nleqq: "≦̸",
  nleqslant: "⩽̸",
  nles: "⩽̸",
  nless: "≮",
  nlsim: "≴",
  nlt: "≮",
  nltri: "⋪",
  nltrie: "⋬",
  nmid: "∤",
  nopf: "𝕟",
  not: "¬",
  notin: "∉",
  notinE: "⋹̸",
  notindot: "⋵̸",
  notinva: "∉",
  notinvb: "⋷",
  notinvc: "⋶",
  notni: "∌",
  notniva: "∌",
  notnivb: "⋾",
  notnivc: "⋽",
  npar: "∦",
  nparallel: "∦",
  nparsl: "⫽⃥",
  npart: "∂̸",
  npolint: "⨔",
  npr: "⊀",
  nprcue: "⋠",
  npre: "⪯̸",
  nprec: "⊀",
  npreceq: "⪯̸",
  nrArr: "⇏",
  nrarr: "↛",
  nrarrc: "⤳̸",
  nrarrw: "↝̸",
  nrightarrow: "↛",
  nrtri: "⋫",
  nrtrie: "⋭",
  nsc: "⊁",
  nsccue: "⋡",
  nsce: "⪰̸",
  nscr: "𝓃",
  nshortmid: "∤",
  nshortparallel: "∦",
  nsim: "≁",
  nsime: "≄",
  nsimeq: "≄",
  nsmid: "∤",
  nspar: "∦",
  nsqsube: "⋢",
  nsqsupe: "⋣",
  nsub: "⊄",
  nsubE: "⫅̸",
  nsube: "⊈",
  nsubset: "⊂⃒",
  nsubseteq: "⊈",
  nsubseteqq: "⫅̸",
  nsucc: "⊁",
  nsucceq: "⪰̸",
  nsup: "⊅",
  nsupE: "⫆̸",
  nsupe: "⊉",
  nsupset: "⊃⃒",
  nsupseteq: "⊉",
  nsupseteqq: "⫆̸",
  ntgl: "≹",
  ntilde: "ñ",
  ntlg: "≸",
  ntriangleleft: "⋪",
  ntrianglelefteq: "⋬",
  ntriangleright: "⋫",
  ntrianglerighteq: "⋭",
  nu: "ν",
  num: "#",
  numero: "№",
  numsp: " ",
  nvDash: "⊭",
  nvHarr: "⤄",
  nvap: "≍⃒",
  nvdash: "⊬",
  nvge: "≥⃒",
  nvgt: ">⃒",
  nvinfin: "⧞",
  nvlArr: "⤂",
  nvle: "≤⃒",
  nvlt: "<⃒",
  nvltrie: "⊴⃒",
  nvrArr: "⤃",
  nvrtrie: "⊵⃒",
  nvsim: "∼⃒",
  nwArr: "⇖",
  nwarhk: "⤣",
  nwarr: "↖",
  nwarrow: "↖",
  nwnear: "⤧",
  oS: "Ⓢ",
  oacute: "ó",
  oast: "⊛",
  ocir: "⊚",
  ocirc: "ô",
  ocy: "о",
  odash: "⊝",
  odblac: "ő",
  odiv: "⨸",
  odot: "⊙",
  odsold: "⦼",
  oelig: "œ",
  ofcir: "⦿",
  ofr: "𝔬",
  ogon: "˛",
  ograve: "ò",
  ogt: "⧁",
  ohbar: "⦵",
  ohm: "Ω",
  oint: "∮",
  olarr: "↺",
  olcir: "⦾",
  olcross: "⦻",
  oline: "‾",
  olt: "⧀",
  omacr: "ō",
  omega: "ω",
  omicron: "ο",
  omid: "⦶",
  ominus: "⊖",
  oopf: "𝕠",
  opar: "⦷",
  operp: "⦹",
  oplus: "⊕",
  or: "∨",
  orarr: "↻",
  ord: "⩝",
  order: "ℴ",
  orderof: "ℴ",
  ordf: "ª",
  ordm: "º",
  origof: "⊶",
  oror: "⩖",
  orslope: "⩗",
  orv: "⩛",
  oscr: "ℴ",
  oslash: "ø",
  osol: "⊘",
  otilde: "õ",
  otimes: "⊗",
  otimesas: "⨶",
  ouml: "ö",
  ovbar: "⌽",
  par: "∥",
  para: "¶",
  parallel: "∥",
  parsim: "⫳",
  parsl: "⫽",
  part: "∂",
  pcy: "п",
  percnt: "%",
  period: ".",
  permil: "‰",
  perp: "⊥",
  pertenk: "‱",
  pfr: "𝔭",
  phi: "φ",
  phiv: "ϕ",
  phmmat: "ℳ",
  phone: "☎",
  pi: "π",
  pitchfork: "⋔",
  piv: "ϖ",
  planck: "ℏ",
  planckh: "ℎ",
  plankv: "ℏ",
  plus: "+",
  plusacir: "⨣",
  plusb: "⊞",
  pluscir: "⨢",
  plusdo: "∔",
  plusdu: "⨥",
  pluse: "⩲",
  plusmn: "±",
  plussim: "⨦",
  plustwo: "⨧",
  pm: "±",
  pointint: "⨕",
  popf: "𝕡",
  pound: "£",
  pr: "≺",
  prE: "⪳",
  prap: "⪷",
  prcue: "≼",
  pre: "⪯",
  prec: "≺",
  precapprox: "⪷",
  preccurlyeq: "≼",
  preceq: "⪯",
  precnapprox: "⪹",
  precneqq: "⪵",
  precnsim: "⋨",
  precsim: "≾",
  prime: "′",
  primes: "ℙ",
  prnE: "⪵",
  prnap: "⪹",
  prnsim: "⋨",
  prod: "∏",
  profalar: "⌮",
  profline: "⌒",
  profsurf: "⌓",
  prop: "∝",
  propto: "∝",
  prsim: "≾",
  prurel: "⊰",
  pscr: "𝓅",
  psi: "ψ",
  puncsp: " ",
  qfr: "𝔮",
  qint: "⨌",
  qopf: "𝕢",
  qprime: "⁗",
  qscr: "𝓆",
  quaternions: "ℍ",
  quatint: "⨖",
  quest: "?",
  questeq: "≟",
  quot: '"',
  rAarr: "⇛",
  rArr: "⇒",
  rAtail: "⤜",
  rBarr: "⤏",
  rHar: "⥤",
  race: "∽̱",
  racute: "ŕ",
  radic: "√",
  raemptyv: "⦳",
  rang: "⟩",
  rangd: "⦒",
  range: "⦥",
  rangle: "⟩",
  raquo: "»",
  rarr: "→",
  rarrap: "⥵",
  rarrb: "⇥",
  rarrbfs: "⤠",
  rarrc: "⤳",
  rarrfs: "⤞",
  rarrhk: "↪",
  rarrlp: "↬",
  rarrpl: "⥅",
  rarrsim: "⥴",
  rarrtl: "↣",
  rarrw: "↝",
  ratail: "⤚",
  ratio: "∶",
  rationals: "ℚ",
  rbarr: "⤍",
  rbbrk: "❳",
  rbrace: "}",
  rbrack: "]",
  rbrke: "⦌",
  rbrksld: "⦎",
  rbrkslu: "⦐",
  rcaron: "ř",
  rcedil: "ŗ",
  rceil: "⌉",
  rcub: "}",
  rcy: "р",
  rdca: "⤷",
  rdldhar: "⥩",
  rdquo: "”",
  rdquor: "”",
  rdsh: "↳",
  real: "ℜ",
  realine: "ℛ",
  realpart: "ℜ",
  reals: "ℝ",
  rect: "▭",
  reg: "®",
  rfisht: "⥽",
  rfloor: "⌋",
  rfr: "𝔯",
  rhard: "⇁",
  rharu: "⇀",
  rharul: "⥬",
  rho: "ρ",
  rhov: "ϱ",
  rightarrow: "→",
  rightarrowtail: "↣",
  rightharpoondown: "⇁",
  rightharpoonup: "⇀",
  rightleftarrows: "⇄",
  rightleftharpoons: "⇌",
  rightrightarrows: "⇉",
  rightsquigarrow: "↝",
  rightthreetimes: "⋌",
  ring: "˚",
  risingdotseq: "≓",
  rlarr: "⇄",
  rlhar: "⇌",
  rlm: "‏",
  rmoust: "⎱",
  rmoustache: "⎱",
  rnmid: "⫮",
  roang: "⟭",
  roarr: "⇾",
  robrk: "⟧",
  ropar: "⦆",
  ropf: "𝕣",
  roplus: "⨮",
  rotimes: "⨵",
  rpar: ")",
  rpargt: "⦔",
  rppolint: "⨒",
  rrarr: "⇉",
  rsaquo: "›",
  rscr: "𝓇",
  rsh: "↱",
  rsqb: "]",
  rsquo: "’",
  rsquor: "’",
  rthree: "⋌",
  rtimes: "⋊",
  rtri: "▹",
  rtrie: "⊵",
  rtrif: "▸",
  rtriltri: "⧎",
  ruluhar: "⥨",
  rx: "℞",
  sacute: "ś",
  sbquo: "‚",
  sc: "≻",
  scE: "⪴",
  scap: "⪸",
  scaron: "š",
  sccue: "≽",
  sce: "⪰",
  scedil: "ş",
  scirc: "ŝ",
  scnE: "⪶",
  scnap: "⪺",
  scnsim: "⋩",
  scpolint: "⨓",
  scsim: "≿",
  scy: "с",
  sdot: "⋅",
  sdotb: "⊡",
  sdote: "⩦",
  seArr: "⇘",
  searhk: "⤥",
  searr: "↘",
  searrow: "↘",
  sect: "§",
  semi: ";",
  seswar: "⤩",
  setminus: "∖",
  setmn: "∖",
  sext: "✶",
  sfr: "𝔰",
  sfrown: "⌢",
  sharp: "♯",
  shchcy: "щ",
  shcy: "ш",
  shortmid: "∣",
  shortparallel: "∥",
  shy: "­",
  sigma: "σ",
  sigmaf: "ς",
  sigmav: "ς",
  sim: "∼",
  simdot: "⩪",
  sime: "≃",
  simeq: "≃",
  simg: "⪞",
  simgE: "⪠",
  siml: "⪝",
  simlE: "⪟",
  simne: "≆",
  simplus: "⨤",
  simrarr: "⥲",
  slarr: "←",
  smallsetminus: "∖",
  smashp: "⨳",
  smeparsl: "⧤",
  smid: "∣",
  smile: "⌣",
  smt: "⪪",
  smte: "⪬",
  smtes: "⪬︀",
  softcy: "ь",
  sol: "/",
  solb: "⧄",
  solbar: "⌿",
  sopf: "𝕤",
  spades: "♠",
  spadesuit: "♠",
  spar: "∥",
  sqcap: "⊓",
  sqcaps: "⊓︀",
  sqcup: "⊔",
  sqcups: "⊔︀",
  sqsub: "⊏",
  sqsube: "⊑",
  sqsubset: "⊏",
  sqsubseteq: "⊑",
  sqsup: "⊐",
  sqsupe: "⊒",
  sqsupset: "⊐",
  sqsupseteq: "⊒",
  squ: "□",
  square: "□",
  squarf: "▪",
  squf: "▪",
  srarr: "→",
  sscr: "𝓈",
  ssetmn: "∖",
  ssmile: "⌣",
  sstarf: "⋆",
  star: "☆",
  starf: "★",
  straightepsilon: "ϵ",
  straightphi: "ϕ",
  strns: "¯",
  sub: "⊂",
  subE: "⫅",
  subdot: "⪽",
  sube: "⊆",
  subedot: "⫃",
  submult: "⫁",
  subnE: "⫋",
  subne: "⊊",
  subplus: "⪿",
  subrarr: "⥹",
  subset: "⊂",
  subseteq: "⊆",
  subseteqq: "⫅",
  subsetneq: "⊊",
  subsetneqq: "⫋",
  subsim: "⫇",
  subsub: "⫕",
  subsup: "⫓",
  succ: "≻",
  succapprox: "⪸",
  succcurlyeq: "≽",
  succeq: "⪰",
  succnapprox: "⪺",
  succneqq: "⪶",
  succnsim: "⋩",
  succsim: "≿",
  sum: "∑",
  sung: "♪",
  sup1: "¹",
  sup2: "²",
  sup3: "³",
  sup: "⊃",
  supE: "⫆",
  supdot: "⪾",
  supdsub: "⫘",
  supe: "⊇",
  supedot: "⫄",
  suphsol: "⟉",
  suphsub: "⫗",
  suplarr: "⥻",
  supmult: "⫂",
  supnE: "⫌",
  supne: "⊋",
  supplus: "⫀",
  supset: "⊃",
  supseteq: "⊇",
  supseteqq: "⫆",
  supsetneq: "⊋",
  supsetneqq: "⫌",
  supsim: "⫈",
  supsub: "⫔",
  supsup: "⫖",
  swArr: "⇙",
  swarhk: "⤦",
  swarr: "↙",
  swarrow: "↙",
  swnwar: "⤪",
  szlig: "ß",
  target: "⌖",
  tau: "τ",
  tbrk: "⎴",
  tcaron: "ť",
  tcedil: "ţ",
  tcy: "т",
  tdot: "⃛",
  telrec: "⌕",
  tfr: "𝔱",
  there4: "∴",
  therefore: "∴",
  theta: "θ",
  thetasym: "ϑ",
  thetav: "ϑ",
  thickapprox: "≈",
  thicksim: "∼",
  thinsp: " ",
  thkap: "≈",
  thksim: "∼",
  thorn: "þ",
  tilde: "˜",
  times: "×",
  timesb: "⊠",
  timesbar: "⨱",
  timesd: "⨰",
  tint: "∭",
  toea: "⤨",
  top: "⊤",
  topbot: "⌶",
  topcir: "⫱",
  topf: "𝕥",
  topfork: "⫚",
  tosa: "⤩",
  tprime: "‴",
  trade: "™",
  triangle: "▵",
  triangledown: "▿",
  triangleleft: "◃",
  trianglelefteq: "⊴",
  triangleq: "≜",
  triangleright: "▹",
  trianglerighteq: "⊵",
  tridot: "◬",
  trie: "≜",
  triminus: "⨺",
  triplus: "⨹",
  trisb: "⧍",
  tritime: "⨻",
  trpezium: "⏢",
  tscr: "𝓉",
  tscy: "ц",
  tshcy: "ћ",
  tstrok: "ŧ",
  twixt: "≬",
  twoheadleftarrow: "↞",
  twoheadrightarrow: "↠",
  uArr: "⇑",
  uHar: "⥣",
  uacute: "ú",
  uarr: "↑",
  ubrcy: "ў",
  ubreve: "ŭ",
  ucirc: "û",
  ucy: "у",
  udarr: "⇅",
  udblac: "ű",
  udhar: "⥮",
  ufisht: "⥾",
  ufr: "𝔲",
  ugrave: "ù",
  uharl: "↿",
  uharr: "↾",
  uhblk: "▀",
  ulcorn: "⌜",
  ulcorner: "⌜",
  ulcrop: "⌏",
  ultri: "◸",
  umacr: "ū",
  uml: "¨",
  uogon: "ų",
  uopf: "𝕦",
  uparrow: "↑",
  updownarrow: "↕",
  upharpoonleft: "↿",
  upharpoonright: "↾",
  uplus: "⊎",
  upsi: "υ",
  upsih: "ϒ",
  upsilon: "υ",
  upuparrows: "⇈",
  urcorn: "⌝",
  urcorner: "⌝",
  urcrop: "⌎",
  uring: "ů",
  urtri: "◹",
  uscr: "𝓊",
  utdot: "⋰",
  utilde: "ũ",
  utri: "▵",
  utrif: "▴",
  uuarr: "⇈",
  uuml: "ü",
  uwangle: "⦧",
  vArr: "⇕",
  vBar: "⫨",
  vBarv: "⫩",
  vDash: "⊨",
  vangrt: "⦜",
  varepsilon: "ϵ",
  varkappa: "ϰ",
  varnothing: "∅",
  varphi: "ϕ",
  varpi: "ϖ",
  varpropto: "∝",
  varr: "↕",
  varrho: "ϱ",
  varsigma: "ς",
  varsubsetneq: "⊊︀",
  varsubsetneqq: "⫋︀",
  varsupsetneq: "⊋︀",
  varsupsetneqq: "⫌︀",
  vartheta: "ϑ",
  vartriangleleft: "⊲",
  vartriangleright: "⊳",
  vcy: "в",
  vdash: "⊢",
  vee: "∨",
  veebar: "⊻",
  veeeq: "≚",
  vellip: "⋮",
  verbar: "|",
  vert: "|",
  vfr: "𝔳",
  vltri: "⊲",
  vnsub: "⊂⃒",
  vnsup: "⊃⃒",
  vopf: "𝕧",
  vprop: "∝",
  vrtri: "⊳",
  vscr: "𝓋",
  vsubnE: "⫋︀",
  vsubne: "⊊︀",
  vsupnE: "⫌︀",
  vsupne: "⊋︀",
  vzigzag: "⦚",
  wcirc: "ŵ",
  wedbar: "⩟",
  wedge: "∧",
  wedgeq: "≙",
  weierp: "℘",
  wfr: "𝔴",
  wopf: "𝕨",
  wp: "℘",
  wr: "≀",
  wreath: "≀",
  wscr: "𝓌",
  xcap: "⋂",
  xcirc: "◯",
  xcup: "⋃",
  xdtri: "▽",
  xfr: "𝔵",
  xhArr: "⟺",
  xharr: "⟷",
  xi: "ξ",
  xlArr: "⟸",
  xlarr: "⟵",
  xmap: "⟼",
  xnis: "⋻",
  xodot: "⨀",
  xopf: "𝕩",
  xoplus: "⨁",
  xotime: "⨂",
  xrArr: "⟹",
  xrarr: "⟶",
  xscr: "𝓍",
  xsqcup: "⨆",
  xuplus: "⨄",
  xutri: "△",
  xvee: "⋁",
  xwedge: "⋀",
  yacute: "ý",
  yacy: "я",
  ycirc: "ŷ",
  ycy: "ы",
  yen: "¥",
  yfr: "𝔶",
  yicy: "ї",
  yopf: "𝕪",
  yscr: "𝓎",
  yucy: "ю",
  yuml: "ÿ",
  zacute: "ź",
  zcaron: "ž",
  zcy: "з",
  zdot: "ż",
  zeetrf: "ℨ",
  zeta: "ζ",
  zfr: "𝔷",
  zhcy: "ж",
  zigrarr: "⇝",
  zopf: "𝕫",
  zscr: "𝓏",
  zwj: "‍",
  zwnj: "‌"
};
const own$3 = {}.hasOwnProperty;
function decodeNamedCharacterReference(value2) {
  return own$3.call(characterEntities, value2) ? characterEntities[value2] : false;
}
const characterReference = {
  name: "characterReference",
  tokenize: tokenizeCharacterReference
};
function tokenizeCharacterReference(effects, ok2, nok) {
  const self2 = this;
  let size = 0;
  let max;
  let test;
  return start;
  function start(code2) {
    effects.enter("characterReference");
    effects.enter("characterReferenceMarker");
    effects.consume(code2);
    effects.exit("characterReferenceMarker");
    return open;
  }
  function open(code2) {
    if (code2 === 35) {
      effects.enter("characterReferenceMarkerNumeric");
      effects.consume(code2);
      effects.exit("characterReferenceMarkerNumeric");
      return numeric;
    }
    effects.enter("characterReferenceValue");
    max = 31;
    test = asciiAlphanumeric;
    return value2(code2);
  }
  function numeric(code2) {
    if (code2 === 88 || code2 === 120) {
      effects.enter("characterReferenceMarkerHexadecimal");
      effects.consume(code2);
      effects.exit("characterReferenceMarkerHexadecimal");
      effects.enter("characterReferenceValue");
      max = 6;
      test = asciiHexDigit;
      return value2;
    }
    effects.enter("characterReferenceValue");
    max = 7;
    test = asciiDigit;
    return value2(code2);
  }
  function value2(code2) {
    if (code2 === 59 && size) {
      const token = effects.exit("characterReferenceValue");
      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self2.sliceSerialize(token))) {
        return nok(code2);
      }
      effects.enter("characterReferenceMarker");
      effects.consume(code2);
      effects.exit("characterReferenceMarker");
      effects.exit("characterReference");
      return ok2;
    }
    if (test(code2) && size++ < max) {
      effects.consume(code2);
      return value2;
    }
    return nok(code2);
  }
}
const nonLazyContinuation = {
  tokenize: tokenizeNonLazyContinuation,
  partial: true
};
const codeFenced = {
  name: "codeFenced",
  tokenize: tokenizeCodeFenced,
  concrete: true
};
function tokenizeCodeFenced(effects, ok2, nok) {
  const self2 = this;
  const closeStart = {
    tokenize: tokenizeCloseStart,
    partial: true
  };
  let initialPrefix = 0;
  let sizeOpen = 0;
  let marker;
  return start;
  function start(code2) {
    return beforeSequenceOpen(code2);
  }
  function beforeSequenceOpen(code2) {
    const tail = self2.events[self2.events.length - 1];
    initialPrefix = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
    marker = code2;
    effects.enter("codeFenced");
    effects.enter("codeFencedFence");
    effects.enter("codeFencedFenceSequence");
    return sequenceOpen(code2);
  }
  function sequenceOpen(code2) {
    if (code2 === marker) {
      sizeOpen++;
      effects.consume(code2);
      return sequenceOpen;
    }
    if (sizeOpen < 3) {
      return nok(code2);
    }
    effects.exit("codeFencedFenceSequence");
    return markdownSpace(code2) ? factorySpace(effects, infoBefore, "whitespace")(code2) : infoBefore(code2);
  }
  function infoBefore(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("codeFencedFence");
      return self2.interrupt ? ok2(code2) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code2);
    }
    effects.enter("codeFencedFenceInfo");
    effects.enter("chunkString", {
      contentType: "string"
    });
    return info(code2);
  }
  function info(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceInfo");
      return infoBefore(code2);
    }
    if (markdownSpace(code2)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceInfo");
      return factorySpace(effects, metaBefore, "whitespace")(code2);
    }
    if (code2 === 96 && code2 === marker) {
      return nok(code2);
    }
    effects.consume(code2);
    return info;
  }
  function metaBefore(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      return infoBefore(code2);
    }
    effects.enter("codeFencedFenceMeta");
    effects.enter("chunkString", {
      contentType: "string"
    });
    return meta(code2);
  }
  function meta(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceMeta");
      return infoBefore(code2);
    }
    if (code2 === 96 && code2 === marker) {
      return nok(code2);
    }
    effects.consume(code2);
    return meta;
  }
  function atNonLazyBreak(code2) {
    return effects.attempt(closeStart, after, contentBefore)(code2);
  }
  function contentBefore(code2) {
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return contentStart;
  }
  function contentStart(code2) {
    return initialPrefix > 0 && markdownSpace(code2) ? factorySpace(
      effects,
      beforeContentChunk,
      "linePrefix",
      initialPrefix + 1
    )(code2) : beforeContentChunk(code2);
  }
  function beforeContentChunk(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code2);
    }
    effects.enter("codeFlowValue");
    return contentChunk(code2);
  }
  function contentChunk(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("codeFlowValue");
      return beforeContentChunk(code2);
    }
    effects.consume(code2);
    return contentChunk;
  }
  function after(code2) {
    effects.exit("codeFenced");
    return ok2(code2);
  }
  function tokenizeCloseStart(effects2, ok3, nok2) {
    let size = 0;
    return startBefore;
    function startBefore(code2) {
      effects2.enter("lineEnding");
      effects2.consume(code2);
      effects2.exit("lineEnding");
      return start2;
    }
    function start2(code2) {
      effects2.enter("codeFencedFence");
      return markdownSpace(code2) ? factorySpace(
        effects2,
        beforeSequenceClose,
        "linePrefix",
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
      )(code2) : beforeSequenceClose(code2);
    }
    function beforeSequenceClose(code2) {
      if (code2 === marker) {
        effects2.enter("codeFencedFenceSequence");
        return sequenceClose(code2);
      }
      return nok2(code2);
    }
    function sequenceClose(code2) {
      if (code2 === marker) {
        size++;
        effects2.consume(code2);
        return sequenceClose;
      }
      if (size >= sizeOpen) {
        effects2.exit("codeFencedFenceSequence");
        return markdownSpace(code2) ? factorySpace(effects2, sequenceCloseAfter, "whitespace")(code2) : sequenceCloseAfter(code2);
      }
      return nok2(code2);
    }
    function sequenceCloseAfter(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects2.exit("codeFencedFence");
        return ok3(code2);
      }
      return nok2(code2);
    }
  }
}
function tokenizeNonLazyContinuation(effects, ok2, nok) {
  const self2 = this;
  return start;
  function start(code2) {
    if (code2 === null) {
      return nok(code2);
    }
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return lineStart;
  }
  function lineStart(code2) {
    return self2.parser.lazy[self2.now().line] ? nok(code2) : ok2(code2);
  }
}
const codeIndented = {
  name: "codeIndented",
  tokenize: tokenizeCodeIndented
};
const furtherStart = {
  tokenize: tokenizeFurtherStart,
  partial: true
};
function tokenizeCodeIndented(effects, ok2, nok) {
  const self2 = this;
  return start;
  function start(code2) {
    effects.enter("codeIndented");
    return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code2);
  }
  function afterPrefix(code2) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code2) : nok(code2);
  }
  function atBreak(code2) {
    if (code2 === null) {
      return after(code2);
    }
    if (markdownLineEnding(code2)) {
      return effects.attempt(furtherStart, atBreak, after)(code2);
    }
    effects.enter("codeFlowValue");
    return inside(code2);
  }
  function inside(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("codeFlowValue");
      return atBreak(code2);
    }
    effects.consume(code2);
    return inside;
  }
  function after(code2) {
    effects.exit("codeIndented");
    return ok2(code2);
  }
}
function tokenizeFurtherStart(effects, ok2, nok) {
  const self2 = this;
  return furtherStart2;
  function furtherStart2(code2) {
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code2);
    }
    if (markdownLineEnding(code2)) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return furtherStart2;
    }
    return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code2);
  }
  function afterPrefix(code2) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok2(code2) : markdownLineEnding(code2) ? furtherStart2(code2) : nok(code2);
  }
}
const codeText = {
  name: "codeText",
  tokenize: tokenizeCodeText,
  resolve: resolveCodeText,
  previous: previous$1
};
function resolveCodeText(events2) {
  let tailExitIndex = events2.length - 4;
  let headEnterIndex = 3;
  let index2;
  let enter;
  if ((events2[headEnterIndex][1].type === "lineEnding" || events2[headEnterIndex][1].type === "space") && (events2[tailExitIndex][1].type === "lineEnding" || events2[tailExitIndex][1].type === "space")) {
    index2 = headEnterIndex;
    while (++index2 < tailExitIndex) {
      if (events2[index2][1].type === "codeTextData") {
        events2[headEnterIndex][1].type = "codeTextPadding";
        events2[tailExitIndex][1].type = "codeTextPadding";
        headEnterIndex += 2;
        tailExitIndex -= 2;
        break;
      }
    }
  }
  index2 = headEnterIndex - 1;
  tailExitIndex++;
  while (++index2 <= tailExitIndex) {
    if (enter === void 0) {
      if (index2 !== tailExitIndex && events2[index2][1].type !== "lineEnding") {
        enter = index2;
      }
    } else if (index2 === tailExitIndex || events2[index2][1].type === "lineEnding") {
      events2[enter][1].type = "codeTextData";
      if (index2 !== enter + 2) {
        events2[enter][1].end = events2[index2 - 1][1].end;
        events2.splice(enter + 2, index2 - enter - 2);
        tailExitIndex -= index2 - enter - 2;
        index2 = enter + 2;
      }
      enter = void 0;
    }
  }
  return events2;
}
function previous$1(code2) {
  return code2 !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
}
function tokenizeCodeText(effects, ok2, nok) {
  let sizeOpen = 0;
  let size;
  let token;
  return start;
  function start(code2) {
    effects.enter("codeText");
    effects.enter("codeTextSequence");
    return sequenceOpen(code2);
  }
  function sequenceOpen(code2) {
    if (code2 === 96) {
      effects.consume(code2);
      sizeOpen++;
      return sequenceOpen;
    }
    effects.exit("codeTextSequence");
    return between2(code2);
  }
  function between2(code2) {
    if (code2 === null) {
      return nok(code2);
    }
    if (code2 === 32) {
      effects.enter("space");
      effects.consume(code2);
      effects.exit("space");
      return between2;
    }
    if (code2 === 96) {
      token = effects.enter("codeTextSequence");
      size = 0;
      return sequenceClose(code2);
    }
    if (markdownLineEnding(code2)) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return between2;
    }
    effects.enter("codeTextData");
    return data(code2);
  }
  function data(code2) {
    if (code2 === null || code2 === 32 || code2 === 96 || markdownLineEnding(code2)) {
      effects.exit("codeTextData");
      return between2(code2);
    }
    effects.consume(code2);
    return data;
  }
  function sequenceClose(code2) {
    if (code2 === 96) {
      effects.consume(code2);
      size++;
      return sequenceClose;
    }
    if (size === sizeOpen) {
      effects.exit("codeTextSequence");
      effects.exit("codeText");
      return ok2(code2);
    }
    token.type = "codeTextData";
    return data(code2);
  }
}
function subtokenize(events2) {
  const jumps = {};
  let index2 = -1;
  let event;
  let lineIndex;
  let otherIndex;
  let otherEvent;
  let parameters;
  let subevents;
  let more;
  while (++index2 < events2.length) {
    while (index2 in jumps) {
      index2 = jumps[index2];
    }
    event = events2[index2];
    if (index2 && event[1].type === "chunkFlow" && events2[index2 - 1][1].type === "listItemPrefix") {
      subevents = event[1]._tokenizer.events;
      otherIndex = 0;
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") {
        otherIndex += 2;
      }
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") {
        while (++otherIndex < subevents.length) {
          if (subevents[otherIndex][1].type === "content") {
            break;
          }
          if (subevents[otherIndex][1].type === "chunkText") {
            subevents[otherIndex][1]._isInFirstContentOfListItem = true;
            otherIndex++;
          }
        }
      }
    }
    if (event[0] === "enter") {
      if (event[1].contentType) {
        Object.assign(jumps, subcontent(events2, index2));
        index2 = jumps[index2];
        more = true;
      }
    } else if (event[1]._container) {
      otherIndex = index2;
      lineIndex = void 0;
      while (otherIndex--) {
        otherEvent = events2[otherIndex];
        if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
          if (otherEvent[0] === "enter") {
            if (lineIndex) {
              events2[lineIndex][1].type = "lineEndingBlank";
            }
            otherEvent[1].type = "lineEnding";
            lineIndex = otherIndex;
          }
        } else {
          break;
        }
      }
      if (lineIndex) {
        event[1].end = Object.assign({}, events2[lineIndex][1].start);
        parameters = events2.slice(lineIndex, index2);
        parameters.unshift(event);
        splice(events2, lineIndex, index2 - lineIndex + 1, parameters);
      }
    }
  }
  return !more;
}
function subcontent(events2, eventIndex) {
  const token = events2[eventIndex][1];
  const context2 = events2[eventIndex][2];
  let startPosition = eventIndex - 1;
  const startPositions = [];
  const tokenizer = token._tokenizer || context2.parser[token.contentType](token.start);
  const childEvents = tokenizer.events;
  const jumps = [];
  const gaps = {};
  let stream2;
  let previous2;
  let index2 = -1;
  let current = token;
  let adjust = 0;
  let start = 0;
  const breaks = [start];
  while (current) {
    while (events2[++startPosition][1] !== current) {
    }
    startPositions.push(startPosition);
    if (!current._tokenizer) {
      stream2 = context2.sliceStream(current);
      if (!current.next) {
        stream2.push(null);
      }
      if (previous2) {
        tokenizer.defineSkip(current.start);
      }
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = true;
      }
      tokenizer.write(stream2);
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = void 0;
      }
    }
    previous2 = current;
    current = current.next;
  }
  current = token;
  while (++index2 < childEvents.length) {
    if (
      // Find a void token that includes a break.
      childEvents[index2][0] === "exit" && childEvents[index2 - 1][0] === "enter" && childEvents[index2][1].type === childEvents[index2 - 1][1].type && childEvents[index2][1].start.line !== childEvents[index2][1].end.line
    ) {
      start = index2 + 1;
      breaks.push(start);
      current._tokenizer = void 0;
      current.previous = void 0;
      current = current.next;
    }
  }
  tokenizer.events = [];
  if (current) {
    current._tokenizer = void 0;
    current.previous = void 0;
  } else {
    breaks.pop();
  }
  index2 = breaks.length;
  while (index2--) {
    const slice = childEvents.slice(breaks[index2], breaks[index2 + 1]);
    const start2 = startPositions.pop();
    jumps.unshift([start2, start2 + slice.length - 1]);
    splice(events2, start2, 2, slice);
  }
  index2 = -1;
  while (++index2 < jumps.length) {
    gaps[adjust + jumps[index2][0]] = adjust + jumps[index2][1];
    adjust += jumps[index2][1] - jumps[index2][0] - 1;
  }
  return gaps;
}
const content = {
  tokenize: tokenizeContent,
  resolve: resolveContent
};
const continuationConstruct = {
  tokenize: tokenizeContinuation,
  partial: true
};
function resolveContent(events2) {
  subtokenize(events2);
  return events2;
}
function tokenizeContent(effects, ok2) {
  let previous2;
  return chunkStart;
  function chunkStart(code2) {
    effects.enter("content");
    previous2 = effects.enter("chunkContent", {
      contentType: "content"
    });
    return chunkInside(code2);
  }
  function chunkInside(code2) {
    if (code2 === null) {
      return contentEnd(code2);
    }
    if (markdownLineEnding(code2)) {
      return effects.check(
        continuationConstruct,
        contentContinue,
        contentEnd
      )(code2);
    }
    effects.consume(code2);
    return chunkInside;
  }
  function contentEnd(code2) {
    effects.exit("chunkContent");
    effects.exit("content");
    return ok2(code2);
  }
  function contentContinue(code2) {
    effects.consume(code2);
    effects.exit("chunkContent");
    previous2.next = effects.enter("chunkContent", {
      contentType: "content",
      previous: previous2
    });
    previous2 = previous2.next;
    return chunkInside;
  }
}
function tokenizeContinuation(effects, ok2, nok) {
  const self2 = this;
  return startLookahead;
  function startLookahead(code2) {
    effects.exit("chunkContent");
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return factorySpace(effects, prefixed, "linePrefix");
  }
  function prefixed(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      return nok(code2);
    }
    const tail = self2.events[self2.events.length - 1];
    if (!self2.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) {
      return ok2(code2);
    }
    return effects.interrupt(self2.parser.constructs.flow, nok, ok2)(code2);
  }
}
function factoryDestination(effects, ok2, nok, type2, literalType, literalMarkerType, rawType, stringType, max) {
  const limit = max || Number.POSITIVE_INFINITY;
  let balance = 0;
  return start;
  function start(code2) {
    if (code2 === 60) {
      effects.enter(type2);
      effects.enter(literalType);
      effects.enter(literalMarkerType);
      effects.consume(code2);
      effects.exit(literalMarkerType);
      return enclosedBefore;
    }
    if (code2 === null || code2 === 32 || code2 === 41 || asciiControl(code2)) {
      return nok(code2);
    }
    effects.enter(type2);
    effects.enter(rawType);
    effects.enter(stringType);
    effects.enter("chunkString", {
      contentType: "string"
    });
    return raw(code2);
  }
  function enclosedBefore(code2) {
    if (code2 === 62) {
      effects.enter(literalMarkerType);
      effects.consume(code2);
      effects.exit(literalMarkerType);
      effects.exit(literalType);
      effects.exit(type2);
      return ok2;
    }
    effects.enter(stringType);
    effects.enter("chunkString", {
      contentType: "string"
    });
    return enclosed(code2);
  }
  function enclosed(code2) {
    if (code2 === 62) {
      effects.exit("chunkString");
      effects.exit(stringType);
      return enclosedBefore(code2);
    }
    if (code2 === null || code2 === 60 || markdownLineEnding(code2)) {
      return nok(code2);
    }
    effects.consume(code2);
    return code2 === 92 ? enclosedEscape : enclosed;
  }
  function enclosedEscape(code2) {
    if (code2 === 60 || code2 === 62 || code2 === 92) {
      effects.consume(code2);
      return enclosed;
    }
    return enclosed(code2);
  }
  function raw(code2) {
    if (!balance && (code2 === null || code2 === 41 || markdownLineEndingOrSpace(code2))) {
      effects.exit("chunkString");
      effects.exit(stringType);
      effects.exit(rawType);
      effects.exit(type2);
      return ok2(code2);
    }
    if (balance < limit && code2 === 40) {
      effects.consume(code2);
      balance++;
      return raw;
    }
    if (code2 === 41) {
      effects.consume(code2);
      balance--;
      return raw;
    }
    if (code2 === null || code2 === 32 || code2 === 40 || asciiControl(code2)) {
      return nok(code2);
    }
    effects.consume(code2);
    return code2 === 92 ? rawEscape : raw;
  }
  function rawEscape(code2) {
    if (code2 === 40 || code2 === 41 || code2 === 92) {
      effects.consume(code2);
      return raw;
    }
    return raw(code2);
  }
}
function factoryLabel(effects, ok2, nok, type2, markerType, stringType) {
  const self2 = this;
  let size = 0;
  let seen;
  return start;
  function start(code2) {
    effects.enter(type2);
    effects.enter(markerType);
    effects.consume(code2);
    effects.exit(markerType);
    effects.enter(stringType);
    return atBreak;
  }
  function atBreak(code2) {
    if (size > 999 || code2 === null || code2 === 91 || code2 === 93 && !seen || // To do: remove in the future once we’ve switched from
    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
    // which doesn’t need this.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    code2 === 94 && !size && "_hiddenFootnoteSupport" in self2.parser.constructs) {
      return nok(code2);
    }
    if (code2 === 93) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code2);
      effects.exit(markerType);
      effects.exit(type2);
      return ok2;
    }
    if (markdownLineEnding(code2)) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return atBreak;
    }
    effects.enter("chunkString", {
      contentType: "string"
    });
    return labelInside(code2);
  }
  function labelInside(code2) {
    if (code2 === null || code2 === 91 || code2 === 93 || markdownLineEnding(code2) || size++ > 999) {
      effects.exit("chunkString");
      return atBreak(code2);
    }
    effects.consume(code2);
    if (!seen)
      seen = !markdownSpace(code2);
    return code2 === 92 ? labelEscape : labelInside;
  }
  function labelEscape(code2) {
    if (code2 === 91 || code2 === 92 || code2 === 93) {
      effects.consume(code2);
      size++;
      return labelInside;
    }
    return labelInside(code2);
  }
}
function factoryTitle(effects, ok2, nok, type2, markerType, stringType) {
  let marker;
  return start;
  function start(code2) {
    if (code2 === 34 || code2 === 39 || code2 === 40) {
      effects.enter(type2);
      effects.enter(markerType);
      effects.consume(code2);
      effects.exit(markerType);
      marker = code2 === 40 ? 41 : code2;
      return begin;
    }
    return nok(code2);
  }
  function begin(code2) {
    if (code2 === marker) {
      effects.enter(markerType);
      effects.consume(code2);
      effects.exit(markerType);
      effects.exit(type2);
      return ok2;
    }
    effects.enter(stringType);
    return atBreak(code2);
  }
  function atBreak(code2) {
    if (code2 === marker) {
      effects.exit(stringType);
      return begin(marker);
    }
    if (code2 === null) {
      return nok(code2);
    }
    if (markdownLineEnding(code2)) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return factorySpace(effects, atBreak, "linePrefix");
    }
    effects.enter("chunkString", {
      contentType: "string"
    });
    return inside(code2);
  }
  function inside(code2) {
    if (code2 === marker || code2 === null || markdownLineEnding(code2)) {
      effects.exit("chunkString");
      return atBreak(code2);
    }
    effects.consume(code2);
    return code2 === 92 ? escape : inside;
  }
  function escape(code2) {
    if (code2 === marker || code2 === 92) {
      effects.consume(code2);
      return inside;
    }
    return inside(code2);
  }
}
function factoryWhitespace(effects, ok2) {
  let seen;
  return start;
  function start(code2) {
    if (markdownLineEnding(code2)) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      seen = true;
      return start;
    }
    if (markdownSpace(code2)) {
      return factorySpace(
        effects,
        start,
        seen ? "linePrefix" : "lineSuffix"
      )(code2);
    }
    return ok2(code2);
  }
}
function normalizeIdentifier(value2) {
  return value2.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
}
const definition = {
  name: "definition",
  tokenize: tokenizeDefinition
};
const titleBefore = {
  tokenize: tokenizeTitleBefore,
  partial: true
};
function tokenizeDefinition(effects, ok2, nok) {
  const self2 = this;
  let identifier;
  return start;
  function start(code2) {
    effects.enter("definition");
    return before(code2);
  }
  function before(code2) {
    return factoryLabel.call(
      self2,
      effects,
      labelAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      "definitionLabel",
      "definitionLabelMarker",
      "definitionLabelString"
    )(code2);
  }
  function labelAfter(code2) {
    identifier = normalizeIdentifier(
      self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
    );
    if (code2 === 58) {
      effects.enter("definitionMarker");
      effects.consume(code2);
      effects.exit("definitionMarker");
      return markerAfter;
    }
    return nok(code2);
  }
  function markerAfter(code2) {
    return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, destinationBefore)(code2) : destinationBefore(code2);
  }
  function destinationBefore(code2) {
    return factoryDestination(
      effects,
      destinationAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      "definitionDestination",
      "definitionDestinationLiteral",
      "definitionDestinationLiteralMarker",
      "definitionDestinationRaw",
      "definitionDestinationString"
    )(code2);
  }
  function destinationAfter(code2) {
    return effects.attempt(titleBefore, after, after)(code2);
  }
  function after(code2) {
    return markdownSpace(code2) ? factorySpace(effects, afterWhitespace, "whitespace")(code2) : afterWhitespace(code2);
  }
  function afterWhitespace(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("definition");
      self2.parser.defined.push(identifier);
      return ok2(code2);
    }
    return nok(code2);
  }
}
function tokenizeTitleBefore(effects, ok2, nok) {
  return titleBefore2;
  function titleBefore2(code2) {
    return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, beforeMarker)(code2) : nok(code2);
  }
  function beforeMarker(code2) {
    return factoryTitle(
      effects,
      titleAfter,
      nok,
      "definitionTitle",
      "definitionTitleMarker",
      "definitionTitleString"
    )(code2);
  }
  function titleAfter(code2) {
    return markdownSpace(code2) ? factorySpace(effects, titleAfterOptionalWhitespace, "whitespace")(code2) : titleAfterOptionalWhitespace(code2);
  }
  function titleAfterOptionalWhitespace(code2) {
    return code2 === null || markdownLineEnding(code2) ? ok2(code2) : nok(code2);
  }
}
const hardBreakEscape = {
  name: "hardBreakEscape",
  tokenize: tokenizeHardBreakEscape
};
function tokenizeHardBreakEscape(effects, ok2, nok) {
  return start;
  function start(code2) {
    effects.enter("hardBreakEscape");
    effects.consume(code2);
    return after;
  }
  function after(code2) {
    if (markdownLineEnding(code2)) {
      effects.exit("hardBreakEscape");
      return ok2(code2);
    }
    return nok(code2);
  }
}
const headingAtx = {
  name: "headingAtx",
  tokenize: tokenizeHeadingAtx,
  resolve: resolveHeadingAtx
};
function resolveHeadingAtx(events2, context2) {
  let contentEnd = events2.length - 2;
  let contentStart = 3;
  let content2;
  let text2;
  if (events2[contentStart][1].type === "whitespace") {
    contentStart += 2;
  }
  if (contentEnd - 2 > contentStart && events2[contentEnd][1].type === "whitespace") {
    contentEnd -= 2;
  }
  if (events2[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events2[contentEnd - 2][1].type === "whitespace")) {
    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
  }
  if (contentEnd > contentStart) {
    content2 = {
      type: "atxHeadingText",
      start: events2[contentStart][1].start,
      end: events2[contentEnd][1].end
    };
    text2 = {
      type: "chunkText",
      start: events2[contentStart][1].start,
      end: events2[contentEnd][1].end,
      contentType: "text"
    };
    splice(events2, contentStart, contentEnd - contentStart + 1, [
      ["enter", content2, context2],
      ["enter", text2, context2],
      ["exit", text2, context2],
      ["exit", content2, context2]
    ]);
  }
  return events2;
}
function tokenizeHeadingAtx(effects, ok2, nok) {
  let size = 0;
  return start;
  function start(code2) {
    effects.enter("atxHeading");
    return before(code2);
  }
  function before(code2) {
    effects.enter("atxHeadingSequence");
    return sequenceOpen(code2);
  }
  function sequenceOpen(code2) {
    if (code2 === 35 && size++ < 6) {
      effects.consume(code2);
      return sequenceOpen;
    }
    if (code2 === null || markdownLineEndingOrSpace(code2)) {
      effects.exit("atxHeadingSequence");
      return atBreak(code2);
    }
    return nok(code2);
  }
  function atBreak(code2) {
    if (code2 === 35) {
      effects.enter("atxHeadingSequence");
      return sequenceFurther(code2);
    }
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("atxHeading");
      return ok2(code2);
    }
    if (markdownSpace(code2)) {
      return factorySpace(effects, atBreak, "whitespace")(code2);
    }
    effects.enter("atxHeadingText");
    return data(code2);
  }
  function sequenceFurther(code2) {
    if (code2 === 35) {
      effects.consume(code2);
      return sequenceFurther;
    }
    effects.exit("atxHeadingSequence");
    return atBreak(code2);
  }
  function data(code2) {
    if (code2 === null || code2 === 35 || markdownLineEndingOrSpace(code2)) {
      effects.exit("atxHeadingText");
      return atBreak(code2);
    }
    effects.consume(code2);
    return data;
  }
}
const htmlBlockNames = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "search",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
];
const htmlRawNames = ["pre", "script", "style", "textarea"];
const htmlFlow = {
  name: "htmlFlow",
  tokenize: tokenizeHtmlFlow,
  resolveTo: resolveToHtmlFlow,
  concrete: true
};
const blankLineBefore = {
  tokenize: tokenizeBlankLineBefore,
  partial: true
};
const nonLazyContinuationStart = {
  tokenize: tokenizeNonLazyContinuationStart,
  partial: true
};
function resolveToHtmlFlow(events2) {
  let index2 = events2.length;
  while (index2--) {
    if (events2[index2][0] === "enter" && events2[index2][1].type === "htmlFlow") {
      break;
    }
  }
  if (index2 > 1 && events2[index2 - 2][1].type === "linePrefix") {
    events2[index2][1].start = events2[index2 - 2][1].start;
    events2[index2 + 1][1].start = events2[index2 - 2][1].start;
    events2.splice(index2 - 2, 2);
  }
  return events2;
}
function tokenizeHtmlFlow(effects, ok2, nok) {
  const self2 = this;
  let marker;
  let closingTag;
  let buffer2;
  let index2;
  let markerB;
  return start;
  function start(code2) {
    return before(code2);
  }
  function before(code2) {
    effects.enter("htmlFlow");
    effects.enter("htmlFlowData");
    effects.consume(code2);
    return open;
  }
  function open(code2) {
    if (code2 === 33) {
      effects.consume(code2);
      return declarationOpen;
    }
    if (code2 === 47) {
      effects.consume(code2);
      closingTag = true;
      return tagCloseStart;
    }
    if (code2 === 63) {
      effects.consume(code2);
      marker = 3;
      return self2.interrupt ? ok2 : continuationDeclarationInside;
    }
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      buffer2 = String.fromCharCode(code2);
      return tagName;
    }
    return nok(code2);
  }
  function declarationOpen(code2) {
    if (code2 === 45) {
      effects.consume(code2);
      marker = 2;
      return commentOpenInside;
    }
    if (code2 === 91) {
      effects.consume(code2);
      marker = 5;
      index2 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      marker = 4;
      return self2.interrupt ? ok2 : continuationDeclarationInside;
    }
    return nok(code2);
  }
  function commentOpenInside(code2) {
    if (code2 === 45) {
      effects.consume(code2);
      return self2.interrupt ? ok2 : continuationDeclarationInside;
    }
    return nok(code2);
  }
  function cdataOpenInside(code2) {
    const value2 = "CDATA[";
    if (code2 === value2.charCodeAt(index2++)) {
      effects.consume(code2);
      if (index2 === value2.length) {
        return self2.interrupt ? ok2 : continuation;
      }
      return cdataOpenInside;
    }
    return nok(code2);
  }
  function tagCloseStart(code2) {
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      buffer2 = String.fromCharCode(code2);
      return tagName;
    }
    return nok(code2);
  }
  function tagName(code2) {
    if (code2 === null || code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
      const slash2 = code2 === 47;
      const name = buffer2.toLowerCase();
      if (!slash2 && !closingTag && htmlRawNames.includes(name)) {
        marker = 1;
        return self2.interrupt ? ok2(code2) : continuation(code2);
      }
      if (htmlBlockNames.includes(buffer2.toLowerCase())) {
        marker = 6;
        if (slash2) {
          effects.consume(code2);
          return basicSelfClosing;
        }
        return self2.interrupt ? ok2(code2) : continuation(code2);
      }
      marker = 7;
      return self2.interrupt && !self2.parser.lazy[self2.now().line] ? nok(code2) : closingTag ? completeClosingTagAfter(code2) : completeAttributeNameBefore(code2);
    }
    if (code2 === 45 || asciiAlphanumeric(code2)) {
      effects.consume(code2);
      buffer2 += String.fromCharCode(code2);
      return tagName;
    }
    return nok(code2);
  }
  function basicSelfClosing(code2) {
    if (code2 === 62) {
      effects.consume(code2);
      return self2.interrupt ? ok2 : continuation;
    }
    return nok(code2);
  }
  function completeClosingTagAfter(code2) {
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return completeClosingTagAfter;
    }
    return completeEnd(code2);
  }
  function completeAttributeNameBefore(code2) {
    if (code2 === 47) {
      effects.consume(code2);
      return completeEnd;
    }
    if (code2 === 58 || code2 === 95 || asciiAlpha(code2)) {
      effects.consume(code2);
      return completeAttributeName;
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return completeAttributeNameBefore;
    }
    return completeEnd(code2);
  }
  function completeAttributeName(code2) {
    if (code2 === 45 || code2 === 46 || code2 === 58 || code2 === 95 || asciiAlphanumeric(code2)) {
      effects.consume(code2);
      return completeAttributeName;
    }
    return completeAttributeNameAfter(code2);
  }
  function completeAttributeNameAfter(code2) {
    if (code2 === 61) {
      effects.consume(code2);
      return completeAttributeValueBefore;
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return completeAttributeNameAfter;
    }
    return completeAttributeNameBefore(code2);
  }
  function completeAttributeValueBefore(code2) {
    if (code2 === null || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96) {
      return nok(code2);
    }
    if (code2 === 34 || code2 === 39) {
      effects.consume(code2);
      markerB = code2;
      return completeAttributeValueQuoted;
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return completeAttributeValueBefore;
    }
    return completeAttributeValueUnquoted(code2);
  }
  function completeAttributeValueQuoted(code2) {
    if (code2 === markerB) {
      effects.consume(code2);
      markerB = null;
      return completeAttributeValueQuotedAfter;
    }
    if (code2 === null || markdownLineEnding(code2)) {
      return nok(code2);
    }
    effects.consume(code2);
    return completeAttributeValueQuoted;
  }
  function completeAttributeValueUnquoted(code2) {
    if (code2 === null || code2 === 34 || code2 === 39 || code2 === 47 || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96 || markdownLineEndingOrSpace(code2)) {
      return completeAttributeNameAfter(code2);
    }
    effects.consume(code2);
    return completeAttributeValueUnquoted;
  }
  function completeAttributeValueQuotedAfter(code2) {
    if (code2 === 47 || code2 === 62 || markdownSpace(code2)) {
      return completeAttributeNameBefore(code2);
    }
    return nok(code2);
  }
  function completeEnd(code2) {
    if (code2 === 62) {
      effects.consume(code2);
      return completeAfter;
    }
    return nok(code2);
  }
  function completeAfter(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      return continuation(code2);
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return completeAfter;
    }
    return nok(code2);
  }
  function continuation(code2) {
    if (code2 === 45 && marker === 2) {
      effects.consume(code2);
      return continuationCommentInside;
    }
    if (code2 === 60 && marker === 1) {
      effects.consume(code2);
      return continuationRawTagOpen;
    }
    if (code2 === 62 && marker === 4) {
      effects.consume(code2);
      return continuationClose;
    }
    if (code2 === 63 && marker === 3) {
      effects.consume(code2);
      return continuationDeclarationInside;
    }
    if (code2 === 93 && marker === 5) {
      effects.consume(code2);
      return continuationCdataInside;
    }
    if (markdownLineEnding(code2) && (marker === 6 || marker === 7)) {
      effects.exit("htmlFlowData");
      return effects.check(
        blankLineBefore,
        continuationAfter,
        continuationStart
      )(code2);
    }
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("htmlFlowData");
      return continuationStart(code2);
    }
    effects.consume(code2);
    return continuation;
  }
  function continuationStart(code2) {
    return effects.check(
      nonLazyContinuationStart,
      continuationStartNonLazy,
      continuationAfter
    )(code2);
  }
  function continuationStartNonLazy(code2) {
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return continuationBefore;
  }
  function continuationBefore(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      return continuationStart(code2);
    }
    effects.enter("htmlFlowData");
    return continuation(code2);
  }
  function continuationCommentInside(code2) {
    if (code2 === 45) {
      effects.consume(code2);
      return continuationDeclarationInside;
    }
    return continuation(code2);
  }
  function continuationRawTagOpen(code2) {
    if (code2 === 47) {
      effects.consume(code2);
      buffer2 = "";
      return continuationRawEndTag;
    }
    return continuation(code2);
  }
  function continuationRawEndTag(code2) {
    if (code2 === 62) {
      const name = buffer2.toLowerCase();
      if (htmlRawNames.includes(name)) {
        effects.consume(code2);
        return continuationClose;
      }
      return continuation(code2);
    }
    if (asciiAlpha(code2) && buffer2.length < 8) {
      effects.consume(code2);
      buffer2 += String.fromCharCode(code2);
      return continuationRawEndTag;
    }
    return continuation(code2);
  }
  function continuationCdataInside(code2) {
    if (code2 === 93) {
      effects.consume(code2);
      return continuationDeclarationInside;
    }
    return continuation(code2);
  }
  function continuationDeclarationInside(code2) {
    if (code2 === 62) {
      effects.consume(code2);
      return continuationClose;
    }
    if (code2 === 45 && marker === 2) {
      effects.consume(code2);
      return continuationDeclarationInside;
    }
    return continuation(code2);
  }
  function continuationClose(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("htmlFlowData");
      return continuationAfter(code2);
    }
    effects.consume(code2);
    return continuationClose;
  }
  function continuationAfter(code2) {
    effects.exit("htmlFlow");
    return ok2(code2);
  }
}
function tokenizeNonLazyContinuationStart(effects, ok2, nok) {
  const self2 = this;
  return start;
  function start(code2) {
    if (markdownLineEnding(code2)) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return after;
    }
    return nok(code2);
  }
  function after(code2) {
    return self2.parser.lazy[self2.now().line] ? nok(code2) : ok2(code2);
  }
}
function tokenizeBlankLineBefore(effects, ok2, nok) {
  return start;
  function start(code2) {
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return effects.attempt(blankLine, ok2, nok);
  }
}
const htmlText = {
  name: "htmlText",
  tokenize: tokenizeHtmlText
};
function tokenizeHtmlText(effects, ok2, nok) {
  const self2 = this;
  let marker;
  let index2;
  let returnState;
  return start;
  function start(code2) {
    effects.enter("htmlText");
    effects.enter("htmlTextData");
    effects.consume(code2);
    return open;
  }
  function open(code2) {
    if (code2 === 33) {
      effects.consume(code2);
      return declarationOpen;
    }
    if (code2 === 47) {
      effects.consume(code2);
      return tagCloseStart;
    }
    if (code2 === 63) {
      effects.consume(code2);
      return instruction;
    }
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      return tagOpen;
    }
    return nok(code2);
  }
  function declarationOpen(code2) {
    if (code2 === 45) {
      effects.consume(code2);
      return commentOpenInside;
    }
    if (code2 === 91) {
      effects.consume(code2);
      index2 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      return declaration;
    }
    return nok(code2);
  }
  function commentOpenInside(code2) {
    if (code2 === 45) {
      effects.consume(code2);
      return commentEnd;
    }
    return nok(code2);
  }
  function comment(code2) {
    if (code2 === null) {
      return nok(code2);
    }
    if (code2 === 45) {
      effects.consume(code2);
      return commentClose;
    }
    if (markdownLineEnding(code2)) {
      returnState = comment;
      return lineEndingBefore(code2);
    }
    effects.consume(code2);
    return comment;
  }
  function commentClose(code2) {
    if (code2 === 45) {
      effects.consume(code2);
      return commentEnd;
    }
    return comment(code2);
  }
  function commentEnd(code2) {
    return code2 === 62 ? end(code2) : code2 === 45 ? commentClose(code2) : comment(code2);
  }
  function cdataOpenInside(code2) {
    const value2 = "CDATA[";
    if (code2 === value2.charCodeAt(index2++)) {
      effects.consume(code2);
      return index2 === value2.length ? cdata : cdataOpenInside;
    }
    return nok(code2);
  }
  function cdata(code2) {
    if (code2 === null) {
      return nok(code2);
    }
    if (code2 === 93) {
      effects.consume(code2);
      return cdataClose;
    }
    if (markdownLineEnding(code2)) {
      returnState = cdata;
      return lineEndingBefore(code2);
    }
    effects.consume(code2);
    return cdata;
  }
  function cdataClose(code2) {
    if (code2 === 93) {
      effects.consume(code2);
      return cdataEnd;
    }
    return cdata(code2);
  }
  function cdataEnd(code2) {
    if (code2 === 62) {
      return end(code2);
    }
    if (code2 === 93) {
      effects.consume(code2);
      return cdataEnd;
    }
    return cdata(code2);
  }
  function declaration(code2) {
    if (code2 === null || code2 === 62) {
      return end(code2);
    }
    if (markdownLineEnding(code2)) {
      returnState = declaration;
      return lineEndingBefore(code2);
    }
    effects.consume(code2);
    return declaration;
  }
  function instruction(code2) {
    if (code2 === null) {
      return nok(code2);
    }
    if (code2 === 63) {
      effects.consume(code2);
      return instructionClose;
    }
    if (markdownLineEnding(code2)) {
      returnState = instruction;
      return lineEndingBefore(code2);
    }
    effects.consume(code2);
    return instruction;
  }
  function instructionClose(code2) {
    return code2 === 62 ? end(code2) : instruction(code2);
  }
  function tagCloseStart(code2) {
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      return tagClose;
    }
    return nok(code2);
  }
  function tagClose(code2) {
    if (code2 === 45 || asciiAlphanumeric(code2)) {
      effects.consume(code2);
      return tagClose;
    }
    return tagCloseBetween(code2);
  }
  function tagCloseBetween(code2) {
    if (markdownLineEnding(code2)) {
      returnState = tagCloseBetween;
      return lineEndingBefore(code2);
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return tagCloseBetween;
    }
    return end(code2);
  }
  function tagOpen(code2) {
    if (code2 === 45 || asciiAlphanumeric(code2)) {
      effects.consume(code2);
      return tagOpen;
    }
    if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
      return tagOpenBetween(code2);
    }
    return nok(code2);
  }
  function tagOpenBetween(code2) {
    if (code2 === 47) {
      effects.consume(code2);
      return end;
    }
    if (code2 === 58 || code2 === 95 || asciiAlpha(code2)) {
      effects.consume(code2);
      return tagOpenAttributeName;
    }
    if (markdownLineEnding(code2)) {
      returnState = tagOpenBetween;
      return lineEndingBefore(code2);
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return tagOpenBetween;
    }
    return end(code2);
  }
  function tagOpenAttributeName(code2) {
    if (code2 === 45 || code2 === 46 || code2 === 58 || code2 === 95 || asciiAlphanumeric(code2)) {
      effects.consume(code2);
      return tagOpenAttributeName;
    }
    return tagOpenAttributeNameAfter(code2);
  }
  function tagOpenAttributeNameAfter(code2) {
    if (code2 === 61) {
      effects.consume(code2);
      return tagOpenAttributeValueBefore;
    }
    if (markdownLineEnding(code2)) {
      returnState = tagOpenAttributeNameAfter;
      return lineEndingBefore(code2);
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return tagOpenAttributeNameAfter;
    }
    return tagOpenBetween(code2);
  }
  function tagOpenAttributeValueBefore(code2) {
    if (code2 === null || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96) {
      return nok(code2);
    }
    if (code2 === 34 || code2 === 39) {
      effects.consume(code2);
      marker = code2;
      return tagOpenAttributeValueQuoted;
    }
    if (markdownLineEnding(code2)) {
      returnState = tagOpenAttributeValueBefore;
      return lineEndingBefore(code2);
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return tagOpenAttributeValueBefore;
    }
    effects.consume(code2);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuoted(code2) {
    if (code2 === marker) {
      effects.consume(code2);
      marker = void 0;
      return tagOpenAttributeValueQuotedAfter;
    }
    if (code2 === null) {
      return nok(code2);
    }
    if (markdownLineEnding(code2)) {
      returnState = tagOpenAttributeValueQuoted;
      return lineEndingBefore(code2);
    }
    effects.consume(code2);
    return tagOpenAttributeValueQuoted;
  }
  function tagOpenAttributeValueUnquoted(code2) {
    if (code2 === null || code2 === 34 || code2 === 39 || code2 === 60 || code2 === 61 || code2 === 96) {
      return nok(code2);
    }
    if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
      return tagOpenBetween(code2);
    }
    effects.consume(code2);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuotedAfter(code2) {
    if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
      return tagOpenBetween(code2);
    }
    return nok(code2);
  }
  function end(code2) {
    if (code2 === 62) {
      effects.consume(code2);
      effects.exit("htmlTextData");
      effects.exit("htmlText");
      return ok2;
    }
    return nok(code2);
  }
  function lineEndingBefore(code2) {
    effects.exit("htmlTextData");
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return lineEndingAfter;
  }
  function lineEndingAfter(code2) {
    return markdownSpace(code2) ? factorySpace(
      effects,
      lineEndingAfterPrefix,
      "linePrefix",
      self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    )(code2) : lineEndingAfterPrefix(code2);
  }
  function lineEndingAfterPrefix(code2) {
    effects.enter("htmlTextData");
    return returnState(code2);
  }
}
const labelEnd = {
  name: "labelEnd",
  tokenize: tokenizeLabelEnd,
  resolveTo: resolveToLabelEnd,
  resolveAll: resolveAllLabelEnd
};
const resourceConstruct = {
  tokenize: tokenizeResource
};
const referenceFullConstruct = {
  tokenize: tokenizeReferenceFull
};
const referenceCollapsedConstruct = {
  tokenize: tokenizeReferenceCollapsed
};
function resolveAllLabelEnd(events2) {
  let index2 = -1;
  while (++index2 < events2.length) {
    const token = events2[index2][1];
    if (token.type === "labelImage" || token.type === "labelLink" || token.type === "labelEnd") {
      events2.splice(index2 + 1, token.type === "labelImage" ? 4 : 2);
      token.type = "data";
      index2++;
    }
  }
  return events2;
}
function resolveToLabelEnd(events2, context2) {
  let index2 = events2.length;
  let offset = 0;
  let token;
  let open;
  let close2;
  let media;
  while (index2--) {
    token = events2[index2][1];
    if (open) {
      if (token.type === "link" || token.type === "labelLink" && token._inactive) {
        break;
      }
      if (events2[index2][0] === "enter" && token.type === "labelLink") {
        token._inactive = true;
      }
    } else if (close2) {
      if (events2[index2][0] === "enter" && (token.type === "labelImage" || token.type === "labelLink") && !token._balanced) {
        open = index2;
        if (token.type !== "labelLink") {
          offset = 2;
          break;
        }
      }
    } else if (token.type === "labelEnd") {
      close2 = index2;
    }
  }
  const group = {
    type: events2[open][1].type === "labelLink" ? "link" : "image",
    start: Object.assign({}, events2[open][1].start),
    end: Object.assign({}, events2[events2.length - 1][1].end)
  };
  const label = {
    type: "label",
    start: Object.assign({}, events2[open][1].start),
    end: Object.assign({}, events2[close2][1].end)
  };
  const text2 = {
    type: "labelText",
    start: Object.assign({}, events2[open + offset + 2][1].end),
    end: Object.assign({}, events2[close2 - 2][1].start)
  };
  media = [
    ["enter", group, context2],
    ["enter", label, context2]
  ];
  media = push(media, events2.slice(open + 1, open + offset + 3));
  media = push(media, [["enter", text2, context2]]);
  media = push(
    media,
    resolveAll(
      context2.parser.constructs.insideSpan.null,
      events2.slice(open + offset + 4, close2 - 3),
      context2
    )
  );
  media = push(media, [
    ["exit", text2, context2],
    events2[close2 - 2],
    events2[close2 - 1],
    ["exit", label, context2]
  ]);
  media = push(media, events2.slice(close2 + 1));
  media = push(media, [["exit", group, context2]]);
  splice(events2, open, events2.length, media);
  return events2;
}
function tokenizeLabelEnd(effects, ok2, nok) {
  const self2 = this;
  let index2 = self2.events.length;
  let labelStart;
  let defined;
  while (index2--) {
    if ((self2.events[index2][1].type === "labelImage" || self2.events[index2][1].type === "labelLink") && !self2.events[index2][1]._balanced) {
      labelStart = self2.events[index2][1];
      break;
    }
  }
  return start;
  function start(code2) {
    if (!labelStart) {
      return nok(code2);
    }
    if (labelStart._inactive) {
      return labelEndNok(code2);
    }
    defined = self2.parser.defined.includes(
      normalizeIdentifier(
        self2.sliceSerialize({
          start: labelStart.end,
          end: self2.now()
        })
      )
    );
    effects.enter("labelEnd");
    effects.enter("labelMarker");
    effects.consume(code2);
    effects.exit("labelMarker");
    effects.exit("labelEnd");
    return after;
  }
  function after(code2) {
    if (code2 === 40) {
      return effects.attempt(
        resourceConstruct,
        labelEndOk,
        defined ? labelEndOk : labelEndNok
      )(code2);
    }
    if (code2 === 91) {
      return effects.attempt(
        referenceFullConstruct,
        labelEndOk,
        defined ? referenceNotFull : labelEndNok
      )(code2);
    }
    return defined ? labelEndOk(code2) : labelEndNok(code2);
  }
  function referenceNotFull(code2) {
    return effects.attempt(
      referenceCollapsedConstruct,
      labelEndOk,
      labelEndNok
    )(code2);
  }
  function labelEndOk(code2) {
    return ok2(code2);
  }
  function labelEndNok(code2) {
    labelStart._balanced = true;
    return nok(code2);
  }
}
function tokenizeResource(effects, ok2, nok) {
  return resourceStart;
  function resourceStart(code2) {
    effects.enter("resource");
    effects.enter("resourceMarker");
    effects.consume(code2);
    effects.exit("resourceMarker");
    return resourceBefore;
  }
  function resourceBefore(code2) {
    return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceOpen)(code2) : resourceOpen(code2);
  }
  function resourceOpen(code2) {
    if (code2 === 41) {
      return resourceEnd(code2);
    }
    return factoryDestination(
      effects,
      resourceDestinationAfter,
      resourceDestinationMissing,
      "resourceDestination",
      "resourceDestinationLiteral",
      "resourceDestinationLiteralMarker",
      "resourceDestinationRaw",
      "resourceDestinationString",
      32
    )(code2);
  }
  function resourceDestinationAfter(code2) {
    return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceBetween)(code2) : resourceEnd(code2);
  }
  function resourceDestinationMissing(code2) {
    return nok(code2);
  }
  function resourceBetween(code2) {
    if (code2 === 34 || code2 === 39 || code2 === 40) {
      return factoryTitle(
        effects,
        resourceTitleAfter,
        nok,
        "resourceTitle",
        "resourceTitleMarker",
        "resourceTitleString"
      )(code2);
    }
    return resourceEnd(code2);
  }
  function resourceTitleAfter(code2) {
    return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceEnd)(code2) : resourceEnd(code2);
  }
  function resourceEnd(code2) {
    if (code2 === 41) {
      effects.enter("resourceMarker");
      effects.consume(code2);
      effects.exit("resourceMarker");
      effects.exit("resource");
      return ok2;
    }
    return nok(code2);
  }
}
function tokenizeReferenceFull(effects, ok2, nok) {
  const self2 = this;
  return referenceFull;
  function referenceFull(code2) {
    return factoryLabel.call(
      self2,
      effects,
      referenceFullAfter,
      referenceFullMissing,
      "reference",
      "referenceMarker",
      "referenceString"
    )(code2);
  }
  function referenceFullAfter(code2) {
    return self2.parser.defined.includes(
      normalizeIdentifier(
        self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
      )
    ) ? ok2(code2) : nok(code2);
  }
  function referenceFullMissing(code2) {
    return nok(code2);
  }
}
function tokenizeReferenceCollapsed(effects, ok2, nok) {
  return referenceCollapsedStart;
  function referenceCollapsedStart(code2) {
    effects.enter("reference");
    effects.enter("referenceMarker");
    effects.consume(code2);
    effects.exit("referenceMarker");
    return referenceCollapsedOpen;
  }
  function referenceCollapsedOpen(code2) {
    if (code2 === 93) {
      effects.enter("referenceMarker");
      effects.consume(code2);
      effects.exit("referenceMarker");
      effects.exit("reference");
      return ok2;
    }
    return nok(code2);
  }
}
const labelStartImage = {
  name: "labelStartImage",
  tokenize: tokenizeLabelStartImage,
  resolveAll: labelEnd.resolveAll
};
function tokenizeLabelStartImage(effects, ok2, nok) {
  const self2 = this;
  return start;
  function start(code2) {
    effects.enter("labelImage");
    effects.enter("labelImageMarker");
    effects.consume(code2);
    effects.exit("labelImageMarker");
    return open;
  }
  function open(code2) {
    if (code2 === 91) {
      effects.enter("labelMarker");
      effects.consume(code2);
      effects.exit("labelMarker");
      effects.exit("labelImage");
      return after;
    }
    return nok(code2);
  }
  function after(code2) {
    return code2 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code2) : ok2(code2);
  }
}
const labelStartLink = {
  name: "labelStartLink",
  tokenize: tokenizeLabelStartLink,
  resolveAll: labelEnd.resolveAll
};
function tokenizeLabelStartLink(effects, ok2, nok) {
  const self2 = this;
  return start;
  function start(code2) {
    effects.enter("labelLink");
    effects.enter("labelMarker");
    effects.consume(code2);
    effects.exit("labelMarker");
    effects.exit("labelLink");
    return after;
  }
  function after(code2) {
    return code2 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code2) : ok2(code2);
  }
}
const lineEnding = {
  name: "lineEnding",
  tokenize: tokenizeLineEnding
};
function tokenizeLineEnding(effects, ok2) {
  return start;
  function start(code2) {
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return factorySpace(effects, ok2, "linePrefix");
  }
}
const thematicBreak = {
  name: "thematicBreak",
  tokenize: tokenizeThematicBreak
};
function tokenizeThematicBreak(effects, ok2, nok) {
  let size = 0;
  let marker;
  return start;
  function start(code2) {
    effects.enter("thematicBreak");
    return before(code2);
  }
  function before(code2) {
    marker = code2;
    return atBreak(code2);
  }
  function atBreak(code2) {
    if (code2 === marker) {
      effects.enter("thematicBreakSequence");
      return sequence(code2);
    }
    if (size >= 3 && (code2 === null || markdownLineEnding(code2))) {
      effects.exit("thematicBreak");
      return ok2(code2);
    }
    return nok(code2);
  }
  function sequence(code2) {
    if (code2 === marker) {
      effects.consume(code2);
      size++;
      return sequence;
    }
    effects.exit("thematicBreakSequence");
    return markdownSpace(code2) ? factorySpace(effects, atBreak, "whitespace")(code2) : atBreak(code2);
  }
}
const list = {
  name: "list",
  tokenize: tokenizeListStart,
  continuation: {
    tokenize: tokenizeListContinuation
  },
  exit: tokenizeListEnd
};
const listItemPrefixWhitespaceConstruct = {
  tokenize: tokenizeListItemPrefixWhitespace,
  partial: true
};
const indentConstruct = {
  tokenize: tokenizeIndent$1,
  partial: true
};
function tokenizeListStart(effects, ok2, nok) {
  const self2 = this;
  const tail = self2.events[self2.events.length - 1];
  let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
  let size = 0;
  return start;
  function start(code2) {
    const kind = self2.containerState.type || (code2 === 42 || code2 === 43 || code2 === 45 ? "listUnordered" : "listOrdered");
    if (kind === "listUnordered" ? !self2.containerState.marker || code2 === self2.containerState.marker : asciiDigit(code2)) {
      if (!self2.containerState.type) {
        self2.containerState.type = kind;
        effects.enter(kind, {
          _container: true
        });
      }
      if (kind === "listUnordered") {
        effects.enter("listItemPrefix");
        return code2 === 42 || code2 === 45 ? effects.check(thematicBreak, nok, atMarker)(code2) : atMarker(code2);
      }
      if (!self2.interrupt || code2 === 49) {
        effects.enter("listItemPrefix");
        effects.enter("listItemValue");
        return inside(code2);
      }
    }
    return nok(code2);
  }
  function inside(code2) {
    if (asciiDigit(code2) && ++size < 10) {
      effects.consume(code2);
      return inside;
    }
    if ((!self2.interrupt || size < 2) && (self2.containerState.marker ? code2 === self2.containerState.marker : code2 === 41 || code2 === 46)) {
      effects.exit("listItemValue");
      return atMarker(code2);
    }
    return nok(code2);
  }
  function atMarker(code2) {
    effects.enter("listItemMarker");
    effects.consume(code2);
    effects.exit("listItemMarker");
    self2.containerState.marker = self2.containerState.marker || code2;
    return effects.check(
      blankLine,
      // Can’t be empty when interrupting.
      self2.interrupt ? nok : onBlank,
      effects.attempt(
        listItemPrefixWhitespaceConstruct,
        endOfPrefix,
        otherPrefix
      )
    );
  }
  function onBlank(code2) {
    self2.containerState.initialBlankLine = true;
    initialSize++;
    return endOfPrefix(code2);
  }
  function otherPrefix(code2) {
    if (markdownSpace(code2)) {
      effects.enter("listItemPrefixWhitespace");
      effects.consume(code2);
      effects.exit("listItemPrefixWhitespace");
      return endOfPrefix;
    }
    return nok(code2);
  }
  function endOfPrefix(code2) {
    self2.containerState.size = initialSize + self2.sliceSerialize(effects.exit("listItemPrefix"), true).length;
    return ok2(code2);
  }
}
function tokenizeListContinuation(effects, ok2, nok) {
  const self2 = this;
  self2.containerState._closeFlow = void 0;
  return effects.check(blankLine, onBlank, notBlank);
  function onBlank(code2) {
    self2.containerState.furtherBlankLines = self2.containerState.furtherBlankLines || self2.containerState.initialBlankLine;
    return factorySpace(
      effects,
      ok2,
      "listItemIndent",
      self2.containerState.size + 1
    )(code2);
  }
  function notBlank(code2) {
    if (self2.containerState.furtherBlankLines || !markdownSpace(code2)) {
      self2.containerState.furtherBlankLines = void 0;
      self2.containerState.initialBlankLine = void 0;
      return notInCurrentItem(code2);
    }
    self2.containerState.furtherBlankLines = void 0;
    self2.containerState.initialBlankLine = void 0;
    return effects.attempt(indentConstruct, ok2, notInCurrentItem)(code2);
  }
  function notInCurrentItem(code2) {
    self2.containerState._closeFlow = true;
    self2.interrupt = void 0;
    return factorySpace(
      effects,
      effects.attempt(list, ok2, nok),
      "linePrefix",
      self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    )(code2);
  }
}
function tokenizeIndent$1(effects, ok2, nok) {
  const self2 = this;
  return factorySpace(
    effects,
    afterPrefix,
    "listItemIndent",
    self2.containerState.size + 1
  );
  function afterPrefix(code2) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "listItemIndent" && tail[2].sliceSerialize(tail[1], true).length === self2.containerState.size ? ok2(code2) : nok(code2);
  }
}
function tokenizeListEnd(effects) {
  effects.exit(this.containerState.type);
}
function tokenizeListItemPrefixWhitespace(effects, ok2, nok) {
  const self2 = this;
  return factorySpace(
    effects,
    afterPrefix,
    "listItemPrefixWhitespace",
    self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4 + 1
  );
  function afterPrefix(code2) {
    const tail = self2.events[self2.events.length - 1];
    return !markdownSpace(code2) && tail && tail[1].type === "listItemPrefixWhitespace" ? ok2(code2) : nok(code2);
  }
}
const setextUnderline = {
  name: "setextUnderline",
  tokenize: tokenizeSetextUnderline,
  resolveTo: resolveToSetextUnderline
};
function resolveToSetextUnderline(events2, context2) {
  let index2 = events2.length;
  let content2;
  let text2;
  let definition2;
  while (index2--) {
    if (events2[index2][0] === "enter") {
      if (events2[index2][1].type === "content") {
        content2 = index2;
        break;
      }
      if (events2[index2][1].type === "paragraph") {
        text2 = index2;
      }
    } else {
      if (events2[index2][1].type === "content") {
        events2.splice(index2, 1);
      }
      if (!definition2 && events2[index2][1].type === "definition") {
        definition2 = index2;
      }
    }
  }
  const heading = {
    type: "setextHeading",
    start: Object.assign({}, events2[text2][1].start),
    end: Object.assign({}, events2[events2.length - 1][1].end)
  };
  events2[text2][1].type = "setextHeadingText";
  if (definition2) {
    events2.splice(text2, 0, ["enter", heading, context2]);
    events2.splice(definition2 + 1, 0, ["exit", events2[content2][1], context2]);
    events2[content2][1].end = Object.assign({}, events2[definition2][1].end);
  } else {
    events2[content2][1] = heading;
  }
  events2.push(["exit", heading, context2]);
  return events2;
}
function tokenizeSetextUnderline(effects, ok2, nok) {
  const self2 = this;
  let marker;
  return start;
  function start(code2) {
    let index2 = self2.events.length;
    let paragraph;
    while (index2--) {
      if (self2.events[index2][1].type !== "lineEnding" && self2.events[index2][1].type !== "linePrefix" && self2.events[index2][1].type !== "content") {
        paragraph = self2.events[index2][1].type === "paragraph";
        break;
      }
    }
    if (!self2.parser.lazy[self2.now().line] && (self2.interrupt || paragraph)) {
      effects.enter("setextHeadingLine");
      marker = code2;
      return before(code2);
    }
    return nok(code2);
  }
  function before(code2) {
    effects.enter("setextHeadingLineSequence");
    return inside(code2);
  }
  function inside(code2) {
    if (code2 === marker) {
      effects.consume(code2);
      return inside;
    }
    effects.exit("setextHeadingLineSequence");
    return markdownSpace(code2) ? factorySpace(effects, after, "lineSuffix")(code2) : after(code2);
  }
  function after(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("setextHeadingLine");
      return ok2(code2);
    }
    return nok(code2);
  }
}
const flow$1 = {
  tokenize: initializeFlow
};
function initializeFlow(effects) {
  const self2 = this;
  const initial = effects.attempt(
    // Try to parse a blank line.
    blankLine,
    atBlankEnding,
    // Try to parse initial flow (essentially, only code).
    effects.attempt(
      this.parser.constructs.flowInitial,
      afterConstruct,
      factorySpace(
        effects,
        effects.attempt(
          this.parser.constructs.flow,
          afterConstruct,
          effects.attempt(content, afterConstruct)
        ),
        "linePrefix"
      )
    )
  );
  return initial;
  function atBlankEnding(code2) {
    if (code2 === null) {
      effects.consume(code2);
      return;
    }
    effects.enter("lineEndingBlank");
    effects.consume(code2);
    effects.exit("lineEndingBlank");
    self2.currentConstruct = void 0;
    return initial;
  }
  function afterConstruct(code2) {
    if (code2 === null) {
      effects.consume(code2);
      return;
    }
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    self2.currentConstruct = void 0;
    return initial;
  }
}
const resolver = {
  resolveAll: createResolver()
};
const string$1 = initializeFactory("string");
const text$2 = initializeFactory("text");
function initializeFactory(field) {
  return {
    tokenize: initializeText,
    resolveAll: createResolver(
      field === "text" ? resolveAllLineSuffixes : void 0
    )
  };
  function initializeText(effects) {
    const self2 = this;
    const constructs2 = this.parser.constructs[field];
    const text2 = effects.attempt(constructs2, start, notText);
    return start;
    function start(code2) {
      return atBreak(code2) ? text2(code2) : notText(code2);
    }
    function notText(code2) {
      if (code2 === null) {
        effects.consume(code2);
        return;
      }
      effects.enter("data");
      effects.consume(code2);
      return data;
    }
    function data(code2) {
      if (atBreak(code2)) {
        effects.exit("data");
        return text2(code2);
      }
      effects.consume(code2);
      return data;
    }
    function atBreak(code2) {
      if (code2 === null) {
        return true;
      }
      const list2 = constructs2[code2];
      let index2 = -1;
      if (list2) {
        while (++index2 < list2.length) {
          const item = list2[index2];
          if (!item.previous || item.previous.call(self2, self2.previous)) {
            return true;
          }
        }
      }
      return false;
    }
  }
}
function createResolver(extraResolver) {
  return resolveAllText;
  function resolveAllText(events2, context2) {
    let index2 = -1;
    let enter;
    while (++index2 <= events2.length) {
      if (enter === void 0) {
        if (events2[index2] && events2[index2][1].type === "data") {
          enter = index2;
          index2++;
        }
      } else if (!events2[index2] || events2[index2][1].type !== "data") {
        if (index2 !== enter + 2) {
          events2[enter][1].end = events2[index2 - 1][1].end;
          events2.splice(enter + 2, index2 - enter - 2);
          index2 = enter + 2;
        }
        enter = void 0;
      }
    }
    return extraResolver ? extraResolver(events2, context2) : events2;
  }
}
function resolveAllLineSuffixes(events2, context2) {
  let eventIndex = 0;
  while (++eventIndex <= events2.length) {
    if ((eventIndex === events2.length || events2[eventIndex][1].type === "lineEnding") && events2[eventIndex - 1][1].type === "data") {
      const data = events2[eventIndex - 1][1];
      const chunks = context2.sliceStream(data);
      let index2 = chunks.length;
      let bufferIndex = -1;
      let size = 0;
      let tabs;
      while (index2--) {
        const chunk = chunks[index2];
        if (typeof chunk === "string") {
          bufferIndex = chunk.length;
          while (chunk.charCodeAt(bufferIndex - 1) === 32) {
            size++;
            bufferIndex--;
          }
          if (bufferIndex)
            break;
          bufferIndex = -1;
        } else if (chunk === -2) {
          tabs = true;
          size++;
        } else if (chunk === -1)
          ;
        else {
          index2++;
          break;
        }
      }
      if (size) {
        const token = {
          type: eventIndex === events2.length || tabs || size < 2 ? "lineSuffix" : "hardBreakTrailing",
          start: {
            line: data.end.line,
            column: data.end.column - size,
            offset: data.end.offset - size,
            _index: data.start._index + index2,
            _bufferIndex: index2 ? bufferIndex : data.start._bufferIndex + bufferIndex
          },
          end: Object.assign({}, data.end)
        };
        data.end = Object.assign({}, token.start);
        if (data.start.offset === data.end.offset) {
          Object.assign(data, token);
        } else {
          events2.splice(
            eventIndex,
            0,
            ["enter", token, context2],
            ["exit", token, context2]
          );
          eventIndex += 2;
        }
      }
      eventIndex++;
    }
  }
  return events2;
}
function createTokenizer(parser, initialize, from) {
  let point2 = Object.assign(
    from ? Object.assign({}, from) : {
      line: 1,
      column: 1,
      offset: 0
    },
    {
      _index: 0,
      _bufferIndex: -1
    }
  );
  const columnStart = {};
  const resolveAllConstructs = [];
  let chunks = [];
  let stack = [];
  const effects = {
    consume,
    enter,
    exit: exit2,
    attempt: constructFactory(onsuccessfulconstruct),
    check: constructFactory(onsuccessfulcheck),
    interrupt: constructFactory(onsuccessfulcheck, {
      interrupt: true
    })
  };
  const context2 = {
    previous: null,
    code: null,
    containerState: {},
    events: [],
    parser,
    sliceStream,
    sliceSerialize,
    now,
    defineSkip,
    write
  };
  let state = initialize.tokenize.call(context2, effects);
  if (initialize.resolveAll) {
    resolveAllConstructs.push(initialize);
  }
  return context2;
  function write(slice) {
    chunks = push(chunks, slice);
    main();
    if (chunks[chunks.length - 1] !== null) {
      return [];
    }
    addResult(initialize, 0);
    context2.events = resolveAll(resolveAllConstructs, context2.events, context2);
    return context2.events;
  }
  function sliceSerialize(token, expandTabs) {
    return serializeChunks(sliceStream(token), expandTabs);
  }
  function sliceStream(token) {
    return sliceChunks(chunks, token);
  }
  function now() {
    const { line, column, offset, _index, _bufferIndex } = point2;
    return {
      line,
      column,
      offset,
      _index,
      _bufferIndex
    };
  }
  function defineSkip(value2) {
    columnStart[value2.line] = value2.column;
    accountForPotentialSkip();
  }
  function main() {
    let chunkIndex;
    while (point2._index < chunks.length) {
      const chunk = chunks[point2._index];
      if (typeof chunk === "string") {
        chunkIndex = point2._index;
        if (point2._bufferIndex < 0) {
          point2._bufferIndex = 0;
        }
        while (point2._index === chunkIndex && point2._bufferIndex < chunk.length) {
          go(chunk.charCodeAt(point2._bufferIndex));
        }
      } else {
        go(chunk);
      }
    }
  }
  function go(code2) {
    state = state(code2);
  }
  function consume(code2) {
    if (markdownLineEnding(code2)) {
      point2.line++;
      point2.column = 1;
      point2.offset += code2 === -3 ? 2 : 1;
      accountForPotentialSkip();
    } else if (code2 !== -1) {
      point2.column++;
      point2.offset++;
    }
    if (point2._bufferIndex < 0) {
      point2._index++;
    } else {
      point2._bufferIndex++;
      if (point2._bufferIndex === chunks[point2._index].length) {
        point2._bufferIndex = -1;
        point2._index++;
      }
    }
    context2.previous = code2;
  }
  function enter(type2, fields) {
    const token = fields || {};
    token.type = type2;
    token.start = now();
    context2.events.push(["enter", token, context2]);
    stack.push(token);
    return token;
  }
  function exit2(type2) {
    const token = stack.pop();
    token.end = now();
    context2.events.push(["exit", token, context2]);
    return token;
  }
  function onsuccessfulconstruct(construct2, info) {
    addResult(construct2, info.from);
  }
  function onsuccessfulcheck(_, info) {
    info.restore();
  }
  function constructFactory(onreturn, fields) {
    return hook2;
    function hook2(constructs2, returnState, bogusState) {
      let listOfConstructs;
      let constructIndex;
      let currentConstruct;
      let info;
      return Array.isArray(constructs2) ? handleListOfConstructs(constructs2) : "tokenize" in constructs2 ? (
        // @ts-expect-error Looks like a construct.
        handleListOfConstructs([constructs2])
      ) : handleMapOfConstructs(constructs2);
      function handleMapOfConstructs(map2) {
        return start;
        function start(code2) {
          const def = code2 !== null && map2[code2];
          const all2 = code2 !== null && map2.null;
          const list2 = [
            // To do: add more extension tests.
            /* c8 ignore next 2 */
            ...Array.isArray(def) ? def : def ? [def] : [],
            ...Array.isArray(all2) ? all2 : all2 ? [all2] : []
          ];
          return handleListOfConstructs(list2)(code2);
        }
      }
      function handleListOfConstructs(list2) {
        listOfConstructs = list2;
        constructIndex = 0;
        if (list2.length === 0) {
          return bogusState;
        }
        return handleConstruct(list2[constructIndex]);
      }
      function handleConstruct(construct2) {
        return start;
        function start(code2) {
          info = store();
          currentConstruct = construct2;
          if (!construct2.partial) {
            context2.currentConstruct = construct2;
          }
          if (construct2.name && context2.parser.constructs.disable.null.includes(construct2.name)) {
            return nok();
          }
          return construct2.tokenize.call(
            // If we do have fields, create an object w/ `context` as its
            // prototype.
            // This allows a “live binding”, which is needed for `interrupt`.
            fields ? Object.assign(Object.create(context2), fields) : context2,
            effects,
            ok2,
            nok
          )(code2);
        }
      }
      function ok2(code2) {
        onreturn(currentConstruct, info);
        return returnState;
      }
      function nok(code2) {
        info.restore();
        if (++constructIndex < listOfConstructs.length) {
          return handleConstruct(listOfConstructs[constructIndex]);
        }
        return bogusState;
      }
    }
  }
  function addResult(construct2, from2) {
    if (construct2.resolveAll && !resolveAllConstructs.includes(construct2)) {
      resolveAllConstructs.push(construct2);
    }
    if (construct2.resolve) {
      splice(
        context2.events,
        from2,
        context2.events.length - from2,
        construct2.resolve(context2.events.slice(from2), context2)
      );
    }
    if (construct2.resolveTo) {
      context2.events = construct2.resolveTo(context2.events, context2);
    }
  }
  function store() {
    const startPoint = now();
    const startPrevious = context2.previous;
    const startCurrentConstruct = context2.currentConstruct;
    const startEventsIndex = context2.events.length;
    const startStack = Array.from(stack);
    return {
      restore,
      from: startEventsIndex
    };
    function restore() {
      point2 = startPoint;
      context2.previous = startPrevious;
      context2.currentConstruct = startCurrentConstruct;
      context2.events.length = startEventsIndex;
      stack = startStack;
      accountForPotentialSkip();
    }
  }
  function accountForPotentialSkip() {
    if (point2.line in columnStart && point2.column < 2) {
      point2.column = columnStart[point2.line];
      point2.offset += columnStart[point2.line] - 1;
    }
  }
}
function sliceChunks(chunks, token) {
  const startIndex = token.start._index;
  const startBufferIndex = token.start._bufferIndex;
  const endIndex = token.end._index;
  const endBufferIndex = token.end._bufferIndex;
  let view;
  if (startIndex === endIndex) {
    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
  } else {
    view = chunks.slice(startIndex, endIndex);
    if (startBufferIndex > -1) {
      const head = view[0];
      if (typeof head === "string") {
        view[0] = head.slice(startBufferIndex);
      } else {
        view.shift();
      }
    }
    if (endBufferIndex > 0) {
      view.push(chunks[endIndex].slice(0, endBufferIndex));
    }
  }
  return view;
}
function serializeChunks(chunks, expandTabs) {
  let index2 = -1;
  const result = [];
  let atTab;
  while (++index2 < chunks.length) {
    const chunk = chunks[index2];
    let value2;
    if (typeof chunk === "string") {
      value2 = chunk;
    } else
      switch (chunk) {
        case -5: {
          value2 = "\r";
          break;
        }
        case -4: {
          value2 = "\n";
          break;
        }
        case -3: {
          value2 = "\r\n";
          break;
        }
        case -2: {
          value2 = expandTabs ? " " : "	";
          break;
        }
        case -1: {
          if (!expandTabs && atTab)
            continue;
          value2 = " ";
          break;
        }
        default: {
          value2 = String.fromCharCode(chunk);
        }
      }
    atTab = chunk === -2;
    result.push(value2);
  }
  return result.join("");
}
const document = {
  [42]: list,
  [43]: list,
  [45]: list,
  [48]: list,
  [49]: list,
  [50]: list,
  [51]: list,
  [52]: list,
  [53]: list,
  [54]: list,
  [55]: list,
  [56]: list,
  [57]: list,
  [62]: blockQuote
};
const contentInitial = {
  [91]: definition
};
const flowInitial = {
  [-2]: codeIndented,
  [-1]: codeIndented,
  [32]: codeIndented
};
const flow = {
  [35]: headingAtx,
  [42]: thematicBreak,
  [45]: [setextUnderline, thematicBreak],
  [60]: htmlFlow,
  [61]: setextUnderline,
  [95]: thematicBreak,
  [96]: codeFenced,
  [126]: codeFenced
};
const string = {
  [38]: characterReference,
  [92]: characterEscape
};
const text$1 = {
  [-5]: lineEnding,
  [-4]: lineEnding,
  [-3]: lineEnding,
  [33]: labelStartImage,
  [38]: characterReference,
  [42]: attention,
  [60]: [autolink, htmlText],
  [91]: labelStartLink,
  [92]: [hardBreakEscape, characterEscape],
  [93]: labelEnd,
  [95]: attention,
  [96]: codeText
};
const insideSpan = {
  null: [attention, resolver]
};
const attentionMarkers = {
  null: [42, 95]
};
const disable = {
  null: []
};
const defaultConstructs = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  attentionMarkers,
  contentInitial,
  disable,
  document,
  flow,
  flowInitial,
  insideSpan,
  string,
  text: text$1
}, Symbol.toStringTag, { value: "Module" }));
function parse(options) {
  const settings2 = options || {};
  const constructs2 = (
    /** @type {FullNormalizedExtension} */
    combineExtensions([defaultConstructs, ...settings2.extensions || []])
  );
  const parser = {
    defined: [],
    lazy: {},
    constructs: constructs2,
    content: create2(content$1),
    document: create2(document$1),
    flow: create2(flow$1),
    string: create2(string$1),
    text: create2(text$2)
  };
  return parser;
  function create2(initial) {
    return creator;
    function creator(from) {
      return createTokenizer(parser, initial, from);
    }
  }
}
const search = /[\0\t\n\r]/g;
function preprocess() {
  let column = 1;
  let buffer2 = "";
  let start = true;
  let atCarriageReturn;
  return preprocessor;
  function preprocessor(value2, encoding, end) {
    const chunks = [];
    let match;
    let next;
    let startPosition;
    let endPosition;
    let code2;
    value2 = buffer2 + value2.toString(encoding);
    startPosition = 0;
    buffer2 = "";
    if (start) {
      if (value2.charCodeAt(0) === 65279) {
        startPosition++;
      }
      start = void 0;
    }
    while (startPosition < value2.length) {
      search.lastIndex = startPosition;
      match = search.exec(value2);
      endPosition = match && match.index !== void 0 ? match.index : value2.length;
      code2 = value2.charCodeAt(endPosition);
      if (!match) {
        buffer2 = value2.slice(startPosition);
        break;
      }
      if (code2 === 10 && startPosition === endPosition && atCarriageReturn) {
        chunks.push(-3);
        atCarriageReturn = void 0;
      } else {
        if (atCarriageReturn) {
          chunks.push(-5);
          atCarriageReturn = void 0;
        }
        if (startPosition < endPosition) {
          chunks.push(value2.slice(startPosition, endPosition));
          column += endPosition - startPosition;
        }
        switch (code2) {
          case 0: {
            chunks.push(65533);
            column++;
            break;
          }
          case 9: {
            next = Math.ceil(column / 4) * 4;
            chunks.push(-2);
            while (column++ < next)
              chunks.push(-1);
            break;
          }
          case 10: {
            chunks.push(-4);
            column = 1;
            break;
          }
          default: {
            atCarriageReturn = true;
            column = 1;
          }
        }
      }
      startPosition = endPosition + 1;
    }
    if (end) {
      if (atCarriageReturn)
        chunks.push(-5);
      if (buffer2)
        chunks.push(buffer2);
      chunks.push(null);
    }
    return chunks;
  }
}
function postprocess(events2) {
  while (!subtokenize(events2)) {
  }
  return events2;
}
function decodeNumericCharacterReference(value2, base2) {
  const code2 = Number.parseInt(value2, base2);
  if (
    // C0 except for HT, LF, FF, CR, space.
    code2 < 9 || code2 === 11 || code2 > 13 && code2 < 32 || // Control character (DEL) of C0, and C1 controls.
    code2 > 126 && code2 < 160 || // Lone high surrogates and low surrogates.
    code2 > 55295 && code2 < 57344 || // Noncharacters.
    code2 > 64975 && code2 < 65008 || (code2 & 65535) === 65535 || (code2 & 65535) === 65534 || // Out of range
    code2 > 1114111
  ) {
    return "�";
  }
  return String.fromCharCode(code2);
}
const characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function decodeString(value2) {
  return value2.replace(characterEscapeOrReference, decode);
}
function decode($0, $1, $2) {
  if ($1) {
    return $1;
  }
  const head = $2.charCodeAt(0);
  if (head === 35) {
    const head2 = $2.charCodeAt(1);
    const hex = head2 === 120 || head2 === 88;
    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);
  }
  return decodeNamedCharacterReference($2) || $0;
}
const own$2 = {}.hasOwnProperty;
const fromMarkdown = (
  /**
   * @type {(
   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &
   *   ((value: Value, options?: Options | null | undefined) => Root)
   * )}
   */
  /**
   * @param {Value} value
   * @param {Encoding | Options | null | undefined} [encoding]
   * @param {Options | null | undefined} [options]
   * @returns {Root}
   */
  function(value2, encoding, options) {
    if (typeof encoding !== "string") {
      options = encoding;
      encoding = void 0;
    }
    return compiler(options)(
      postprocess(
        parse(options).document().write(preprocess()(value2, encoding, true))
      )
    );
  }
);
function compiler(options) {
  const config = {
    transforms: [],
    canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
    enter: {
      autolink: opener2(link2),
      autolinkProtocol: onenterdata,
      autolinkEmail: onenterdata,
      atxHeading: opener2(heading),
      blockQuote: opener2(blockQuote2),
      characterEscape: onenterdata,
      characterReference: onenterdata,
      codeFenced: opener2(codeFlow),
      codeFencedFenceInfo: buffer2,
      codeFencedFenceMeta: buffer2,
      codeIndented: opener2(codeFlow, buffer2),
      codeText: opener2(codeText2, buffer2),
      codeTextData: onenterdata,
      data: onenterdata,
      codeFlowValue: onenterdata,
      definition: opener2(definition2),
      definitionDestinationString: buffer2,
      definitionLabelString: buffer2,
      definitionTitleString: buffer2,
      emphasis: opener2(emphasis),
      hardBreakEscape: opener2(hardBreak),
      hardBreakTrailing: opener2(hardBreak),
      htmlFlow: opener2(html, buffer2),
      htmlFlowData: onenterdata,
      htmlText: opener2(html, buffer2),
      htmlTextData: onenterdata,
      image: opener2(image),
      label: buffer2,
      link: opener2(link2),
      listItem: opener2(listItem2),
      listItemValue: onenterlistitemvalue,
      listOrdered: opener2(list2, onenterlistordered),
      listUnordered: opener2(list2),
      paragraph: opener2(paragraph),
      reference: onenterreference,
      referenceString: buffer2,
      resourceDestinationString: buffer2,
      resourceTitleString: buffer2,
      setextHeading: opener2(heading),
      strong: opener2(strong),
      thematicBreak: opener2(thematicBreak2)
    },
    exit: {
      atxHeading: closer(),
      atxHeadingSequence: onexitatxheadingsequence,
      autolink: closer(),
      autolinkEmail: onexitautolinkemail,
      autolinkProtocol: onexitautolinkprotocol,
      blockQuote: closer(),
      characterEscapeValue: onexitdata,
      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
      characterReferenceValue: onexitcharacterreferencevalue,
      codeFenced: closer(onexitcodefenced),
      codeFencedFence: onexitcodefencedfence,
      codeFencedFenceInfo: onexitcodefencedfenceinfo,
      codeFencedFenceMeta: onexitcodefencedfencemeta,
      codeFlowValue: onexitdata,
      codeIndented: closer(onexitcodeindented),
      codeText: closer(onexitcodetext),
      codeTextData: onexitdata,
      data: onexitdata,
      definition: closer(),
      definitionDestinationString: onexitdefinitiondestinationstring,
      definitionLabelString: onexitdefinitionlabelstring,
      definitionTitleString: onexitdefinitiontitlestring,
      emphasis: closer(),
      hardBreakEscape: closer(onexithardbreak),
      hardBreakTrailing: closer(onexithardbreak),
      htmlFlow: closer(onexithtmlflow),
      htmlFlowData: onexitdata,
      htmlText: closer(onexithtmltext),
      htmlTextData: onexitdata,
      image: closer(onexitimage),
      label: onexitlabel,
      labelText: onexitlabeltext,
      lineEnding: onexitlineending,
      link: closer(onexitlink),
      listItem: closer(),
      listOrdered: closer(),
      listUnordered: closer(),
      paragraph: closer(),
      referenceString: onexitreferencestring,
      resourceDestinationString: onexitresourcedestinationstring,
      resourceTitleString: onexitresourcetitlestring,
      resource: onexitresource,
      setextHeading: closer(onexitsetextheading),
      setextHeadingLineSequence: onexitsetextheadinglinesequence,
      setextHeadingText: onexitsetextheadingtext,
      strong: closer(),
      thematicBreak: closer()
    }
  };
  configure(config, (options || {}).mdastExtensions || []);
  const data = {};
  return compile2;
  function compile2(events2) {
    let tree = {
      type: "root",
      children: []
    };
    const context2 = {
      stack: [tree],
      tokenStack: [],
      config,
      enter,
      exit: exit2,
      buffer: buffer2,
      resume,
      setData,
      getData
    };
    const listStack = [];
    let index2 = -1;
    while (++index2 < events2.length) {
      if (events2[index2][1].type === "listOrdered" || events2[index2][1].type === "listUnordered") {
        if (events2[index2][0] === "enter") {
          listStack.push(index2);
        } else {
          const tail = listStack.pop();
          index2 = prepareList(events2, tail, index2);
        }
      }
    }
    index2 = -1;
    while (++index2 < events2.length) {
      const handler2 = config[events2[index2][0]];
      if (own$2.call(handler2, events2[index2][1].type)) {
        handler2[events2[index2][1].type].call(
          Object.assign(
            {
              sliceSerialize: events2[index2][2].sliceSerialize
            },
            context2
          ),
          events2[index2][1]
        );
      }
    }
    if (context2.tokenStack.length > 0) {
      const tail = context2.tokenStack[context2.tokenStack.length - 1];
      const handler2 = tail[1] || defaultOnError;
      handler2.call(context2, void 0, tail[0]);
    }
    tree.position = {
      start: point(
        events2.length > 0 ? events2[0][1].start : {
          line: 1,
          column: 1,
          offset: 0
        }
      ),
      end: point(
        events2.length > 0 ? events2[events2.length - 2][1].end : {
          line: 1,
          column: 1,
          offset: 0
        }
      )
    };
    index2 = -1;
    while (++index2 < config.transforms.length) {
      tree = config.transforms[index2](tree) || tree;
    }
    return tree;
  }
  function prepareList(events2, start, length) {
    let index2 = start - 1;
    let containerBalance = -1;
    let listSpread = false;
    let listItem3;
    let lineIndex;
    let firstBlankLineIndex;
    let atMarker;
    while (++index2 <= length) {
      const event = events2[index2];
      if (event[1].type === "listUnordered" || event[1].type === "listOrdered" || event[1].type === "blockQuote") {
        if (event[0] === "enter") {
          containerBalance++;
        } else {
          containerBalance--;
        }
        atMarker = void 0;
      } else if (event[1].type === "lineEndingBlank") {
        if (event[0] === "enter") {
          if (listItem3 && !atMarker && !containerBalance && !firstBlankLineIndex) {
            firstBlankLineIndex = index2;
          }
          atMarker = void 0;
        }
      } else if (event[1].type === "linePrefix" || event[1].type === "listItemValue" || event[1].type === "listItemMarker" || event[1].type === "listItemPrefix" || event[1].type === "listItemPrefixWhitespace")
        ;
      else {
        atMarker = void 0;
      }
      if (!containerBalance && event[0] === "enter" && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === "exit" && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
        if (listItem3) {
          let tailIndex = index2;
          lineIndex = void 0;
          while (tailIndex--) {
            const tailEvent = events2[tailIndex];
            if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
              if (tailEvent[0] === "exit")
                continue;
              if (lineIndex) {
                events2[lineIndex][1].type = "lineEndingBlank";
                listSpread = true;
              }
              tailEvent[1].type = "lineEnding";
              lineIndex = tailIndex;
            } else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent")
              ;
            else {
              break;
            }
          }
          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
            listItem3._spread = true;
          }
          listItem3.end = Object.assign(
            {},
            lineIndex ? events2[lineIndex][1].start : event[1].end
          );
          events2.splice(lineIndex || index2, 0, ["exit", listItem3, event[2]]);
          index2++;
          length++;
        }
        if (event[1].type === "listItemPrefix") {
          listItem3 = {
            type: "listItem",
            _spread: false,
            start: Object.assign({}, event[1].start),
            // @ts-expect-error: we’ll add `end` in a second.
            end: void 0
          };
          events2.splice(index2, 0, ["enter", listItem3, event[2]]);
          index2++;
          length++;
          firstBlankLineIndex = void 0;
          atMarker = true;
        }
      }
    }
    events2[start][1]._spread = listSpread;
    return length;
  }
  function setData(key, value2) {
    data[key] = value2;
  }
  function getData(key) {
    return data[key];
  }
  function opener2(create2, and) {
    return open;
    function open(token) {
      enter.call(this, create2(token), token);
      if (and)
        and.call(this, token);
    }
  }
  function buffer2() {
    this.stack.push({
      type: "fragment",
      children: []
    });
  }
  function enter(node2, token, errorHandler) {
    const parent = this.stack[this.stack.length - 1];
    parent.children.push(node2);
    this.stack.push(node2);
    this.tokenStack.push([token, errorHandler]);
    node2.position = {
      start: point(token.start)
    };
    return node2;
  }
  function closer(and) {
    return close2;
    function close2(token) {
      if (and)
        and.call(this, token);
      exit2.call(this, token);
    }
  }
  function exit2(token, onExitError) {
    const node2 = this.stack.pop();
    const open = this.tokenStack.pop();
    if (!open) {
      throw new Error(
        "Cannot close `" + token.type + "` (" + stringifyPosition({
          start: token.start,
          end: token.end
        }) + "): it’s not open"
      );
    } else if (open[0].type !== token.type) {
      if (onExitError) {
        onExitError.call(this, token, open[0]);
      } else {
        const handler2 = open[1] || defaultOnError;
        handler2.call(this, token, open[0]);
      }
    }
    node2.position.end = point(token.end);
    return node2;
  }
  function resume() {
    return toString(this.stack.pop());
  }
  function onenterlistordered() {
    setData("expectingFirstListItemValue", true);
  }
  function onenterlistitemvalue(token) {
    if (getData("expectingFirstListItemValue")) {
      const ancestor = this.stack[this.stack.length - 2];
      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
      setData("expectingFirstListItemValue");
    }
  }
  function onexitcodefencedfenceinfo() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.lang = data2;
  }
  function onexitcodefencedfencemeta() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.meta = data2;
  }
  function onexitcodefencedfence() {
    if (getData("flowCodeInside"))
      return;
    this.buffer();
    setData("flowCodeInside", true);
  }
  function onexitcodefenced() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
    setData("flowCodeInside");
  }
  function onexitcodeindented() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2.replace(/(\r?\n|\r)$/g, "");
  }
  function onexitdefinitionlabelstring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(
      this.sliceSerialize(token)
    ).toLowerCase();
  }
  function onexitdefinitiontitlestring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.title = data2;
  }
  function onexitdefinitiondestinationstring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.url = data2;
  }
  function onexitatxheadingsequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    if (!node2.depth) {
      const depth2 = this.sliceSerialize(token).length;
      node2.depth = depth2;
    }
  }
  function onexitsetextheadingtext() {
    setData("setextHeadingSlurpLineEnding", true);
  }
  function onexitsetextheadinglinesequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    node2.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;
  }
  function onexitsetextheading() {
    setData("setextHeadingSlurpLineEnding");
  }
  function onenterdata(token) {
    const node2 = this.stack[this.stack.length - 1];
    let tail = node2.children[node2.children.length - 1];
    if (!tail || tail.type !== "text") {
      tail = text2();
      tail.position = {
        start: point(token.start)
      };
      node2.children.push(tail);
    }
    this.stack.push(tail);
  }
  function onexitdata(token) {
    const tail = this.stack.pop();
    tail.value += this.sliceSerialize(token);
    tail.position.end = point(token.end);
  }
  function onexitlineending(token) {
    const context2 = this.stack[this.stack.length - 1];
    if (getData("atHardBreak")) {
      const tail = context2.children[context2.children.length - 1];
      tail.position.end = point(token.end);
      setData("atHardBreak");
      return;
    }
    if (!getData("setextHeadingSlurpLineEnding") && config.canContainEols.includes(context2.type)) {
      onenterdata.call(this, token);
      onexitdata.call(this, token);
    }
  }
  function onexithardbreak() {
    setData("atHardBreak", true);
  }
  function onexithtmlflow() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2;
  }
  function onexithtmltext() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2;
  }
  function onexitcodetext() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2;
  }
  function onexitlink() {
    const node2 = this.stack[this.stack.length - 1];
    if (getData("inReference")) {
      const referenceType = getData("referenceType") || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    setData("referenceType");
  }
  function onexitimage() {
    const node2 = this.stack[this.stack.length - 1];
    if (getData("inReference")) {
      const referenceType = getData("referenceType") || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    setData("referenceType");
  }
  function onexitlabeltext(token) {
    const string2 = this.sliceSerialize(token);
    const ancestor = this.stack[this.stack.length - 2];
    ancestor.label = decodeString(string2);
    ancestor.identifier = normalizeIdentifier(string2).toLowerCase();
  }
  function onexitlabel() {
    const fragment = this.stack[this.stack.length - 1];
    const value2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    setData("inReference", true);
    if (node2.type === "link") {
      const children = fragment.children;
      node2.children = children;
    } else {
      node2.alt = value2;
    }
  }
  function onexitresourcedestinationstring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.url = data2;
  }
  function onexitresourcetitlestring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.title = data2;
  }
  function onexitresource() {
    setData("inReference");
  }
  function onenterreference() {
    setData("referenceType", "collapsed");
  }
  function onexitreferencestring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(
      this.sliceSerialize(token)
    ).toLowerCase();
    setData("referenceType", "full");
  }
  function onexitcharacterreferencemarker(token) {
    setData("characterReferenceType", token.type);
  }
  function onexitcharacterreferencevalue(token) {
    const data2 = this.sliceSerialize(token);
    const type2 = getData("characterReferenceType");
    let value2;
    if (type2) {
      value2 = decodeNumericCharacterReference(
        data2,
        type2 === "characterReferenceMarkerNumeric" ? 10 : 16
      );
      setData("characterReferenceType");
    } else {
      const result = decodeNamedCharacterReference(data2);
      value2 = result;
    }
    const tail = this.stack.pop();
    tail.value += value2;
    tail.position.end = point(token.end);
  }
  function onexitautolinkprotocol(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    node2.url = this.sliceSerialize(token);
  }
  function onexitautolinkemail(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    node2.url = "mailto:" + this.sliceSerialize(token);
  }
  function blockQuote2() {
    return {
      type: "blockquote",
      children: []
    };
  }
  function codeFlow() {
    return {
      type: "code",
      lang: null,
      meta: null,
      value: ""
    };
  }
  function codeText2() {
    return {
      type: "inlineCode",
      value: ""
    };
  }
  function definition2() {
    return {
      type: "definition",
      identifier: "",
      label: null,
      title: null,
      url: ""
    };
  }
  function emphasis() {
    return {
      type: "emphasis",
      children: []
    };
  }
  function heading() {
    return {
      type: "heading",
      depth: void 0,
      children: []
    };
  }
  function hardBreak() {
    return {
      type: "break"
    };
  }
  function html() {
    return {
      type: "html",
      value: ""
    };
  }
  function image() {
    return {
      type: "image",
      title: null,
      url: "",
      alt: null
    };
  }
  function link2() {
    return {
      type: "link",
      title: null,
      url: "",
      children: []
    };
  }
  function list2(token) {
    return {
      type: "list",
      ordered: token.type === "listOrdered",
      start: null,
      spread: token._spread,
      children: []
    };
  }
  function listItem2(token) {
    return {
      type: "listItem",
      spread: token._spread,
      checked: null,
      children: []
    };
  }
  function paragraph() {
    return {
      type: "paragraph",
      children: []
    };
  }
  function strong() {
    return {
      type: "strong",
      children: []
    };
  }
  function text2() {
    return {
      type: "text",
      value: ""
    };
  }
  function thematicBreak2() {
    return {
      type: "thematicBreak"
    };
  }
}
function point(d) {
  return {
    line: d.line,
    column: d.column,
    offset: d.offset
  };
}
function configure(combined, extensions) {
  let index2 = -1;
  while (++index2 < extensions.length) {
    const value2 = extensions[index2];
    if (Array.isArray(value2)) {
      configure(combined, value2);
    } else {
      extension(combined, value2);
    }
  }
}
function extension(combined, extension2) {
  let key;
  for (key in extension2) {
    if (own$2.call(extension2, key)) {
      if (key === "canContainEols") {
        const right = extension2[key];
        if (right) {
          combined[key].push(...right);
        }
      } else if (key === "transforms") {
        const right = extension2[key];
        if (right) {
          combined[key].push(...right);
        }
      } else if (key === "enter" || key === "exit") {
        const right = extension2[key];
        if (right) {
          Object.assign(combined[key], right);
        }
      }
    }
  }
}
function defaultOnError(left, right) {
  if (left) {
    throw new Error(
      "Cannot close `" + left.type + "` (" + stringifyPosition({
        start: left.start,
        end: left.end
      }) + "): a different token (`" + right.type + "`, " + stringifyPosition({
        start: right.start,
        end: right.end
      }) + ") is open"
    );
  } else {
    throw new Error(
      "Cannot close document, a token (`" + right.type + "`, " + stringifyPosition({
        start: right.start,
        end: right.end
      }) + ") is still open"
    );
  }
}
function remarkParse(options) {
  const parser = (doc) => {
    const settings2 = (
      /** @type {Options} */
      this.data("settings")
    );
    return fromMarkdown(
      doc,
      Object.assign({}, settings2, options, {
        // Note: these options are not in the readme.
        // The goal is for them to be set by plugins on `data` instead of being
        // passed by users.
        extensions: this.data("micromarkExtensions") || [],
        mdastExtensions: this.data("fromMarkdownExtensions") || []
      })
    );
  };
  Object.assign(this, { Parser: parser });
}
const wwwPrefix = {
  tokenize: tokenizeWwwPrefix,
  partial: true
};
const domain = {
  tokenize: tokenizeDomain,
  partial: true
};
const path = {
  tokenize: tokenizePath,
  partial: true
};
const trail = {
  tokenize: tokenizeTrail,
  partial: true
};
const emailDomainDotTrail = {
  tokenize: tokenizeEmailDomainDotTrail,
  partial: true
};
const wwwAutolink = {
  tokenize: tokenizeWwwAutolink,
  previous: previousWww
};
const protocolAutolink = {
  tokenize: tokenizeProtocolAutolink,
  previous: previousProtocol
};
const emailAutolink = {
  tokenize: tokenizeEmailAutolink,
  previous: previousEmail
};
const text = {};
const gfmAutolinkLiteral = {
  text
};
let code = 48;
while (code < 123) {
  text[code] = emailAutolink;
  code++;
  if (code === 58)
    code = 65;
  else if (code === 91)
    code = 97;
}
text[43] = emailAutolink;
text[45] = emailAutolink;
text[46] = emailAutolink;
text[95] = emailAutolink;
text[72] = [emailAutolink, protocolAutolink];
text[104] = [emailAutolink, protocolAutolink];
text[87] = [emailAutolink, wwwAutolink];
text[119] = [emailAutolink, wwwAutolink];
function tokenizeEmailAutolink(effects, ok2, nok) {
  const self2 = this;
  let dot;
  let data;
  return start;
  function start(code2) {
    if (!gfmAtext(code2) || !previousEmail.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code2);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkEmail");
    return atext(code2);
  }
  function atext(code2) {
    if (gfmAtext(code2)) {
      effects.consume(code2);
      return atext;
    }
    if (code2 === 64) {
      effects.consume(code2);
      return emailDomain;
    }
    return nok(code2);
  }
  function emailDomain(code2) {
    if (code2 === 46) {
      return effects.check(
        emailDomainDotTrail,
        emailDomainAfter,
        emailDomainDot
      )(code2);
    }
    if (code2 === 45 || code2 === 95 || asciiAlphanumeric(code2)) {
      data = true;
      effects.consume(code2);
      return emailDomain;
    }
    return emailDomainAfter(code2);
  }
  function emailDomainDot(code2) {
    effects.consume(code2);
    dot = true;
    return emailDomain;
  }
  function emailDomainAfter(code2) {
    if (data && dot && asciiAlpha(self2.previous)) {
      effects.exit("literalAutolinkEmail");
      effects.exit("literalAutolink");
      return ok2(code2);
    }
    return nok(code2);
  }
}
function tokenizeWwwAutolink(effects, ok2, nok) {
  const self2 = this;
  return wwwStart;
  function wwwStart(code2) {
    if (code2 !== 87 && code2 !== 119 || !previousWww.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code2);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkWww");
    return effects.check(
      wwwPrefix,
      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),
      nok
    )(code2);
  }
  function wwwAfter(code2) {
    effects.exit("literalAutolinkWww");
    effects.exit("literalAutolink");
    return ok2(code2);
  }
}
function tokenizeProtocolAutolink(effects, ok2, nok) {
  const self2 = this;
  let buffer2 = "";
  let seen = false;
  return protocolStart;
  function protocolStart(code2) {
    if ((code2 === 72 || code2 === 104) && previousProtocol.call(self2, self2.previous) && !previousUnbalanced(self2.events)) {
      effects.enter("literalAutolink");
      effects.enter("literalAutolinkHttp");
      buffer2 += String.fromCodePoint(code2);
      effects.consume(code2);
      return protocolPrefixInside;
    }
    return nok(code2);
  }
  function protocolPrefixInside(code2) {
    if (asciiAlpha(code2) && buffer2.length < 5) {
      buffer2 += String.fromCodePoint(code2);
      effects.consume(code2);
      return protocolPrefixInside;
    }
    if (code2 === 58) {
      const protocol = buffer2.toLowerCase();
      if (protocol === "http" || protocol === "https") {
        effects.consume(code2);
        return protocolSlashesInside;
      }
    }
    return nok(code2);
  }
  function protocolSlashesInside(code2) {
    if (code2 === 47) {
      effects.consume(code2);
      if (seen) {
        return afterProtocol;
      }
      seen = true;
      return protocolSlashesInside;
    }
    return nok(code2);
  }
  function afterProtocol(code2) {
    return code2 === null || asciiControl(code2) || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2) || unicodePunctuation(code2) ? nok(code2) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code2);
  }
  function protocolAfter(code2) {
    effects.exit("literalAutolinkHttp");
    effects.exit("literalAutolink");
    return ok2(code2);
  }
}
function tokenizeWwwPrefix(effects, ok2, nok) {
  let size = 0;
  return wwwPrefixInside;
  function wwwPrefixInside(code2) {
    if ((code2 === 87 || code2 === 119) && size < 3) {
      size++;
      effects.consume(code2);
      return wwwPrefixInside;
    }
    if (code2 === 46 && size === 3) {
      effects.consume(code2);
      return wwwPrefixAfter;
    }
    return nok(code2);
  }
  function wwwPrefixAfter(code2) {
    return code2 === null ? nok(code2) : ok2(code2);
  }
}
function tokenizeDomain(effects, ok2, nok) {
  let underscoreInLastSegment;
  let underscoreInLastLastSegment;
  let seen;
  return domainInside;
  function domainInside(code2) {
    if (code2 === 46 || code2 === 95) {
      return effects.check(trail, domainAfter, domainAtPunctuation)(code2);
    }
    if (code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2) || code2 !== 45 && unicodePunctuation(code2)) {
      return domainAfter(code2);
    }
    seen = true;
    effects.consume(code2);
    return domainInside;
  }
  function domainAtPunctuation(code2) {
    if (code2 === 95) {
      underscoreInLastSegment = true;
    } else {
      underscoreInLastLastSegment = underscoreInLastSegment;
      underscoreInLastSegment = void 0;
    }
    effects.consume(code2);
    return domainInside;
  }
  function domainAfter(code2) {
    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {
      return nok(code2);
    }
    return ok2(code2);
  }
}
function tokenizePath(effects, ok2) {
  let sizeOpen = 0;
  let sizeClose = 0;
  return pathInside;
  function pathInside(code2) {
    if (code2 === 40) {
      sizeOpen++;
      effects.consume(code2);
      return pathInside;
    }
    if (code2 === 41 && sizeClose < sizeOpen) {
      return pathAtPunctuation(code2);
    }
    if (code2 === 33 || code2 === 34 || code2 === 38 || code2 === 39 || code2 === 41 || code2 === 42 || code2 === 44 || code2 === 46 || code2 === 58 || code2 === 59 || code2 === 60 || code2 === 63 || code2 === 93 || code2 === 95 || code2 === 126) {
      return effects.check(trail, ok2, pathAtPunctuation)(code2);
    }
    if (code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)) {
      return ok2(code2);
    }
    effects.consume(code2);
    return pathInside;
  }
  function pathAtPunctuation(code2) {
    if (code2 === 41) {
      sizeClose++;
    }
    effects.consume(code2);
    return pathInside;
  }
}
function tokenizeTrail(effects, ok2, nok) {
  return trail2;
  function trail2(code2) {
    if (code2 === 33 || code2 === 34 || code2 === 39 || code2 === 41 || code2 === 42 || code2 === 44 || code2 === 46 || code2 === 58 || code2 === 59 || code2 === 63 || code2 === 95 || code2 === 126) {
      effects.consume(code2);
      return trail2;
    }
    if (code2 === 38) {
      effects.consume(code2);
      return trailCharRefStart;
    }
    if (code2 === 93) {
      effects.consume(code2);
      return trailBracketAfter;
    }
    if (
      // `<` is an end.
      code2 === 60 || // So is whitespace.
      code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)
    ) {
      return ok2(code2);
    }
    return nok(code2);
  }
  function trailBracketAfter(code2) {
    if (code2 === null || code2 === 40 || code2 === 91 || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)) {
      return ok2(code2);
    }
    return trail2(code2);
  }
  function trailCharRefStart(code2) {
    return asciiAlpha(code2) ? trailCharRefInside(code2) : nok(code2);
  }
  function trailCharRefInside(code2) {
    if (code2 === 59) {
      effects.consume(code2);
      return trail2;
    }
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      return trailCharRefInside;
    }
    return nok(code2);
  }
}
function tokenizeEmailDomainDotTrail(effects, ok2, nok) {
  return start;
  function start(code2) {
    effects.consume(code2);
    return after;
  }
  function after(code2) {
    return asciiAlphanumeric(code2) ? nok(code2) : ok2(code2);
  }
}
function previousWww(code2) {
  return code2 === null || code2 === 40 || code2 === 42 || code2 === 95 || code2 === 91 || code2 === 93 || code2 === 126 || markdownLineEndingOrSpace(code2);
}
function previousProtocol(code2) {
  return !asciiAlpha(code2);
}
function previousEmail(code2) {
  return !(code2 === 47 || gfmAtext(code2));
}
function gfmAtext(code2) {
  return code2 === 43 || code2 === 45 || code2 === 46 || code2 === 95 || asciiAlphanumeric(code2);
}
function previousUnbalanced(events2) {
  let index2 = events2.length;
  let result = false;
  while (index2--) {
    const token = events2[index2][1];
    if ((token.type === "labelLink" || token.type === "labelImage") && !token._balanced) {
      result = true;
      break;
    }
    if (token._gfmAutolinkLiteralWalkedInto) {
      result = false;
      break;
    }
  }
  if (events2.length > 0 && !result) {
    events2[events2.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
  }
  return result;
}
const indent = {
  tokenize: tokenizeIndent,
  partial: true
};
function gfmFootnote() {
  return {
    document: {
      [91]: {
        tokenize: tokenizeDefinitionStart,
        continuation: {
          tokenize: tokenizeDefinitionContinuation
        },
        exit: gfmFootnoteDefinitionEnd
      }
    },
    text: {
      [91]: {
        tokenize: tokenizeGfmFootnoteCall
      },
      [93]: {
        add: "after",
        tokenize: tokenizePotentialGfmFootnoteCall,
        resolveTo: resolveToPotentialGfmFootnoteCall
      }
    }
  };
}
function tokenizePotentialGfmFootnoteCall(effects, ok2, nok) {
  const self2 = this;
  let index2 = self2.events.length;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let labelStart;
  while (index2--) {
    const token = self2.events[index2][1];
    if (token.type === "labelImage") {
      labelStart = token;
      break;
    }
    if (token.type === "gfmFootnoteCall" || token.type === "labelLink" || token.type === "label" || token.type === "image" || token.type === "link") {
      break;
    }
  }
  return start;
  function start(code2) {
    if (!labelStart || !labelStart._balanced) {
      return nok(code2);
    }
    const id = normalizeIdentifier(
      self2.sliceSerialize({
        start: labelStart.end,
        end: self2.now()
      })
    );
    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {
      return nok(code2);
    }
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code2);
    effects.exit("gfmFootnoteCallLabelMarker");
    return ok2(code2);
  }
}
function resolveToPotentialGfmFootnoteCall(events2, context2) {
  let index2 = events2.length;
  while (index2--) {
    if (events2[index2][1].type === "labelImage" && events2[index2][0] === "enter") {
      events2[index2][1];
      break;
    }
  }
  events2[index2 + 1][1].type = "data";
  events2[index2 + 3][1].type = "gfmFootnoteCallLabelMarker";
  const call = {
    type: "gfmFootnoteCall",
    start: Object.assign({}, events2[index2 + 3][1].start),
    end: Object.assign({}, events2[events2.length - 1][1].end)
  };
  const marker = {
    type: "gfmFootnoteCallMarker",
    start: Object.assign({}, events2[index2 + 3][1].end),
    end: Object.assign({}, events2[index2 + 3][1].end)
  };
  marker.end.column++;
  marker.end.offset++;
  marker.end._bufferIndex++;
  const string2 = {
    type: "gfmFootnoteCallString",
    start: Object.assign({}, marker.end),
    end: Object.assign({}, events2[events2.length - 1][1].start)
  };
  const chunk = {
    type: "chunkString",
    contentType: "string",
    start: Object.assign({}, string2.start),
    end: Object.assign({}, string2.end)
  };
  const replacement = [
    // Take the `labelImageMarker` (now `data`, the `!`)
    events2[index2 + 1],
    events2[index2 + 2],
    ["enter", call, context2],
    // The `[`
    events2[index2 + 3],
    events2[index2 + 4],
    // The `^`.
    ["enter", marker, context2],
    ["exit", marker, context2],
    // Everything in between.
    ["enter", string2, context2],
    ["enter", chunk, context2],
    ["exit", chunk, context2],
    ["exit", string2, context2],
    // The ending (`]`, properly parsed and labelled).
    events2[events2.length - 2],
    events2[events2.length - 1],
    ["exit", call, context2]
  ];
  events2.splice(index2, events2.length - index2 + 1, ...replacement);
  return events2;
}
function tokenizeGfmFootnoteCall(effects, ok2, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let size = 0;
  let data;
  return start;
  function start(code2) {
    effects.enter("gfmFootnoteCall");
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code2);
    effects.exit("gfmFootnoteCallLabelMarker");
    return callStart;
  }
  function callStart(code2) {
    if (code2 !== 94)
      return nok(code2);
    effects.enter("gfmFootnoteCallMarker");
    effects.consume(code2);
    effects.exit("gfmFootnoteCallMarker");
    effects.enter("gfmFootnoteCallString");
    effects.enter("chunkString").contentType = "string";
    return callData;
  }
  function callData(code2) {
    if (
      // Too long.
      size > 999 || // Closing brace with nothing.
      code2 === 93 && !data || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code2 === null || code2 === 91 || markdownLineEndingOrSpace(code2)
    ) {
      return nok(code2);
    }
    if (code2 === 93) {
      effects.exit("chunkString");
      const token = effects.exit("gfmFootnoteCallString");
      if (!defined.includes(normalizeIdentifier(self2.sliceSerialize(token)))) {
        return nok(code2);
      }
      effects.enter("gfmFootnoteCallLabelMarker");
      effects.consume(code2);
      effects.exit("gfmFootnoteCallLabelMarker");
      effects.exit("gfmFootnoteCall");
      return ok2;
    }
    if (!markdownLineEndingOrSpace(code2)) {
      data = true;
    }
    size++;
    effects.consume(code2);
    return code2 === 92 ? callEscape : callData;
  }
  function callEscape(code2) {
    if (code2 === 91 || code2 === 92 || code2 === 93) {
      effects.consume(code2);
      size++;
      return callData;
    }
    return callData(code2);
  }
}
function tokenizeDefinitionStart(effects, ok2, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let identifier;
  let size = 0;
  let data;
  return start;
  function start(code2) {
    effects.enter("gfmFootnoteDefinition")._container = true;
    effects.enter("gfmFootnoteDefinitionLabel");
    effects.enter("gfmFootnoteDefinitionLabelMarker");
    effects.consume(code2);
    effects.exit("gfmFootnoteDefinitionLabelMarker");
    return labelAtMarker;
  }
  function labelAtMarker(code2) {
    if (code2 === 94) {
      effects.enter("gfmFootnoteDefinitionMarker");
      effects.consume(code2);
      effects.exit("gfmFootnoteDefinitionMarker");
      effects.enter("gfmFootnoteDefinitionLabelString");
      effects.enter("chunkString").contentType = "string";
      return labelInside;
    }
    return nok(code2);
  }
  function labelInside(code2) {
    if (
      // Too long.
      size > 999 || // Closing brace with nothing.
      code2 === 93 && !data || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code2 === null || code2 === 91 || markdownLineEndingOrSpace(code2)
    ) {
      return nok(code2);
    }
    if (code2 === 93) {
      effects.exit("chunkString");
      const token = effects.exit("gfmFootnoteDefinitionLabelString");
      identifier = normalizeIdentifier(self2.sliceSerialize(token));
      effects.enter("gfmFootnoteDefinitionLabelMarker");
      effects.consume(code2);
      effects.exit("gfmFootnoteDefinitionLabelMarker");
      effects.exit("gfmFootnoteDefinitionLabel");
      return labelAfter;
    }
    if (!markdownLineEndingOrSpace(code2)) {
      data = true;
    }
    size++;
    effects.consume(code2);
    return code2 === 92 ? labelEscape : labelInside;
  }
  function labelEscape(code2) {
    if (code2 === 91 || code2 === 92 || code2 === 93) {
      effects.consume(code2);
      size++;
      return labelInside;
    }
    return labelInside(code2);
  }
  function labelAfter(code2) {
    if (code2 === 58) {
      effects.enter("definitionMarker");
      effects.consume(code2);
      effects.exit("definitionMarker");
      if (!defined.includes(identifier)) {
        defined.push(identifier);
      }
      return factorySpace(
        effects,
        whitespaceAfter,
        "gfmFootnoteDefinitionWhitespace"
      );
    }
    return nok(code2);
  }
  function whitespaceAfter(code2) {
    return ok2(code2);
  }
}
function tokenizeDefinitionContinuation(effects, ok2, nok) {
  return effects.check(blankLine, ok2, effects.attempt(indent, ok2, nok));
}
function gfmFootnoteDefinitionEnd(effects) {
  effects.exit("gfmFootnoteDefinition");
}
function tokenizeIndent(effects, ok2, nok) {
  const self2 = this;
  return factorySpace(
    effects,
    afterPrefix,
    "gfmFootnoteDefinitionIndent",
    4 + 1
  );
  function afterPrefix(code2) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "gfmFootnoteDefinitionIndent" && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok2(code2) : nok(code2);
  }
}
function gfmStrikethrough(options) {
  const options_ = options || {};
  let single = options_.singleTilde;
  const tokenizer = {
    tokenize: tokenizeStrikethrough,
    resolveAll: resolveAllStrikethrough
  };
  if (single === null || single === void 0) {
    single = true;
  }
  return {
    text: {
      [126]: tokenizer
    },
    insideSpan: {
      null: [tokenizer]
    },
    attentionMarkers: {
      null: [126]
    }
  };
  function resolveAllStrikethrough(events2, context2) {
    let index2 = -1;
    while (++index2 < events2.length) {
      if (events2[index2][0] === "enter" && events2[index2][1].type === "strikethroughSequenceTemporary" && events2[index2][1]._close) {
        let open = index2;
        while (open--) {
          if (events2[open][0] === "exit" && events2[open][1].type === "strikethroughSequenceTemporary" && events2[open][1]._open && // If the sizes are the same:
          events2[index2][1].end.offset - events2[index2][1].start.offset === events2[open][1].end.offset - events2[open][1].start.offset) {
            events2[index2][1].type = "strikethroughSequence";
            events2[open][1].type = "strikethroughSequence";
            const strikethrough = {
              type: "strikethrough",
              start: Object.assign({}, events2[open][1].start),
              end: Object.assign({}, events2[index2][1].end)
            };
            const text2 = {
              type: "strikethroughText",
              start: Object.assign({}, events2[open][1].end),
              end: Object.assign({}, events2[index2][1].start)
            };
            const nextEvents = [
              ["enter", strikethrough, context2],
              ["enter", events2[open][1], context2],
              ["exit", events2[open][1], context2],
              ["enter", text2, context2]
            ];
            const insideSpan2 = context2.parser.constructs.insideSpan.null;
            if (insideSpan2) {
              splice(
                nextEvents,
                nextEvents.length,
                0,
                resolveAll(insideSpan2, events2.slice(open + 1, index2), context2)
              );
            }
            splice(nextEvents, nextEvents.length, 0, [
              ["exit", text2, context2],
              ["enter", events2[index2][1], context2],
              ["exit", events2[index2][1], context2],
              ["exit", strikethrough, context2]
            ]);
            splice(events2, open - 1, index2 - open + 3, nextEvents);
            index2 = open + nextEvents.length - 2;
            break;
          }
        }
      }
    }
    index2 = -1;
    while (++index2 < events2.length) {
      if (events2[index2][1].type === "strikethroughSequenceTemporary") {
        events2[index2][1].type = "data";
      }
    }
    return events2;
  }
  function tokenizeStrikethrough(effects, ok2, nok) {
    const previous2 = this.previous;
    const events2 = this.events;
    let size = 0;
    return start;
    function start(code2) {
      if (previous2 === 126 && events2[events2.length - 1][1].type !== "characterEscape") {
        return nok(code2);
      }
      effects.enter("strikethroughSequenceTemporary");
      return more(code2);
    }
    function more(code2) {
      const before = classifyCharacter(previous2);
      if (code2 === 126) {
        if (size > 1)
          return nok(code2);
        effects.consume(code2);
        size++;
        return more;
      }
      if (size < 2 && !single)
        return nok(code2);
      const token = effects.exit("strikethroughSequenceTemporary");
      const after = classifyCharacter(code2);
      token._open = !after || after === 2 && Boolean(before);
      token._close = !before || before === 2 && Boolean(after);
      return ok2(code2);
    }
  }
}
class EditMap {
  /**
   * Create a new edit map.
   */
  constructor() {
    this.map = [];
  }
  /**
   * Create an edit: a remove and/or add at a certain place.
   *
   * @param {number} index
   * @param {number} remove
   * @param {Array<Event>} add
   * @returns {void}
   */
  add(index2, remove2, add2) {
    addImpl(this, index2, remove2, add2);
  }
  // To do: not used here.
  // /**
  //  * Create an edit: but insert `add` before existing additions.
  //  *
  //  * @param {number} index
  //  * @param {number} remove
  //  * @param {Array<Event>} add
  //  * @returns {void}
  //  */
  // addBefore(index, remove, add) {
  //   addImpl(this, index, remove, add, true)
  // }
  /**
   * Done, change the events.
   *
   * @param {Array<Event>} events
   * @returns {void}
   */
  consume(events2) {
    this.map.sort((a, b) => a[0] - b[0]);
    if (this.map.length === 0) {
      return;
    }
    let index2 = this.map.length;
    const vecs = [];
    while (index2 > 0) {
      index2 -= 1;
      vecs.push(events2.slice(this.map[index2][0] + this.map[index2][1]));
      vecs.push(this.map[index2][2]);
      events2.length = this.map[index2][0];
    }
    vecs.push([...events2]);
    events2.length = 0;
    let slice = vecs.pop();
    while (slice) {
      events2.push(...slice);
      slice = vecs.pop();
    }
    this.map.length = 0;
  }
}
function addImpl(editMap, at, remove2, add2) {
  let index2 = 0;
  if (remove2 === 0 && add2.length === 0) {
    return;
  }
  while (index2 < editMap.map.length) {
    if (editMap.map[index2][0] === at) {
      editMap.map[index2][1] += remove2;
      editMap.map[index2][2].push(...add2);
      return;
    }
    index2 += 1;
  }
  editMap.map.push([at, remove2, add2]);
}
function gfmTableAlign(events2, index2) {
  let inDelimiterRow = false;
  const align = [];
  while (index2 < events2.length) {
    const event = events2[index2];
    if (inDelimiterRow) {
      if (event[0] === "enter") {
        if (event[1].type === "tableContent") {
          align.push(
            events2[index2 + 1][1].type === "tableDelimiterMarker" ? "left" : "none"
          );
        }
      } else if (event[1].type === "tableContent") {
        if (events2[index2 - 1][1].type === "tableDelimiterMarker") {
          const alignIndex = align.length - 1;
          align[alignIndex] = align[alignIndex] === "left" ? "center" : "right";
        }
      } else if (event[1].type === "tableDelimiterRow") {
        break;
      }
    } else if (event[0] === "enter" && event[1].type === "tableDelimiterRow") {
      inDelimiterRow = true;
    }
    index2 += 1;
  }
  return align;
}
const gfmTable = {
  flow: {
    null: {
      tokenize: tokenizeTable,
      resolveAll: resolveTable
    }
  }
};
function tokenizeTable(effects, ok2, nok) {
  const self2 = this;
  let size = 0;
  let sizeB = 0;
  let seen;
  return start;
  function start(code2) {
    let index2 = self2.events.length - 1;
    while (index2 > -1) {
      const type2 = self2.events[index2][1].type;
      if (type2 === "lineEnding" || // Note: markdown-rs uses `whitespace` instead of `linePrefix`
      type2 === "linePrefix")
        index2--;
      else
        break;
    }
    const tail = index2 > -1 ? self2.events[index2][1].type : null;
    const next = tail === "tableHead" || tail === "tableRow" ? bodyRowStart : headRowBefore;
    if (next === bodyRowStart && self2.parser.lazy[self2.now().line]) {
      return nok(code2);
    }
    return next(code2);
  }
  function headRowBefore(code2) {
    effects.enter("tableHead");
    effects.enter("tableRow");
    return headRowStart(code2);
  }
  function headRowStart(code2) {
    if (code2 === 124) {
      return headRowBreak(code2);
    }
    seen = true;
    sizeB += 1;
    return headRowBreak(code2);
  }
  function headRowBreak(code2) {
    if (code2 === null) {
      return nok(code2);
    }
    if (markdownLineEnding(code2)) {
      if (sizeB > 1) {
        sizeB = 0;
        self2.interrupt = true;
        effects.exit("tableRow");
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return headDelimiterStart;
      }
      return nok(code2);
    }
    if (markdownSpace(code2)) {
      return factorySpace(effects, headRowBreak, "whitespace")(code2);
    }
    sizeB += 1;
    if (seen) {
      seen = false;
      size += 1;
    }
    if (code2 === 124) {
      effects.enter("tableCellDivider");
      effects.consume(code2);
      effects.exit("tableCellDivider");
      seen = true;
      return headRowBreak;
    }
    effects.enter("data");
    return headRowData(code2);
  }
  function headRowData(code2) {
    if (code2 === null || code2 === 124 || markdownLineEndingOrSpace(code2)) {
      effects.exit("data");
      return headRowBreak(code2);
    }
    effects.consume(code2);
    return code2 === 92 ? headRowEscape : headRowData;
  }
  function headRowEscape(code2) {
    if (code2 === 92 || code2 === 124) {
      effects.consume(code2);
      return headRowData;
    }
    return headRowData(code2);
  }
  function headDelimiterStart(code2) {
    self2.interrupt = false;
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code2);
    }
    effects.enter("tableDelimiterRow");
    seen = false;
    if (markdownSpace(code2)) {
      return factorySpace(
        effects,
        headDelimiterBefore,
        "linePrefix",
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
      )(code2);
    }
    return headDelimiterBefore(code2);
  }
  function headDelimiterBefore(code2) {
    if (code2 === 45 || code2 === 58) {
      return headDelimiterValueBefore(code2);
    }
    if (code2 === 124) {
      seen = true;
      effects.enter("tableCellDivider");
      effects.consume(code2);
      effects.exit("tableCellDivider");
      return headDelimiterCellBefore;
    }
    return headDelimiterNok(code2);
  }
  function headDelimiterCellBefore(code2) {
    if (markdownSpace(code2)) {
      return factorySpace(effects, headDelimiterValueBefore, "whitespace")(code2);
    }
    return headDelimiterValueBefore(code2);
  }
  function headDelimiterValueBefore(code2) {
    if (code2 === 58) {
      sizeB += 1;
      seen = true;
      effects.enter("tableDelimiterMarker");
      effects.consume(code2);
      effects.exit("tableDelimiterMarker");
      return headDelimiterLeftAlignmentAfter;
    }
    if (code2 === 45) {
      sizeB += 1;
      return headDelimiterLeftAlignmentAfter(code2);
    }
    if (code2 === null || markdownLineEnding(code2)) {
      return headDelimiterCellAfter(code2);
    }
    return headDelimiterNok(code2);
  }
  function headDelimiterLeftAlignmentAfter(code2) {
    if (code2 === 45) {
      effects.enter("tableDelimiterFiller");
      return headDelimiterFiller(code2);
    }
    return headDelimiterNok(code2);
  }
  function headDelimiterFiller(code2) {
    if (code2 === 45) {
      effects.consume(code2);
      return headDelimiterFiller;
    }
    if (code2 === 58) {
      seen = true;
      effects.exit("tableDelimiterFiller");
      effects.enter("tableDelimiterMarker");
      effects.consume(code2);
      effects.exit("tableDelimiterMarker");
      return headDelimiterRightAlignmentAfter;
    }
    effects.exit("tableDelimiterFiller");
    return headDelimiterRightAlignmentAfter(code2);
  }
  function headDelimiterRightAlignmentAfter(code2) {
    if (markdownSpace(code2)) {
      return factorySpace(effects, headDelimiterCellAfter, "whitespace")(code2);
    }
    return headDelimiterCellAfter(code2);
  }
  function headDelimiterCellAfter(code2) {
    if (code2 === 124) {
      return headDelimiterBefore(code2);
    }
    if (code2 === null || markdownLineEnding(code2)) {
      if (!seen || size !== sizeB) {
        return headDelimiterNok(code2);
      }
      effects.exit("tableDelimiterRow");
      effects.exit("tableHead");
      return ok2(code2);
    }
    return headDelimiterNok(code2);
  }
  function headDelimiterNok(code2) {
    return nok(code2);
  }
  function bodyRowStart(code2) {
    effects.enter("tableRow");
    return bodyRowBreak(code2);
  }
  function bodyRowBreak(code2) {
    if (code2 === 124) {
      effects.enter("tableCellDivider");
      effects.consume(code2);
      effects.exit("tableCellDivider");
      return bodyRowBreak;
    }
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("tableRow");
      return ok2(code2);
    }
    if (markdownSpace(code2)) {
      return factorySpace(effects, bodyRowBreak, "whitespace")(code2);
    }
    effects.enter("data");
    return bodyRowData(code2);
  }
  function bodyRowData(code2) {
    if (code2 === null || code2 === 124 || markdownLineEndingOrSpace(code2)) {
      effects.exit("data");
      return bodyRowBreak(code2);
    }
    effects.consume(code2);
    return code2 === 92 ? bodyRowEscape : bodyRowData;
  }
  function bodyRowEscape(code2) {
    if (code2 === 92 || code2 === 124) {
      effects.consume(code2);
      return bodyRowData;
    }
    return bodyRowData(code2);
  }
}
function resolveTable(events2, context2) {
  let index2 = -1;
  let inFirstCellAwaitingPipe = true;
  let rowKind = 0;
  let lastCell = [0, 0, 0, 0];
  let cell = [0, 0, 0, 0];
  let afterHeadAwaitingFirstBodyRow = false;
  let lastTableEnd = 0;
  let currentTable;
  let currentBody;
  let currentCell;
  const map2 = new EditMap();
  while (++index2 < events2.length) {
    const event = events2[index2];
    const token = event[1];
    if (event[0] === "enter") {
      if (token.type === "tableHead") {
        afterHeadAwaitingFirstBodyRow = false;
        if (lastTableEnd !== 0) {
          flushTableEnd(map2, context2, lastTableEnd, currentTable, currentBody);
          currentBody = void 0;
          lastTableEnd = 0;
        }
        currentTable = {
          type: "table",
          start: Object.assign({}, token.start),
          // Note: correct end is set later.
          end: Object.assign({}, token.end)
        };
        map2.add(index2, 0, [["enter", currentTable, context2]]);
      } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
        inFirstCellAwaitingPipe = true;
        currentCell = void 0;
        lastCell = [0, 0, 0, 0];
        cell = [0, index2 + 1, 0, 0];
        if (afterHeadAwaitingFirstBodyRow) {
          afterHeadAwaitingFirstBodyRow = false;
          currentBody = {
            type: "tableBody",
            start: Object.assign({}, token.start),
            // Note: correct end is set later.
            end: Object.assign({}, token.end)
          };
          map2.add(index2, 0, [["enter", currentBody, context2]]);
        }
        rowKind = token.type === "tableDelimiterRow" ? 2 : currentBody ? 3 : 1;
      } else if (rowKind && (token.type === "data" || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
        inFirstCellAwaitingPipe = false;
        if (cell[2] === 0) {
          if (lastCell[1] !== 0) {
            cell[0] = cell[1];
            currentCell = flushCell(
              map2,
              context2,
              lastCell,
              rowKind,
              void 0,
              currentCell
            );
            lastCell = [0, 0, 0, 0];
          }
          cell[2] = index2;
        }
      } else if (token.type === "tableCellDivider") {
        if (inFirstCellAwaitingPipe) {
          inFirstCellAwaitingPipe = false;
        } else {
          if (lastCell[1] !== 0) {
            cell[0] = cell[1];
            currentCell = flushCell(
              map2,
              context2,
              lastCell,
              rowKind,
              void 0,
              currentCell
            );
          }
          lastCell = cell;
          cell = [lastCell[1], index2, 0, 0];
        }
      }
    } else if (token.type === "tableHead") {
      afterHeadAwaitingFirstBodyRow = true;
      lastTableEnd = index2;
    } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
      lastTableEnd = index2;
      if (lastCell[1] !== 0) {
        cell[0] = cell[1];
        currentCell = flushCell(
          map2,
          context2,
          lastCell,
          rowKind,
          index2,
          currentCell
        );
      } else if (cell[1] !== 0) {
        currentCell = flushCell(map2, context2, cell, rowKind, index2, currentCell);
      }
      rowKind = 0;
    } else if (rowKind && (token.type === "data" || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
      cell[3] = index2;
    }
  }
  if (lastTableEnd !== 0) {
    flushTableEnd(map2, context2, lastTableEnd, currentTable, currentBody);
  }
  map2.consume(context2.events);
  index2 = -1;
  while (++index2 < context2.events.length) {
    const event = context2.events[index2];
    if (event[0] === "enter" && event[1].type === "table") {
      event[1]._align = gfmTableAlign(context2.events, index2);
    }
  }
  return events2;
}
function flushCell(map2, context2, range, rowKind, rowEnd, previousCell) {
  const groupName = rowKind === 1 ? "tableHeader" : rowKind === 2 ? "tableDelimiter" : "tableData";
  const valueName = "tableContent";
  if (range[0] !== 0) {
    previousCell.end = Object.assign({}, getPoint(context2.events, range[0]));
    map2.add(range[0], 0, [["exit", previousCell, context2]]);
  }
  const now = getPoint(context2.events, range[1]);
  previousCell = {
    type: groupName,
    start: Object.assign({}, now),
    // Note: correct end is set later.
    end: Object.assign({}, now)
  };
  map2.add(range[1], 0, [["enter", previousCell, context2]]);
  if (range[2] !== 0) {
    const relatedStart = getPoint(context2.events, range[2]);
    const relatedEnd = getPoint(context2.events, range[3]);
    const valueToken = {
      type: valueName,
      start: Object.assign({}, relatedStart),
      end: Object.assign({}, relatedEnd)
    };
    map2.add(range[2], 0, [["enter", valueToken, context2]]);
    if (rowKind !== 2) {
      const start = context2.events[range[2]];
      const end = context2.events[range[3]];
      start[1].end = Object.assign({}, end[1].end);
      start[1].type = "chunkText";
      start[1].contentType = "text";
      if (range[3] > range[2] + 1) {
        const a = range[2] + 1;
        const b = range[3] - range[2] - 1;
        map2.add(a, b, []);
      }
    }
    map2.add(range[3] + 1, 0, [["exit", valueToken, context2]]);
  }
  if (rowEnd !== void 0) {
    previousCell.end = Object.assign({}, getPoint(context2.events, rowEnd));
    map2.add(rowEnd, 0, [["exit", previousCell, context2]]);
    previousCell = void 0;
  }
  return previousCell;
}
function flushTableEnd(map2, context2, index2, table, tableBody) {
  const exits = [];
  const related = getPoint(context2.events, index2);
  if (tableBody) {
    tableBody.end = Object.assign({}, related);
    exits.push(["exit", tableBody, context2]);
  }
  table.end = Object.assign({}, related);
  exits.push(["exit", table, context2]);
  map2.add(index2 + 1, 0, exits);
}
function getPoint(events2, index2) {
  const event = events2[index2];
  const side = event[0] === "enter" ? "start" : "end";
  return event[1][side];
}
const tasklistCheck = {
  tokenize: tokenizeTasklistCheck
};
const gfmTaskListItem = {
  text: {
    [91]: tasklistCheck
  }
};
function tokenizeTasklistCheck(effects, ok2, nok) {
  const self2 = this;
  return open;
  function open(code2) {
    if (
      // Exit if there’s stuff before.
      self2.previous !== null || // Exit if not in the first content that is the first child of a list
      // item.
      !self2._gfmTasklistFirstContentOfListItem
    ) {
      return nok(code2);
    }
    effects.enter("taskListCheck");
    effects.enter("taskListCheckMarker");
    effects.consume(code2);
    effects.exit("taskListCheckMarker");
    return inside;
  }
  function inside(code2) {
    if (markdownLineEndingOrSpace(code2)) {
      effects.enter("taskListCheckValueUnchecked");
      effects.consume(code2);
      effects.exit("taskListCheckValueUnchecked");
      return close2;
    }
    if (code2 === 88 || code2 === 120) {
      effects.enter("taskListCheckValueChecked");
      effects.consume(code2);
      effects.exit("taskListCheckValueChecked");
      return close2;
    }
    return nok(code2);
  }
  function close2(code2) {
    if (code2 === 93) {
      effects.enter("taskListCheckMarker");
      effects.consume(code2);
      effects.exit("taskListCheckMarker");
      effects.exit("taskListCheck");
      return after;
    }
    return nok(code2);
  }
  function after(code2) {
    if (markdownLineEnding(code2)) {
      return ok2(code2);
    }
    if (markdownSpace(code2)) {
      return effects.check(
        {
          tokenize: spaceThenNonSpace
        },
        ok2,
        nok
      )(code2);
    }
    return nok(code2);
  }
}
function spaceThenNonSpace(effects, ok2, nok) {
  return factorySpace(effects, after, "whitespace");
  function after(code2) {
    return code2 === null ? nok(code2) : ok2(code2);
  }
}
function gfm(options) {
  return combineExtensions([
    gfmAutolinkLiteral,
    gfmFootnote(),
    gfmStrikethrough(options),
    gfmTable,
    gfmTaskListItem
  ]);
}
function ccount(value2, character) {
  const source = String(value2);
  if (typeof character !== "string") {
    throw new TypeError("Expected character");
  }
  let count = 0;
  let index2 = source.indexOf(character);
  while (index2 !== -1) {
    count++;
    index2 = source.indexOf(character, index2 + character.length);
  }
  return count;
}
function escapeStringRegexp(string2) {
  if (typeof string2 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string2.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
const convert$1 = (
  /**
   * @type {(
   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &
   *   ((test?: Test) => AssertAnything)
   * )}
   */
  /**
   * @param {Test} [test]
   * @returns {AssertAnything}
   */
  function(test) {
    if (test === void 0 || test === null) {
      return ok$1;
    }
    if (typeof test === "string") {
      return typeFactory$1(test);
    }
    if (typeof test === "object") {
      return Array.isArray(test) ? anyFactory$1(test) : propsFactory$1(test);
    }
    if (typeof test === "function") {
      return castFactory$1(test);
    }
    throw new Error("Expected function, string, or object as test");
  }
);
function anyFactory$1(tests) {
  const checks = [];
  let index2 = -1;
  while (++index2 < tests.length) {
    checks[index2] = convert$1(tests[index2]);
  }
  return castFactory$1(any);
  function any(...parameters) {
    let index3 = -1;
    while (++index3 < checks.length) {
      if (checks[index3].call(this, ...parameters))
        return true;
    }
    return false;
  }
}
function propsFactory$1(check) {
  return castFactory$1(all2);
  function all2(node2) {
    let key;
    for (key in check) {
      if (node2[key] !== check[key])
        return false;
    }
    return true;
  }
}
function typeFactory$1(check) {
  return castFactory$1(type2);
  function type2(node2) {
    return node2 && node2.type === check;
  }
}
function castFactory$1(check) {
  return assertion;
  function assertion(node2, ...parameters) {
    return Boolean(
      node2 && typeof node2 === "object" && "type" in node2 && // @ts-expect-error: fine.
      Boolean(check.call(this, node2, ...parameters))
    );
  }
}
function ok$1() {
  return true;
}
function color$1(d) {
  return "\x1B[33m" + d + "\x1B[39m";
}
const CONTINUE$1 = true;
const EXIT$1 = false;
const SKIP$1 = "skip";
const visitParents$1 = (
  /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */
  /**
   * @param {Node} tree
   * @param {Test} test
   * @param {Visitor<Node>} visitor
   * @param {boolean | null | undefined} [reverse]
   * @returns {void}
   */
  function(tree, test, visitor, reverse) {
    if (typeof test === "function" && typeof visitor !== "function") {
      reverse = visitor;
      visitor = test;
      test = null;
    }
    const is = convert$1(test);
    const step = reverse ? -1 : 1;
    factory(tree, void 0, [])();
    function factory(node2, index2, parents) {
      const value2 = node2 && typeof node2 === "object" ? node2 : {};
      if (typeof value2.type === "string") {
        const name = (
          // `hast`
          typeof value2.tagName === "string" ? value2.tagName : (
            // `xast`
            typeof value2.name === "string" ? value2.name : void 0
          )
        );
        Object.defineProperty(visit2, "name", {
          value: "node (" + color$1(node2.type + (name ? "<" + name + ">" : "")) + ")"
        });
      }
      return visit2;
      function visit2() {
        let result = [];
        let subresult;
        let offset;
        let grandparents;
        if (!test || is(node2, index2, parents[parents.length - 1] || null)) {
          result = toResult$1(visitor(node2, parents));
          if (result[0] === EXIT$1) {
            return result;
          }
        }
        if (node2.children && result[0] !== SKIP$1) {
          offset = (reverse ? node2.children.length : -1) + step;
          grandparents = parents.concat(node2);
          while (offset > -1 && offset < node2.children.length) {
            subresult = factory(node2.children[offset], offset, grandparents)();
            if (subresult[0] === EXIT$1) {
              return subresult;
            }
            offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
          }
        }
        return result;
      }
    }
  }
);
function toResult$1(value2) {
  if (Array.isArray(value2)) {
    return value2;
  }
  if (typeof value2 === "number") {
    return [CONTINUE$1, value2];
  }
  return [value2];
}
const own$1 = {}.hasOwnProperty;
const findAndReplace = (
  /**
   * @type {(
   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &
   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)
   * )}
   **/
  /**
   * @template {Node} Tree
   * @param {Tree} tree
   * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find
   * @param {Replace | Options | null | undefined} [replace]
   * @param {Options | null | undefined} [options]
   * @returns {Tree}
   */
  function(tree, find2, replace2, options) {
    let settings2;
    let schema2;
    if (typeof find2 === "string" || find2 instanceof RegExp) {
      schema2 = [[find2, replace2]];
      settings2 = options;
    } else {
      schema2 = find2;
      settings2 = replace2;
    }
    if (!settings2) {
      settings2 = {};
    }
    const ignored = convert$1(settings2.ignore || []);
    const pairs2 = toPairs(schema2);
    let pairIndex = -1;
    while (++pairIndex < pairs2.length) {
      visitParents$1(tree, "text", visitor);
    }
    return tree;
    function visitor(node2, parents) {
      let index2 = -1;
      let grandparent;
      while (++index2 < parents.length) {
        const parent = parents[index2];
        if (ignored(
          parent,
          // @ts-expect-error: TS doesn’t understand but it’s perfect.
          grandparent ? grandparent.children.indexOf(parent) : void 0,
          grandparent
        )) {
          return;
        }
        grandparent = parent;
      }
      if (grandparent) {
        return handler2(node2, parents);
      }
    }
    function handler2(node2, parents) {
      const parent = parents[parents.length - 1];
      const find3 = pairs2[pairIndex][0];
      const replace3 = pairs2[pairIndex][1];
      let start = 0;
      const index2 = parent.children.indexOf(node2);
      let change = false;
      let nodes = [];
      find3.lastIndex = 0;
      let match = find3.exec(node2.value);
      while (match) {
        const position2 = match.index;
        const matchObject = {
          index: match.index,
          input: match.input,
          // @ts-expect-error: stack is fine.
          stack: [...parents, node2]
        };
        let value2 = replace3(...match, matchObject);
        if (typeof value2 === "string") {
          value2 = value2.length > 0 ? { type: "text", value: value2 } : void 0;
        }
        if (value2 !== false) {
          if (start !== position2) {
            nodes.push({
              type: "text",
              value: node2.value.slice(start, position2)
            });
          }
          if (Array.isArray(value2)) {
            nodes.push(...value2);
          } else if (value2) {
            nodes.push(value2);
          }
          start = position2 + match[0].length;
          change = true;
        }
        if (!find3.global) {
          break;
        }
        match = find3.exec(node2.value);
      }
      if (change) {
        if (start < node2.value.length) {
          nodes.push({ type: "text", value: node2.value.slice(start) });
        }
        parent.children.splice(index2, 1, ...nodes);
      } else {
        nodes = [node2];
      }
      return index2 + nodes.length;
    }
  }
);
function toPairs(schema2) {
  const result = [];
  if (typeof schema2 !== "object") {
    throw new TypeError("Expected array or object as schema");
  }
  if (Array.isArray(schema2)) {
    let index2 = -1;
    while (++index2 < schema2.length) {
      result.push([
        toExpression(schema2[index2][0]),
        toFunction(schema2[index2][1])
      ]);
    }
  } else {
    let key;
    for (key in schema2) {
      if (own$1.call(schema2, key)) {
        result.push([toExpression(key), toFunction(schema2[key])]);
      }
    }
  }
  return result;
}
function toExpression(find2) {
  return typeof find2 === "string" ? new RegExp(escapeStringRegexp(find2), "g") : find2;
}
function toFunction(replace2) {
  return typeof replace2 === "function" ? replace2 : () => replace2;
}
const inConstruct = "phrasing";
const notInConstruct = ["autolink", "link", "image", "label"];
const gfmAutolinkLiteralFromMarkdown = {
  transforms: [transformGfmAutolinkLiterals],
  enter: {
    literalAutolink: enterLiteralAutolink,
    literalAutolinkEmail: enterLiteralAutolinkValue,
    literalAutolinkHttp: enterLiteralAutolinkValue,
    literalAutolinkWww: enterLiteralAutolinkValue
  },
  exit: {
    literalAutolink: exitLiteralAutolink,
    literalAutolinkEmail: exitLiteralAutolinkEmail,
    literalAutolinkHttp: exitLiteralAutolinkHttp,
    literalAutolinkWww: exitLiteralAutolinkWww
  }
};
const gfmAutolinkLiteralToMarkdown = {
  unsafe: [
    {
      character: "@",
      before: "[+\\-.\\w]",
      after: "[\\-.\\w]",
      inConstruct,
      notInConstruct
    },
    {
      character: ".",
      before: "[Ww]",
      after: "[\\-.\\w]",
      inConstruct,
      notInConstruct
    },
    { character: ":", before: "[ps]", after: "\\/", inConstruct, notInConstruct }
  ]
};
function enterLiteralAutolink(token) {
  this.enter({ type: "link", title: null, url: "", children: [] }, token);
}
function enterLiteralAutolinkValue(token) {
  this.config.enter.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkHttp(token) {
  this.config.exit.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkWww(token) {
  this.config.exit.data.call(this, token);
  const node2 = (
    /** @type {Link} */
    this.stack[this.stack.length - 1]
  );
  node2.url = "http://" + this.sliceSerialize(token);
}
function exitLiteralAutolinkEmail(token) {
  this.config.exit.autolinkEmail.call(this, token);
}
function exitLiteralAutolink(token) {
  this.exit(token);
}
function transformGfmAutolinkLiterals(tree) {
  findAndReplace(
    tree,
    [
      [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, findUrl],
      [/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g, findEmail]
    ],
    { ignore: ["link", "linkReference"] }
  );
}
function findUrl(_, protocol, domain2, path2, match) {
  let prefix = "";
  if (!previous(match)) {
    return false;
  }
  if (/^w/i.test(protocol)) {
    domain2 = protocol + domain2;
    protocol = "";
    prefix = "http://";
  }
  if (!isCorrectDomain(domain2)) {
    return false;
  }
  const parts = splitUrl(domain2 + path2);
  if (!parts[0])
    return false;
  const result = {
    type: "link",
    title: null,
    url: prefix + protocol + parts[0],
    children: [{ type: "text", value: protocol + parts[0] }]
  };
  if (parts[1]) {
    return [result, { type: "text", value: parts[1] }];
  }
  return result;
}
function findEmail(_, atext, label, match) {
  if (
    // Not an expected previous character.
    !previous(match, true) || // Label ends in not allowed character.
    /[-\d_]$/.test(label)
  ) {
    return false;
  }
  return {
    type: "link",
    title: null,
    url: "mailto:" + atext + "@" + label,
    children: [{ type: "text", value: atext + "@" + label }]
  };
}
function isCorrectDomain(domain2) {
  const parts = domain2.split(".");
  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\d]/.test(parts[parts.length - 2]))) {
    return false;
  }
  return true;
}
function splitUrl(url) {
  const trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);
  if (!trailExec) {
    return [url, void 0];
  }
  url = url.slice(0, trailExec.index);
  let trail2 = trailExec[0];
  let closingParenIndex = trail2.indexOf(")");
  const openingParens = ccount(url, "(");
  let closingParens = ccount(url, ")");
  while (closingParenIndex !== -1 && openingParens > closingParens) {
    url += trail2.slice(0, closingParenIndex + 1);
    trail2 = trail2.slice(closingParenIndex + 1);
    closingParenIndex = trail2.indexOf(")");
    closingParens++;
  }
  return [url, trail2];
}
function previous(match, email) {
  const code2 = match.input.charCodeAt(match.index - 1);
  return (match.index === 0 || unicodeWhitespace(code2) || unicodePunctuation(code2)) && (!email || code2 !== 47);
}
function association(node2) {
  if (node2.label || !node2.identifier) {
    return node2.label || "";
  }
  return decodeString(node2.identifier);
}
function containerFlow(parent, state, info) {
  const indexStack = state.indexStack;
  const children = parent.children || [];
  const tracker = state.createTracker(info);
  const results = [];
  let index2 = -1;
  indexStack.push(-1);
  while (++index2 < children.length) {
    const child2 = children[index2];
    indexStack[indexStack.length - 1] = index2;
    results.push(
      tracker.move(
        state.handle(child2, parent, state, {
          before: "\n",
          after: "\n",
          ...tracker.current()
        })
      )
    );
    if (child2.type !== "list") {
      state.bulletLastUsed = void 0;
    }
    if (index2 < children.length - 1) {
      results.push(
        tracker.move(between(child2, children[index2 + 1], parent, state))
      );
    }
  }
  indexStack.pop();
  return results.join("");
}
function between(left, right, parent, state) {
  let index2 = state.join.length;
  while (index2--) {
    const result = state.join[index2](left, right, parent, state);
    if (result === true || result === 1) {
      break;
    }
    if (typeof result === "number") {
      return "\n".repeat(1 + result);
    }
    if (result === false) {
      return "\n\n<!---->\n\n";
    }
  }
  return "\n\n";
}
const eol = /\r?\n|\r/g;
function indentLines(value2, map2) {
  const result = [];
  let start = 0;
  let line = 0;
  let match;
  while (match = eol.exec(value2)) {
    one2(value2.slice(start, match.index));
    result.push(match[0]);
    start = match.index + match[0].length;
    line++;
  }
  one2(value2.slice(start));
  return result.join("");
  function one2(value3) {
    result.push(map2(value3, line, !value3));
  }
}
function patternCompile(pattern2) {
  if (!pattern2._compiled) {
    const before = (pattern2.atBreak ? "[\\r\\n][\\t ]*" : "") + (pattern2.before ? "(?:" + pattern2.before + ")" : "");
    pattern2._compiled = new RegExp(
      (before ? "(" + before + ")" : "") + (/[|\\{}()[\]^$+*?.-]/.test(pattern2.character) ? "\\" : "") + pattern2.character + (pattern2.after ? "(?:" + pattern2.after + ")" : ""),
      "g"
    );
  }
  return pattern2._compiled;
}
function patternInScope(stack, pattern2) {
  return listInScope(stack, pattern2.inConstruct, true) && !listInScope(stack, pattern2.notInConstruct, false);
}
function listInScope(stack, list2, none) {
  if (typeof list2 === "string") {
    list2 = [list2];
  }
  if (!list2 || list2.length === 0) {
    return none;
  }
  let index2 = -1;
  while (++index2 < list2.length) {
    if (stack.includes(list2[index2])) {
      return true;
    }
  }
  return false;
}
function safe(state, input, config) {
  const value2 = (config.before || "") + (input || "") + (config.after || "");
  const positions = [];
  const result = [];
  const infos = {};
  let index2 = -1;
  while (++index2 < state.unsafe.length) {
    const pattern2 = state.unsafe[index2];
    if (!patternInScope(state.stack, pattern2)) {
      continue;
    }
    const expression = patternCompile(pattern2);
    let match;
    while (match = expression.exec(value2)) {
      const before = "before" in pattern2 || Boolean(pattern2.atBreak);
      const after = "after" in pattern2;
      const position2 = match.index + (before ? match[1].length : 0);
      if (positions.includes(position2)) {
        if (infos[position2].before && !before) {
          infos[position2].before = false;
        }
        if (infos[position2].after && !after) {
          infos[position2].after = false;
        }
      } else {
        positions.push(position2);
        infos[position2] = { before, after };
      }
    }
  }
  positions.sort(numerical);
  let start = config.before ? config.before.length : 0;
  const end = value2.length - (config.after ? config.after.length : 0);
  index2 = -1;
  while (++index2 < positions.length) {
    const position2 = positions[index2];
    if (position2 < start || position2 >= end) {
      continue;
    }
    if (position2 + 1 < end && positions[index2 + 1] === position2 + 1 && infos[position2].after && !infos[position2 + 1].before && !infos[position2 + 1].after || positions[index2 - 1] === position2 - 1 && infos[position2].before && !infos[position2 - 1].before && !infos[position2 - 1].after) {
      continue;
    }
    if (start !== position2) {
      result.push(escapeBackslashes(value2.slice(start, position2), "\\"));
    }
    start = position2;
    if (/[!-/:-@[-`{-~]/.test(value2.charAt(position2)) && (!config.encode || !config.encode.includes(value2.charAt(position2)))) {
      result.push("\\");
    } else {
      result.push(
        "&#x" + value2.charCodeAt(position2).toString(16).toUpperCase() + ";"
      );
      start++;
    }
  }
  result.push(escapeBackslashes(value2.slice(start, end), config.after));
  return result.join("");
}
function numerical(a, b) {
  return a - b;
}
function escapeBackslashes(value2, after) {
  const expression = /\\(?=[!-/:-@[-`{-~])/g;
  const positions = [];
  const results = [];
  const whole = value2 + after;
  let index2 = -1;
  let start = 0;
  let match;
  while (match = expression.exec(whole)) {
    positions.push(match.index);
  }
  while (++index2 < positions.length) {
    if (start !== positions[index2]) {
      results.push(value2.slice(start, positions[index2]));
    }
    results.push("\\");
    start = positions[index2];
  }
  results.push(value2.slice(start));
  return results.join("");
}
function track(config) {
  const options = config || {};
  const now = options.now || {};
  let lineShift = options.lineShift || 0;
  let line = now.line || 1;
  let column = now.column || 1;
  return { move: move2, current, shift };
  function current() {
    return { now: { line, column }, lineShift };
  }
  function shift(value2) {
    lineShift += value2;
  }
  function move2(input) {
    const value2 = input || "";
    const chunks = value2.split(/\r?\n|\r/g);
    const tail = chunks[chunks.length - 1];
    line += chunks.length - 1;
    column = chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;
    return value2;
  }
}
footnoteReference.peek = footnoteReferencePeek;
function gfmFootnoteFromMarkdown() {
  return {
    enter: {
      gfmFootnoteDefinition: enterFootnoteDefinition,
      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
      gfmFootnoteCall: enterFootnoteCall,
      gfmFootnoteCallString: enterFootnoteCallString
    },
    exit: {
      gfmFootnoteDefinition: exitFootnoteDefinition,
      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
      gfmFootnoteCall: exitFootnoteCall,
      gfmFootnoteCallString: exitFootnoteCallString
    }
  };
}
function gfmFootnoteToMarkdown() {
  return {
    // This is on by default already.
    unsafe: [{ character: "[", inConstruct: ["phrasing", "label", "reference"] }],
    handlers: { footnoteDefinition, footnoteReference }
  };
}
function enterFootnoteDefinition(token) {
  this.enter(
    { type: "footnoteDefinition", identifier: "", label: "", children: [] },
    token
  );
}
function enterFootnoteDefinitionLabelString() {
  this.buffer();
}
function exitFootnoteDefinitionLabelString(token) {
  const label = this.resume();
  const node2 = (
    /** @type {FootnoteDefinition} */
    this.stack[this.stack.length - 1]
  );
  node2.label = label;
  node2.identifier = normalizeIdentifier(
    this.sliceSerialize(token)
  ).toLowerCase();
}
function exitFootnoteDefinition(token) {
  this.exit(token);
}
function enterFootnoteCall(token) {
  this.enter({ type: "footnoteReference", identifier: "", label: "" }, token);
}
function enterFootnoteCallString() {
  this.buffer();
}
function exitFootnoteCallString(token) {
  const label = this.resume();
  const node2 = (
    /** @type {FootnoteDefinition} */
    this.stack[this.stack.length - 1]
  );
  node2.label = label;
  node2.identifier = normalizeIdentifier(
    this.sliceSerialize(token)
  ).toLowerCase();
}
function exitFootnoteCall(token) {
  this.exit(token);
}
function footnoteReference(node2, _, context2, safeOptions) {
  const tracker = track(safeOptions);
  let value2 = tracker.move("[^");
  const exit2 = context2.enter("footnoteReference");
  const subexit = context2.enter("reference");
  value2 += tracker.move(
    safe(context2, association(node2), {
      ...tracker.current(),
      before: value2,
      after: "]"
    })
  );
  subexit();
  exit2();
  value2 += tracker.move("]");
  return value2;
}
function footnoteReferencePeek() {
  return "[";
}
function footnoteDefinition(node2, _, context2, safeOptions) {
  const tracker = track(safeOptions);
  let value2 = tracker.move("[^");
  const exit2 = context2.enter("footnoteDefinition");
  const subexit = context2.enter("label");
  value2 += tracker.move(
    safe(context2, association(node2), {
      ...tracker.current(),
      before: value2,
      after: "]"
    })
  );
  subexit();
  value2 += tracker.move(
    "]:" + (node2.children && node2.children.length > 0 ? " " : "")
  );
  tracker.shift(4);
  value2 += tracker.move(
    indentLines(containerFlow(node2, context2, tracker.current()), map$1)
  );
  exit2();
  return value2;
}
function map$1(line, index2, blank) {
  if (index2 === 0) {
    return line;
  }
  return (blank ? "" : "    ") + line;
}
function containerPhrasing(parent, state, info) {
  const indexStack = state.indexStack;
  const children = parent.children || [];
  const results = [];
  let index2 = -1;
  let before = info.before;
  indexStack.push(-1);
  let tracker = state.createTracker(info);
  while (++index2 < children.length) {
    const child2 = children[index2];
    let after;
    indexStack[indexStack.length - 1] = index2;
    if (index2 + 1 < children.length) {
      let handle = state.handle.handlers[children[index2 + 1].type];
      if (handle && handle.peek)
        handle = handle.peek;
      after = handle ? handle(children[index2 + 1], parent, state, {
        before: "",
        after: "",
        ...tracker.current()
      }).charAt(0) : "";
    } else {
      after = info.after;
    }
    if (results.length > 0 && (before === "\r" || before === "\n") && child2.type === "html") {
      results[results.length - 1] = results[results.length - 1].replace(
        /(\r?\n|\r)$/,
        " "
      );
      before = " ";
      tracker = state.createTracker(info);
      tracker.move(results.join(""));
    }
    results.push(
      tracker.move(
        state.handle(child2, parent, state, {
          ...tracker.current(),
          before,
          after
        })
      )
    );
    before = results[results.length - 1].slice(-1);
  }
  indexStack.pop();
  return results.join("");
}
const constructsWithoutStrikethrough = [
  "autolink",
  "destinationLiteral",
  "destinationRaw",
  "reference",
  "titleQuote",
  "titleApostrophe"
];
handleDelete.peek = peekDelete;
const gfmStrikethroughFromMarkdown = {
  canContainEols: ["delete"],
  enter: { strikethrough: enterStrikethrough },
  exit: { strikethrough: exitStrikethrough }
};
const gfmStrikethroughToMarkdown = {
  unsafe: [
    {
      character: "~",
      inConstruct: "phrasing",
      notInConstruct: constructsWithoutStrikethrough
    }
  ],
  handlers: { delete: handleDelete }
};
function enterStrikethrough(token) {
  this.enter({ type: "delete", children: [] }, token);
}
function exitStrikethrough(token) {
  this.exit(token);
}
function handleDelete(node2, _, context2, safeOptions) {
  const tracker = track(safeOptions);
  const exit2 = context2.enter("strikethrough");
  let value2 = tracker.move("~~");
  value2 += containerPhrasing(node2, context2, {
    ...tracker.current(),
    before: value2,
    after: "~"
  });
  value2 += tracker.move("~~");
  exit2();
  return value2;
}
function peekDelete() {
  return "~";
}
inlineCode.peek = inlineCodePeek;
function inlineCode(node2, _, state) {
  let value2 = node2.value || "";
  let sequence = "`";
  let index2 = -1;
  while (new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value2)) {
    sequence += "`";
  }
  if (/[^ \r\n]/.test(value2) && (/^[ \r\n]/.test(value2) && /[ \r\n]$/.test(value2) || /^`|`$/.test(value2))) {
    value2 = " " + value2 + " ";
  }
  while (++index2 < state.unsafe.length) {
    const pattern2 = state.unsafe[index2];
    const expression = patternCompile(pattern2);
    let match;
    if (!pattern2.atBreak)
      continue;
    while (match = expression.exec(value2)) {
      let position2 = match.index;
      if (value2.charCodeAt(position2) === 10 && value2.charCodeAt(position2 - 1) === 13) {
        position2--;
      }
      value2 = value2.slice(0, position2) + " " + value2.slice(match.index + 1);
    }
  }
  return sequence + value2 + sequence;
}
function inlineCodePeek() {
  return "`";
}
function markdownTable(table, options = {}) {
  const align = (options.align || []).concat();
  const stringLength = options.stringLength || defaultStringLength;
  const alignments = [];
  const cellMatrix = [];
  const sizeMatrix = [];
  const longestCellByColumn = [];
  let mostCellsPerRow = 0;
  let rowIndex = -1;
  while (++rowIndex < table.length) {
    const row2 = [];
    const sizes2 = [];
    let columnIndex2 = -1;
    if (table[rowIndex].length > mostCellsPerRow) {
      mostCellsPerRow = table[rowIndex].length;
    }
    while (++columnIndex2 < table[rowIndex].length) {
      const cell = serialize(table[rowIndex][columnIndex2]);
      if (options.alignDelimiters !== false) {
        const size = stringLength(cell);
        sizes2[columnIndex2] = size;
        if (longestCellByColumn[columnIndex2] === void 0 || size > longestCellByColumn[columnIndex2]) {
          longestCellByColumn[columnIndex2] = size;
        }
      }
      row2.push(cell);
    }
    cellMatrix[rowIndex] = row2;
    sizeMatrix[rowIndex] = sizes2;
  }
  let columnIndex = -1;
  if (typeof align === "object" && "length" in align) {
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = toAlignment(align[columnIndex]);
    }
  } else {
    const code2 = toAlignment(align);
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = code2;
    }
  }
  columnIndex = -1;
  const row = [];
  const sizes = [];
  while (++columnIndex < mostCellsPerRow) {
    const code2 = alignments[columnIndex];
    let before = "";
    let after = "";
    if (code2 === 99) {
      before = ":";
      after = ":";
    } else if (code2 === 108) {
      before = ":";
    } else if (code2 === 114) {
      after = ":";
    }
    let size = options.alignDelimiters === false ? 1 : Math.max(
      1,
      longestCellByColumn[columnIndex] - before.length - after.length
    );
    const cell = before + "-".repeat(size) + after;
    if (options.alignDelimiters !== false) {
      size = before.length + size + after.length;
      if (size > longestCellByColumn[columnIndex]) {
        longestCellByColumn[columnIndex] = size;
      }
      sizes[columnIndex] = size;
    }
    row[columnIndex] = cell;
  }
  cellMatrix.splice(1, 0, row);
  sizeMatrix.splice(1, 0, sizes);
  rowIndex = -1;
  const lines = [];
  while (++rowIndex < cellMatrix.length) {
    const row2 = cellMatrix[rowIndex];
    const sizes2 = sizeMatrix[rowIndex];
    columnIndex = -1;
    const line = [];
    while (++columnIndex < mostCellsPerRow) {
      const cell = row2[columnIndex] || "";
      let before = "";
      let after = "";
      if (options.alignDelimiters !== false) {
        const size = longestCellByColumn[columnIndex] - (sizes2[columnIndex] || 0);
        const code2 = alignments[columnIndex];
        if (code2 === 114) {
          before = " ".repeat(size);
        } else if (code2 === 99) {
          if (size % 2) {
            before = " ".repeat(size / 2 + 0.5);
            after = " ".repeat(size / 2 - 0.5);
          } else {
            before = " ".repeat(size / 2);
            after = before;
          }
        } else {
          after = " ".repeat(size);
        }
      }
      if (options.delimiterStart !== false && !columnIndex) {
        line.push("|");
      }
      if (options.padding !== false && // Don’t add the opening space if we’re not aligning and the cell is
      // empty: there will be a closing space.
      !(options.alignDelimiters === false && cell === "") && (options.delimiterStart !== false || columnIndex)) {
        line.push(" ");
      }
      if (options.alignDelimiters !== false) {
        line.push(before);
      }
      line.push(cell);
      if (options.alignDelimiters !== false) {
        line.push(after);
      }
      if (options.padding !== false) {
        line.push(" ");
      }
      if (options.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {
        line.push("|");
      }
    }
    lines.push(
      options.delimiterEnd === false ? line.join("").replace(/ +$/, "") : line.join("")
    );
  }
  return lines.join("\n");
}
function serialize(value2) {
  return value2 === null || value2 === void 0 ? "" : String(value2);
}
function defaultStringLength(value2) {
  return value2.length;
}
function toAlignment(value2) {
  const code2 = typeof value2 === "string" ? value2.codePointAt(0) : 0;
  return code2 === 67 || code2 === 99 ? 99 : code2 === 76 || code2 === 108 ? 108 : code2 === 82 || code2 === 114 ? 114 : 0;
}
const gfmTableFromMarkdown = {
  enter: {
    table: enterTable,
    tableData: enterCell,
    tableHeader: enterCell,
    tableRow: enterRow
  },
  exit: {
    codeText: exitCodeText,
    table: exitTable,
    tableData: exit,
    tableHeader: exit,
    tableRow: exit
  }
};
function enterTable(token) {
  const align = token._align;
  this.enter(
    {
      type: "table",
      align: align.map((d) => d === "none" ? null : d),
      children: []
    },
    token
  );
  this.setData("inTable", true);
}
function exitTable(token) {
  this.exit(token);
  this.setData("inTable");
}
function enterRow(token) {
  this.enter({ type: "tableRow", children: [] }, token);
}
function exit(token) {
  this.exit(token);
}
function enterCell(token) {
  this.enter({ type: "tableCell", children: [] }, token);
}
function exitCodeText(token) {
  let value2 = this.resume();
  if (this.getData("inTable")) {
    value2 = value2.replace(/\\([\\|])/g, replace);
  }
  const node2 = (
    /** @type {InlineCode} */
    this.stack[this.stack.length - 1]
  );
  node2.value = value2;
  this.exit(token);
}
function replace($0, $1) {
  return $1 === "|" ? $1 : $0;
}
function gfmTableToMarkdown(options) {
  const settings2 = options || {};
  const padding = settings2.tableCellPadding;
  const alignDelimiters = settings2.tablePipeAlign;
  const stringLength = settings2.stringLength;
  const around = padding ? " " : "|";
  return {
    unsafe: [
      { character: "\r", inConstruct: "tableCell" },
      { character: "\n", inConstruct: "tableCell" },
      // A pipe, when followed by a tab or space (padding), or a dash or colon
      // (unpadded delimiter row), could result in a table.
      { atBreak: true, character: "|", after: "[	 :-]" },
      // A pipe in a cell must be encoded.
      { character: "|", inConstruct: "tableCell" },
      // A colon must be followed by a dash, in which case it could start a
      // delimiter row.
      { atBreak: true, character: ":", after: "-" },
      // A delimiter row can also start with a dash, when followed by more
      // dashes, a colon, or a pipe.
      // This is a stricter version than the built in check for lists, thematic
      // breaks, and setex heading underlines though:
      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
      { atBreak: true, character: "-", after: "[:|-]" }
    ],
    handlers: {
      table: handleTable,
      tableRow: handleTableRow,
      tableCell: handleTableCell,
      inlineCode: inlineCodeWithTable
    }
  };
  function handleTable(node2, _, context2, safeOptions) {
    return serializeData(
      handleTableAsData(node2, context2, safeOptions),
      node2.align
    );
  }
  function handleTableRow(node2, _, context2, safeOptions) {
    const row = handleTableRowAsData(node2, context2, safeOptions);
    const value2 = serializeData([row]);
    return value2.slice(0, value2.indexOf("\n"));
  }
  function handleTableCell(node2, _, context2, safeOptions) {
    const exit2 = context2.enter("tableCell");
    const subexit = context2.enter("phrasing");
    const value2 = containerPhrasing(node2, context2, {
      ...safeOptions,
      before: around,
      after: around
    });
    subexit();
    exit2();
    return value2;
  }
  function serializeData(matrix, align) {
    return markdownTable(matrix, {
      align,
      // @ts-expect-error: `markdown-table` types should support `null`.
      alignDelimiters,
      // @ts-expect-error: `markdown-table` types should support `null`.
      padding,
      // @ts-expect-error: `markdown-table` types should support `null`.
      stringLength
    });
  }
  function handleTableAsData(node2, context2, safeOptions) {
    const children = node2.children;
    let index2 = -1;
    const result = [];
    const subexit = context2.enter("table");
    while (++index2 < children.length) {
      result[index2] = handleTableRowAsData(
        children[index2],
        context2,
        safeOptions
      );
    }
    subexit();
    return result;
  }
  function handleTableRowAsData(node2, context2, safeOptions) {
    const children = node2.children;
    let index2 = -1;
    const result = [];
    const subexit = context2.enter("tableRow");
    while (++index2 < children.length) {
      result[index2] = handleTableCell(
        children[index2],
        node2,
        context2,
        safeOptions
      );
    }
    subexit();
    return result;
  }
  function inlineCodeWithTable(node2, parent, context2) {
    let value2 = inlineCode(node2, parent, context2);
    if (context2.stack.includes("tableCell")) {
      value2 = value2.replace(/\|/g, "\\$&");
    }
    return value2;
  }
}
function checkBullet(state) {
  const marker = state.options.bullet || "*";
  if (marker !== "*" && marker !== "+" && marker !== "-") {
    throw new Error(
      "Cannot serialize items with `" + marker + "` for `options.bullet`, expected `*`, `+`, or `-`"
    );
  }
  return marker;
}
function checkListItemIndent(state) {
  const style = state.options.listItemIndent || "tab";
  if (style === 1 || style === "1") {
    return "one";
  }
  if (style !== "tab" && style !== "one" && style !== "mixed") {
    throw new Error(
      "Cannot serialize items with `" + style + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`"
    );
  }
  return style;
}
function listItem(node2, parent, state, info) {
  const listItemIndent = checkListItemIndent(state);
  let bullet = state.bulletCurrent || checkBullet(state);
  if (parent && parent.type === "list" && parent.ordered) {
    bullet = (typeof parent.start === "number" && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node2)) + bullet;
  }
  let size = bullet.length + 1;
  if (listItemIndent === "tab" || listItemIndent === "mixed" && (parent && parent.type === "list" && parent.spread || node2.spread)) {
    size = Math.ceil(size / 4) * 4;
  }
  const tracker = state.createTracker(info);
  tracker.move(bullet + " ".repeat(size - bullet.length));
  tracker.shift(size);
  const exit2 = state.enter("listItem");
  const value2 = state.indentLines(
    state.containerFlow(node2, tracker.current()),
    map2
  );
  exit2();
  return value2;
  function map2(line, index2, blank) {
    if (index2) {
      return (blank ? "" : " ".repeat(size)) + line;
    }
    return (blank ? bullet : bullet + " ".repeat(size - bullet.length)) + line;
  }
}
const gfmTaskListItemFromMarkdown = {
  exit: {
    taskListCheckValueChecked: exitCheck,
    taskListCheckValueUnchecked: exitCheck,
    paragraph: exitParagraphWithTaskListItem
  }
};
const gfmTaskListItemToMarkdown = {
  unsafe: [{ atBreak: true, character: "-", after: "[:|-]" }],
  handlers: { listItem: listItemWithTaskListItem }
};
function exitCheck(token) {
  const node2 = (
    /** @type {ListItem} */
    this.stack[this.stack.length - 2]
  );
  node2.checked = token.type === "taskListCheckValueChecked";
}
function exitParagraphWithTaskListItem(token) {
  const parent = (
    /** @type {Parents} */
    this.stack[this.stack.length - 2]
  );
  if (parent && parent.type === "listItem" && typeof parent.checked === "boolean") {
    const node2 = (
      /** @type {Paragraph} */
      this.stack[this.stack.length - 1]
    );
    const head = node2.children[0];
    if (head && head.type === "text") {
      const siblings = parent.children;
      let index2 = -1;
      let firstParaghraph;
      while (++index2 < siblings.length) {
        const sibling = siblings[index2];
        if (sibling.type === "paragraph") {
          firstParaghraph = sibling;
          break;
        }
      }
      if (firstParaghraph === node2) {
        head.value = head.value.slice(1);
        if (head.value.length === 0) {
          node2.children.shift();
        } else if (node2.position && head.position && typeof head.position.start.offset === "number") {
          head.position.start.column++;
          head.position.start.offset++;
          node2.position.start = Object.assign({}, head.position.start);
        }
      }
    }
  }
  this.exit(token);
}
function listItemWithTaskListItem(node2, parent, context2, safeOptions) {
  const head = node2.children[0];
  const checkable = typeof node2.checked === "boolean" && head && head.type === "paragraph";
  const checkbox = "[" + (node2.checked ? "x" : " ") + "] ";
  const tracker = track(safeOptions);
  if (checkable) {
    tracker.move(checkbox);
  }
  let value2 = listItem(node2, parent, context2, {
    ...safeOptions,
    ...tracker.current()
  });
  if (checkable) {
    value2 = value2.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
  }
  return value2;
  function check($0) {
    return $0 + checkbox;
  }
}
function gfmFromMarkdown() {
  return [
    gfmAutolinkLiteralFromMarkdown,
    gfmFootnoteFromMarkdown(),
    gfmStrikethroughFromMarkdown,
    gfmTableFromMarkdown,
    gfmTaskListItemFromMarkdown
  ];
}
function gfmToMarkdown(options) {
  return {
    extensions: [
      gfmAutolinkLiteralToMarkdown,
      gfmFootnoteToMarkdown(),
      gfmStrikethroughToMarkdown,
      gfmTableToMarkdown(options),
      gfmTaskListItemToMarkdown
    ]
  };
}
function remarkGfm(options = {}) {
  const data = this.data();
  add2("micromarkExtensions", gfm(options));
  add2("fromMarkdownExtensions", gfmFromMarkdown());
  add2("toMarkdownExtensions", gfmToMarkdown(options));
  function add2(field, value2) {
    const list2 = (
      /** @type {unknown[]} */
      // Other extensions
      /* c8 ignore next 2 */
      data[field] ? data[field] : data[field] = []
    );
    list2.push(value2);
  }
}
var format = { exports: {} };
(function(module) {
  (function() {
    var namespace;
    {
      namespace = module.exports = format2;
    }
    namespace.format = format2;
    namespace.vsprintf = vsprintf;
    if (typeof console !== "undefined" && typeof console.log === "function") {
      namespace.printf = printf;
    }
    function printf() {
      console.log(format2.apply(null, arguments));
    }
    function vsprintf(fmt, replacements) {
      return format2.apply(null, [fmt].concat(replacements));
    }
    function format2(fmt) {
      var argIndex = 1, args = [].slice.call(arguments), i = 0, n = fmt.length, result = "", c, escaped = false, arg, tmp, leadingZero = false, precision, nextArg = function() {
        return args[argIndex++];
      }, slurpNumber = function() {
        var digits = "";
        while (/\d/.test(fmt[i])) {
          digits += fmt[i++];
          c = fmt[i];
        }
        return digits.length > 0 ? parseInt(digits) : null;
      };
      for (; i < n; ++i) {
        c = fmt[i];
        if (escaped) {
          escaped = false;
          if (c == ".") {
            leadingZero = false;
            c = fmt[++i];
          } else if (c == "0" && fmt[i + 1] == ".") {
            leadingZero = true;
            i += 2;
            c = fmt[i];
          } else {
            leadingZero = true;
          }
          precision = slurpNumber();
          switch (c) {
            case "b":
              result += parseInt(nextArg(), 10).toString(2);
              break;
            case "c":
              arg = nextArg();
              if (typeof arg === "string" || arg instanceof String)
                result += arg;
              else
                result += String.fromCharCode(parseInt(arg, 10));
              break;
            case "d":
              result += parseInt(nextArg(), 10);
              break;
            case "f":
              tmp = String(parseFloat(nextArg()).toFixed(precision || 6));
              result += leadingZero ? tmp : tmp.replace(/^0/, "");
              break;
            case "j":
              result += JSON.stringify(nextArg());
              break;
            case "o":
              result += "0" + parseInt(nextArg(), 10).toString(8);
              break;
            case "s":
              result += nextArg();
              break;
            case "x":
              result += "0x" + parseInt(nextArg(), 10).toString(16);
              break;
            case "X":
              result += "0x" + parseInt(nextArg(), 10).toString(16).toUpperCase();
              break;
            default:
              result += c;
              break;
          }
        } else if (c === "%") {
          escaped = true;
        } else {
          result += c;
        }
      }
      return result;
    }
  })();
})(format);
var formatExports = format.exports;
const formatter = /* @__PURE__ */ getDefaultExportFromCjs(formatExports);
const fault = Object.assign(create(Error), {
  eval: create(EvalError),
  range: create(RangeError),
  reference: create(ReferenceError),
  syntax: create(SyntaxError),
  type: create(TypeError),
  uri: create(URIError)
});
function create(Constructor) {
  FormattedError.displayName = Constructor.displayName || Constructor.name;
  return FormattedError;
  function FormattedError(format2, ...values) {
    const reason = format2 ? formatter(format2, ...values) : format2;
    return new Constructor(reason);
  }
}
const own = {}.hasOwnProperty;
const markers = {
  yaml: "-",
  toml: "+"
};
function matters(options) {
  const result = [];
  let index2 = -1;
  const presetsOrMatters = Array.isArray(options) ? options : options ? [options] : ["yaml"];
  while (++index2 < presetsOrMatters.length) {
    result[index2] = matter(presetsOrMatters[index2]);
  }
  return result;
}
function matter(option) {
  let result = option;
  if (typeof result === "string") {
    if (!own.call(markers, result)) {
      throw fault("Missing matter definition for `%s`", result);
    }
    result = {
      type: result,
      marker: markers[result]
    };
  } else if (typeof result !== "object") {
    throw fault("Expected matter to be an object, not `%j`", result);
  }
  if (!own.call(result, "type")) {
    throw fault("Missing `type` in matter `%j`", result);
  }
  if (!own.call(result, "fence") && !own.call(result, "marker")) {
    throw fault("Missing `marker` or `fence` in matter `%j`", result);
  }
  return result;
}
function frontmatter(options) {
  const listOfMatters = matters(options);
  const flow2 = {};
  let index2 = -1;
  while (++index2 < listOfMatters.length) {
    const matter2 = listOfMatters[index2];
    const code2 = fence$1(matter2, "open").charCodeAt(0);
    const construct2 = createConstruct(matter2);
    const existing = flow2[code2];
    if (Array.isArray(existing)) {
      existing.push(construct2);
    } else {
      flow2[code2] = [construct2];
    }
  }
  return {
    flow: flow2
  };
}
function createConstruct(matter2) {
  const anywhere = matter2.anywhere;
  const frontmatterType = (
    /** @type {TokenType} */
    matter2.type
  );
  const fenceType = (
    /** @type {TokenType} */
    frontmatterType + "Fence"
  );
  const sequenceType = (
    /** @type {TokenType} */
    fenceType + "Sequence"
  );
  const valueType = (
    /** @type {TokenType} */
    frontmatterType + "Value"
  );
  const closingFenceConstruct = {
    tokenize: tokenizeClosingFence,
    partial: true
  };
  let buffer2;
  let bufferIndex = 0;
  return {
    tokenize: tokenizeFrontmatter,
    concrete: true
  };
  function tokenizeFrontmatter(effects, ok2, nok) {
    const self2 = this;
    return start;
    function start(code2) {
      const position2 = self2.now();
      if (
        // Indent not allowed.
        position2.column === 1 && // Normally, only allowed in first line.
        (position2.line === 1 || anywhere)
      ) {
        buffer2 = fence$1(matter2, "open");
        bufferIndex = 0;
        if (code2 === buffer2.charCodeAt(bufferIndex)) {
          effects.enter(frontmatterType);
          effects.enter(fenceType);
          effects.enter(sequenceType);
          return openSequence(code2);
        }
      }
      return nok(code2);
    }
    function openSequence(code2) {
      if (bufferIndex === buffer2.length) {
        effects.exit(sequenceType);
        if (markdownSpace(code2)) {
          effects.enter("whitespace");
          return openSequenceWhitespace(code2);
        }
        return openAfter(code2);
      }
      if (code2 === buffer2.charCodeAt(bufferIndex++)) {
        effects.consume(code2);
        return openSequence;
      }
      return nok(code2);
    }
    function openSequenceWhitespace(code2) {
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return openSequenceWhitespace;
      }
      effects.exit("whitespace");
      return openAfter(code2);
    }
    function openAfter(code2) {
      if (markdownLineEnding(code2)) {
        effects.exit(fenceType);
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        buffer2 = fence$1(matter2, "close");
        bufferIndex = 0;
        return effects.attempt(closingFenceConstruct, after, contentStart);
      }
      return nok(code2);
    }
    function contentStart(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return contentEnd(code2);
      }
      effects.enter(valueType);
      return contentInside(code2);
    }
    function contentInside(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit(valueType);
        return contentEnd(code2);
      }
      effects.consume(code2);
      return contentInside;
    }
    function contentEnd(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return effects.attempt(closingFenceConstruct, after, contentStart);
    }
    function after(code2) {
      effects.exit(frontmatterType);
      return ok2(code2);
    }
  }
  function tokenizeClosingFence(effects, ok2, nok) {
    let bufferIndex2 = 0;
    return closeStart;
    function closeStart(code2) {
      if (code2 === buffer2.charCodeAt(bufferIndex2)) {
        effects.enter(fenceType);
        effects.enter(sequenceType);
        return closeSequence(code2);
      }
      return nok(code2);
    }
    function closeSequence(code2) {
      if (bufferIndex2 === buffer2.length) {
        effects.exit(sequenceType);
        if (markdownSpace(code2)) {
          effects.enter("whitespace");
          return closeSequenceWhitespace(code2);
        }
        return closeAfter(code2);
      }
      if (code2 === buffer2.charCodeAt(bufferIndex2++)) {
        effects.consume(code2);
        return closeSequence;
      }
      return nok(code2);
    }
    function closeSequenceWhitespace(code2) {
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return closeSequenceWhitespace;
      }
      effects.exit("whitespace");
      return closeAfter(code2);
    }
    function closeAfter(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit(fenceType);
        return ok2(code2);
      }
      return nok(code2);
    }
  }
}
function fence$1(matter2, prop) {
  return matter2.marker ? pick$1(matter2.marker, prop).repeat(3) : (
    // @ts-expect-error: They’re mutually exclusive.
    pick$1(matter2.fence, prop)
  );
}
function pick$1(schema2, prop) {
  return typeof schema2 === "string" ? schema2 : schema2[prop];
}
function frontmatterFromMarkdown(options) {
  const settings2 = matters(options);
  const enter = {};
  const exit2 = {};
  let index2 = -1;
  while (++index2 < settings2.length) {
    const matter2 = settings2[index2];
    enter[matter2.type] = opener(matter2);
    exit2[matter2.type] = close;
    exit2[matter2.type + "Value"] = value;
  }
  return { enter, exit: exit2 };
}
function opener(matter2) {
  return open;
  function open(token) {
    this.enter({ type: matter2.type, value: "" }, token);
    this.buffer();
  }
}
function close(token) {
  const data = this.resume();
  const node2 = (
    /** @type {Literal} */
    this.exit(token)
  );
  node2.value = data.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
}
function value(token) {
  this.config.enter.data.call(this, token);
  this.config.exit.data.call(this, token);
}
function frontmatterToMarkdown(options) {
  const unsafe = [];
  const handlers = {};
  const settings2 = matters(options);
  let index2 = -1;
  while (++index2 < settings2.length) {
    const matter2 = settings2[index2];
    handlers[matter2.type] = handler(matter2);
    unsafe.push({ atBreak: true, character: fence(matter2, "open").charAt(0) });
  }
  return { unsafe, handlers };
}
function handler(matter2) {
  const open = fence(matter2, "open");
  const close2 = fence(matter2, "close");
  return handle;
  function handle(node2) {
    return open + (node2.value ? "\n" + node2.value : "") + "\n" + close2;
  }
}
function fence(matter2, prop) {
  return matter2.marker ? pick(matter2.marker, prop).repeat(3) : (
    // @ts-expect-error: They’re mutually exclusive.
    pick(matter2.fence, prop)
  );
}
function pick(schema2, prop) {
  return typeof schema2 === "string" ? schema2 : schema2[prop];
}
function remarkFrontmatter(options = "yaml") {
  const data = this.data();
  add2("micromarkExtensions", frontmatter(options));
  add2("fromMarkdownExtensions", frontmatterFromMarkdown(options));
  add2("toMarkdownExtensions", frontmatterToMarkdown(options));
  function add2(field, value2) {
    const list2 = (
      /** @type {unknown[]} */
      // Other extensions
      /* c8 ignore next 2 */
      data[field] ? data[field] : data[field] = []
    );
    list2.push(value2);
  }
}
/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */
function isNothing(subject) {
  return typeof subject === "undefined" || subject === null;
}
function isObject(subject) {
  return typeof subject === "object" && subject !== null;
}
function toArray(sequence) {
  if (Array.isArray(sequence))
    return sequence;
  else if (isNothing(sequence))
    return [];
  return [sequence];
}
function extend2(target, source) {
  var index2, length, key, sourceKeys;
  if (source) {
    sourceKeys = Object.keys(source);
    for (index2 = 0, length = sourceKeys.length; index2 < length; index2 += 1) {
      key = sourceKeys[index2];
      target[key] = source[key];
    }
  }
  return target;
}
function repeat(string2, count) {
  var result = "", cycle;
  for (cycle = 0; cycle < count; cycle += 1) {
    result += string2;
  }
  return result;
}
function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}
var isNothing_1 = isNothing;
var isObject_1 = isObject;
var toArray_1 = toArray;
var repeat_1 = repeat;
var isNegativeZero_1 = isNegativeZero;
var extend_1 = extend2;
var common = {
  isNothing: isNothing_1,
  isObject: isObject_1,
  toArray: toArray_1,
  repeat: repeat_1,
  isNegativeZero: isNegativeZero_1,
  extend: extend_1
};
function formatError(exception2, compact) {
  var where = "", message = exception2.reason || "(unknown reason)";
  if (!exception2.mark)
    return message;
  if (exception2.mark.name) {
    where += 'in "' + exception2.mark.name + '" ';
  }
  where += "(" + (exception2.mark.line + 1) + ":" + (exception2.mark.column + 1) + ")";
  if (!compact && exception2.mark.snippet) {
    where += "\n\n" + exception2.mark.snippet;
  }
  return message + " " + where;
}
function YAMLException$1(reason, mark2) {
  Error.call(this);
  this.name = "YAMLException";
  this.reason = reason;
  this.mark = mark2;
  this.message = formatError(this, false);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack || "";
  }
}
YAMLException$1.prototype = Object.create(Error.prototype);
YAMLException$1.prototype.constructor = YAMLException$1;
YAMLException$1.prototype.toString = function toString2(compact) {
  return this.name + ": " + formatError(this, compact);
};
var exception = YAMLException$1;
function getLine(buffer2, lineStart, lineEnd, position2, maxLineLength) {
  var head = "";
  var tail = "";
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
  if (position2 - lineStart > maxHalfLength) {
    head = " ... ";
    lineStart = position2 - maxHalfLength + head.length;
  }
  if (lineEnd - position2 > maxHalfLength) {
    tail = " ...";
    lineEnd = position2 + maxHalfLength - tail.length;
  }
  return {
    str: head + buffer2.slice(lineStart, lineEnd).replace(/\t/g, "→") + tail,
    pos: position2 - lineStart + head.length
    // relative position
  };
}
function padStart(string2, max) {
  return common.repeat(" ", max - string2.length) + string2;
}
function makeSnippet(mark2, options) {
  options = Object.create(options || null);
  if (!mark2.buffer)
    return null;
  if (!options.maxLength)
    options.maxLength = 79;
  if (typeof options.indent !== "number")
    options.indent = 1;
  if (typeof options.linesBefore !== "number")
    options.linesBefore = 3;
  if (typeof options.linesAfter !== "number")
    options.linesAfter = 2;
  var re = /\r?\n|\r|\0/g;
  var lineStarts = [0];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;
  while (match = re.exec(mark2.buffer)) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);
    if (mark2.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }
  if (foundLineNo < 0)
    foundLineNo = lineStarts.length - 1;
  var result = "", i, line;
  var lineNoLength = Math.min(mark2.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0)
      break;
    line = getLine(
      mark2.buffer,
      lineStarts[foundLineNo - i],
      lineEnds[foundLineNo - i],
      mark2.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
      maxLineLength
    );
    result = common.repeat(" ", options.indent) + padStart((mark2.line - i + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
  }
  line = getLine(mark2.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark2.position, maxLineLength);
  result += common.repeat(" ", options.indent) + padStart((mark2.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length)
      break;
    line = getLine(
      mark2.buffer,
      lineStarts[foundLineNo + i],
      lineEnds[foundLineNo + i],
      mark2.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
      maxLineLength
    );
    result += common.repeat(" ", options.indent) + padStart((mark2.line + i + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  }
  return result.replace(/\n$/, "");
}
var snippet = makeSnippet;
var TYPE_CONSTRUCTOR_OPTIONS = [
  "kind",
  "multi",
  "resolve",
  "construct",
  "instanceOf",
  "predicate",
  "represent",
  "representName",
  "defaultStyle",
  "styleAliases"
];
var YAML_NODE_KINDS = [
  "scalar",
  "sequence",
  "mapping"
];
function compileStyleAliases(map2) {
  var result = {};
  if (map2 !== null) {
    Object.keys(map2).forEach(function(style) {
      map2[style].forEach(function(alias) {
        result[String(alias)] = style;
      });
    });
  }
  return result;
}
function Type$1(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function(name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });
  this.options = options;
  this.tag = tag;
  this.kind = options["kind"] || null;
  this.resolve = options["resolve"] || function() {
    return true;
  };
  this.construct = options["construct"] || function(data) {
    return data;
  };
  this.instanceOf = options["instanceOf"] || null;
  this.predicate = options["predicate"] || null;
  this.represent = options["represent"] || null;
  this.representName = options["representName"] || null;
  this.defaultStyle = options["defaultStyle"] || null;
  this.multi = options["multi"] || false;
  this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}
var type = Type$1;
function compileList(schema2, name) {
  var result = [];
  schema2[name].forEach(function(currentType) {
    var newIndex = result.length;
    result.forEach(function(previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
        newIndex = previousIndex;
      }
    });
    result[newIndex] = currentType;
  });
  return result;
}
function compileMap() {
  var result = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {},
    multi: {
      scalar: [],
      sequence: [],
      mapping: [],
      fallback: []
    }
  }, index2, length;
  function collectType(type2) {
    if (type2.multi) {
      result.multi[type2.kind].push(type2);
      result.multi["fallback"].push(type2);
    } else {
      result[type2.kind][type2.tag] = result["fallback"][type2.tag] = type2;
    }
  }
  for (index2 = 0, length = arguments.length; index2 < length; index2 += 1) {
    arguments[index2].forEach(collectType);
  }
  return result;
}
function Schema$1(definition2) {
  return this.extend(definition2);
}
Schema$1.prototype.extend = function extend3(definition2) {
  var implicit = [];
  var explicit = [];
  if (definition2 instanceof type) {
    explicit.push(definition2);
  } else if (Array.isArray(definition2)) {
    explicit = explicit.concat(definition2);
  } else if (definition2 && (Array.isArray(definition2.implicit) || Array.isArray(definition2.explicit))) {
    if (definition2.implicit)
      implicit = implicit.concat(definition2.implicit);
    if (definition2.explicit)
      explicit = explicit.concat(definition2.explicit);
  } else {
    throw new exception("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
  }
  implicit.forEach(function(type$12) {
    if (!(type$12 instanceof type)) {
      throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
    if (type$12.loadKind && type$12.loadKind !== "scalar") {
      throw new exception("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
    }
    if (type$12.multi) {
      throw new exception("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
    }
  });
  explicit.forEach(function(type$12) {
    if (!(type$12 instanceof type)) {
      throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
  });
  var result = Object.create(Schema$1.prototype);
  result.implicit = (this.implicit || []).concat(implicit);
  result.explicit = (this.explicit || []).concat(explicit);
  result.compiledImplicit = compileList(result, "implicit");
  result.compiledExplicit = compileList(result, "explicit");
  result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
  return result;
};
var schema = Schema$1;
var str = new type("tag:yaml.org,2002:str", {
  kind: "scalar",
  construct: function(data) {
    return data !== null ? data : "";
  }
});
var seq = new type("tag:yaml.org,2002:seq", {
  kind: "sequence",
  construct: function(data) {
    return data !== null ? data : [];
  }
});
var map = new type("tag:yaml.org,2002:map", {
  kind: "mapping",
  construct: function(data) {
    return data !== null ? data : {};
  }
});
var failsafe = new schema({
  explicit: [
    str,
    seq,
    map
  ]
});
function resolveYamlNull(data) {
  if (data === null)
    return true;
  var max = data.length;
  return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
}
function constructYamlNull() {
  return null;
}
function isNull(object) {
  return object === null;
}
var _null = new type("tag:yaml.org,2002:null", {
  kind: "scalar",
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function() {
      return "~";
    },
    lowercase: function() {
      return "null";
    },
    uppercase: function() {
      return "NULL";
    },
    camelcase: function() {
      return "Null";
    },
    empty: function() {
      return "";
    }
  },
  defaultStyle: "lowercase"
});
function resolveYamlBoolean(data) {
  if (data === null)
    return false;
  var max = data.length;
  return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
}
function constructYamlBoolean(data) {
  return data === "true" || data === "True" || data === "TRUE";
}
function isBoolean(object) {
  return Object.prototype.toString.call(object) === "[object Boolean]";
}
var bool = new type("tag:yaml.org,2002:bool", {
  kind: "scalar",
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function(object) {
      return object ? "true" : "false";
    },
    uppercase: function(object) {
      return object ? "TRUE" : "FALSE";
    },
    camelcase: function(object) {
      return object ? "True" : "False";
    }
  },
  defaultStyle: "lowercase"
});
function isHexCode(c) {
  return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
}
function isOctCode(c) {
  return 48 <= c && c <= 55;
}
function isDecCode(c) {
  return 48 <= c && c <= 57;
}
function resolveYamlInteger(data) {
  if (data === null)
    return false;
  var max = data.length, index2 = 0, hasDigits = false, ch;
  if (!max)
    return false;
  ch = data[index2];
  if (ch === "-" || ch === "+") {
    ch = data[++index2];
  }
  if (ch === "0") {
    if (index2 + 1 === max)
      return true;
    ch = data[++index2];
    if (ch === "b") {
      index2++;
      for (; index2 < max; index2++) {
        ch = data[index2];
        if (ch === "_")
          continue;
        if (ch !== "0" && ch !== "1")
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "x") {
      index2++;
      for (; index2 < max; index2++) {
        ch = data[index2];
        if (ch === "_")
          continue;
        if (!isHexCode(data.charCodeAt(index2)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "o") {
      index2++;
      for (; index2 < max; index2++) {
        ch = data[index2];
        if (ch === "_")
          continue;
        if (!isOctCode(data.charCodeAt(index2)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
  }
  if (ch === "_")
    return false;
  for (; index2 < max; index2++) {
    ch = data[index2];
    if (ch === "_")
      continue;
    if (!isDecCode(data.charCodeAt(index2))) {
      return false;
    }
    hasDigits = true;
  }
  if (!hasDigits || ch === "_")
    return false;
  return true;
}
function constructYamlInteger(data) {
  var value2 = data, sign2 = 1, ch;
  if (value2.indexOf("_") !== -1) {
    value2 = value2.replace(/_/g, "");
  }
  ch = value2[0];
  if (ch === "-" || ch === "+") {
    if (ch === "-")
      sign2 = -1;
    value2 = value2.slice(1);
    ch = value2[0];
  }
  if (value2 === "0")
    return 0;
  if (ch === "0") {
    if (value2[1] === "b")
      return sign2 * parseInt(value2.slice(2), 2);
    if (value2[1] === "x")
      return sign2 * parseInt(value2.slice(2), 16);
    if (value2[1] === "o")
      return sign2 * parseInt(value2.slice(2), 8);
  }
  return sign2 * parseInt(value2, 10);
}
function isInteger(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
}
var int = new type("tag:yaml.org,2002:int", {
  kind: "scalar",
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary: function(obj) {
      return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
    },
    octal: function(obj) {
      return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
    },
    decimal: function(obj) {
      return obj.toString(10);
    },
    /* eslint-disable max-len */
    hexadecimal: function(obj) {
      return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
    }
  },
  defaultStyle: "decimal",
  styleAliases: {
    binary: [2, "bin"],
    octal: [8, "oct"],
    decimal: [10, "dec"],
    hexadecimal: [16, "hex"]
  }
});
var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
);
function resolveYamlFloat(data) {
  if (data === null)
    return false;
  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === "_") {
    return false;
  }
  return true;
}
function constructYamlFloat(data) {
  var value2, sign2;
  value2 = data.replace(/_/g, "").toLowerCase();
  sign2 = value2[0] === "-" ? -1 : 1;
  if ("+-".indexOf(value2[0]) >= 0) {
    value2 = value2.slice(1);
  }
  if (value2 === ".inf") {
    return sign2 === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value2 === ".nan") {
    return NaN;
  }
  return sign2 * parseFloat(value2, 10);
}
var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
function representYamlFloat(object, style) {
  var res;
  if (isNaN(object)) {
    switch (style) {
      case "lowercase":
        return ".nan";
      case "uppercase":
        return ".NAN";
      case "camelcase":
        return ".NaN";
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return ".inf";
      case "uppercase":
        return ".INF";
      case "camelcase":
        return ".Inf";
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return "-.inf";
      case "uppercase":
        return "-.INF";
      case "camelcase":
        return "-.Inf";
    }
  } else if (common.isNegativeZero(object)) {
    return "-0.0";
  }
  res = object.toString(10);
  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
}
function isFloat(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
}
var float = new type("tag:yaml.org,2002:float", {
  kind: "scalar",
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: "lowercase"
});
var json = failsafe.extend({
  implicit: [
    _null,
    bool,
    int,
    float
  ]
});
var core = json;
var YAML_DATE_REGEXP = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
);
var YAML_TIMESTAMP_REGEXP = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
);
function resolveYamlTimestamp(data) {
  if (data === null)
    return false;
  if (YAML_DATE_REGEXP.exec(data) !== null)
    return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
    return true;
  return false;
}
function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null)
    match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null)
    throw new Error("Date resolve error");
  year = +match[1];
  month = +match[2] - 1;
  day = +match[3];
  if (!match[4]) {
    return new Date(Date.UTC(year, month, day));
  }
  hour = +match[4];
  minute = +match[5];
  second = +match[6];
  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) {
      fraction += "0";
    }
    fraction = +fraction;
  }
  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 6e4;
    if (match[9] === "-")
      delta = -delta;
  }
  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta)
    date.setTime(date.getTime() - delta);
  return date;
}
function representYamlTimestamp(object) {
  return object.toISOString();
}
var timestamp = new type("tag:yaml.org,2002:timestamp", {
  kind: "scalar",
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});
function resolveYamlMerge(data) {
  return data === "<<" || data === null;
}
var merge = new type("tag:yaml.org,2002:merge", {
  kind: "scalar",
  resolve: resolveYamlMerge
});
var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
function resolveYamlBinary(data) {
  if (data === null)
    return false;
  var code2, idx, bitlen = 0, max = data.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    code2 = map2.indexOf(data.charAt(idx));
    if (code2 > 64)
      continue;
    if (code2 < 0)
      return false;
    bitlen += 6;
  }
  return bitlen % 8 === 0;
}
function constructYamlBinary(data) {
  var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map2 = BASE64_MAP, bits = 0, result = [];
  for (idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 255);
      result.push(bits >> 8 & 255);
      result.push(bits & 255);
    }
    bits = bits << 6 | map2.indexOf(input.charAt(idx));
  }
  tailbits = max % 4 * 6;
  if (tailbits === 0) {
    result.push(bits >> 16 & 255);
    result.push(bits >> 8 & 255);
    result.push(bits & 255);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 255);
    result.push(bits >> 2 & 255);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 255);
  }
  return new Uint8Array(result);
}
function representYamlBinary(object) {
  var result = "", bits = 0, idx, tail, max = object.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map2[bits >> 18 & 63];
      result += map2[bits >> 12 & 63];
      result += map2[bits >> 6 & 63];
      result += map2[bits & 63];
    }
    bits = (bits << 8) + object[idx];
  }
  tail = max % 3;
  if (tail === 0) {
    result += map2[bits >> 18 & 63];
    result += map2[bits >> 12 & 63];
    result += map2[bits >> 6 & 63];
    result += map2[bits & 63];
  } else if (tail === 2) {
    result += map2[bits >> 10 & 63];
    result += map2[bits >> 4 & 63];
    result += map2[bits << 2 & 63];
    result += map2[64];
  } else if (tail === 1) {
    result += map2[bits >> 2 & 63];
    result += map2[bits << 4 & 63];
    result += map2[64];
    result += map2[64];
  }
  return result;
}
function isBinary(obj) {
  return Object.prototype.toString.call(obj) === "[object Uint8Array]";
}
var binary = new type("tag:yaml.org,2002:binary", {
  kind: "scalar",
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});
var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
var _toString$2 = Object.prototype.toString;
function resolveYamlOmap(data) {
  if (data === null)
    return true;
  var objectKeys = [], index2, length, pair, pairKey, pairHasKey, object = data;
  for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
    pair = object[index2];
    pairHasKey = false;
    if (_toString$2.call(pair) !== "[object Object]")
      return false;
    for (pairKey in pair) {
      if (_hasOwnProperty$3.call(pair, pairKey)) {
        if (!pairHasKey)
          pairHasKey = true;
        else
          return false;
      }
    }
    if (!pairHasKey)
      return false;
    if (objectKeys.indexOf(pairKey) === -1)
      objectKeys.push(pairKey);
    else
      return false;
  }
  return true;
}
function constructYamlOmap(data) {
  return data !== null ? data : [];
}
var omap = new type("tag:yaml.org,2002:omap", {
  kind: "sequence",
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});
var _toString$1 = Object.prototype.toString;
function resolveYamlPairs(data) {
  if (data === null)
    return true;
  var index2, length, pair, keys2, result, object = data;
  result = new Array(object.length);
  for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
    pair = object[index2];
    if (_toString$1.call(pair) !== "[object Object]")
      return false;
    keys2 = Object.keys(pair);
    if (keys2.length !== 1)
      return false;
    result[index2] = [keys2[0], pair[keys2[0]]];
  }
  return true;
}
function constructYamlPairs(data) {
  if (data === null)
    return [];
  var index2, length, pair, keys2, result, object = data;
  result = new Array(object.length);
  for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
    pair = object[index2];
    keys2 = Object.keys(pair);
    result[index2] = [keys2[0], pair[keys2[0]]];
  }
  return result;
}
var pairs = new type("tag:yaml.org,2002:pairs", {
  kind: "sequence",
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});
var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
function resolveYamlSet(data) {
  if (data === null)
    return true;
  var key, object = data;
  for (key in object) {
    if (_hasOwnProperty$2.call(object, key)) {
      if (object[key] !== null)
        return false;
    }
  }
  return true;
}
function constructYamlSet(data) {
  return data !== null ? data : {};
}
var set = new type("tag:yaml.org,2002:set", {
  kind: "mapping",
  resolve: resolveYamlSet,
  construct: constructYamlSet
});
var _default = core.extend({
  implicit: [
    timestamp,
    merge
  ],
  explicit: [
    binary,
    omap,
    pairs,
    set
  ]
});
var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
function _class(obj) {
  return Object.prototype.toString.call(obj);
}
function is_EOL(c) {
  return c === 10 || c === 13;
}
function is_WHITE_SPACE(c) {
  return c === 9 || c === 32;
}
function is_WS_OR_EOL(c) {
  return c === 9 || c === 32 || c === 10 || c === 13;
}
function is_FLOW_INDICATOR(c) {
  return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
}
function fromHexCode(c) {
  var lc;
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  lc = c | 32;
  if (97 <= lc && lc <= 102) {
    return lc - 97 + 10;
  }
  return -1;
}
function escapedHexLen(c) {
  if (c === 120) {
    return 2;
  }
  if (c === 117) {
    return 4;
  }
  if (c === 85) {
    return 8;
  }
  return 0;
}
function fromDecimalCode(c) {
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  return -1;
}
function simpleEscapeSequence(c) {
  return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "" : c === 95 ? " " : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
}
function charFromCodepoint(c) {
  if (c <= 65535) {
    return String.fromCharCode(c);
  }
  return String.fromCharCode(
    (c - 65536 >> 10) + 55296,
    (c - 65536 & 1023) + 56320
  );
}
var simpleEscapeCheck = new Array(256);
var simpleEscapeMap = new Array(256);
for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}
function State$1(input, options) {
  this.input = input;
  this.filename = options["filename"] || null;
  this.schema = options["schema"] || _default;
  this.onWarning = options["onWarning"] || null;
  this.legacy = options["legacy"] || false;
  this.json = options["json"] || false;
  this.listener = options["listener"] || null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;
  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0;
  this.firstTabInLine = -1;
  this.documents = [];
}
function generateError(state, message) {
  var mark2 = {
    name: state.filename,
    buffer: state.input.slice(0, -1),
    // omit trailing \0
    position: state.position,
    line: state.line,
    column: state.position - state.lineStart
  };
  mark2.snippet = snippet(mark2);
  return new exception(message, mark2);
}
function throwError(state, message) {
  throw generateError(state, message);
}
function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}
var directiveHandlers = {
  YAML: function handleYamlDirective(state, name, args) {
    var match, major, minor;
    if (state.version !== null) {
      throwError(state, "duplication of %YAML directive");
    }
    if (args.length !== 1) {
      throwError(state, "YAML directive accepts exactly one argument");
    }
    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
    if (match === null) {
      throwError(state, "ill-formed argument of the YAML directive");
    }
    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);
    if (major !== 1) {
      throwError(state, "unacceptable YAML version of the document");
    }
    state.version = args[0];
    state.checkLineBreaks = minor < 2;
    if (minor !== 1 && minor !== 2) {
      throwWarning(state, "unsupported YAML version of the document");
    }
  },
  TAG: function handleTagDirective(state, name, args) {
    var handle, prefix;
    if (args.length !== 2) {
      throwError(state, "TAG directive accepts exactly two arguments");
    }
    handle = args[0];
    prefix = args[1];
    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
    }
    if (_hasOwnProperty$1.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }
    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
    }
    try {
      prefix = decodeURIComponent(prefix);
    } catch (err) {
      throwError(state, "tag prefix is malformed: " + prefix);
    }
    state.tagMap[handle] = prefix;
  }
};
function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;
  if (start < end) {
    _result = state.input.slice(start, end);
    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
          throwError(state, "expected valid JSON character");
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, "the stream contains non-printable characters");
    }
    state.result += _result;
  }
}
function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index2, quantity;
  if (!common.isObject(source)) {
    throwError(state, "cannot merge mappings; the provided source object is unacceptable");
  }
  sourceKeys = Object.keys(source);
  for (index2 = 0, quantity = sourceKeys.length; index2 < quantity; index2 += 1) {
    key = sourceKeys[index2];
    if (!_hasOwnProperty$1.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}
function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
  var index2, quantity;
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);
    for (index2 = 0, quantity = keyNode.length; index2 < quantity; index2 += 1) {
      if (Array.isArray(keyNode[index2])) {
        throwError(state, "nested arrays are not supported inside keys");
      }
      if (typeof keyNode === "object" && _class(keyNode[index2]) === "[object Object]") {
        keyNode[index2] = "[object Object]";
      }
    }
  }
  if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
    keyNode = "[object Object]";
  }
  keyNode = String(keyNode);
  if (_result === null) {
    _result = {};
  }
  if (keyTag === "tag:yaml.org,2002:merge") {
    if (Array.isArray(valueNode)) {
      for (index2 = 0, quantity = valueNode.length; index2 < quantity; index2 += 1) {
        mergeMappings(state, _result, valueNode[index2], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, "duplicated mapping key");
    }
    if (keyNode === "__proto__") {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }
  return _result;
}
function readLineBreak(state) {
  var ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 10) {
    state.position++;
  } else if (ch === 13) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 10) {
      state.position++;
    }
  } else {
    throwError(state, "a line break is expected");
  }
  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}
function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 9 && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }
    if (allowComments && ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 10 && ch !== 13 && ch !== 0);
    }
    if (is_EOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;
      while (ch === 32) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }
  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, "deficient indentation");
  }
  return lineBreaks;
}
function testDocumentSeparator(state) {
  var _position = state.position, ch;
  ch = state.input.charCodeAt(_position);
  if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);
    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }
  return false;
}
function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += " ";
  } else if (count > 1) {
    state.result += common.repeat("\n", count - 1);
  }
}
function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
  ch = state.input.charCodeAt(state.position);
  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
    return false;
  }
  if (ch === 63 || ch === 45) {
    following = state.input.charCodeAt(state.position + 1);
    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }
  state.kind = "scalar";
  state.result = "";
  captureStart = captureEnd = state.position;
  hasPendingContent = false;
  while (ch !== 0) {
    if (ch === 58) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }
    } else if (ch === 35) {
      preceding = state.input.charCodeAt(state.position - 1);
      if (is_WS_OR_EOL(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);
      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }
    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }
    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }
    ch = state.input.charCodeAt(++state.position);
  }
  captureSegment(state, captureStart, captureEnd, false);
  if (state.result) {
    return true;
  }
  state.kind = _kind;
  state.result = _result;
  return false;
}
function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 39) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 39) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (ch === 39) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a single quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a single quoted scalar");
}
function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 34) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 34) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    } else if (ch === 92) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;
        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);
          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            throwError(state, "expected hexadecimal character");
          }
        }
        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        throwError(state, "unknown escape sequence");
      }
      captureStart = captureEnd = state.position;
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a double quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a double quoted scalar");
}
function readFlowCollection(state, nodeIndent) {
  var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 91) {
    terminator = 93;
    isMapping = false;
    _result = [];
  } else if (ch === 123) {
    terminator = 125;
    isMapping = true;
    _result = {};
  } else {
    return false;
  }
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(++state.position);
  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? "mapping" : "sequence";
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, "missed comma between flow collection entries");
    } else if (ch === 44) {
      throwError(state, "expected the node content, but found ','");
    }
    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;
    if (ch === 63) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }
    _line = state.line;
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if ((isExplicitPair || state.line === _line) && ch === 58) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }
    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === 44) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }
  throwError(state, "unexpected end of the stream within a flow collection");
}
function readBlockScalar(state, nodeIndent) {
  var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 124) {
    folding = false;
  } else if (ch === 62) {
    folding = true;
  } else {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);
    if (ch === 43 || ch === 45) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, "repeat of a chomping mode identifier");
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, "repeat of an indentation width identifier");
      }
    } else {
      break;
    }
  }
  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));
    if (ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!is_EOL(ch) && ch !== 0);
    }
  }
  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);
    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }
    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }
    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }
    if (state.lineIndent < textIndent) {
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          state.result += "\n";
        }
      }
      break;
    }
    if (folding) {
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat("\n", emptyLines + 1);
      } else if (emptyLines === 0) {
        if (didReadContent) {
          state.result += " ";
        }
      } else {
        state.result += common.repeat("\n", emptyLines);
      }
    } else {
      state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
    }
    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;
    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, state.position, false);
  }
  return true;
}
function readBlockSequence(state, nodeIndent) {
  var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
  if (state.firstTabInLine !== -1)
    return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    if (ch !== 45) {
      break;
    }
    following = state.input.charCodeAt(state.position + 1);
    if (!is_WS_OR_EOL(following)) {
      break;
    }
    detected = true;
    state.position++;
    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }
    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a sequence entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "sequence";
    state.result = _result;
    return true;
  }
  return false;
}
function readBlockMapping(state, nodeIndent, flowIndent) {
  var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
  if (state.firstTabInLine !== -1)
    return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line;
    if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
      if (ch === 63) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }
        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
      }
      state.position += 1;
      ch = following;
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;
      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        break;
      }
      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 58) {
          ch = state.input.charCodeAt(++state.position);
          if (!is_WS_OR_EOL(ch)) {
            throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
          }
          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          throwError(state, "can not read an implicit mapping pair; a colon is missed");
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true;
        }
      } else if (detected) {
        throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true;
      }
    }
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }
      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a mapping entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "mapping";
    state.result = _result;
  }
  return detected;
}
function readTagProperty(state) {
  var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 33)
    return false;
  if (state.tag !== null) {
    throwError(state, "duplication of a tag property");
  }
  ch = state.input.charCodeAt(++state.position);
  if (ch === 60) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 33) {
    isNamed = true;
    tagHandle = "!!";
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = "!";
  }
  _position = state.position;
  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 62);
    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, "unexpected end of the stream within a verbatim tag");
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 33) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);
          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, "named tag handle cannot contain such characters");
          }
          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, "tag suffix cannot contain exclamation marks");
        }
      }
      ch = state.input.charCodeAt(++state.position);
    }
    tagName = state.input.slice(_position, state.position);
    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, "tag suffix cannot contain flow indicator characters");
    }
  }
  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, "tag name cannot contain such characters: " + tagName);
  }
  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, "tag name is malformed: " + tagName);
  }
  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === "!") {
    state.tag = "!" + tagName;
  } else if (tagHandle === "!!") {
    state.tag = "tag:yaml.org,2002:" + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }
  return true;
}
function readAnchorProperty(state) {
  var _position, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 38)
    return false;
  if (state.anchor !== null) {
    throwError(state, "duplication of an anchor property");
  }
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an anchor node must contain at least one character");
  }
  state.anchor = state.input.slice(_position, state.position);
  return true;
}
function readAlias(state) {
  var _position, alias, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 42)
    return false;
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an alias node must contain at least one character");
  }
  alias = state.input.slice(_position, state.position);
  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }
  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}
function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type2, flowIndent, blockIndent;
  if (state.listener !== null) {
    state.listener("open", state);
  }
  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;
      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }
  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }
  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }
  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }
    blockIndent = state.position - state.lineStart;
    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;
          if (state.tag !== null || state.anchor !== null) {
            throwError(state, "alias node should not have any properties");
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;
          if (state.tag === null) {
            state.tag = "?";
          }
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }
  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }
  } else if (state.tag === "?") {
    if (state.result !== null && state.kind !== "scalar") {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }
    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type2 = state.implicitTypes[typeIndex];
      if (type2.resolve(state.result)) {
        state.result = type2.construct(state.result);
        state.tag = type2.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== "!") {
    if (_hasOwnProperty$1.call(state.typeMap[state.kind || "fallback"], state.tag)) {
      type2 = state.typeMap[state.kind || "fallback"][state.tag];
    } else {
      type2 = null;
      typeList = state.typeMap.multi[state.kind || "fallback"];
      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type2 = typeList[typeIndex];
          break;
        }
      }
    }
    if (!type2) {
      throwError(state, "unknown tag !<" + state.tag + ">");
    }
    if (state.result !== null && type2.kind !== state.kind) {
      throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type2.kind + '", not "' + state.kind + '"');
    }
    if (!type2.resolve(state.result, state.tag)) {
      throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
    } else {
      state.result = type2.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }
  if (state.listener !== null) {
    state.listener("close", state);
  }
  return state.tag !== null || state.anchor !== null || hasContent;
}
function readDocument(state) {
  var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = /* @__PURE__ */ Object.create(null);
  state.anchorMap = /* @__PURE__ */ Object.create(null);
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if (state.lineIndent > 0 || ch !== 37) {
      break;
    }
    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];
    if (directiveName.length < 1) {
      throwError(state, "directive name must not be less than one character in length");
    }
    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !is_EOL(ch));
        break;
      }
      if (is_EOL(ch))
        break;
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveArgs.push(state.input.slice(_position, state.position));
    }
    if (ch !== 0)
      readLineBreak(state);
    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }
  skipSeparationSpace(state, true, -1);
  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    throwError(state, "directives end mark is expected");
  }
  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);
  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, "non-ASCII line breaks are interpreted as content");
  }
  state.documents.push(state.result);
  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 46) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }
  if (state.position < state.length - 1) {
    throwError(state, "end of the stream or a document separator is expected");
  } else {
    return;
  }
}
function loadDocuments(input, options) {
  input = String(input);
  options = options || {};
  if (input.length !== 0) {
    if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
      input += "\n";
    }
    if (input.charCodeAt(0) === 65279) {
      input = input.slice(1);
    }
  }
  var state = new State$1(input, options);
  var nullpos = input.indexOf("\0");
  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, "null byte is not allowed in input");
  }
  state.input += "\0";
  while (state.input.charCodeAt(state.position) === 32) {
    state.lineIndent += 1;
    state.position += 1;
  }
  while (state.position < state.length - 1) {
    readDocument(state);
  }
  return state.documents;
}
function loadAll$1(input, iterator2, options) {
  if (iterator2 !== null && typeof iterator2 === "object" && typeof options === "undefined") {
    options = iterator2;
    iterator2 = null;
  }
  var documents = loadDocuments(input, options);
  if (typeof iterator2 !== "function") {
    return documents;
  }
  for (var index2 = 0, length = documents.length; index2 < length; index2 += 1) {
    iterator2(documents[index2]);
  }
}
function load$1(input, options) {
  var documents = loadDocuments(input, options);
  if (documents.length === 0) {
    return void 0;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new exception("expected a single document in the stream, but found more");
}
var loadAll_1 = loadAll$1;
var load_1 = load$1;
var loader = {
  loadAll: loadAll_1,
  load: load_1
};
var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CHAR_BOM = 65279;
var CHAR_TAB = 9;
var CHAR_LINE_FEED = 10;
var CHAR_CARRIAGE_RETURN = 13;
var CHAR_SPACE = 32;
var CHAR_EXCLAMATION = 33;
var CHAR_DOUBLE_QUOTE = 34;
var CHAR_SHARP = 35;
var CHAR_PERCENT = 37;
var CHAR_AMPERSAND = 38;
var CHAR_SINGLE_QUOTE = 39;
var CHAR_ASTERISK = 42;
var CHAR_COMMA = 44;
var CHAR_MINUS = 45;
var CHAR_COLON = 58;
var CHAR_EQUALS = 61;
var CHAR_GREATER_THAN = 62;
var CHAR_QUESTION = 63;
var CHAR_COMMERCIAL_AT = 64;
var CHAR_LEFT_SQUARE_BRACKET = 91;
var CHAR_RIGHT_SQUARE_BRACKET = 93;
var CHAR_GRAVE_ACCENT = 96;
var CHAR_LEFT_CURLY_BRACKET = 123;
var CHAR_VERTICAL_LINE = 124;
var CHAR_RIGHT_CURLY_BRACKET = 125;
var ESCAPE_SEQUENCES = {};
ESCAPE_SEQUENCES[0] = "\\0";
ESCAPE_SEQUENCES[7] = "\\a";
ESCAPE_SEQUENCES[8] = "\\b";
ESCAPE_SEQUENCES[9] = "\\t";
ESCAPE_SEQUENCES[10] = "\\n";
ESCAPE_SEQUENCES[11] = "\\v";
ESCAPE_SEQUENCES[12] = "\\f";
ESCAPE_SEQUENCES[13] = "\\r";
ESCAPE_SEQUENCES[27] = "\\e";
ESCAPE_SEQUENCES[34] = '\\"';
ESCAPE_SEQUENCES[92] = "\\\\";
ESCAPE_SEQUENCES[133] = "\\N";
ESCAPE_SEQUENCES[160] = "\\_";
ESCAPE_SEQUENCES[8232] = "\\L";
ESCAPE_SEQUENCES[8233] = "\\P";
var DEPRECATED_BOOLEANS_SYNTAX = [
  "y",
  "Y",
  "yes",
  "Yes",
  "YES",
  "on",
  "On",
  "ON",
  "n",
  "N",
  "no",
  "No",
  "NO",
  "off",
  "Off",
  "OFF"
];
var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
function compileStyleMap(schema2, map2) {
  var result, keys2, index2, length, tag, style, type2;
  if (map2 === null)
    return {};
  result = {};
  keys2 = Object.keys(map2);
  for (index2 = 0, length = keys2.length; index2 < length; index2 += 1) {
    tag = keys2[index2];
    style = String(map2[tag]);
    if (tag.slice(0, 2) === "!!") {
      tag = "tag:yaml.org,2002:" + tag.slice(2);
    }
    type2 = schema2.compiledTypeMap["fallback"][tag];
    if (type2 && _hasOwnProperty.call(type2.styleAliases, style)) {
      style = type2.styleAliases[style];
    }
    result[tag] = style;
  }
  return result;
}
function encodeHex(character) {
  var string2, handle, length;
  string2 = character.toString(16).toUpperCase();
  if (character <= 255) {
    handle = "x";
    length = 2;
  } else if (character <= 65535) {
    handle = "u";
    length = 4;
  } else if (character <= 4294967295) {
    handle = "U";
    length = 8;
  } else {
    throw new exception("code point within a string may not be greater than 0xFFFFFFFF");
  }
  return "\\" + handle + common.repeat("0", length - string2.length) + string2;
}
var QUOTING_TYPE_SINGLE = 1, QUOTING_TYPE_DOUBLE = 2;
function State(options) {
  this.schema = options["schema"] || _default;
  this.indent = Math.max(1, options["indent"] || 2);
  this.noArrayIndent = options["noArrayIndent"] || false;
  this.skipInvalid = options["skipInvalid"] || false;
  this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
  this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
  this.sortKeys = options["sortKeys"] || false;
  this.lineWidth = options["lineWidth"] || 80;
  this.noRefs = options["noRefs"] || false;
  this.noCompatMode = options["noCompatMode"] || false;
  this.condenseFlow = options["condenseFlow"] || false;
  this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes = options["forceQuotes"] || false;
  this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;
  this.tag = null;
  this.result = "";
  this.duplicates = [];
  this.usedDuplicates = null;
}
function indentString(string2, spaces) {
  var ind = common.repeat(" ", spaces), position2 = 0, next = -1, result = "", line, length = string2.length;
  while (position2 < length) {
    next = string2.indexOf("\n", position2);
    if (next === -1) {
      line = string2.slice(position2);
      position2 = length;
    } else {
      line = string2.slice(position2, next + 1);
      position2 = next + 1;
    }
    if (line.length && line !== "\n")
      result += ind;
    result += line;
  }
  return result;
}
function generateNextLine(state, level) {
  return "\n" + common.repeat(" ", state.indent * level);
}
function testImplicitResolving(state, str2) {
  var index2, length, type2;
  for (index2 = 0, length = state.implicitTypes.length; index2 < length; index2 += 1) {
    type2 = state.implicitTypes[index2];
    if (type2.resolve(str2)) {
      return true;
    }
  }
  return false;
}
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}
function isPrintable(c) {
  return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
}
function isNsCharOrWhitespace(c) {
  return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
}
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (
    // ns-plain-safe
    (inblock ? (
      // c = flow-in
      cIsNsCharOrWhitespace
    ) : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar
  );
}
function isPlainSafeFirst(c) {
  return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
}
function isPlainSafeLast(c) {
  return !isWhitespace(c) && c !== CHAR_COLON;
}
function codePointAt(string2, pos) {
  var first = string2.charCodeAt(pos), second;
  if (first >= 55296 && first <= 56319 && pos + 1 < string2.length) {
    second = string2.charCodeAt(pos + 1);
    if (second >= 56320 && second <= 57343) {
      return (first - 55296) * 1024 + second - 56320 + 65536;
    }
  }
  return first;
}
function needIndentIndicator(string2) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string2);
}
var STYLE_PLAIN = 1, STYLE_SINGLE = 2, STYLE_LITERAL = 3, STYLE_FOLDED = 4, STYLE_DOUBLE = 5;
function chooseScalarStyle(string2, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false;
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1;
  var plain = isPlainSafeFirst(codePointAt(string2, 0)) && isPlainSafeLast(codePointAt(string2, string2.length - 1));
  if (singleLineOnly || forceQuotes) {
    for (i = 0; i < string2.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string2, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    for (i = 0; i < string2.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string2, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
          i - previousLineBreak - 1 > lineWidth && string2[previousLineBreak + 1] !== " ";
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string2[previousLineBreak + 1] !== " ");
  }
  if (!hasLineBreak && !hasFoldableLine) {
    if (plain && !forceQuotes && !testAmbiguousType(string2)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  if (indentPerLevel > 9 && needIndentIndicator(string2)) {
    return STYLE_DOUBLE;
  }
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}
function writeScalar(state, string2, level, iskey, inblock) {
  state.dump = function() {
    if (string2.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string2) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string2)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string2 + '"' : "'" + string2 + "'";
      }
    }
    var indent2 = state.indent * Math.max(1, level);
    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent2);
    var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
    function testAmbiguity(string3) {
      return testImplicitResolving(state, string3);
    }
    switch (chooseScalarStyle(
      string2,
      singleLineOnly,
      state.indent,
      lineWidth,
      testAmbiguity,
      state.quotingType,
      state.forceQuotes && !iskey,
      inblock
    )) {
      case STYLE_PLAIN:
        return string2;
      case STYLE_SINGLE:
        return "'" + string2.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return "|" + blockHeader(string2, state.indent) + dropEndingNewline(indentString(string2, indent2));
      case STYLE_FOLDED:
        return ">" + blockHeader(string2, state.indent) + dropEndingNewline(indentString(foldString(string2, lineWidth), indent2));
      case STYLE_DOUBLE:
        return '"' + escapeString(string2) + '"';
      default:
        throw new exception("impossible error: invalid scalar style");
    }
  }();
}
function blockHeader(string2, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string2) ? String(indentPerLevel) : "";
  var clip = string2[string2.length - 1] === "\n";
  var keep = clip && (string2[string2.length - 2] === "\n" || string2 === "\n");
  var chomp = keep ? "+" : clip ? "" : "-";
  return indentIndicator + chomp + "\n";
}
function dropEndingNewline(string2) {
  return string2[string2.length - 1] === "\n" ? string2.slice(0, -1) : string2;
}
function foldString(string2, width) {
  var lineRe = /(\n+)([^\n]*)/g;
  var result = function() {
    var nextLF = string2.indexOf("\n");
    nextLF = nextLF !== -1 ? nextLF : string2.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string2.slice(0, nextLF), width);
  }();
  var prevMoreIndented = string2[0] === "\n" || string2[0] === " ";
  var moreIndented;
  var match;
  while (match = lineRe.exec(string2)) {
    var prefix = match[1], line = match[2];
    moreIndented = line[0] === " ";
    result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }
  return result;
}
function foldLine(line, width) {
  if (line === "" || line[0] === " ")
    return line;
  var breakRe = / [^ ]/g;
  var match;
  var start = 0, end, curr = 0, next = 0;
  var result = "";
  while (match = breakRe.exec(line)) {
    next = match.index;
    if (next - start > width) {
      end = curr > start ? curr : next;
      result += "\n" + line.slice(start, end);
      start = end + 1;
    }
    curr = next;
  }
  result += "\n";
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }
  return result.slice(1);
}
function escapeString(string2) {
  var result = "";
  var char = 0;
  var escapeSeq;
  for (var i = 0; i < string2.length; char >= 65536 ? i += 2 : i++) {
    char = codePointAt(string2, i);
    escapeSeq = ESCAPE_SEQUENCES[char];
    if (!escapeSeq && isPrintable(char)) {
      result += string2[i];
      if (char >= 65536)
        result += string2[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }
  return result;
}
function writeFlowSequence(state, level, object) {
  var _result = "", _tag = state.tag, index2, length, value2;
  for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
    value2 = object[index2];
    if (state.replacer) {
      value2 = state.replacer.call(object, String(index2), value2);
    }
    if (writeNode(state, level, value2, false, false) || typeof value2 === "undefined" && writeNode(state, level, null, false, false)) {
      if (_result !== "")
        _result += "," + (!state.condenseFlow ? " " : "");
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = "[" + _result + "]";
}
function writeBlockSequence(state, level, object, compact) {
  var _result = "", _tag = state.tag, index2, length, value2;
  for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
    value2 = object[index2];
    if (state.replacer) {
      value2 = state.replacer.call(object, String(index2), value2);
    }
    if (writeNode(state, level + 1, value2, true, true, false, true) || typeof value2 === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
      if (!compact || _result !== "") {
        _result += generateNextLine(state, level);
      }
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += "-";
      } else {
        _result += "- ";
      }
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = _result || "[]";
}
function writeFlowMapping(state, level, object) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index2, length, objectKey, objectValue, pairBuffer;
  for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
    pairBuffer = "";
    if (_result !== "")
      pairBuffer += ", ";
    if (state.condenseFlow)
      pairBuffer += '"';
    objectKey = objectKeyList[index2];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level, objectKey, false, false)) {
      continue;
    }
    if (state.dump.length > 1024)
      pairBuffer += "? ";
    pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
    if (!writeNode(state, level, objectValue, false, false)) {
      continue;
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = "{" + _result + "}";
}
function writeBlockMapping(state, level, object, compact) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index2, length, objectKey, objectValue, explicitPair, pairBuffer;
  if (state.sortKeys === true) {
    objectKeyList.sort();
  } else if (typeof state.sortKeys === "function") {
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    throw new exception("sortKeys must be a boolean or a function");
  }
  for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
    pairBuffer = "";
    if (!compact || _result !== "") {
      pairBuffer += generateNextLine(state, level);
    }
    objectKey = objectKeyList[index2];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue;
    }
    explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += "?";
      } else {
        pairBuffer += "? ";
      }
    }
    pairBuffer += state.dump;
    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }
    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue;
    }
    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ":";
    } else {
      pairBuffer += ": ";
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = _result || "{}";
}
function detectType(state, object, explicit) {
  var _result, typeList, index2, length, type2, style;
  typeList = explicit ? state.explicitTypes : state.implicitTypes;
  for (index2 = 0, length = typeList.length; index2 < length; index2 += 1) {
    type2 = typeList[index2];
    if ((type2.instanceOf || type2.predicate) && (!type2.instanceOf || typeof object === "object" && object instanceof type2.instanceOf) && (!type2.predicate || type2.predicate(object))) {
      if (explicit) {
        if (type2.multi && type2.representName) {
          state.tag = type2.representName(object);
        } else {
          state.tag = type2.tag;
        }
      } else {
        state.tag = "?";
      }
      if (type2.represent) {
        style = state.styleMap[type2.tag] || type2.defaultStyle;
        if (_toString.call(type2.represent) === "[object Function]") {
          _result = type2.represent(object, style);
        } else if (_hasOwnProperty.call(type2.represent, style)) {
          _result = type2.represent[style](object, style);
        } else {
          throw new exception("!<" + type2.tag + '> tag resolver accepts not "' + style + '" style');
        }
        state.dump = _result;
      }
      return true;
    }
  }
  return false;
}
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;
  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }
  var type2 = _toString.call(state.dump);
  var inblock = block;
  var tagStr;
  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level;
  }
  var objectOrArray = type2 === "[object Object]" || type2 === "[object Array]", duplicateIndex, duplicate;
  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }
  if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
    compact = false;
  }
  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = "*ref_" + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type2 === "[object Object]") {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object Array]") {
      if (block && state.dump.length !== 0) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object String]") {
      if (state.tag !== "?") {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type2 === "[object Undefined]") {
      return false;
    } else {
      if (state.skipInvalid)
        return false;
      throw new exception("unacceptable kind of an object to dump " + type2);
    }
    if (state.tag !== null && state.tag !== "?") {
      tagStr = encodeURI(
        state.tag[0] === "!" ? state.tag.slice(1) : state.tag
      ).replace(/!/g, "%21");
      if (state.tag[0] === "!") {
        tagStr = "!" + tagStr;
      } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
        tagStr = "!!" + tagStr.slice(18);
      } else {
        tagStr = "!<" + tagStr + ">";
      }
      state.dump = tagStr + " " + state.dump;
    }
  }
  return true;
}
function getDuplicateReferences(object, state) {
  var objects = [], duplicatesIndexes = [], index2, length;
  inspectNode(object, objects, duplicatesIndexes);
  for (index2 = 0, length = duplicatesIndexes.length; index2 < length; index2 += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index2]]);
  }
  state.usedDuplicates = new Array(length);
}
function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index2, length;
  if (object !== null && typeof object === "object") {
    index2 = objects.indexOf(object);
    if (index2 !== -1) {
      if (duplicatesIndexes.indexOf(index2) === -1) {
        duplicatesIndexes.push(index2);
      }
    } else {
      objects.push(object);
      if (Array.isArray(object)) {
        for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
          inspectNode(object[index2], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);
        for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
          inspectNode(object[objectKeyList[index2]], objects, duplicatesIndexes);
        }
      }
    }
  }
}
function dump$1(input, options) {
  options = options || {};
  var state = new State(options);
  if (!state.noRefs)
    getDuplicateReferences(input, state);
  var value2 = input;
  if (state.replacer) {
    value2 = state.replacer.call({ "": value2 }, "", value2);
  }
  if (writeNode(state, 0, value2, true, true))
    return state.dump + "\n";
  return "";
}
var dump_1 = dump$1;
var dumper = {
  dump: dump_1
};
function renamed(from, to) {
  return function() {
    throw new Error("Function yaml." + from + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
  };
}
var Type = type;
var Schema = schema;
var FAILSAFE_SCHEMA = failsafe;
var JSON_SCHEMA = json;
var CORE_SCHEMA = core;
var DEFAULT_SCHEMA = _default;
var load = loader.load;
var loadAll = loader.loadAll;
var dump = dumper.dump;
var YAMLException = exception;
var types = {
  binary,
  float,
  map,
  null: _null,
  pairs,
  set,
  timestamp,
  bool,
  int,
  merge,
  omap,
  seq,
  str
};
var safeLoad = renamed("safeLoad", "load");
var safeLoadAll = renamed("safeLoadAll", "loadAll");
var safeDump = renamed("safeDump", "dump");
var jsYaml = {
  Type,
  Schema,
  FAILSAFE_SCHEMA,
  JSON_SCHEMA,
  CORE_SCHEMA,
  DEFAULT_SCHEMA,
  load,
  loadAll,
  dump,
  YAMLException,
  types,
  safeLoad,
  safeLoadAll,
  safeDump
};
const convert = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test} [test]
   * @returns {Check}
   */
  function(test) {
    if (test === null || test === void 0) {
      return ok;
    }
    if (typeof test === "function") {
      return castFactory(test);
    }
    if (typeof test === "object") {
      return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
    }
    if (typeof test === "string") {
      return typeFactory(test);
    }
    throw new Error("Expected function, string, or object as test");
  }
);
function anyFactory(tests) {
  const checks = [];
  let index2 = -1;
  while (++index2 < tests.length) {
    checks[index2] = convert(tests[index2]);
  }
  return castFactory(any);
  function any(...parameters) {
    let index3 = -1;
    while (++index3 < checks.length) {
      if (checks[index3].apply(this, parameters))
        return true;
    }
    return false;
  }
}
function propsFactory(check) {
  const checkAsRecord = (
    /** @type {Record<string, unknown>} */
    check
  );
  return castFactory(all2);
  function all2(node2) {
    const nodeAsRecord = (
      /** @type {Record<string, unknown>} */
      /** @type {unknown} */
      node2
    );
    let key;
    for (key in check) {
      if (nodeAsRecord[key] !== checkAsRecord[key])
        return false;
    }
    return true;
  }
}
function typeFactory(check) {
  return castFactory(type2);
  function type2(node2) {
    return node2 && node2.type === check;
  }
}
function castFactory(testFunction) {
  return check;
  function check(value2, index2, parent) {
    return Boolean(
      looksLikeANode(value2) && testFunction.call(
        this,
        value2,
        typeof index2 === "number" ? index2 : void 0,
        parent || void 0
      )
    );
  }
}
function ok() {
  return true;
}
function looksLikeANode(value2) {
  return value2 !== null && typeof value2 === "object" && "type" in value2;
}
function color(d) {
  return "\x1B[33m" + d + "\x1B[39m";
}
const empty = [];
const CONTINUE = true;
const EXIT = false;
const SKIP = "skip";
function visitParents(tree, test, visitor, reverse) {
  let check;
  if (typeof test === "function" && typeof visitor !== "function") {
    reverse = visitor;
    visitor = test;
  } else {
    check = test;
  }
  const is = convert(check);
  const step = reverse ? -1 : 1;
  factory(tree, void 0, [])();
  function factory(node2, index2, parents) {
    const value2 = (
      /** @type {Record<string, unknown>} */
      node2 && typeof node2 === "object" ? node2 : {}
    );
    if (typeof value2.type === "string") {
      const name = (
        // `hast`
        typeof value2.tagName === "string" ? value2.tagName : (
          // `xast`
          typeof value2.name === "string" ? value2.name : void 0
        )
      );
      Object.defineProperty(visit2, "name", {
        value: "node (" + color(node2.type + (name ? "<" + name + ">" : "")) + ")"
      });
    }
    return visit2;
    function visit2() {
      let result = empty;
      let subresult;
      let offset;
      let grandparents;
      if (!test || is(node2, index2, parents[parents.length - 1] || void 0)) {
        result = toResult(visitor(node2, parents));
        if (result[0] === EXIT) {
          return result;
        }
      }
      if ("children" in node2 && node2.children) {
        const nodeAsParent = (
          /** @type {UnistParent} */
          node2
        );
        if (nodeAsParent.children && result[0] !== SKIP) {
          offset = (reverse ? nodeAsParent.children.length : -1) + step;
          grandparents = parents.concat(nodeAsParent);
          while (offset > -1 && offset < nodeAsParent.children.length) {
            const child2 = nodeAsParent.children[offset];
            subresult = factory(child2, offset, grandparents)();
            if (subresult[0] === EXIT) {
              return subresult;
            }
            offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
          }
        }
      }
      return result;
    }
  }
}
function toResult(value2) {
  if (Array.isArray(value2)) {
    return value2;
  }
  if (typeof value2 === "number") {
    return [CONTINUE, value2];
  }
  return value2 === null || value2 === void 0 ? empty : [value2];
}
function visit$1(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
  let reverse;
  let test;
  let visitor;
  if (typeof testOrVisitor === "function" && typeof visitorOrReverse !== "function") {
    test = void 0;
    visitor = testOrVisitor;
    reverse = visitorOrReverse;
  } else {
    test = testOrVisitor;
    visitor = visitorOrReverse;
    reverse = maybeReverse;
  }
  visitParents(tree, test, overload, reverse);
  function overload(node2, parents) {
    const parent = parents[parents.length - 1];
    const index2 = parent ? parent.children.indexOf(node2) : void 0;
    return visitor(node2, index2, parent);
  }
}
const visit = (
  /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */
  /**
   * @param {Node} tree
   * @param {Test} test
   * @param {Visitor} visitor
   * @param {boolean | null | undefined} [reverse]
   * @returns {void}
   */
  function(tree, test, visitor, reverse) {
    if (typeof test === "function" && typeof visitor !== "function") {
      reverse = visitor;
      visitor = test;
      test = null;
    }
    visitParents$1(tree, test, overload, reverse);
    function overload(node2, parents) {
      const parent = parents[parents.length - 1];
      return visitor(
        node2,
        parent ? parent.children.indexOf(node2) : null,
        parent
      );
    }
  }
);
var lodash_iteratee = { exports: {} };
lodash_iteratee.exports;
(function(module, exports) {
  var LARGE_ARRAY_SIZE = 200;
  var FUNC_ERROR_TEXT = "Expected a function";
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var UNORDERED_COMPARE_FLAG = 1, PARTIAL_COMPARE_FLAG = 2;
  var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", promiseTag = "[object Promise]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, reLeadingDot = /^\./, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reEscapeChar = /\\(\\)?/g;
  var reFlags = /\w*$/;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;
  var nodeUtil = function() {
    try {
      return freeProcess && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  function addMapEntry(map2, pair) {
    map2.set(pair[0], pair[1]);
    return map2;
  }
  function addSetEntry(set2, value2) {
    set2.add(value2);
    return set2;
  }
  function arrayEach(array2, iteratee3) {
    var index2 = -1, length = array2 ? array2.length : 0;
    while (++index2 < length) {
      if (iteratee3(array2[index2], index2, array2) === false) {
        break;
      }
    }
    return array2;
  }
  function arrayPush(array2, values) {
    var index2 = -1, length = values.length, offset = array2.length;
    while (++index2 < length) {
      array2[offset + index2] = values[index2];
    }
    return array2;
  }
  function arrayReduce(array2, iteratee3, accumulator, initAccum) {
    var index2 = -1, length = array2 ? array2.length : 0;
    if (initAccum && length) {
      accumulator = array2[++index2];
    }
    while (++index2 < length) {
      accumulator = iteratee3(accumulator, array2[index2], index2, array2);
    }
    return accumulator;
  }
  function arraySome(array2, predicate) {
    var index2 = -1, length = array2 ? array2.length : 0;
    while (++index2 < length) {
      if (predicate(array2[index2], index2, array2)) {
        return true;
      }
    }
    return false;
  }
  function baseProperty(key) {
    return function(object) {
      return object == null ? void 0 : object[key];
    };
  }
  function baseTimes(n, iteratee3) {
    var index2 = -1, result = Array(n);
    while (++index2 < n) {
      result[index2] = iteratee3(index2);
    }
    return result;
  }
  function baseUnary(func) {
    return function(value2) {
      return func(value2);
    };
  }
  function getValue(object, key) {
    return object == null ? void 0 : object[key];
  }
  function isHostObject(value2) {
    var result = false;
    if (value2 != null && typeof value2.toString != "function") {
      try {
        result = !!(value2 + "");
      } catch (e) {
      }
    }
    return result;
  }
  function mapToArray(map2) {
    var index2 = -1, result = Array(map2.size);
    map2.forEach(function(value2, key) {
      result[++index2] = [key, value2];
    });
    return result;
  }
  function overArg(func, transform2) {
    return function(arg) {
      return func(transform2(arg));
    };
  }
  function setToArray(set2) {
    var index2 = -1, result = Array(set2.size);
    set2.forEach(function(value2) {
      result[++index2] = value2;
    });
    return result;
  }
  var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var funcToString = funcProto.toString;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp(
    "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  var Buffer2 = moduleExports ? root.Buffer : void 0, Symbol2 = root.Symbol, Uint8Array2 = root.Uint8Array, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice2 = arrayProto.splice;
  var nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0, nativeKeys = overArg(Object.keys, Object);
  var DataView = getNative(root, "DataView"), Map2 = getNative(root, "Map"), Promise2 = getNative(root, "Promise"), Set2 = getNative(root, "Set"), WeakMap = getNative(root, "WeakMap"), nativeCreate = getNative(Object, "create");
  var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap);
  var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
  function Hash(entries) {
    var index2 = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index2 < length) {
      var entry2 = entries[index2];
      this.set(entry2[0], entry2[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }
  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty2.call(data, key) ? data[key] : void 0;
  }
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
  }
  function hashSet(key, value2) {
    var data = this.__data__;
    data[key] = nativeCreate && value2 === void 0 ? HASH_UNDEFINED : value2;
    return this;
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  function ListCache(entries) {
    var index2 = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index2 < length) {
      var entry2 = entries[index2];
      this.set(entry2[0], entry2[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
  }
  function listCacheDelete(key) {
    var data = this.__data__, index2 = assocIndexOf(data, key);
    if (index2 < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index2 == lastIndex) {
      data.pop();
    } else {
      splice2.call(data, index2, 1);
    }
    return true;
  }
  function listCacheGet(key) {
    var data = this.__data__, index2 = assocIndexOf(data, key);
    return index2 < 0 ? void 0 : data[index2][1];
  }
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  function listCacheSet(key, value2) {
    var data = this.__data__, index2 = assocIndexOf(data, key);
    if (index2 < 0) {
      data.push([key, value2]);
    } else {
      data[index2][1] = value2;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index2 = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index2 < length) {
      var entry2 = entries[index2];
      this.set(entry2[0], entry2[1]);
    }
  }
  function mapCacheClear() {
    this.__data__ = {
      "hash": new Hash(),
      "map": new (Map2 || ListCache)(),
      "string": new Hash()
    };
  }
  function mapCacheDelete(key) {
    return getMapData(this, key)["delete"](key);
  }
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  function mapCacheSet(key, value2) {
    getMapData(this, key).set(key, value2);
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function SetCache(values) {
    var index2 = -1, length = values ? values.length : 0;
    this.__data__ = new MapCache();
    while (++index2 < length) {
      this.add(values[index2]);
    }
  }
  function setCacheAdd(value2) {
    this.__data__.set(value2, HASH_UNDEFINED);
    return this;
  }
  function setCacheHas(value2) {
    return this.__data__.has(value2);
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;
  function Stack(entries) {
    this.__data__ = new ListCache(entries);
  }
  function stackClear() {
    this.__data__ = new ListCache();
  }
  function stackDelete(key) {
    return this.__data__["delete"](key);
  }
  function stackGet(key) {
    return this.__data__.get(key);
  }
  function stackHas(key) {
    return this.__data__.has(key);
  }
  function stackSet(key, value2) {
    var cache = this.__data__;
    if (cache instanceof ListCache) {
      var pairs2 = cache.__data__;
      if (!Map2 || pairs2.length < LARGE_ARRAY_SIZE - 1) {
        pairs2.push([key, value2]);
        return this;
      }
      cache = this.__data__ = new MapCache(pairs2);
    }
    cache.set(key, value2);
    return this;
  }
  Stack.prototype.clear = stackClear;
  Stack.prototype["delete"] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  function arrayLikeKeys(value2, inherited) {
    var result = isArray3(value2) || isArguments(value2) ? baseTimes(value2.length, String) : [];
    var length = result.length, skipIndexes = !!length;
    for (var key in value2) {
      if ((inherited || hasOwnProperty2.call(value2, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  function assignValue(object, key, value2) {
    var objValue = object[key];
    if (!(hasOwnProperty2.call(object, key) && eq(objValue, value2)) || value2 === void 0 && !(key in object)) {
      object[key] = value2;
    }
  }
  function assocIndexOf(array2, key) {
    var length = array2.length;
    while (length--) {
      if (eq(array2[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  function baseAssign(object, source) {
    return object && copyObject(source, keys2(source), object);
  }
  function baseClone(value2, isDeep, isFull, customizer, key, object, stack) {
    var result;
    if (customizer) {
      result = object ? customizer(value2, key, object, stack) : customizer(value2);
    }
    if (result !== void 0) {
      return result;
    }
    if (!isObject2(value2)) {
      return value2;
    }
    var isArr = isArray3(value2);
    if (isArr) {
      result = initCloneArray(value2);
      if (!isDeep) {
        return copyArray(value2, result);
      }
    } else {
      var tag = getTag(value2), isFunc = tag == funcTag || tag == genTag;
      if (isBuffer3(value2)) {
        return cloneBuffer(value2, isDeep);
      }
      if (tag == objectTag || tag == argsTag || isFunc && !object) {
        if (isHostObject(value2)) {
          return object ? value2 : {};
        }
        result = initCloneObject(isFunc ? {} : value2);
        if (!isDeep) {
          return copySymbols(value2, baseAssign(result, value2));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value2 : {};
        }
        result = initCloneByTag(value2, tag, baseClone, isDeep);
      }
    }
    stack || (stack = new Stack());
    var stacked = stack.get(value2);
    if (stacked) {
      return stacked;
    }
    stack.set(value2, result);
    if (!isArr) {
      var props = isFull ? getAllKeys(value2) : keys2(value2);
    }
    arrayEach(props || value2, function(subValue, key2) {
      if (props) {
        key2 = subValue;
        subValue = value2[key2];
      }
      assignValue(result, key2, baseClone(subValue, isDeep, isFull, customizer, key2, value2, stack));
    });
    return result;
  }
  function baseCreate(proto) {
    return isObject2(proto) ? objectCreate(proto) : {};
  }
  function baseGet(object, path2) {
    path2 = isKey(path2, object) ? [path2] : castPath(path2);
    var index2 = 0, length = path2.length;
    while (object != null && index2 < length) {
      object = object[toKey(path2[index2++])];
    }
    return index2 && index2 == length ? object : void 0;
  }
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray3(object) ? result : arrayPush(result, symbolsFunc(object));
  }
  function baseGetTag(value2) {
    return objectToString.call(value2);
  }
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }
  function baseIsEqual(value2, other, customizer, bitmask, stack) {
    if (value2 === other) {
      return true;
    }
    if (value2 == null || other == null || !isObject2(value2) && !isObjectLike(other)) {
      return value2 !== value2 && other !== other;
    }
    return baseIsEqualDeep(value2, other, baseIsEqual, customizer, bitmask, stack);
  }
  function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
    var objIsArr = isArray3(object), othIsArr = isArray3(other), objTag = arrayTag, othTag = arrayTag;
    if (!objIsArr) {
      objTag = getTag(object);
      objTag = objTag == argsTag ? objectTag : objTag;
    }
    if (!othIsArr) {
      othTag = getTag(other);
      othTag = othTag == argsTag ? objectTag : othTag;
    }
    var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other), isSameTag = objTag == othTag;
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
    }
    if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack());
    return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
  }
  function baseIsMatch(object, source, matchData, customizer) {
    var index2 = matchData.length, length = index2, noCustomizer = !customizer;
    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index2--) {
      var data = matchData[index2];
      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }
    while (++index2 < length) {
      data = matchData[index2];
      var key = data[0], objValue = object[key], srcValue = data[1];
      if (noCustomizer && data[2]) {
        if (objValue === void 0 && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === void 0 ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
          return false;
        }
      }
    }
    return true;
  }
  function baseIsNative(value2) {
    if (!isObject2(value2) || isMasked(value2)) {
      return false;
    }
    var pattern2 = isFunction(value2) || isHostObject(value2) ? reIsNative : reIsHostCtor;
    return pattern2.test(toSource(value2));
  }
  function baseIsTypedArray(value2) {
    return isObjectLike(value2) && isLength(value2.length) && !!typedArrayTags[objectToString.call(value2)];
  }
  function baseIteratee(value2) {
    if (typeof value2 == "function") {
      return value2;
    }
    if (value2 == null) {
      return identity;
    }
    if (typeof value2 == "object") {
      return isArray3(value2) ? baseMatchesProperty(value2[0], value2[1]) : baseMatches(value2);
    }
    return property(value2);
  }
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty2.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }
  function baseMatchesProperty(path2, srcValue) {
    if (isKey(path2) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path2), srcValue);
    }
    return function(object) {
      var objValue = get2(object, path2);
      return objValue === void 0 && objValue === srcValue ? hasIn(object, path2) : baseIsEqual(srcValue, objValue, void 0, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
    };
  }
  function basePropertyDeep(path2) {
    return function(object) {
      return baseGet(object, path2);
    };
  }
  function baseToString(value2) {
    if (typeof value2 == "string") {
      return value2;
    }
    if (isSymbol(value2)) {
      return symbolToString ? symbolToString.call(value2) : "";
    }
    var result = value2 + "";
    return result == "0" && 1 / value2 == -INFINITY ? "-0" : result;
  }
  function castPath(value2) {
    return isArray3(value2) ? value2 : stringToPath(value2);
  }
  function cloneBuffer(buffer2, isDeep) {
    if (isDeep) {
      return buffer2.slice();
    }
    var result = new buffer2.constructor(buffer2.length);
    buffer2.copy(result);
    return result;
  }
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
    return result;
  }
  function cloneDataView(dataView, isDeep) {
    var buffer2 = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer2, dataView.byteOffset, dataView.byteLength);
  }
  function cloneMap(map2, isDeep, cloneFunc) {
    var array2 = isDeep ? cloneFunc(mapToArray(map2), true) : mapToArray(map2);
    return arrayReduce(array2, addMapEntry, new map2.constructor());
  }
  function cloneRegExp(regexp2) {
    var result = new regexp2.constructor(regexp2.source, reFlags.exec(regexp2));
    result.lastIndex = regexp2.lastIndex;
    return result;
  }
  function cloneSet(set2, isDeep, cloneFunc) {
    var array2 = isDeep ? cloneFunc(setToArray(set2), true) : setToArray(set2);
    return arrayReduce(array2, addSetEntry, new set2.constructor());
  }
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }
  function cloneTypedArray(typedArray, isDeep) {
    var buffer2 = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
  }
  function copyArray(source, array2) {
    var index2 = -1, length = source.length;
    array2 || (array2 = Array(length));
    while (++index2 < length) {
      array2[index2] = source[index2];
    }
    return array2;
  }
  function copyObject(source, props, object, customizer) {
    object || (object = {});
    var index2 = -1, length = props.length;
    while (++index2 < length) {
      var key = props[index2];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      assignValue(object, key, newValue === void 0 ? source[key] : newValue);
    }
    return object;
  }
  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }
  function equalArrays(array2, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG, arrLength = array2.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var stacked = stack.get(array2);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var index2 = -1, result = true, seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : void 0;
    stack.set(array2, other);
    stack.set(other, array2);
    while (++index2 < arrLength) {
      var arrValue = array2[index2], othValue = other[index2];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index2, other, array2, stack) : customizer(arrValue, othValue, index2, array2, other, stack);
      }
      if (compared !== void 0) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      if (seen) {
        if (!arraySome(other, function(othValue2, othIndex) {
          if (!seen.has(othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, customizer, bitmask, stack))) {
            return seen.add(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
        result = false;
        break;
      }
    }
    stack["delete"](array2);
    stack["delete"](other);
    return result;
  }
  function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
          return false;
        }
        return true;
      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);
      case errorTag:
        return object.name == other.name && object.message == other.message;
      case regexpTag:
      case stringTag:
        return object == other + "";
      case mapTag:
        var convert2 = mapToArray;
      case setTag:
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
        convert2 || (convert2 = setToArray);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= UNORDERED_COMPARE_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert2(object), convert2(other), equalFunc, customizer, bitmask, stack);
        stack["delete"](object);
        return result;
      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }
  function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG, objProps = keys2(object), objLength = objProps.length, othProps = keys2(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index2 = objLength;
    while (index2--) {
      var key = objProps[index2];
      if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
        return false;
      }
    }
    var stacked = stack.get(object);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index2 < objLength) {
      key = objProps[index2];
      var objValue = object[key], othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor, othCtor = other.constructor;
      if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack["delete"](object);
    stack["delete"](other);
    return result;
  }
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys2, getSymbols);
  }
  function getMapData(map2, key) {
    var data = map2.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  function getMatchData(object) {
    var result = keys2(object), length = result.length;
    while (length--) {
      var key = result[length], value2 = object[key];
      result[length] = [key, value2, isStrictComparable(value2)];
    }
    return result;
  }
  function getNative(object, key) {
    var value2 = getValue(object, key);
    return baseIsNative(value2) ? value2 : void 0;
  }
  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
  var getTag = baseGetTag;
  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function(value2) {
      var result = objectToString.call(value2), Ctor = result == objectTag ? value2.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;
          case mapCtorString:
            return mapTag;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag;
          case weakMapCtorString:
            return weakMapTag;
        }
      }
      return result;
    };
  }
  function hasPath(object, path2, hasFunc) {
    path2 = isKey(path2, object) ? [path2] : castPath(path2);
    var result, index2 = -1, length = path2.length;
    while (++index2 < length) {
      var key = toKey(path2[index2]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result) {
      return result;
    }
    var length = object ? object.length : 0;
    return !!length && isLength(length) && isIndex(key, length) && (isArray3(object) || isArguments(object));
  }
  function initCloneArray(array2) {
    var length = array2.length, result = array2.constructor(length);
    if (length && typeof array2[0] == "string" && hasOwnProperty2.call(array2, "index")) {
      result.index = array2.index;
      result.input = array2.input;
    }
    return result;
  }
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }
  function initCloneByTag(object, tag, cloneFunc, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);
      case boolTag:
      case dateTag:
        return new Ctor(+object);
      case dataViewTag:
        return cloneDataView(object, isDeep);
      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        return cloneTypedArray(object, isDeep);
      case mapTag:
        return cloneMap(object, isDeep, cloneFunc);
      case numberTag:
      case stringTag:
        return new Ctor(object);
      case regexpTag:
        return cloneRegExp(object);
      case setTag:
        return cloneSet(object, isDeep, cloneFunc);
      case symbolTag:
        return cloneSymbol(object);
    }
  }
  function isIndex(value2, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value2 == "number" || reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length);
  }
  function isKey(value2, object) {
    if (isArray3(value2)) {
      return false;
    }
    var type2 = typeof value2;
    if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value2 == null || isSymbol(value2)) {
      return true;
    }
    return reIsPlainProp.test(value2) || !reIsDeepProp.test(value2) || object != null && value2 in Object(object);
  }
  function isKeyable(value2) {
    var type2 = typeof value2;
    return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value2 !== "__proto__" : value2 === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  function isPrototype(value2) {
    var Ctor = value2 && value2.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value2 === proto;
  }
  function isStrictComparable(value2) {
    return value2 === value2 && !isObject2(value2);
  }
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
    };
  }
  var stringToPath = memoize(function(string2) {
    string2 = toString3(string2);
    var result = [];
    if (reLeadingDot.test(string2)) {
      result.push("");
    }
    string2.replace(rePropName, function(match, number, quote, string3) {
      result.push(quote ? string3.replace(reEscapeChar, "$1") : number || match);
    });
    return result;
  });
  function toKey(value2) {
    if (typeof value2 == "string" || isSymbol(value2)) {
      return value2;
    }
    var result = value2 + "";
    return result == "0" && 1 / value2 == -INFINITY ? "-0" : result;
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  function memoize(func, resolver2) {
    if (typeof func != "function" || resolver2 && typeof resolver2 != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments, key = resolver2 ? resolver2.apply(this, args) : args[0], cache = memoized.cache;
      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result);
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }
  memoize.Cache = MapCache;
  function eq(value2, other) {
    return value2 === other || value2 !== value2 && other !== other;
  }
  function isArguments(value2) {
    return isArrayLikeObject(value2) && hasOwnProperty2.call(value2, "callee") && (!propertyIsEnumerable.call(value2, "callee") || objectToString.call(value2) == argsTag);
  }
  var isArray3 = Array.isArray;
  function isArrayLike(value2) {
    return value2 != null && isLength(value2.length) && !isFunction(value2);
  }
  function isArrayLikeObject(value2) {
    return isObjectLike(value2) && isArrayLike(value2);
  }
  var isBuffer3 = nativeIsBuffer || stubFalse;
  function isFunction(value2) {
    var tag = isObject2(value2) ? objectToString.call(value2) : "";
    return tag == funcTag || tag == genTag;
  }
  function isLength(value2) {
    return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER;
  }
  function isObject2(value2) {
    var type2 = typeof value2;
    return !!value2 && (type2 == "object" || type2 == "function");
  }
  function isObjectLike(value2) {
    return !!value2 && typeof value2 == "object";
  }
  function isSymbol(value2) {
    return typeof value2 == "symbol" || isObjectLike(value2) && objectToString.call(value2) == symbolTag;
  }
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  function toString3(value2) {
    return value2 == null ? "" : baseToString(value2);
  }
  function get2(object, path2, defaultValue) {
    var result = object == null ? void 0 : baseGet(object, path2);
    return result === void 0 ? defaultValue : result;
  }
  function hasIn(object, path2) {
    return object != null && hasPath(object, path2, baseHasIn);
  }
  function keys2(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  function identity(value2) {
    return value2;
  }
  function iteratee2(func) {
    return baseIteratee(typeof func == "function" ? func : baseClone(func, true));
  }
  function property(path2) {
    return isKey(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
  }
  function stubArray() {
    return [];
  }
  function stubFalse() {
    return false;
  }
  module.exports = iteratee2;
})(lodash_iteratee, lodash_iteratee.exports);
var lodash_iterateeExports = lodash_iteratee.exports;
const iteratee = /* @__PURE__ */ getDefaultExportFromCjs(lodash_iterateeExports);
function find(tree, condition) {
  if (!tree)
    throw new Error("unist-util-find requires a tree to search");
  if (!condition)
    throw new Error("unist-util-find requires a condition");
  const predicate = iteratee(condition);
  let result;
  visit(tree, function(node2) {
    if (predicate(node2)) {
      result = node2;
      return false;
    }
  });
  return result;
}
function validate_feat_fix(changelog) {
  let ast = unified().use(remarkParse).parse(changelog);
  if (ast.children && ast.children.length == 2 && ast.children[0].type === "paragraph" && ast.children[1].type === "list") {
    return true;
  }
  if (ast.children && ast.children.length == 1 && ast.children[0].type === "paragraph") {
    return true;
  }
  return false;
}
const GQL_GET_PR = `query RepoData($owner: String!, $name: String!, $pr_number: Int!) {
	repository(owner: $owner, name: $name) {
		pullRequest(number: $pr_number) {
			id
			baseRefName
			headRefName
			baseRefOid
			headRefOid
			headRepository {
				nameWithOwner
			}
			closingIssuesReferences(first: 50) {
				nodes {
					labels(first: 10) {
						nodes {
							name
						}
					}
					id
					body
					number
					title
				}
			}
			labels(first: 10) {
				nodes {
					name
					id
					description
					color
				}
			}
			title
			comments(first: 50) {
				nodes {
					id
					author {
						login
					}
					body
					fullDatabaseId
					url
					createdAt
					lastEditedAt
					editor {
						login
					}
				}
			}
		}
	}
}`;
const GQL_UPDATE_ISSUE_COMMENT = `mutation UpdateComment($comment_id: ID!, $body: String!){
	 updateIssueComment(input: {id: $comment_id, body: $body}) {
		 issueComment {
			 url
		 }
	 }
 }`;
const GQL_CREATE_ISSUE_COMMENT = `mutation CreateComment($body: String!, $pr_id: ID!){
	 addComment(input: {body: $body, subjectId: $pr_id}) {
		 commentEdge {
			 node {
				 url
			 }
		 }
	 }
 }`;
function get_title(packages) {
  return packages.length ? `change detected` : `no changes detected`;
}
function create_version_table(packages) {
  const packages_to_render = packages.filter(([p, v]) => p && v);
  if (!packages_to_render.length)
    return "__No changes detected. __";
  const rendered_packages = packages_to_render.sort((a, b) => a[0].localeCompare(b[0])).map(([p, v]) => `|\`${p}\` | \`${v}\` |`).join("\n");
  return `| Package | Version |
|--------|--------|
${rendered_packages}`;
}
function format_changelog_preview(changelog, pacakges, changelog_entry_type) {
  if (!pacakges.length)
    return "";
  return changelog.split("\n\n").map((line) => {
    if (changelog_entry_type === "highlight") {
      return `#### ${line}`;
    }
    return `- ${line}`;
  }).join("\n\n");
}
function create_changeset_comment({
  packages,
  changelog,
  manual_package_selection,
  manual_mode = false,
  changeset_content,
  changeset_url,
  previous_comment,
  approved,
  approved_by,
  changelog_entry_type
}) {
  const new_comment = `<!-- tag=changesets_gradio -->

###  🦄 ${get_title(packages)}

#### ${packages.length ? "This Pull Request includes changes to the following packages. " : "This Pull Request does not include changes to any packages."}

${create_version_table(packages)}

---

${format_changelog_preview(changelog, packages, changelog_entry_type)}

---

${approved ? `✅ Changeset approved${approved_by ? ` by @${approved_by}` : ""}` : "‼️ Changeset not approved. Ensure the version bump is appropriate for all packages before approving."}

${approved ? "- [x] Maintainers can remove approval by unchecking this checkbox." : "- [ ] Maintainers can approve the changeset by checking this checkbox."}

<!-- approval_state:${JSON.stringify({ approved, approved_by: approved_by || null })} -->

<details><summary>

#### Something isn't right?</summary>

- Maintainers can change the version label to modify the version bump. 
- If the bot has failed to detect any changes, or if this pull request needs to update multiple packages to different versions or requires a more comprehensive changelog entry, maintainers can [${packages.length ? "update" : "create"} the changelog file directly](${packages.length ? changeset_url : changeset_url.replace("/edit/", "/new/")}).

</details>
`.trim();
  const normalize2 = (text2) => text2.replace(/\(https:\/\/github.com[^]*\.md\)/g, "").trim();
  const changes = !previous_comment || normalize2(previous_comment) !== normalize2(new_comment);
  if (!changes && previous_comment) {
    console.log(
      `[create_changeset_comment] No changes detected, skipping comment update`
    );
  }
  return {
    pr_comment_content: new_comment,
    changes
  };
}
const md_parser = unified().use(remarkParse).use(remarkFrontmatter).use(remarkGfm);
function get_frontmatter_versions(md) {
  const ast = md_parser.parse(md);
  const frontmatter_node = ast.children.find((n) => n.type === "yaml");
  if (frontmatter_node) {
    const versions = Object.entries(jsYaml.load(frontmatter_node.value) || {}).map(([key, value2]) => {
      return [key.trim(), value2.trim()];
    });
    return versions;
  }
  return false;
}
function get_previous_approval_state(md_src) {
  const match = md_src.match(/<!-- approval_state:({.*?}) -->/);
  if (match) {
    try {
      return JSON.parse(match[1]);
    } catch {
      const oldMatch = md_src.match(/<!-- approval_state:(true|false) -->/);
      return oldMatch ? { approved: oldMatch[1] === "true", approved_by: null } : null;
    }
  }
  return null;
}
function check_for_manual_selection_and_approval(md_src, wasEdited, editor) {
  if (!md_src)
    return { manual_package_selection: false, approved: false, approved_by: null };
  const new_ast = md_parser.parse(md_src);
  const manual_node = find(new_ast, (node2) => {
    return node2.type === "listItem" && (node2 == null ? void 0 : node2.checked) != null && //@ts-ignore
    !!find(
      node2 == null ? void 0 : node2.children[0],
      (inner_node) => {
        var _a, _b;
        return (_b = (_a = inner_node == null ? void 0 : inner_node.value) == null ? void 0 : _a.trim()) == null ? void 0 : _b.startsWith("Maintainers can ");
      }
    );
  });
  let versions = [];
  if (manual_node) {
    visit$1(new_ast, (node2) => {
      if (node2.type === "listItem" && node2.checked != null && node2.checked != void 0) {
        visit$1(node2.children[0], (inner_node) => {
          if (inner_node.type === "inlineCode") {
            versions.push([inner_node.value, !!node2.checked]);
          }
        });
      }
    });
  }
  const approved_node = find(new_ast, (node2) => {
    return node2.type === "listItem" && (node2 == null ? void 0 : node2.checked) != null && !!find(
      //@ts-ignore
      node2 == null ? void 0 : node2.children[0],
      (inner_node) => {
        var _a, _b, _c, _d;
        return ((_b = (_a = inner_node == null ? void 0 : inner_node.value) == null ? void 0 : _a.trim()) == null ? void 0 : _b.includes("approve")) && ((_d = (_c = inner_node == null ? void 0 : inner_node.value) == null ? void 0 : _c.trim()) == null ? void 0 : _d.includes("checkbox"));
      }
    );
  });
  const checkbox_checked = !!(approved_node == null ? void 0 : approved_node.checked);
  const previous_state = get_previous_approval_state(md_src);
  let approved = checkbox_checked;
  let approved_by = (previous_state == null ? void 0 : previous_state.approved_by) || null;
  if (wasEdited && editor === "gradio-pr-bot" && previous_state !== null) {
    approved = previous_state.approved;
    approved_by = previous_state.approved_by;
    console.log(`[check_for_manual_selection_and_approval] Bot edit detected, preserving state: approved=${previous_state.approved}, by=${previous_state.approved_by}`);
  } else if (wasEdited && editor && editor !== "gradio-pr-bot") {
    approved = checkbox_checked;
    if (checkbox_checked && (!previous_state || !previous_state.approved)) {
      approved_by = editor;
      console.log(`[check_for_manual_selection_and_approval] Approved by ${editor}`);
    } else if (!checkbox_checked && (previous_state == null ? void 0 : previous_state.approved)) {
      approved_by = null;
      console.log(`[check_for_manual_selection_and_approval] Approval removed by ${editor}`);
    }
    console.log(`[check_for_manual_selection_and_approval] Human edit by ${editor}, new state: ${checkbox_checked}`);
  } else if (!wasEdited && previous_state) {
    approved = previous_state.approved;
    approved_by = previous_state.approved_by;
    console.log(`[check_for_manual_selection_and_approval] No edit, using previous state: approved=${previous_state.approved}, by=${previous_state.approved_by}`);
  } else if (!wasEdited) {
    approved = checkbox_checked;
    approved_by = null;
    console.log(`[check_for_manual_selection_and_approval] No edit, no previous state, using checkbox: ${checkbox_checked}`);
  }
  console.log(`[check_for_manual_selection_and_approval] Final states:`, {
    manual_package_selection: !!(manual_node == null ? void 0 : manual_node.checked),
    checkbox_checked,
    previous_state,
    approved,
    approved_by,
    wasEdited,
    editor
  });
  return {
    manual_package_selection: !!(manual_node == null ? void 0 : manual_node.checked),
    versions: manual_node ? versions : void 0,
    approved,
    approved_by
  };
}
function get_version_from_label(labels) {
  var _a, _b;
  if (!labels.length)
    return void 0;
  return (_b = (_a = labels.filter((l) => l.name.startsWith("v:"))) == null ? void 0 : _a[0]) == null ? void 0 : _b.name.slice(2).trim();
}
function get_type_from_label(labels) {
  var _a, _b;
  if (!labels.length)
    return void 0;
  return (_b = (_a = labels.filter((l) => l.name.startsWith("t:"))) == null ? void 0 : _a[0]) == null ? void 0 : _b.name.slice(2).trim();
}
function find_comment(comments) {
  var _a;
  const comment = comments.find((comment2) => {
    const body = comment2.body;
    return body == null ? void 0 : body.includes("<!-- tag=changesets_gradio -->");
  });
  return comment ? {
    ...comment,
    author: comment.author.login,
    editor: (_a = comment.editor) == null ? void 0 : _a.login
  } : void 0;
}
function get_version_from_linked_issues(closes) {
  let version2 = "unknown";
  closes.forEach((c) => {
    const labels = c.labels.nodes.map((l) => l.name);
    if (labels.includes("bug") && version2 !== "minor") {
      version2 = "patch";
    } else if (labels.includes("enhancement")) {
      version2 = "minor";
    }
  });
  return version2;
}
function get_type_from_linked_issues(closes) {
  let type2 = "";
  closes.forEach((c) => {
    const labels = c.labels.nodes.map((l) => l.name);
    if (labels.includes("bug") && type2 !== "feat") {
      type2 = "fix";
    } else if (labels.includes("enhancement")) {
      type2 = "feat";
    }
  });
  return type2 || "feat";
}
function get_client(token, owner, repo) {
  const octokit = getOctokit_1(token);
  return {
    async get_pr(pr_number) {
      let {
        repository: {
          pullRequest: {
            id,
            baseRefName: base_branch_name,
            headRepository: { nameWithOwner: source_repo_name },
            headRefName: source_branch_name,
            baseRefOid: base_sha,
            headRefOid: head_sha,
            closingIssuesReferences: { nodes: closes },
            labels: { nodes: labels },
            title,
            comments: { nodes: comments }
          }
        }
      } = await octokit.graphql(GQL_GET_PR, {
        owner,
        name: repo,
        pr_number
      });
      return {
        id,
        base_branch_name,
        source_repo_name,
        source_branch_name,
        base_sha,
        head_sha,
        closes,
        labels,
        title,
        comments
      };
    },
    async upsert_comment({
      pr_id,
      comment_id,
      body
    }) {
      console.log({ comment_id });
      if (comment_id) {
        const {
          updateIssueComment: {
            issueComment: { url }
          }
        } = await octokit.graphql(
          GQL_UPDATE_ISSUE_COMMENT,
          { comment_id, body }
        );
        return url;
      } else {
        const {
          addComment: {
            commentEdge: {
              node: { url }
            }
          }
        } = await octokit.graphql(
          GQL_CREATE_ISSUE_COMMENT,
          { pr_id, body }
        );
        return url;
      }
    }
  };
}
async function generate_changeset(packages, type2, title) {
  if (packages.filter(([name, version2]) => !!name && !!version2).length === 0) {
    return "";
  }
  const formatted_type = type2 === "highlight" ? `${type2}:

#### ${title}` : `${type2}:${title}`;
  return `---
${packages.filter(([name, version2]) => !!name && !!version2).sort((a, b) => a[0].localeCompare(b[0])).map(([name, version2]) => `"${name}": ${version2}`).join("\n")}
---

${formatted_type}
`;
}
const RE_FEAT_FIX_REGEX = /^(feat|fix)\s*:/i;
const RE_HIGHLIGHT_REGEX = /^highlight\s*:/i;
const RE_VALID_FEAT_FIX_REGEX = /^(feat|fix)\s*:[^]*$/i;
const RE_VALID_HIGHLIGHT_REGEX = /^highlight\s*:\n\n####[^]*$/i;
function validate_changelog(changelog) {
  const changelog_content = changelog.split("---")[2].trim();
  if (RE_FEAT_FIX_REGEX.test(changelog_content)) {
    return {
      valid: RE_VALID_FEAT_FIX_REGEX.test(changelog_content) && validate_feat_fix(changelog_content),
      message: `⚠️ Warning invalid changelog entry.

Changelog entry must be either a paragraph or a paragraph followed by a list:

\`<type>: <description>\` 

Or

\`\`\`
<type>:<description>

- <change-one>
- <change-two>
- <change-three>
\`\`\`

If you wish to add a more detailed description, please created a \`highlight\` entry instead.`
    };
  } else if (RE_HIGHLIGHT_REGEX.test(changelog_content)) {
    return {
      valid: RE_VALID_HIGHLIGHT_REGEX.test(changelog_content),
      message: `⚠️ Warning invalid changelog entry.

Changelog entry must be in the format:
\`\`\`highlight: 

#### <feature-title>

<feature-description>
\`\`\`

Any markdown other than level 1-4 headings is allowed.`
    };
  } else {
    return {
      valid: false,
      message: false
    };
  }
}
const dev_only_ignore_globs = [
  "!**/test/**",
  "!**/*.test.ts",
  "!**/*.test.js",
  "!**/*.spec.js",
  "!**/*.spec.ts",
  "!**/*.stories.svelte",
  "!**/package.json",
  "!**/requirements.txt"
];
async function run() {
  var _a;
  const branch_name = coreExports.getInput("branch_name");
  if (branch_name.startsWith("changeset-release/")) {
    coreExports.info("Release PR. Skipping changeset generation.");
    coreExports.setOutput("skipped", "true");
    return;
  }
  if (branch_name === "v4") {
    coreExports.info("Main or dev branch. Skipping changeset generation.");
    coreExports.setOutput("skipped", "true");
    return;
  }
  const token = coreExports.getInput("github_token");
  const main_pkg = coreExports.getInput("main_pkg");
  const client = get_client(token, context.repo.owner, context.repo.repo);
  const pr_input = coreExports.getInput("pr_number");
  console.log(pr_input);
  const pull_request_number = parseInt(pr_input);
  let {
    id: pr_id,
    base_branch_name,
    source_branch_name,
    source_repo_name,
    base_sha,
    head_sha,
    closes,
    labels,
    title,
    comments
  } = await client.get_pr(pull_request_number);
  const changed_files = await get_changed_files(base_sha);
  const comment = find_comment(comments);
  const { changeset_path, manual_mode, old_changeset_content } = await get_changeset_status(changed_files);
  if (manual_mode) {
    coreExports.warning(
      `Changeset file was edited manually. Skipping changeset generation.`
    );
    let approved2 = false;
    let approved_by2 = null;
    coreExports.info(`[Manual Mode] Full context:`);
    coreExports.info(
      JSON.stringify(
        {
          pr_number: pull_request_number,
          labels: labels.map((l) => l.name),
          comment_exists: !!comment,
          comment_id: comment == null ? void 0 : comment.id,
          comment_author: comment == null ? void 0 : comment.author,
          comment_editor: comment == null ? void 0 : comment.editor,
          comment_lastEditedAt: comment == null ? void 0 : comment.lastEditedAt,
          changeset_path
        },
        null,
        2
      )
    );
    if (comment == null ? void 0 : comment.body) {
      const wasEdited = comment.lastEditedAt !== null;
      const selection = check_for_manual_selection_and_approval(
        comment.body,
        wasEdited,
        comment.editor
      );
      approved2 = selection.approved;
      approved_by2 = selection.approved_by || null;
      coreExports.info(`[Manual Mode] Approval analysis:`);
      coreExports.info(
        JSON.stringify(
          {
            wasEdited,
            editor: comment.editor,
            approved: approved2,
            approved_by: approved_by2
          },
          null,
          2
        )
      );
    }
    const versions = get_frontmatter_versions(old_changeset_content) || [];
    const changelog_entry = old_changeset_content.split("---")[2].trim();
    const changelog_entry_message = changelog_entry.replace(/^(feat:|fix:|highlight:)/im, "").trim();
    const changelog_entry_type = ((_a = changelog_entry.match(/^(feat:|fix:|highlight:)/im)) == null ? void 0 : _a[0]) || "unknown";
    const { valid, message } = validate_changelog(old_changeset_content);
    if (message === false) {
      coreExports.setFailed(
        `Cannot determine a type for the this changeset. Manual changesets should include \`feat:\`, \`fix:\` or \`highlight:\`.`
      );
      return;
    }
    const { pr_comment_content: pr_comment_content2, changes: changes2 } = create_changeset_comment({
      packages: versions,
      changelog: !valid ? message : changelog_entry_message,
      manual_package_selection: false,
      manual_mode: true,
      changeset_content: old_changeset_content,
      changeset_url: `https://github.com/${source_repo_name}/edit/${source_branch_name}/${changeset_path}`,
      previous_comment: comment == null ? void 0 : comment.body,
      approved: approved2,
      approved_by: approved_by2 || void 0,
      changelog_entry_type
    });
    if (changes2) {
      coreExports.info("[Manual Mode] Changeset comment has changes, updating...");
      const url = await client.upsert_comment({
        pr_id,
        body: pr_comment_content2,
        comment_id: comment == null ? void 0 : comment.id
      });
      coreExports.setOutput("comment_url", url);
      coreExports.info("[Manual Mode] Changeset comment updated successfully.");
    } else {
      coreExports.setOutput("comment_url", comment == null ? void 0 : comment.url);
      coreExports.info("[Manual Mode] Changeset comment unchanged, skipping update.");
    }
    coreExports.setOutput("skipped", "false");
    return;
  }
  const { packages: pkgs } = manypkgGetPackages_cjsExports.getPackagesSync(process.cwd());
  let packages_versions = void 0;
  let manual_package_selection = false;
  let approved = false;
  let approved_by = null;
  coreExports.info(`[Normal Mode] Full context:`);
  coreExports.info(
    JSON.stringify(
      {
        pr_number: pull_request_number,
        labels: labels.map((l) => l.name),
        comment_exists: !!comment,
        comment_id: comment == null ? void 0 : comment.id,
        comment_author: comment == null ? void 0 : comment.author,
        comment_editor: comment == null ? void 0 : comment.editor,
        comment_lastEditedAt: comment == null ? void 0 : comment.lastEditedAt,
        changeset_path
      },
      null,
      2
    )
  );
  if (comment == null ? void 0 : comment.body) {
    const wasEdited = comment.lastEditedAt !== null;
    const selection = check_for_manual_selection_and_approval(
      comment.body,
      wasEdited,
      comment.editor
    );
    approved = selection.approved;
    approved_by = selection.approved_by || null;
    coreExports.info(`[Normal Mode] Approval analysis:`);
    coreExports.info(
      JSON.stringify(
        {
          wasEdited,
          editor: comment.editor,
          approved,
          approved_by,
          manual_package_selection: selection.manual_package_selection
        },
        null,
        2
      )
    );
    manual_package_selection = selection.manual_package_selection;
    if (manual_package_selection && selection.versions && selection.versions.length) {
      packages_versions = selection.versions;
      coreExports.info(`[Normal Mode] Using manual package versions from comment`);
    }
  }
  let version2 = get_version_from_label(labels) || get_version_from_linked_issues(closes);
  if (!packages_versions) {
    const { updated_pkgs, version: _version } = await get_changed_packages({
      changed_files,
      pkgs,
      base_sha,
      main_pkg,
      version: version2
    });
    if (_version !== "unknown" && version2 === "unknown") {
      version2 = _version;
    }
    packages_versions = Array.from(updated_pkgs).map((pkg) => [pkg, version2]);
  }
  if (manual_package_selection) {
    packages_versions = pkgs.map(({ packageJson: { name } }) => {
      var _a2;
      return [
        name,
        ((_a2 = packages_versions == null ? void 0 : packages_versions.find(([pkg]) => pkg === name)) == null ? void 0 : _a2[1]) ? version2 : false
      ];
    });
  }
  let type2 = get_type_from_label(labels) || get_type_from_linked_issues(closes);
  const changeset_content = await generate_changeset(
    packages_versions,
    type2,
    title
  );
  if (changeset_content.trim() !== old_changeset_content.trim()) {
    const operation = (packages_versions.length === 0 || packages_versions.every(([p, v]) => !v)) && changeset_content === "" ? "delete" : "add";
    if (operation === "delete") {
      await promises.unlink(changeset_path);
      coreExports.warning("No packages selected. Skipping changeset generation.");
    } else {
      promises.writeFile(changeset_path, changeset_content);
    }
    await exec_2("git", [
      "config",
      "--global",
      "user.email",
      "gradio-pr-bot@users.noreply.github.com"
    ]);
    await exec_2("git", ["config", "--global", "user.name", "gradio-pr-bot"]);
    await exec_2("git", ["add", "."]);
    await exec_2("git", ["commit", "-m", `${operation} changeset`]);
    await exec_2("git", ["push"]);
  }
  const { pr_comment_content, changes } = create_changeset_comment({
    packages: packages_versions,
    changelog: title,
    manual_package_selection,
    changeset_content,
    changeset_url: `https://github.com/${source_repo_name}/edit/${source_branch_name}/${changeset_path}`,
    previous_comment: comment == null ? void 0 : comment.body,
    approved,
    approved_by: approved_by || void 0,
    changelog_entry_type: type2 || "unknown"
  });
  if (changes) {
    coreExports.info("[Normal Mode] Changeset comment has changes, updating...");
    const url = await client.upsert_comment({
      pr_id,
      body: pr_comment_content,
      comment_id: comment == null ? void 0 : comment.id
    });
    coreExports.setOutput("comment_url", url);
    coreExports.info("[Normal Mode] Changeset comment updated successfully.");
  } else {
    coreExports.info("[Normal Mode] Changeset comment unchanged, skipping update.");
    coreExports.setOutput("comment_url", comment == null ? void 0 : comment.url);
  }
  coreExports.setOutput("skipped", "false");
  coreExports.setOutput("approved", approved.toString());
}
run();
async function get_changed_files(base_sha) {
  let output_base = "";
  let error_base = "";
  const options_base = {
    listeners: {
      stdout: (data) => {
        output_base += data.toString();
      },
      stderr: (data) => {
        error_base += data.toString();
      }
    }
  };
  await exec_2("git", ["merge-base", base_sha, "HEAD"], options_base);
  console.log({ output_base });
  let output2 = "";
  let error2 = "";
  const options = {
    listeners: {
      stdout: (data) => {
        output2 += data.toString();
      },
      stderr: (data) => {
        error2 += data.toString();
      }
    }
  };
  await exec_2("git", ["diff", "--name-only", output_base.trim()], options);
  return output2.split("\n").map((s) => s.trim()).filter(Boolean).reduce((acc, next) => {
    acc.add(next);
    return acc;
  }, /* @__PURE__ */ new Set());
}
async function get_changeset_status(changed_files) {
  let changeset_path = "";
  changed_files.forEach((f) => {
    if (f.startsWith(".changeset/") && f.endsWith(".md")) {
      changeset_path = f;
    }
  });
  if (changeset_path === "") {
    return {
      changeset_path: `.changeset/${dist.humanId({
        separator: "-",
        capitalize: false
      })}.md`,
      manual_mode: false,
      old_changeset_content: ""
    };
  }
  const old_changeset_content = await promises.readFile(changeset_path, "utf-8");
  let output_data = "";
  const options = {
    listeners: {
      stdout: (data) => {
        output_data += data.toString();
      },
      stderr: (data) => {
        output_data += data.toString();
      }
    }
  };
  await exec_2(
    "git",
    ["--no-pager", "log", "-p", "-1", "--", changeset_path],
    options
  );
  const last_change = output_data.trim();
  if (!/Author: gradio-pr-bot/.test(last_change)) {
    coreExports.warning(
      `Changeset file was edited manually. Skipping changeset generation.`
    );
    return {
      changeset_path,
      manual_mode: true,
      old_changeset_content
    };
  } else {
    return {
      changeset_path,
      manual_mode: false,
      old_changeset_content
    };
  }
}
async function get_changed_packages({
  changed_files,
  pkgs,
  base_sha,
  main_pkg,
  version: version2
}) {
  const changed_pkgs = await getChangedPackagesSinceRef({
    cwd: process.cwd(),
    ref: base_sha,
    changedFilePatterns: dev_only_ignore_globs
  });
  const main_package_json = pkgs.find(
    (p) => p.packageJson.name === main_pkg
  );
  if (!main_package_json) {
    coreExports.setFailed(`Could not find main package ${main_pkg}`);
  }
  const dependency_files = pkgs.map(({ packageJson, relativeDir }) => {
    if (packageJson.python) {
      return [join(relativeDir, "..", "requirements.txt"), packageJson.name];
    } else {
      return [join(relativeDir, "package.json"), packageJson.name];
    }
  });
  const changed_dependency_files = dependency_files.filter(
    ([f]) => changed_files.has(f)
  );
  const updated_pkgs = /* @__PURE__ */ new Set();
  changed_pkgs.forEach((pkg) => {
    var _a;
    updated_pkgs.add(pkg.packageJson.name);
    if ((_a = pkg.packageJson) == null ? void 0 : _a.main_changeset) {
      updated_pkgs.add(main_pkg);
    }
  });
  changed_dependency_files.forEach(([file2, pkg]) => {
    var _a, _b;
    updated_pkgs.add(pkg);
    if ((_b = (_a = pkgs.find((p) => p.packageJson.name === pkg)) == null ? void 0 : _a.packageJson) == null ? void 0 : _b.main_changeset) {
      updated_pkgs.add(main_pkg);
    }
  });
  let new_version = version2;
  if (new_version === "unknown") {
    if (changed_pkgs.length) {
      new_version = "minor";
    } else if (changed_dependency_files.length) {
      new_version = "patch";
    }
  }
  return {
    updated_pkgs,
    version: new_version
  };
}
